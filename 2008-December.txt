From frohlich at mail.berlios.de  Mon Dec  1 04:10:24 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 1 Dec 2008 04:10:24 +0100
Subject: [OpenFDM-svn] r824 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812010310.mB13AOlv017874@sheep.berlios.de>

Author: frohlich
Date: 2008-12-01 04:10:23 +0100 (Mon, 01 Dec 2008)
New Revision: 824

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/TransferFunction.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/TransferFunction.h
Log:
Reactivate TransferFunction.

M    src/OpenFDM/Makefile.am
M    src/OpenFDM/TransferFunction.cpp
M    src/OpenFDM/TransferFunction.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-11-30 20:50:10 UTC (rev 823)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-01 03:10:23 UTC (rev 824)
@@ -267,12 +267,10 @@
   Summer.cpp \
   Table.cpp \
   TimeDerivative.cpp \
+  TransferFunction.cpp \
   UnaryFunction.cpp \
   UnitConversion.cpp
 
-#   TransferFunction.cpp \
-#
-
 OpenFDMMechanicSOURCES = \
   Joint.cpp \
   FixedRootJoint.cpp \

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/TransferFunction.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/TransferFunction.cpp	2008-11-30 20:50:10 UTC (rev 823)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/TransferFunction.cpp	2008-12-01 03:10:23 UTC (rev 824)
@@ -5,6 +5,8 @@
 #include "TransferFunction.h"
 
 #include "Assert.h"
+#include "Task.h"
+#include "ModelContext.h"
 #include "LogStream.h"
 
 namespace OpenFDM {
@@ -16,17 +18,13 @@
 
 DiscreteTransferFunction::DiscreteTransferFunction(const std::string& name) :
   Model(name),
+  mInputPort(newRealInputPort("input", true)),
+  mOutputPort(newRealOutputPort("output")),
   mDen(1),
   mNum(1)
 {
   mNum(0) = 1;
   mDen(0) = 1;
-
-  setDirectFeedThrough(true);
-
-  setNumInputPorts(1);
-  setNumOutputPorts(1);
-  setOutputPort(0, "output", this, &DiscreteTransferFunction::getOutput);
 }
 
 DiscreteTransferFunction::~DiscreteTransferFunction(void)
@@ -58,17 +56,8 @@
 }
 
 bool
-DiscreteTransferFunction::init(void)
+DiscreteTransferFunction::alloc(ModelContext& context) const
 {
-  mInputPort = getInputPort(0)->toRealPortHandle();
-  if (!mInputPort.isConnected()) {
-    Log(Model, Error) << "Initialization of DiscreteTransferFunction model \""
-                      << getName()
-                      << "\" failed: Input port \"" << getInputPortName(0)
-                      << "\" is not connected!" << endl;
-    return false;
-  }
-
   mNumNorm.resize(0);
   mDenNorm.resize(0);
   mD = 0;
@@ -123,65 +112,62 @@
                    << ", denominator: " << trans(mDenNorm)
                    << ", direct factor: " << mD << endl;
 
-  /// Start with zero state ...
-  mState.resize(rows(mDenNorm));
-  mState.clear();
-  setNumDiscreteStates(rows(mDenNorm));
+  return true;
+}
 
-  return Model::init();
+void
+DiscreteTransferFunction::init(const Task&,
+                               DiscreteStateValueVector& discreteState,
+                               ContinousStateValueVector&,
+                               const PortValueList& portValues) const
+{
+  /// Start with zero state ...
+  discreteState[*mMatrixStateInfo].resize(rows(mDenNorm), 1);
+  discreteState[*mMatrixStateInfo].clear();
 }
 
 void
-DiscreteTransferFunction::output(const TaskInfo&)
+DiscreteTransferFunction::output(const Task&,
+                                 const DiscreteStateValueVector& discreteState,
+                                 const ContinousStateValueVector&,
+                                 PortValueList& portValues) const
 {
   // Compute the output ...
-  real_type input = mInputPort.getRealValue();
-  mOutput = dot(mNumNorm, mState) + mD*input;
+  real_type input = portValues[mInputPort];
+  // FIXME, precompute this dot product in the update step
+  real_type output;
+  output = dot(mNumNorm, Vector(discreteState[*mMatrixStateInfo])) + mD*input;
+  portValues[mOutputPort] = output;
 }
 
 void
-DiscreteTransferFunction::update(const TaskInfo& taskInfo)
+DiscreteTransferFunction::update(const DiscreteTask& discreteTask,
+                                 DiscreteStateValueVector& discreteState,
+                                 const ContinousStateValueVector&,
+                                 const PortValueList& portValues) const
 {
-  // FIXME: make sure this is the only dt ...
-  real_type dt = (*taskInfo.getSampleTimeSet().begin()).getSampleTime();
+  real_type dt = discreteTask.getStepsize();
 
-  if (0 < rows(mState)) {
+  Vector state = discreteState[*mMatrixStateInfo];
+  if (0 < rows(state)) {
     // FIXME: use exponential integration scheme here ...
     // looks very benificial, since it is exact here!
-    real_type input = mInputPort.getRealValue();
-    if (mState.size() == 1) {
+    real_type input = portValues[mInputPort];
+    if (state.size() == 1) {
       /// On dimensional exponetial integrator ...
-      real_type z = -dt*dot(mDenNorm, mState);
+      real_type z = -dt*dot(mDenNorm, state);
       // Well, pade approximation is the right thing, but for now ...
       if (fabs(exp(z) - 1) <= sqrt(Limits<real_type>::epsilon()))
-        mState(0) += dt*(input + z);
+        state(0) += dt*(input + z);
       else
-        mState(0) += dt*(exp(z)-1)/z * (input + z);
+        state(0) += dt*(exp(z)-1)/z * (input + z);
     } else {
-      Vector tmpState(mState);
-      mState(0) += dt*(input - dot(mDenNorm, tmpState));
-      for (unsigned i = 1; i < rows(mState); ++i)
-        mState(i) += dt*tmpState(i-1);
+      Vector tmpState(state);
+      state(0) += dt*(input - dot(mDenNorm, tmpState));
+      for (unsigned i = 1; i < rows(state); ++i)
+        state(i) += dt*tmpState(i-1);
     }
   }
 }
 
-void
-DiscreteTransferFunction::setDiscreteState(const StateStream& state)
-{
-  state.readSubState(mState);
 }
-
-void
-DiscreteTransferFunction::getDiscreteState(StateStream& state) const
-{
-  state.writeSubState(mState);
-}
-
-const real_type&
-DiscreteTransferFunction::getOutput(void) const
-{
-  return mOutput;
-}
-
-}

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/TransferFunction.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/TransferFunction.h	2008-11-30 20:50:10 UTC (rev 823)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/TransferFunction.h	2008-12-01 03:10:23 UTC (rev 824)
@@ -8,6 +8,7 @@
 #include "Types.h"
 #include "Vector.h"
 #include "Model.h"
+#include "TemplateDiscreteStateInfo.h"
 
 namespace OpenFDM {
 
@@ -18,6 +19,16 @@
   DiscreteTransferFunction(const std::string& name);
   virtual ~DiscreteTransferFunction(void);
 
+  virtual bool alloc(ModelContext&) const;
+  virtual void init(const Task&,DiscreteStateValueVector& discreteState,
+                    ContinousStateValueVector&, const PortValueList&) const;
+  virtual void output(const Task&,const DiscreteStateValueVector& discreteState,
+                      const ContinousStateValueVector&,
+                      PortValueList& portValues) const;
+  virtual void update(const DiscreteTask&, DiscreteStateValueVector&,
+                      const ContinousStateValueVector&,
+                      const PortValueList&) const;
+
   /// Sets the coefficients for the denominator polynomial starting with the
   /// highest power's coefficient in the first vector element
   void setDenominator(const Vector& den);
@@ -34,34 +45,24 @@
   /// highest power's coefficient in the first vector element
   const Vector& getNumerator(void) const;
 
-  virtual bool init(void);
-  virtual void output(const TaskInfo&);
-  virtual void update(const TaskInfo& taskInfo);
+private:
+//   MatrixInputPort mInputPort;
+//   MatrixOutputPort mOutputPort;
+  RealOutputPort mOutputPort;
+  RealInputPort mInputPort;
+  typedef TemplateDiscreteStateInfo<Matrix> MatrixStateInfo;
+  SharedPtr<MatrixStateInfo> mMatrixStateInfo;
 
-  /// This one can have discrete states
-  virtual void setDiscreteState(const StateStream& state);
-  virtual void getDiscreteState(StateStream& state) const;
-
-  const real_type& getOutput(void) const;
-
-private:
-  /// Holds the current output.
-  real_type mOutput;
   /// Holds the denominator
   Vector mDen;
   /// Holds the numerator
   Vector mNum;
 
   /// Holds the normalized numerator and denominators
-  Vector mDenNorm;
-  Vector mNumNorm;
-  real_type mD;
-  /// Holds the interal discrete state
-  Vector mState;
-
-  /// Holds the handle to the input port
-  RealPortHandle mInputPort;
-  /// FIXME, at the moment only explicit integration ...
+  /// FIXME, avoid the mutable ...
+  mutable Vector mDenNorm;
+  mutable Vector mNumNorm;
+  mutable real_type mD;
 };
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Mon Dec  1 07:29:44 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 1 Dec 2008 07:29:44 +0100
Subject: [OpenFDM-svn] r825 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812010629.mB16Ti8M004882@sheep.berlios.de>

Author: frohlich
Date: 2008-12-01 07:29:40 +0100 (Mon, 01 Dec 2008)
New Revision: 825

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
Log:
Add isChildOf method.

M    Node.h
M    Node.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-12-01 03:10:23 UTC (rev 824)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-12-01 06:29:40 UTC (rev 825)
@@ -5,6 +5,7 @@
 #include "Node.h"
 
 #include "ConstNodeVisitor.h"
+#include "Group.h"
 #include "NodeVisitor.h"
 
 namespace OpenFDM {
@@ -90,6 +91,18 @@
   return mParentList[i];
 }
 
+bool
+Node::isChildOf(const Group* group) const
+{
+  ParentList::const_iterator i;
+  for (i = mParentList.begin(); i != mParentList.end(); ++i) {
+    SharedPtr<const Node> node = i->lock();
+    if (node == group)
+      return true;
+  }
+  return false;
+}
+
 SharedPtr<const PortInfo>
 Node::getPort(const PortId& portId) const
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-12-01 03:10:23 UTC (rev 824)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-12-01 06:29:40 UTC (rev 825)
@@ -41,6 +41,7 @@
   { return mParentList.size(); }
   WeakPtr<const Node> getParent(unsigned i) const;
   WeakPtr<Node> getParent(unsigned i);
+  bool isChildOf(const Group* group) const;
 
   SharedPtr<const PortInfo> getPort(const PortId& portId) const;
   SharedPtr<const PortInfo> getPort(unsigned index) const;



From frohlich at mail.berlios.de  Mon Dec  1 07:30:22 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 1 Dec 2008 07:30:22 +0100
Subject: [OpenFDM-svn] r826 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812010630.mB16UMj6005250@sheep.berlios.de>

Author: frohlich
Date: 2008-12-01 07:30:21 +0100 (Mon, 01 Dec 2008)
New Revision: 826

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
Log:
Add method to query the parent node.

M    PortInfo.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-12-01 06:29:40 UTC (rev 825)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-12-01 06:30:21 UTC (rev 826)
@@ -45,6 +45,9 @@
   virtual void accept(NodeVisitor& visitor) const;
   virtual void accept(ConstNodeVisitor& visitor) const;
 
+  SharedPtr<const Node> getNode() const
+  { return mNode.lock(); }
+
   bool getOptional() const { return mOptional; }
   void setOptional(bool optional) { mOptional = optional; }
 



From frohlich at mail.berlios.de  Mon Dec  1 07:45:16 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 1 Dec 2008 07:45:16 +0100
Subject: [OpenFDM-svn] r827 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812010645.mB16jGAM019243@sheep.berlios.de>

Author: frohlich
Date: 2008-12-01 07:45:14 +0100 (Mon, 01 Dec 2008)
New Revision: 827

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
Log:
Make Connects leaner.

M    src/OpenFDM/Group.h
M    src/OpenFDM/Group.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-12-01 06:30:21 UTC (rev 826)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-12-01 06:45:14 UTC (rev 827)
@@ -64,10 +64,10 @@
 }
 
 unsigned
-Group::getChildNumber(const NodeId& nodeId) const
+Group::getChildNumber(const Node* node) const
 {
   ChildList::const_iterator i;
-  i = std::find(_childList.begin(), _childList.end(), nodeId);
+  i = std::find(_childList.begin(), _childList.end(), node);
   if (i == _childList.end())
     return ~0u;
   return std::distance(_childList.begin(), i);
@@ -89,16 +89,4 @@
   return _childList[i];
 }
 
-SharedPtr<Node>
-Group::getChild(const NodeId& nodeId)
-{
-  return getChild(getChildNumber(nodeId));
-}
-
-SharedPtr<const Node>
-Group::getChild(const NodeId& nodeId) const
-{
-  return getChild(getChildNumber(nodeId));
-}
-
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-01 06:30:21 UTC (rev 826)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-01 06:45:14 UTC (rev 827)
@@ -33,43 +33,47 @@
   unsigned getNumChildren() const;
   SharedPtr<Node> getChild(unsigned i);
   SharedPtr<const Node> getChild(unsigned i) const;
+  unsigned getChildNumber(const Node* node) const;
 
   bool connect(const NodeId& nodeId0, const std::string& portName0,
                const NodeId& nodeId1, const std::string& portName1)
-  { return connect(nodeId0, PortId(nodeId0->getPort(portName0)),
-                   nodeId1, PortId(nodeId1->getPort(portName1))); }
+    OpenFDM_DEPRECATED
+  {
+    return connect(nodeId0->getPort(portName0), nodeId1->getPort(portName1));
+  }
   bool connect(const NodeId& nodeId0, unsigned portNum0,
                const NodeId& nodeId1, unsigned portNum1)
-  { return connect(nodeId0, PortId(nodeId0->getPort(portNum0)),
-                   nodeId1, PortId(nodeId1->getPort(portNum1))); }
+    OpenFDM_DEPRECATED
+  {
+    return connect(nodeId0->getPort(portNum0), nodeId1->getPort(portNum1));
+  }
 
-  bool connect(const NodeId& nodeId0, const PortId& portId0,
-               const NodeId& nodeId1, const PortId& portId1)
+  bool connect(const PortInfo* port0, const PortInfo* port1)
   {
     // Make sure the models belong to this group
-    SharedPtr<Node> child0 = getChild(nodeId0);
+    if (!port0)
+      return false;
+    SharedPtr<const Node> child0 = port0->getNode();
     if (!child0)
       return false;
-    SharedPtr<Node> child1 = getChild(nodeId1);
-    if (!child1)
+    if (!child0->isChildOf(this))
       return false;
 
-    SharedPtr<const PortInfo> port0 = child0->getPort(portId0);
-    if (!port0)
-      return false;
-    SharedPtr<const PortInfo> port1 = child1->getPort(portId1);
     if (!port1)
       return false;
+    SharedPtr<const Node> child1 = port1->getNode();
+    if (!child1)
+      return false;
+    if (!child1->isChildOf(this))
+      return false;
 
     // Just a crude first time check if this will work in principle.
     if (!port0->canConnect(*port1))
       return false;
 
     SharedPtr<Connect> connect = new Connect;
-    connect->_portId0 = portId0;
-    connect->_nodeId0 = nodeId0;
-    connect->_portId1 = portId1;
-    connect->_nodeId1 = nodeId1;
+    connect->mPortInfo0 = port0;
+    connect->mPortInfo1 = port1;
     _connectList.push_back(connect);
 
     return true;
@@ -82,13 +86,13 @@
   {
     if (getNumConnects() <= i)
       return ~0u;
-    return getChildNumber(_connectList[i]->_nodeId0);
+    return getChildNumber(_connectList[i]->mPortInfo0.lock()->getNode());
   }
   unsigned getConnectNodeIndex1(unsigned i) const
   {
     if (getNumConnects() <= i)
       return ~0u;
-    return getChildNumber(_connectList[i]->_nodeId1);
+    return getChildNumber(_connectList[i]->mPortInfo1.lock()->getNode());
   }
 
   SharedPtr<const PortInfo>
@@ -96,30 +100,22 @@
   {
     if (getNumConnects() <= i)
       return 0;
-    SharedPtr<const Node> node = getChild(_connectList[i]->_nodeId0);
-    return node->getPort(_connectList[i]->_portId0);
+    return _connectList[i]->mPortInfo0.lock();
   }
   SharedPtr<const PortInfo>
   getConnectPortInfo1(unsigned i) const
   {
     if (getNumConnects() <= i)
       return 0;
-    SharedPtr<const Node> node = getChild(_connectList[i]->_nodeId1);
-    return node->getPort(_connectList[i]->_portId1);
+    return _connectList[i]->mPortInfo1.lock();
   }
 
 private:
-  unsigned getChildNumber(const NodeId& nodeId) const;
-  SharedPtr<Node> getChild(const NodeId& nodeId);
-  SharedPtr<const Node> getChild(const NodeId& nodeId) const;
 
   struct Connect : public WeakReferenced {
-    NodeId _nodeId0;
-    PortId _portId0;
+    WeakPtr<const PortInfo> mPortInfo0;
+    WeakPtr<const PortInfo> mPortInfo1;
 
-    NodeId _nodeId1;
-    PortId _portId1;
-
     // Where the line in the gui will be ...??
     // std::list<Vector2> _positions;
   };



From frohlich at mail.berlios.de  Mon Dec  1 07:52:58 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 1 Dec 2008 07:52:58 +0100
Subject: [OpenFDM-svn] r828 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812010652.mB16qwll031524@sheep.berlios.de>

Author: frohlich
Date: 2008-12-01 07:52:56 +0100 (Mon, 01 Dec 2008)
New Revision: 828

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
Log:
Make the Connect a Referenced.

M    src/OpenFDM/Group.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-01 06:45:14 UTC (rev 827)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-01 06:52:56 UTC (rev 828)
@@ -112,7 +112,7 @@
 
 private:
 
-  struct Connect : public WeakReferenced {
+  struct Connect : public Referenced {
     WeakPtr<const PortInfo> mPortInfo0;
     WeakPtr<const PortInfo> mPortInfo1;
 



From frohlich at mail.berlios.de  Mon Dec  1 19:07:15 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 1 Dec 2008 19:07:15 +0100
Subject: [OpenFDM-svn] r829 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200812011807.mB1I7FR1008525@sheep.berlios.de>

Author: frohlich
Date: 2008-12-01 19:07:13 +0100 (Mon, 01 Dec 2008)
New Revision: 829

Modified:
   branches/OpenFDM-StateSeparation/src/test/limit.cpp
Log:
This check is a false positive.

M    src/test/limit.cpp


Modified: branches/OpenFDM-StateSeparation/src/test/limit.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/limit.cpp	2008-12-01 06:52:56 UTC (rev 828)
+++ branches/OpenFDM-StateSeparation/src/test/limit.cpp	2008-12-01 18:07:13 UTC (rev 829)
@@ -105,12 +105,6 @@
   std::cout << "Signaling NaN = " << Limits<real_type>::signaling_NaN() << std::endl;
   std::cout << "Denormlized Min = " << Limits<real_type>::denorm_min() << std::endl;
 
-  if (eps != Limits<real_type>::epsilon())
-    return EXIT_FAILURE;
-  if (min != Limits<real_type>::min())
-    return EXIT_FAILURE;
-  if (max != Limits<real_type>::max())
-    return EXIT_FAILURE;
 
   return EXIT_SUCCESS;
 }



From frohlich at mail.berlios.de  Mon Dec  1 19:29:40 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 1 Dec 2008 19:29:40 +0100
Subject: [OpenFDM-svn] r830 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200812011829.mB1ITeU9002504@sheep.berlios.de>

Author: frohlich
Date: 2008-12-01 19:29:38 +0100 (Mon, 01 Dec 2008)
New Revision: 830

Modified:
   branches/OpenFDM-StateSeparation/src/test/constintegral.cpp
   branches/OpenFDM-StateSeparation/src/test/foucault.cpp
   branches/OpenFDM-StateSeparation/src/test/harmonic.cpp
   branches/OpenFDM-StateSeparation/src/test/mechanic.cpp
   branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Change port connections.

M    test/harmonic.cpp
M    test/structure.cpp
M    test/foucault.cpp
M    test/simulationtime.cpp
M    test/mechanic.cpp
M    test/constintegral.cpp


Modified: branches/OpenFDM-StateSeparation/src/test/constintegral.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/constintegral.cpp	2008-12-01 18:07:13 UTC (rev 829)
+++ branches/OpenFDM-StateSeparation/src/test/constintegral.cpp	2008-12-01 18:29:38 UTC (rev 830)
@@ -23,23 +23,23 @@
   SharedPtr<Group> group = new Group("Group");
 
   ConstModel* constModel = new ConstModel("Constant", 1);
-  Group::NodeId constModelId = group->addChild(constModel);
+  group->addChild(constModel);
 
   Integrator* integrator = new Integrator("Integrator");
   integrator->setInitialValue(0);
-  Group::NodeId integratorId = group->addChild(integrator);
-  group->connect(constModelId, "output", integratorId, "input");
+  group->addChild(integrator);
+  group->connect(constModel->getPort("output"), integrator->getPort("input"));
 
   SimulationTime* simulationTime = new SimulationTime("Simulation Time");
-  Group::NodeId simulationTimeId = group->addChild(simulationTime);
+  group->addChild(simulationTime);
 
   Summer* summer = new Summer("Error to exact Solution");
-  Group::NodeId summerId = group->addChild(summer);
+  group->addChild(summer);
   summer->setNumSummands(2);
   summer->setInputSign(0, Summer::Plus);
-  group->connect(simulationTimeId, "output", summerId, "input0");
+  group->connect(simulationTime->getPort("output"), summer->getPort("input0"));
   summer->setInputSign(1, Summer::Minus);
-  group->connect(integratorId, "output", summerId, "input1");
+  group->connect(integrator->getPort("output"), summer->getPort("input1"));
 
 
   Output* output = new Output("Error Output");
@@ -47,8 +47,8 @@
   errors = new ErrorCollectorCallback;
   output->setCallback(errors);
 //   output->addSampleTime(rate);
-  Group::NodeId outputId = group->addChild(output);
-  group->connect(summerId, "output", outputId, "input");
+  group->addChild(output);
+  group->connect(summer->getPort("output"), output->getPort("input"));
 
   SharedPtr<System> system = new System("Constant Integration");
   system->setNode(group);

Modified: branches/OpenFDM-StateSeparation/src/test/foucault.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2008-12-01 18:07:13 UTC (rev 829)
+++ branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2008-12-01 18:29:38 UTC (rev 830)
@@ -39,26 +39,26 @@
   FixedRootJoint* fixedRootJoint = new FixedRootJoint("Root");
   fixedRootJoint->setPosition(planet->toCart(geodetic));
   fixedRootJoint->setOrientation(planet->getGeodHLOrientation(geodetic));
-  Group::NodeId fixedRootJointId = group->addChild(fixedRootJoint);
+  group->addChild(fixedRootJoint);
   RotationalJoint* rotationalJoint1 = new RotationalJoint("Rotational Joint 1");
-  Group::NodeId rotationalJoint1Id = group->addChild(rotationalJoint1);
+  group->addChild(rotationalJoint1);
   RigidBody* rigidBody1 = new RigidBody("Rigid Body 1");
   rigidBody1->addLink("sensorLink");
-  Group::NodeId rigidBody1Id = group->addChild(rigidBody1);
+  group->addChild(rigidBody1);
 
   Mass* mass = new Mass("Mass", 28, InertiaMatrix(1, 0, 0, 1, 0, 1));
   mass->setPosition(Vector3(3, 0, 67));
-  Group::NodeId massId = group->addChild(mass);
+  group->addChild(mass);
 
   Sensor* sensor = new Sensor("Sensor");
   sensor->setPosition(mass->getPosition());
   sensor->setEnableAll(true);
-  Group::NodeId sensorId = group->addChild(sensor);
+  group->addChild(sensor);
 
-  group->connect(fixedRootJointId, 0, rotationalJoint1Id, 0);
-  group->connect(rotationalJoint1Id, 1, rigidBody1Id, 0);
-  group->connect(rigidBody1Id, 1, massId, 0);
-  group->connect(rigidBody1Id, "sensorLink", sensorId, "link");
+  group->connect(fixedRootJoint->getPort(0), rotationalJoint1->getPort(0));
+  group->connect(rotationalJoint1->getPort(1), rigidBody1->getPort(0));
+  group->connect(rigidBody1->getPort(1), mass->getPort(0));
+  group->connect(rigidBody1->getPort("sensorLink"), sensor->getPort("link"));
 
   SharedPtr<System> system = new System("System", group);
 

Modified: branches/OpenFDM-StateSeparation/src/test/harmonic.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/harmonic.cpp	2008-12-01 18:07:13 UTC (rev 829)
+++ branches/OpenFDM-StateSeparation/src/test/harmonic.cpp	2008-12-01 18:29:38 UTC (rev 830)
@@ -25,73 +25,74 @@
   SharedPtr<Group> group = new Group("Group");
 
   // Build up a harmonic oszilator
-  Group::NodeId gainId = group->addChild(new Gain("gain", -omega*omega));
+  Gain* gain = new Gain("gain", -omega*omega);
+  group->addChild(gain);
   Integrator* integrator0 = new Integrator("Velocity Integrator");
   integrator0->setInitialValue(omega);
-  Group::NodeId integrator0Id = group->addChild(integrator0);
+  group->addChild(integrator0);
   Integrator* integrator1 = new Integrator("Position Integrator");
   integrator1->setInitialValue(0);
-  Group::NodeId integrator1Id = group->addChild(integrator1);
+  group->addChild(integrator1);
 
-  group->connect(gainId, "output", integrator0Id, "input");
-  group->connect(integrator0Id, "output", integrator1Id, "input");
-  group->connect(integrator1Id, "output", gainId, "input");
+  group->connect(gain->getPort("output"), integrator0->getPort("input"));
+  group->connect(integrator0->getPort("output"), integrator1->getPort("input"));
+  group->connect(integrator1->getPort("output"), gain->getPort("input"));
 
   // Build up the exact solution
   SimulationTime* simulationTime = new SimulationTime("Simulation Time");
-  Group::NodeId simulationTimeId = group->addChild(simulationTime);
+  group->addChild(simulationTime);
 
   Gain* cosInputGain = new Gain("Cosinus Input Gain", omega);
-  Group::NodeId cosInputGainId = group->addChild(cosInputGain);
-  group->connect(simulationTimeId, "output", cosInputGainId, "input");
+  group->addChild(cosInputGain);
+  group->connect(simulationTime->getPort("output"), cosInputGain->getPort("input"));
 
   UnaryFunction* cosFunction;
   cosFunction = new UnaryFunction("Exact Vel Solution", UnaryFunction::Cos);
-  Group::NodeId cosFunctionId = group->addChild(cosFunction);
-  group->connect(cosInputGainId, "output", cosFunctionId, "input");
+  group->addChild(cosFunction);
+  group->connect(cosInputGain->getPort("output"), cosFunction->getPort("input"));
 
   Gain* velOutputGain = new Gain("Velocity Output Gain", omega);
-  Group::NodeId velOutputGainId = group->addChild(velOutputGain);
-  group->connect(cosFunctionId, "output", velOutputGainId, "input");
+  group->addChild(velOutputGain);
+  group->connect(cosFunction->getPort("output"), velOutputGain->getPort("input"));
 
   UnaryFunction* sinFunction;
   sinFunction = new UnaryFunction("Exact Pos Solution", UnaryFunction::Sin);
-  Group::NodeId sinFunctionId = group->addChild(sinFunction);
-  group->connect(cosInputGainId, "output", sinFunctionId, "input");
+  group->addChild(sinFunction);
+  group->connect(cosInputGain->getPort("output"), sinFunction->getPort("input"));
 
 
   // Now build the differences
 
   Summer* summer0 = new Summer("Velocity Error to exact Solution");
-  Group::NodeId summer0Id = group->addChild(summer0);
+  group->addChild(summer0);
   summer0->setNumSummands(2);
   summer0->setInputSign(0, Summer::Plus);
-  group->connect(velOutputGainId, "output", summer0Id, "input0");
+  group->connect(velOutputGain->getPort("output"), summer0->getPort("input0"));
   summer0->setInputSign(1, Summer::Minus);
-  group->connect(integrator0Id, "output", summer0Id, "input1");
+  group->connect(integrator0->getPort("output"), summer0->getPort("input1"));
 
   Output* output0 = new Output("Velocity Error Output");
   SharedPtr<ErrorCollectorCallback> velErrorCallback;
   velErrorCallback = new ErrorCollectorCallback;
   output0->setCallback(velErrorCallback);
-  Group::NodeId output0Id = group->addChild(output0);
-  group->connect(summer0Id, "output", output0Id, "input");
+  group->addChild(output0);
+  group->connect(summer0->getPort("output"), output0->getPort("input"));
 
 
   Summer* summer1 = new Summer("Position Error to exact Solution");
-  Group::NodeId summer1Id = group->addChild(summer1);
+  group->addChild(summer1);
   summer1->setNumSummands(2);
   summer1->setInputSign(0, Summer::Plus);
-  group->connect(sinFunctionId, "output", summer1Id, "input0");
+  group->connect(sinFunction->getPort("output"), summer1->getPort("input0"));
   summer1->setInputSign(1, Summer::Minus);
-  group->connect(integrator1Id, "output", summer1Id, "input1");
+  group->connect(integrator1->getPort("output"), summer1->getPort("input1"));
 
   Output* output1 = new Output("Position Error Output");
   SharedPtr<ErrorCollectorCallback> posErrorCallback;
   posErrorCallback = new ErrorCollectorCallback;
   output1->setCallback(posErrorCallback);
-  Group::NodeId output1Id = group->addChild(output1);
-  group->connect(summer1Id, "output", output1Id, "input");
+  group->addChild(output1);
+  group->connect(summer1->getPort("output"), output1->getPort("input"));
 
   SharedPtr<System> system = new System("Harmonic Oszilator");
   system->setNode(group);

Modified: branches/OpenFDM-StateSeparation/src/test/mechanic.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/mechanic.cpp	2008-12-01 18:07:13 UTC (rev 829)
+++ branches/OpenFDM-StateSeparation/src/test/mechanic.cpp	2008-12-01 18:29:38 UTC (rev 830)
@@ -23,21 +23,21 @@
   SharedPtr<Group> group = new Group("G");
 
   MobileRootJoint* mobileRootJoint = new MobileRootJoint("Root Joint");
-  Group::NodeId rootJointId = group->addChild(mobileRootJoint);
+  group->addChild(mobileRootJoint);
   RigidBody* rigidBody = new RigidBody("Rigid Body");
   rigidBody->addLink("sensorLink");
-  Group::NodeId rigidBodyId = group->addChild(rigidBody);
+  group->addChild(rigidBody);
   Mass* mass = new Mass("Mass", 1, InertiaMatrix(1, 0, 0, 1, 0, 1));
-  Group::NodeId massId = group->addChild(mass);
+  group->addChild(mass);
 
   Sensor* sensor = new Sensor("Sensor");
   sensor->setPosition(mass->getPosition());
   sensor->setEnableAll(true);
-  Group::NodeId sensorId = group->addChild(sensor);
+  group->addChild(sensor);
 
-  group->connect(rootJointId, "link", rigidBodyId, "link0");
-  group->connect(rigidBodyId, "link1", massId, "link");
-  group->connect(rigidBodyId, "sensorLink", sensorId, "link");
+  group->connect(mobileRootJoint->getPort("link"), rigidBody->getPort("link0"));
+  group->connect(rigidBody->getPort("link1"), mass->getPort("link"));
+  group->connect(rigidBody->getPort("sensorLink"), sensor->getPort("link"));
 
   return group.release();
 }
@@ -47,46 +47,46 @@
   SharedPtr<Group> group = new Group("G");
 
   MobileRootJoint* mobileRootJoint = new MobileRootJoint("Root Joint");
-  Group::NodeId rootJointId = group->addChild(mobileRootJoint);
+  group->addChild(mobileRootJoint);
 
   RigidBody *rigidBody = new RigidBody("Rigid Body");
   rigidBody->addLink("link2");
   rigidBody->addLink("sensorLink");
-  Group::NodeId rigidBodyId = group->addChild(rigidBody);
+  group->addChild(rigidBody);
   InertiaMatrix inertia(1, 0, 0, 1, 0, 1);
   Mass* mass = new Mass("Mass", 1, inertia);
-  Group::NodeId massId = group->addChild(mass);
+  group->addChild(mass);
   RevoluteJoint* revoluteJoint = new RevoluteJoint("Revolute Joint");
   revoluteJoint->setEnableExternalForce(true);
-  Group::NodeId revoluteId = group->addChild(revoluteJoint);
+  group->addChild(revoluteJoint);
   RigidBody *rigidBody2 = new RigidBody("Rigid Body 2");
   rigidBody2->addLink("sensorLink");
-  Group::NodeId rigidBody2Id = group->addChild(rigidBody2);
+  group->addChild(rigidBody2);
   Mass* mass2 = new Mass("Mass 2", 1, inertia);
-  Group::NodeId mass2Id = group->addChild(mass2);
+  group->addChild(mass2);
 
   Sensor* sensor = new Sensor("Sensor");
   sensor->setPosition(mass->getPosition());
   sensor->setEnableAll(true);
-  Group::NodeId sensorId = group->addChild(sensor);
+  group->addChild(sensor);
 
   Sensor* sensor2 = new Sensor("Sensor 2");
   sensor2->setPosition(mass2->getPosition());
   sensor2->setEnableAll(true);
-  Group::NodeId sensorId2 = group->addChild(sensor2);
+  group->addChild(sensor2);
 
-  group->connect(rootJointId, "link", rigidBodyId, "link0");
-  group->connect(rigidBodyId, "link1", massId, "link");
-  group->connect(rigidBodyId, "link2", revoluteId, "link0");
-  group->connect(revoluteId, "link1", rigidBody2Id, "link0");
-  group->connect(rigidBody2Id, "link1", mass2Id, "link");
-  group->connect(rigidBodyId, "sensorLink", sensorId, "link");
-  group->connect(rigidBody2Id, "sensorLink", sensorId2, "link");
+  group->connect(mobileRootJoint->getPort("link"), rigidBody->getPort("link0"));
+  group->connect(rigidBody->getPort("link1"), mass->getPort("link"));
+  group->connect(rigidBody->getPort("link2"), revoluteJoint->getPort("link0"));
+  group->connect(revoluteJoint->getPort("link1"), rigidBody2->getPort("link0"));
+  group->connect(rigidBody2->getPort("link1"), mass2->getPort("link"));
+  group->connect(rigidBody->getPort("sensorLink"), sensor->getPort("link"));
+  group->connect(rigidBody2->getPort("sensorLink"), sensor2->getPort("link"));
 
   ConstModel* jointForce = new ConstModel("Joint Force", 1);
-  Group::NodeId jointForceId = group->addChild(jointForce);
+  group->addChild(jointForce);
 
-  group->connect(jointForceId, "output", revoluteId, "force");
+  group->connect(jointForce->getPort("output"), revoluteJoint->getPort("force"));
 
   return group.release();
 }

Modified: branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp	2008-12-01 18:07:13 UTC (rev 829)
+++ branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp	2008-12-01 18:29:38 UTC (rev 830)
@@ -36,13 +36,13 @@
   system->setNode(group);
   
   SimulationTime* simulationTime = new SimulationTime("Simulation Time");
-  Group::NodeId simTimeId = group->addChild(simulationTime);
+  group->addChild(simulationTime);
 
   Output* output = new Output("Simulation Time Output");
-  Group::NodeId outputId = group->addChild(output);
+  group->addChild(output);
   SharedPtr<CollectOutputCallback> simTimeCallback = new CollectOutputCallback;
   output->setCallback(simTimeCallback);
-  if (!group->connect(simTimeId, "output", outputId, "input")) {
+  if (!group->connect(simTime->getPort("output"), output->getPort("input"))) {
     std::cout << "Could not connect ports" << std::endl;
     return EXIT_FAILURE;
   }

Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-12-01 18:07:13 UTC (rev 829)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-12-01 18:29:38 UTC (rev 830)
@@ -18,8 +18,9 @@
 bool testSelfReferencingDirectInput()
 {
   SharedPtr<Group> group = new Group("Group");
-  Group::NodeId gain = group->addChild(new Gain("Gain"));
-  group->connect(gain, "output", gain, "input");
+  Gain* gain = new Gain("Gain");
+  group->addChild(gain);
+  group->connect(gain->getPort("output"), gain->getPort("input"));
 
   SharedPtr<System> system = new System("Self referencing Gain");
   system->setNode(group);
@@ -36,10 +37,12 @@
 bool testCyclicDependency()
 {
   SharedPtr<Group> group = new Group("Group");
-  Group::NodeId gain1 = group->addChild(new Gain("Gain 1"));
-  Group::NodeId gain2 = group->addChild(new Gain("Gain 2"));
-  group->connect(gain1, "output", gain2, "input");
-  group->connect(gain2, "output", gain1, "input");
+  Gain* gain1 = new Gain("Gain 1");
+  group->addChild(gain1);
+  Gain* gain2 = new Gain("Gain 1");
+  group->addChild(gain2);
+  group->connect(gain1->getPort("output"), gain2->getPort("input"));
+  group->connect(gain2->getPort("output"), gain1->getPort("input"));
 
   SharedPtr<System> system = new System("Cyclic loop");
   system->setNode(group);
@@ -56,13 +59,15 @@
 bool testCyclicDependencyWithGroup1()
 {
   SharedPtr<Group> group1 = new Group("Group 1");
-  Group::NodeId groupInput1 = group1->addChild(new GroupInput("Input 1"));
-  Group::NodeId groupOutput1 = group1->addChild(new GroupOutput("Output 1"));
-  group1->connect(groupInput1, "output", groupOutput1, "input");
+  GroupInput* groupInput = new GroupInput("Input 1");
+  group1->addChild(groupInput);
+  GroupOutput* groupOutput = new GroupOutput("Output 1");
+  group1->addChild(groupOutput);
+  group1->connect(groupInput->getPort("output"), groupOutput->getPort("input"));
 
   SharedPtr<Group> group = new Group("Group");
-  Group::NodeId groupId1 = group->addChild(group1);
-  group->connect(groupId1, "output", groupId1, "input");
+  group->addChild(group1);
+  group->connect(group1->getPort("output"), group1->getPort("input"));
 
   SharedPtr<System> system = new System("Cyclic loop through groups");
   system->setNode(group);
@@ -78,24 +83,30 @@
 bool testCyclicDependencyWithGroup2()
 {
   SharedPtr<Group> group1 = new Group("Group 1");
-  Group::NodeId groupInput1 = group1->addChild(new GroupInput("Input 1"));
-  Group::NodeId gain1 = group1->addChild(new Gain("Gain 1"));
-  Group::NodeId groupOutput1 = group1->addChild(new GroupOutput("Output 1"));
-  group1->connect(groupInput1, "output", gain1, "input");
-  group1->connect(gain1, "output", groupOutput1, "input");
+  GroupInput* groupInput1 = new GroupInput("Input 1");
+  group1->addChild(groupInput1);
+  Gain* gain1 = new Gain("Gain 1");
+  group1->addChild(gain1);
+  GroupOutput* groupOutput1 = new GroupOutput("Output 1");
+  group1->addChild(groupOutput1);
+  group1->connect(groupInput1->getPort("output"), gain1->getPort("input"));
+  group1->connect(gain1->getPort("output"), groupOutput1->getPort("input"));
 
   SharedPtr<Group> group2 = new Group("Group 2");
-  Group::NodeId groupInput2 = group2->addChild(new GroupInput("Input 2"));
-  Group::NodeId gain2 = group2->addChild(new Gain("Gain 2"));
-  Group::NodeId groupOutput2 = group2->addChild(new GroupOutput("Output 2"));
-  group2->connect(groupInput2, "output", gain2, "input");
-  group2->connect(gain2, "output", groupOutput2, "input");
+  GroupInput* groupInput2 = new GroupInput("Input 2");
+  group2->addChild(groupInput2);
+  Gain* gain2 = new Gain("Gain 2");
+  group2->addChild(gain2);
+  GroupOutput* groupOutput2 = new GroupOutput("Output 2");
+  group2->addChild(groupOutput2);
+  group2->connect(groupInput2->getPort("output"), gain2->getPort("input"));
+  group2->connect(gain2->getPort("output"), groupOutput2->getPort("input"));
 
   SharedPtr<Group> group = new Group("Group");
-  Group::NodeId groupId1 = group->addChild(group1);
-  Group::NodeId groupId2 = group->addChild(group2);
-  group->connect(groupId1, "output", groupId2, "input");
-  group->connect(groupId2, "output", groupId1, "input");
+  group->addChild(group1);
+  group->addChild(group2);
+  group->connect(group1->getPort("output"), group2->getPort("input"));
+  group->connect(group2->getPort("output"), group1->getPort("input"));
 
   SharedPtr<System> system = new System("Cyclic loop through groups");
   system->setNode(group);
@@ -108,84 +119,6 @@
   return true;
 }
 
-Node* buildContinousExample()
-{
-  SharedPtr<Group> group = new Group("G0");
-  Group::NodeId gain = group->addChild(new Gain("gain", -1));
-  Integrator* i1 = new Integrator("I1");
-  i1->setInitialValue(1);
-  Group::NodeId integrator1 = group->addChild(i1);
-  Group::NodeId integrator2 = group->addChild(new Integrator("I2"));
-  Group::NodeId output = group->addChild(new Output("O"));
-  Group::NodeId delay = group->addChild(new Delay("D"));
-  Group::NodeId outputDelay = group->addChild(new Output("OD"));
-
-  Summer* summer = new Summer("S");
-  Group::NodeId summerId = group->addChild(summer);
-
-  group->connect(integrator1, "output", integrator2, "input");
-  group->connect(integrator2, "output", gain, "input");
-  group->connect(gain, "output", integrator1, "input");
-  group->connect(gain, "output", summerId, "input0");
-  group->connect(gain, "output", summerId, "input1");
-  group->connect(integrator2, "output", output, "input");
-  group->connect(summerId, "output", delay, "input");
-  group->connect(delay, "output", outputDelay, "input");
-
-  Group::NodeId groupOutputNode = group->addChild(new GroupOutput("GIO"));
-  group->connect(integrator2, "output", groupOutputNode, "input");
-
-  SharedPtr<Group> topGroup = new Group("G1");
-  Group::NodeId child = topGroup->addChild(group);
-
-  Group::NodeId output0 = topGroup->addChild(new Output("Output"));
-  topGroup->connect(child, 0, output0, 0);
-
-  return topGroup.release();
-}
-
-Node* buildDiscreteExample()
-{
-  SharedPtr<Group> group = new Group("G0");
-  Group::NodeId gain = group->addChild(new Gain("gain", -1));
-  DiscreteIntegrator* di1 = new DiscreteIntegrator("I1");
-  Matrix v(1, 1);
-  v(0, 0) = 10;
-  di1->setInitialValue(v);
-  Group::NodeId integrator1 = group->addChild(di1);
-  Group::NodeId integrator2 = group->addChild(new DiscreteIntegrator("I2"));
-  Group::NodeId output = group->addChild(new Output("O"));
-  Group::NodeId delay = group->addChild(new Delay("D"));
-  Group::NodeId outputDelay = group->addChild(new Output("OD"));
-
-  group->connect(integrator1, "output", integrator2, "input");
-  group->connect(integrator2, "output", gain, "input");
-  group->connect(gain, "output", integrator1, "input");
-  group->connect(integrator2, "output", output, "input");
-  group->connect(gain, "output", delay, "input");
-  group->connect(delay, "output", outputDelay, "input");
-
-  return group.release();
-}
-
-Node* buildLibraryNodeExample()
-{
-  SharedPtr<Node> node = buildDiscreteExample();
-  SharedPtr<LibraryModel> libraryModel = new LibraryModel("Library Model");
-  libraryModel->setNode(node);
-  
-  SharedPtr<LibraryNode> libraryNode1 = new LibraryNode("Library Node 1");
-  libraryNode1->setLibraryModel(libraryModel);
-
-  SharedPtr<LibraryNode> libraryNode2 = new LibraryNode("Library Node 2");
-  libraryNode2->setLibraryModel(libraryModel);
-
-  SharedPtr<Group> group = new Group("Group");
-  group->addChild(libraryNode1);
-  group->addChild(libraryNode2);
-  return group.release();
-}
-
 int main()
 {
   // Check a self referencing gain model, to see if cyclic loops
@@ -204,18 +137,6 @@
   if (!testCyclicDependencyWithGroup2())
     return EXIT_FAILURE;
 
-
-  SharedPtr<System> system = new System("System", buildContinousExample());
-//   SharedPtr<System> system = new System("System", buildDiscreteExample());
-//   SharedPtr<System> system = new System("System", buildLibraryNodeExample());
-
-  system->attach(SystemOutput::newDefaultSystemOutput("system.h5"));
-
-  if (!system->init())
-    return 1;
-
-  system->simulate(10);
-
   std::cout << "PASSED" << std::endl;
 
   return 0;



From frohlich at mail.berlios.de  Mon Dec  1 19:37:07 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 1 Dec 2008 19:37:07 +0100
Subject: [OpenFDM-svn] r831 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812011837.mB1Ib7Kd012421@sheep.berlios.de>

Author: frohlich
Date: 2008-12-01 19:37:06 +0100 (Mon, 01 Dec 2008)
New Revision: 831

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
Log:
Remove old comment.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-12-01 18:29:38 UTC (rev 830)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-12-01 18:37:06 UTC (rev 831)
@@ -20,8 +20,6 @@
 // Naming:
 // PortInfo - The meta data used to see what kind of port we have
 // PortValue - The ports value during simulation
-// PortHandle?? Hmmm??
-// Port : NodeId, PortId ???
 
 class ConstNodeVisitor;
 class Node;



From frohlich at mail.berlios.de  Mon Dec  1 19:37:20 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 1 Dec 2008 19:37:20 +0100
Subject: [OpenFDM-svn] r832 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200812011837.mB1IbKqh012822@sheep.berlios.de>

Author: frohlich
Date: 2008-12-01 19:37:19 +0100 (Mon, 01 Dec 2008)
New Revision: 832

Modified:
   branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp
Log:
Fix compile.

M    simulationtime.cpp


Modified: branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp	2008-12-01 18:37:06 UTC (rev 831)
+++ branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp	2008-12-01 18:37:19 UTC (rev 832)
@@ -42,7 +42,7 @@
   group->addChild(output);
   SharedPtr<CollectOutputCallback> simTimeCallback = new CollectOutputCallback;
   output->setCallback(simTimeCallback);
-  if (!group->connect(simTime->getPort("output"), output->getPort("input"))) {
+  if (!group->connect(simulationTime->getPort("output"), output->getPort("input"))) {
     std::cout << "Could not connect ports" << std::endl;
     return EXIT_FAILURE;
   }



From frohlich at mail.berlios.de  Mon Dec  1 19:38:03 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 1 Dec 2008 19:38:03 +0100
Subject: [OpenFDM-svn] r833 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812011838.mB1Ic3e0013698@sheep.berlios.de>

Author: frohlich
Date: 2008-12-01 19:38:03 +0100 (Mon, 01 Dec 2008)
New Revision: 833

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
Log:
Remove remaining leftovers of NodeId

M    src/OpenFDM/Group.h
M    src/OpenFDM/Group.cpp
M    src/OpenFDM/Node.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-12-01 18:37:19 UTC (rev 832)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-12-01 18:38:03 UTC (rev 833)
@@ -46,17 +46,28 @@
     (*i)->accept(visitor);
 }
 
-Group::NodeId
+unsigned
 Group::addChild(const SharedPtr<Node>& node)
 {
   if (!node)
-    return NodeId();
+    return ~0u;
   if (!node->addParent(this))
-    return NodeId();
+    return ~0u;
   _childList.push_back(node);
-  return node.get();
+  return _childList.size() - 1;
 }
 
+bool
+Group::removeChild(const Node* node)
+{
+  ChildList::iterator i;
+  i = std::find(_childList.begin(), _childList.end(), node);
+  if (i == _childList.end())
+    return false;
+  _childList.erase(i);
+  return true;
+}
+
 unsigned
 Group::getNumChildren() const
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-01 18:37:19 UTC (rev 832)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-01 18:38:03 UTC (rev 833)
@@ -18,8 +18,6 @@
 class Group : public Node {
   OPENFDM_OBJECT(Group, Node);
 public:
-  typedef const Node* NodeId;
-
   Group(const std::string& name);
   virtual ~Group();
 
@@ -29,25 +27,13 @@
   void traverse(NodeVisitor& visitor);
   void traverse(ConstNodeVisitor& visitor) const;
 
-  NodeId addChild(const SharedPtr<Node>& node);
+  unsigned addChild(const SharedPtr<Node>& node);
+  bool removeChild(const Node* node);
   unsigned getNumChildren() const;
   SharedPtr<Node> getChild(unsigned i);
   SharedPtr<const Node> getChild(unsigned i) const;
   unsigned getChildNumber(const Node* node) const;
 
-  bool connect(const NodeId& nodeId0, const std::string& portName0,
-               const NodeId& nodeId1, const std::string& portName1)
-    OpenFDM_DEPRECATED
-  {
-    return connect(nodeId0->getPort(portName0), nodeId1->getPort(portName1));
-  }
-  bool connect(const NodeId& nodeId0, unsigned portNum0,
-               const NodeId& nodeId1, unsigned portNum1)
-    OpenFDM_DEPRECATED
-  {
-    return connect(nodeId0->getPort(portNum0), nodeId1->getPort(portNum1));
-  }
-
   bool connect(const PortInfo* port0, const PortInfo* port1)
   {
     // Make sure the models belong to this group

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-12-01 18:37:19 UTC (rev 832)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-12-01 18:38:03 UTC (rev 833)
@@ -174,6 +174,12 @@
 {
   if (!parent)
     return false;
+  ParentList::const_iterator i;
+  for (i = mParentList.begin(); i != mParentList.end(); ++i) {
+    SharedPtr<const Node> lockedParent = i->lock();
+    if (parent == lockedParent)
+      return false;
+  }
   mParentList.push_back(parent);
   return true;
 }
@@ -183,7 +189,7 @@
 {
   ParentList::iterator i;
   for (i = mParentList.begin(); i != mParentList.end();) {
-    SharedPtr<Node> lockedParent = i->lock();
+    SharedPtr<const Node> lockedParent = i->lock();
     if (parent == lockedParent)
       i = mParentList.erase(i);
     else



From frohlich at mail.berlios.de  Mon Dec  1 19:59:51 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 1 Dec 2008 19:59:51 +0100
Subject: [OpenFDM-svn] r834 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812011859.mB1IxpnD031444@sheep.berlios.de>

Author: frohlich
Date: 2008-12-01 19:59:50 +0100 (Mon, 01 Dec 2008)
New Revision: 834

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
Log:
Add a few comments, factor out common function.

M    src/OpenFDM/Group.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-01 18:38:03 UTC (rev 833)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-01 18:59:50 UTC (rev 834)
@@ -21,37 +21,48 @@
   Group(const std::string& name);
   virtual ~Group();
 
+  /// Methods for the visitors.
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
 
+  /// Traverse this groups children with a visitor
   void traverse(NodeVisitor& visitor);
   void traverse(ConstNodeVisitor& visitor) const;
 
+  /// Add a new child. Returns the number of this child wthin the group
+  /// on success else ~0u is returned.
   unsigned addChild(const SharedPtr<Node>& node);
+  /// Remove the given child. Returns the true on success.
   bool removeChild(const Node* node);
+  /// Returns the number of children
   unsigned getNumChildren() const;
+  /// Get child at index i.
   SharedPtr<Node> getChild(unsigned i);
+  /// Get child at index i.
   SharedPtr<const Node> getChild(unsigned i) const;
+  /// Get child number of the given node. If the node is not contained in
+  /// the group ~0u is returned.
   unsigned getChildNumber(const Node* node) const;
 
-  bool connect(const PortInfo* port0, const PortInfo* port1)
+  bool isChildPort(const PortInfo* portInfo) const
   {
-    // Make sure the models belong to this group
-    if (!port0)
+    if (!portInfo)
       return false;
-    SharedPtr<const Node> child0 = port0->getNode();
-    if (!child0)
+    SharedPtr<const Node> node = portInfo->getNode();
+    if (!node)
       return false;
-    if (!child0->isChildOf(this))
+    if (!node->isChildOf(this))
       return false;
-
-    if (!port1)
+    return true;
+  }
+  
+  bool connect(const PortInfo* port0, const PortInfo* port1)
+  {
+    // Make sure the models belong to this group
+    if (!isChildPort(port0))
       return false;
-    SharedPtr<const Node> child1 = port1->getNode();
-    if (!child1)
+    if (!isChildPort(port1))
       return false;
-    if (!child1->isChildOf(this))
-      return false;
 
     // Just a crude first time check if this will work in principle.
     if (!port0->canConnect(*port1))



From frohlich at mail.berlios.de  Mon Dec  1 20:59:04 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 1 Dec 2008 20:59:04 +0100
Subject: [OpenFDM-svn] r835 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812011959.mB1Jx4Z2003236@sheep.berlios.de>

Author: frohlich
Date: 2008-12-01 20:59:03 +0100 (Mon, 01 Dec 2008)
New Revision: 835

Added:
   branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.h
Removed:
   branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForceModel.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForceModel.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Force.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
Log:
First cut for an external force model.

D    src/OpenFDM/ExternalForceModel.cpp
D    src/OpenFDM/ExternalForceModel.h
M    src/OpenFDM/Makefile.am
A    src/OpenFDM/ExternalForce.cpp
A    src/OpenFDM/ExternalForce.h
M    src/OpenFDM/Force.h
M    src/OpenFDM/Sensor.h


Added: branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp	2008-12-01 18:59:50 UTC (rev 834)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp	2008-12-01 19:59:03 UTC (rev 835)
@@ -0,0 +1,60 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
+ *
+ */
+
+#include "ExternalForce.h"
+
+#include "MechanicLinkValue.h"
+#include "NumericPortValue.h"
+#include "PortValueList.h"
+#include "Task.h"
+
+namespace OpenFDM {
+
+BEGIN_OPENFDM_OBJECT_DEF(ExternalForce, Sensor)
+  DEF_OPENFDM_PROPERTY(Bool, LocalCoordinates, Serialized)
+  END_OPENFDM_OBJECT_DEF
+
+ExternalForce::ExternalForce(const std::string& name) :
+  Sensor(name),
+  mForcePort(this, "force", Size(6, 1), true),
+  mLocalCoordinates(true)
+{
+}
+
+ExternalForce::~ExternalForce(void)
+{
+}
+
+void
+ExternalForce::articulation(const Task&, const ContinousStateValueVector&,
+                            PortValueList& portValues) const
+{
+  // FIXME, for now relative position
+  Vector3 position = mPosition - portValues[mMechanicLink].getDesignPosition();
+  if (mLocalCoordinates) {
+    Vector6 force = -portValues[mForcePort];
+    force = forceFrom(position, force);
+    portValues[mMechanicLink].applyForce(force);
+  } else {
+    const Frame& frame = portValues[mMechanicLink].getFrame();
+    Vector6 force = -portValues[mForcePort];
+    force = forceTo(Vector3::zeros(), frame.getRefOrientation(), force);
+    force = forceFrom(position, force);
+    portValues[mMechanicLink].applyForce(force);
+  }
+}
+
+void
+ExternalForce::setLocalCoordinates(bool localCoordinates)
+{
+  mLocalCoordinates = localCoordinates;
+}
+
+bool
+ExternalForce::getLocalCoordinates() const
+{
+  return mLocalCoordinates;
+}
+
+} // namespace OpenFDM

Added: branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.h	2008-12-01 18:59:50 UTC (rev 834)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.h	2008-12-01 19:59:03 UTC (rev 835)
@@ -0,0 +1,32 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_ExternalForce_H
+#define OpenFDM_ExternalForce_H
+
+#include "Sensor.h"
+#include "MatrixInputPort.h"
+
+namespace OpenFDM {
+
+class ExternalForce : public Sensor {
+  OPENFDM_OBJECT(ExternalForce, Sensor);
+public:
+  ExternalForce(const std::string& name);
+  virtual ~ExternalForce(void);
+
+  virtual void articulation(const Task&, const ContinousStateValueVector&,
+                            PortValueList& portValues) const;
+
+  void setLocalCoordinates(bool localCoordinates);
+  bool getLocalCoordinates() const;
+
+private:
+  MatrixInputPort mForcePort;
+  bool mLocalCoordinates;
+};
+
+} // namespace OpenFDM
+
+#endif

Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForceModel.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForceModel.cpp	2008-12-01 18:59:50 UTC (rev 834)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForceModel.cpp	2008-12-01 19:59:03 UTC (rev 835)
@@ -1,54 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#include "ExternalForceModel.h"
-#include "Vector.h"
-
-namespace OpenFDM {
-
-BEGIN_OPENFDM_OBJECT_DEF(ExternalForceModel, ExternalForce)
-  END_OPENFDM_OBJECT_DEF
-
-ExternalForceModel::ExternalForceModel(const std::string& name)
-  : ExternalForce(name)
-{
-  setDirectFeedThrough(true);
-
-  setNumInputPorts(1);
-  setInputPortName(0, "forceInput");
-}
-
-ExternalForceModel::~ExternalForceModel(void)
-{
-}
-
-bool
-ExternalForceModel::init(void)
-{
-  mInputPort = getInputPort(0)->toMatrixPortHandle();
-  if (!mInputPort.isConnected()) {
-    Log(Model, Error) << "Initialization of ExternalForceModel model \""
-                      << getName() << "\" failed: Input port \""
-                      << getInputPortName(0) << "\" is not connected!" << endl;
-    return false;
-  }
-  if (size(mInputPort.getMatrixValue()) != Size(6, 1)) {
-    Log(Model, Error) << "Initialization of ExternalForceModel model \""
-                      << getName() << "\" failed: Input port \""
-                      << getInputPortName(0) << "\" is not of size [6, 1]!"
-                      << endl;
-    return false;
-  }
-
-  return true;
-}
-
-void
-ExternalForceModel::output(const TaskInfo&)
-{
-  OpenFDMAssert(mInputPort.isConnected());
-  setForce(mInputPort.getMatrixValue());
-}
-
-} // namespace OpenFDM

Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForceModel.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForceModel.h	2008-12-01 18:59:50 UTC (rev 834)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForceModel.h	2008-12-01 19:59:03 UTC (rev 835)
@@ -1,31 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#ifndef OpenFDM_ExternalForceModel_H
-#define OpenFDM_ExternalForceModel_H
-
-#include "Assert.h"
-#include "Object.h"
-#include "Vector.h"
-#include "Frame.h"
-#include "Force.h"
-
-namespace OpenFDM {
-
-class ExternalForceModel : public ExternalForce {
-  OPENFDM_OBJECT(ExternalForceModel, ExternalForce);
-public:
-  ExternalForceModel(const std::string& name);
-  virtual ~ExternalForceModel(void);
-
-  virtual bool init(void);
-  virtual void output(const TaskInfo&);
-
-private:
-  MatrixPortHandle mInputPort;
-};
-
-} // namespace OpenFDM
-
-#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Force.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Force.h	2008-12-01 18:59:50 UTC (rev 834)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Force.h	2008-12-01 19:59:03 UTC (rev 835)
@@ -22,64 +22,6 @@
 
 };
 
-class ExternalForce : public Force {
-  OPENFDM_OBJECT(ExternalForce, Force);
-public:
-  ExternalForce(const std::string& name) :
-    Force(name, 1),
-    mForce(0, 0, 0, 0, 0, 0)
-  {
-    mMountFrame = new FreeFrame(name);
-  }
-  virtual ~ExternalForce(void) {}
-
-  virtual void recheckTopology(void)
-  {
-    if (!getParentRigidBody(0))
-      return;
-  
-    // check for the frames
-    Frame* frame = getParentRigidBody(0)->getFrame();
-    if (!frame)
-      return;
-    if (!mMountFrame->isDirectChildFrameOf(frame))
-      frame->addChildFrame(mMountFrame);
-  }
-
-  // Needs to call applyForce once ...
-  virtual void interactWith(RigidBody* rigidBody)
-  {
-    OpenFDMAssert(rigidBody->getFrame()->isDirectParentFrameOf(mMountFrame));
-    rigidBody->applyForce(mMountFrame->forceToParent(mForce));
-  }
-
-  const Vector3& getPosition(void) const
-  { return mMountFrame->getPosition(); }
-  void setPosition(const Vector3& pos)
-  { mMountFrame->setPosition(pos); }
-
-  const Quaternion& getOrientation(void) const
-  { return mMountFrame->getOrientation(); }
-  void setOrientation(const Quaternion& pos)
-  { mMountFrame->setOrientation(pos); }
-
-  const Vector6& getForce(void) const
-  { return mForce; }
-
-protected:
-  /** Sets the force contribution of this force element.
-   * Sets the force contribution of this current force element to
-   * the parent rigid body to force.
-   */
-  void setForce(const Vector6& force)
-  { mForce = force; }
-
-  SharedPtr<FreeFrame> mMountFrame;
-
-private:
-  Vector6 mForce;
-};
-
 class InternalForce : public Force {
   OPENFDM_OBJECT(InternalForce, Force);
 public:

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-01 18:59:50 UTC (rev 834)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-01 19:59:03 UTC (rev 835)
@@ -207,7 +207,7 @@
   Delay.h \
   DiscBrake.h \
   DiscreteIntegrator.h \
-  ExternalForceModel.h \
+  ExternalForce.h \
   FixedRootJoint.h \
   Force.h \
   Gain.h \
@@ -273,6 +273,7 @@
 
 OpenFDMMechanicSOURCES = \
   Joint.cpp \
+  ExternalForce.cpp \
   FixedRootJoint.cpp \
   Mass.cpp \
   MobileRootJoint.cpp \
@@ -285,7 +286,6 @@
 
 #   AeroForce.cpp \
 #   Contact.cpp \
-#   ExternalForceModel.cpp \
 #   Force.cpp \
 #   SimpleContact.cpp \
 #   SimpleGear.cpp \

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2008-12-01 18:59:50 UTC (rev 834)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2008-12-01 19:59:03 UTC (rev 835)
@@ -86,7 +86,7 @@
   /// This is mostly for convinience in testing
   void setEnableAll(bool enable);
 
-private:
+protected:
   MechanicLink mMechanicLink;
 
   Vector3 mPosition;



From frohlich at mail.berlios.de  Mon Dec  1 22:41:53 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 1 Dec 2008 22:41:53 +0100
Subject: [OpenFDM-svn] r836 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812012141.mB1Lfrg2013046@sheep.berlios.de>

Author: frohlich
Date: 2008-12-01 22:41:53 +0100 (Mon, 01 Dec 2008)
New Revision: 836

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Also create contexts for velocity and acceleration models.

M    System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-12-01 19:59:03 UTC (rev 835)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-12-01 21:41:53 UTC (rev 836)
@@ -1300,6 +1300,16 @@
       if (!(*j)->createModelContext())
         return false;
     }
+    for (j = mVelocityModelInstanceDataList.begin();
+         j != mVelocityModelInstanceDataList.end(); ++j) {
+      if (!(*j)->createModelContext())
+        return false;
+    }
+    for (j = mAccelerationModelInstanceDataList.begin();
+         j != mAccelerationModelInstanceDataList.end(); ++j) {
+      if (!(*j)->createModelContext())
+        return false;
+    }
 
     MechanicInstanceDataList::const_iterator k;
     for (k = mMechanicInstanceDataList.begin();



From frohlich at mail.berlios.de  Mon Dec  1 22:42:10 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 1 Dec 2008 22:42:10 +0100
Subject: [OpenFDM-svn] r837 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812012142.mB1LgA5q013103@sheep.berlios.de>

Author: frohlich
Date: 2008-12-01 22:42:10 +0100 (Mon, 01 Dec 2008)
New Revision: 837

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h
Log:
Add accessor for the ground.

M    Environment.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h	2008-12-01 21:41:53 UTC (rev 836)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h	2008-12-01 21:42:10 UTC (rev 837)
@@ -121,8 +121,11 @@
 
   ///////////////////////////////////////////////////////////////////////////
   // Intersection interaction related
+  GroundValues getGroundPlane(const real_type& t, const Vector3& pos) const
+  {
+    return mGround->getGroundPlane(*this, t, pos);
+  }
 
-
 private:
   SharedPtr<const AbstractInertial> mInertial;
   SharedPtr<const AbstractGravity> mGravity;



From frohlich at mail.berlios.de  Mon Dec  1 22:42:55 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 1 Dec 2008 22:42:55 +0100
Subject: [OpenFDM-svn] r838 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812012142.mB1Lgti4013183@sheep.berlios.de>

Author: frohlich
Date: 2008-12-01 22:42:55 +0100 (Mon, 01 Dec 2008)
New Revision: 838

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h
Log:
Add WheelContact

M    OpenFDM/WheelContact.cpp
M    OpenFDM/Makefile.am
M    OpenFDM/WheelContact.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-01 21:42:10 UTC (rev 837)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-01 21:42:55 UTC (rev 838)
@@ -282,15 +282,15 @@
   RevoluteJoint.cpp \
   RotationalJoint.cpp \
   Sensor.cpp \
-  UniversalJoint.cpp
+  UniversalJoint.cpp \
+  WheelContact.cpp
 
 #   AeroForce.cpp \
 #   Contact.cpp \
 #   Force.cpp \
 #   SimpleContact.cpp \
 #   SimpleGear.cpp \
-#   Tank.cpp \
-#   WheelContact.cpp
+#   Tank.cpp
 
 #   Launchbar.cpp \
 #   Tailhook.cpp \

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-01 21:42:10 UTC (rev 837)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-01 21:42:55 UTC (rev 838)
@@ -5,14 +5,12 @@
 #include "WheelContact.h"
 
 #include "LogStream.h"
-#include "Object.h"
-#include "Vector.h"
-#include "Frame.h"
-#include "Force.h"
+#include "PortValueList.h"
+#include "Task.h"
 
 namespace OpenFDM {
 
-BEGIN_OPENFDM_OBJECT_DEF(WheelContact, ExternalForce)
+BEGIN_OPENFDM_OBJECT_DEF(WheelContact, Interact)
   DEF_OPENFDM_PROPERTY(Real, WheelRadius, Serialized)
   DEF_OPENFDM_PROPERTY(Real, SpringConstant, Serialized)
 /// FIXME want to have similar names than with linearspringdamper
@@ -20,63 +18,57 @@
   DEF_OPENFDM_PROPERTY(Real, FrictionCoeficient, Serialized)
   END_OPENFDM_OBJECT_DEF
 
-WheelContact::WheelContact(const std::string& name)
-  : ExternalForce(name)
+WheelContact::WheelContact(const std::string& name) :
+  Interact(name),
+  mMechanicLink(newMechanicLink("link"))
 {
   mWheelRadius = 0.3;
   mSpringConstant = 0;
   mSpringDamping = 0;
   mFrictionCoeficient = 0.8;
-
-  // FIXME??
-  addSampleTime(SampleTime::PerTimestep);
-  addSampleTime(SampleTime::Continous);
 }
 
 WheelContact::~WheelContact(void)
 {
 }
 
-bool
-WheelContact::init(void)
-{
-  return ExternalForce::init();
-}
-
 void
-WheelContact::output(const TaskInfo& taskInfo)
+WheelContact::articulation(const Task& task, const ContinousStateValueVector&,
+                           PortValueList& portValues) const
 {
-  if (nonZeroIntersection(taskInfo.getSampleTimeSet(),
-                          SampleTime::PerTimestep)) {
-    Log(Model, Debug) << "WheelContact::output(): \"" << getName()
-                      << "\" computing ground plane below" << endl;
-    getGround(taskInfo.getTime());
-  }
+  const Environment* environment;
+  environment = portValues[mMechanicLink].getEnvironment();
 
+  const Frame& frame = portValues[mMechanicLink].getFrame();
+
+  // FIXME, for now relative position
+  Vector3 position = mPosition - portValues[mMechanicLink].getDesignPosition();
+  Vector3 refPos = frame.posToRef(position);
+
+  GroundValues groundValues = environment->getGroundPlane(task.getTime(), refPos);
+
   // Transform the plane equation to the local frame.
-  Plane lp = mMountFrame->planeFromRef(mGroundVal.plane);
+  Plane lp = frame.planeFromRef(groundValues.plane);
   
   // Get the intersection length.
   real_type distHubGround = fabs(lp.getDist(Vector3::zeros()));
   real_type compressLength = mWheelRadius - distHubGround;
   
   // Don't bother if we do not intersect the ground.
-  if (compressLength < 0) {
-    setForce(Vector6::zeros());
+  if (compressLength < 0)
     return;
-  }
 
   Vector3 contactPoint = distHubGround*lp.getNormal();
   
   // The velocity of the ground patch in the current frame.
-  Vector6 groundVel(mMountFrame->rotFromRef(mGroundVal.vel.getAngular()),
-                    mMountFrame->rotFromRef(mGroundVal.vel.getLinear()));
-  groundVel -= mMountFrame->getRefVel();
+  Vector6 groundVel(frame.rotFromRef(groundValues.vel.getAngular()),
+                    frame.rotFromRef(groundValues.vel.getLinear()));
+  groundVel -= frame.getRefVel();
   // Now get the relative velocity of the ground wrt the hub
   Vector6 relVel = - groundVel;
-//   Log(Model,Error) << trans(mMountFrame->getRelVel()) << " "
+//   Log(Model,Error) << trans(frame.getRelVel()) << " "
 //                    << trans(groundVel) << " "
-//                    << trans(mMountFrame->motionToParent(relVel)) << endl;
+//                    << trans(frame.motionToParent(relVel)) << endl;
 
 
   // The velocity perpandicular to the plane.
@@ -115,7 +107,7 @@
 
   // Get the friction force.
   Vector2 fricForce = computeFrictionForce(normForce, wheelVel,
-                                           omegaR, mGroundVal.friction);
+                                           omegaR, groundValues.friction);
   
   // The resulting force is the sum of both.
   // The minus sign is because of the direction of the surface normal.
@@ -123,7 +115,8 @@
     - normForce*lp.getNormal();
   
   // We don't have an angular moment.
-  setForce(forceFrom(contactPoint, force));
+  force = -force;
+  portValues[mMechanicLink].applyForce(forceFrom(contactPoint, force));
 }
 
 real_type
@@ -156,19 +149,25 @@
   return (-friction*mFrictionCoeficient*normForce)*slip;
 }
 
-void
-WheelContact::setEnvironment(Environment* environment)
+// void
+// WheelContact::getGround(real_type t)
+// {
+//   // Get the position of the contact in the reference system.
+//   Vector3 pos = frame.posToRef(Vector3::zeros());
+//   // Query for the ground parameters at this point.
+//   groundValues = mEnvironment->getGround()->getGroundPlane(t, pos);
+// }
+
+const Vector3&
+WheelContact::getPosition(void) const
 {
-  mEnvironment = environment;
+  return mPosition;
 }
 
 void
-WheelContact::getGround(real_type t)
+WheelContact::setPosition(const Vector3& position)
 {
-  // Get the position of the contact in the reference system.
-  Vector3 pos = mMountFrame->posToRef(Vector3::zeros());
-  // Query for the ground parameters at this point.
-  mGroundVal = mEnvironment->getGround()->getGroundPlane(t, pos);
+  mPosition = position;
 }
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h	2008-12-01 21:42:10 UTC (rev 837)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h	2008-12-01 21:42:55 UTC (rev 838)
@@ -5,24 +5,19 @@
 #ifndef OpenFDM_WheelContact_H
 #define OpenFDM_WheelContact_H
 
-#include "Assert.h"
-#include "Object.h"
-#include "Vector.h"
-#include "Frame.h"
-#include "Force.h"
-#include "Ground.h"
-#include "Environment.h"
+#include "Interact.h"
 
 namespace OpenFDM {
 
-class WheelContact : public ExternalForce {
-  OPENFDM_OBJECT(WheelContact, ExternalForce);
+class WheelContact : public Interact {
+  OPENFDM_OBJECT(WheelContact, Interact);
 public:
   WheelContact(const std::string& name);
   virtual ~WheelContact(void);
 
-  virtual bool init(void);
-  virtual void output(const TaskInfo&);
+  virtual void initDesignPosition(PortValueList&) const {}
+  virtual void articulation(const Task&, const ContinousStateValueVector&,
+                            PortValueList& portValues) const;
 
   // Compute the plane normal force.
   virtual real_type
@@ -33,6 +28,11 @@
   computeFrictionForce(real_type normForce, const Vector2& vel,
                        real_type omegaR, real_type friction) const;
 
+  /** Set a position offset for the inertia given.
+   */
+  const Vector3& getPosition(void) const;
+  void setPosition(const Vector3& position);
+
   void setWheelRadius(const real_type& wheelRadius)
   { mWheelRadius = wheelRadius; }
   const real_type& getWheelRadius(void) const
@@ -53,15 +53,10 @@
   const real_type& getFrictionCoeficient(void) const
   { return mFrictionCoeficient; }
 
-protected:
-  virtual void setEnvironment(Environment* environment);
-
 private:
-  void getGround(real_type t);
+  MechanicLink mMechanicLink;
 
-  GroundValues mGroundVal;
-  SharedPtr<Environment> mEnvironment;
-
+  Vector3 mPosition;
   real_type mWheelRadius;
   real_type mSpringConstant;
   real_type mSpringDamping;



From frohlich at mail.berlios.de  Mon Dec  1 22:43:22 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 1 Dec 2008 22:43:22 +0100
Subject: [OpenFDM-svn] r839 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200812012143.mB1LhMio013246@sheep.berlios.de>

Author: frohlich
Date: 2008-12-01 22:43:21 +0100 (Mon, 01 Dec 2008)
New Revision: 839

Modified:
   branches/OpenFDM-StateSeparation/src/test/Makefile.am
   branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
Log:
tiretestrig.

M    src/test/tiretestrig.cpp
M    src/test/Makefile.am


Modified: branches/OpenFDM-StateSeparation/src/test/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/Makefile.am	2008-12-01 21:42:55 UTC (rev 838)
+++ branches/OpenFDM-StateSeparation/src/test/Makefile.am	2008-12-01 21:43:21 UTC (rev 839)
@@ -1,15 +1,14 @@
 INCLUDES = -I$(srcdir)/..
 
 # define some util programs
-# bin_PROGRAMS = tiretestrig
-bin_PROGRAMS = structure mechanic foucault
+bin_PROGRAMS = foucault mechanic structure tiretestrig
 
 # define some unit tests
 check_PROGRAMS = constintegral harmonic limit linalg quattest simulationtime unitstest
 TESTS          = $(check_PROGRAMS)
 
-# tiretestrig_SOURCES = tiretestrig.cpp
-# tiretestrig_LDADD = ../OpenFDM/libOpenFDM.la
+tiretestrig_SOURCES = tiretestrig.cpp
+tiretestrig_LDADD = ../OpenFDM/libOpenFDM.la
 
 unitstest_SOURCES = unitstest.cpp
 unitstest_LDADD = ../OpenFDM/libOpenFDM.la

Modified: branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2008-12-01 21:42:55 UTC (rev 838)
+++ branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2008-12-01 21:43:21 UTC (rev 839)
@@ -6,13 +6,10 @@
 #include <OpenFDM/DoPri5.h>
 #include <OpenFDM/FixedRootJoint.h>
 #include <OpenFDM/Gain.h>
-#include <OpenFDM/Gravity.h>
-#include <OpenFDM/Ground.h>
 #include <OpenFDM/Integrator.h>
 #include <OpenFDM/LinearSpringDamper.h>
 #include <OpenFDM/Mass.h>
-#include <OpenFDM/ModelGroup.h>
-#include <OpenFDM/ModelVisitor.h>
+#include <OpenFDM/Group.h>
 #include <OpenFDM/Output.h>
 #include <OpenFDM/PrismaticJoint.h>
 #include <OpenFDM/RevoluteActuator.h>
@@ -21,18 +18,18 @@
 #include <OpenFDM/SimulationTime.h>
 #include <OpenFDM/Summer.h>
 #include <OpenFDM/System.h>
+#include <OpenFDM/SystemOutput.h>
 #include <OpenFDM/UnaryFunction.h>
 #include <OpenFDM/WheelContact.h>
 
-#include "HDF5Writer.h"
-
 using namespace OpenFDM;
 
-class MovingGround : public Ground {
+class MovingGround : public AbstractGround {
 public:
   MovingGround(const Vector3& linearVelocity) : mVelocity(linearVelocity)
   { }
-  virtual GroundValues getGroundPlane(real_type, const Vector3& refPos) const
+  virtual GroundValues getGroundPlane(const Environment&, const real_type& t,
+                                      const Vector3& refPos) const
   {
     return GroundValues(Plane(Vector3(0, 0, -1), Vector3::zeros()),
                         Vector6(Vector3::zeros(), mVelocity),
@@ -42,130 +39,119 @@
   Vector3 mVelocity;
 };
 
-class ZGravity : public Gravity {
-public:
-  virtual Vector3 gravityAccel(const Vector3& cart) const
-  { return Vector3(0, 0, 9.81); }
-};
-
 int
 main(int argc, char *argv[])
 {
-  real_type omega = 2;
+  SharedPtr<Group> group = new Group("Tire Testrig");
 
-  SharedPtr<System> system = new System("Tire Testrig");
-  system->addSampleTime(real_type(1)/real_type(100));
-  system->setTimestepper(new DoPri5);
-
-  // set the moving ground
-  system->getEnvironment()->setGround(new MovingGround(Vector3(10, 0, 0)));
-  system->getEnvironment()->setGravity(new ZGravity());
-  
   // First build up the mechanical system
   FixedRootJoint* fixedRootJoint = new FixedRootJoint("Fixed Root Joint");
-  system->addModel(fixedRootJoint);
-  fixedRootJoint->setRefPosition(Vector3(0, 0, 1));
+  group->addChild(fixedRootJoint);
+  fixedRootJoint->setPosition(Vector3(0, 0, 1));
 
   PrismaticJoint* prismaticJoint = new PrismaticJoint("Normal Force joint");
-  prismaticJoint->setJointAxis(Vector3::unit(2));
-  system->addModel(prismaticJoint);
+  prismaticJoint->setAxis(Vector3::unit(2));
+  group->addChild(prismaticJoint);
 
   Summer* normalForceSum = new Summer("Normal Force Sum");
   normalForceSum->setNumSummands(2);
   normalForceSum->setInputSign(0, Summer::Minus);
-  system->addModel(normalForceSum);
-  Connection::connect(prismaticJoint->getInputPort(0),
-                      normalForceSum->getOutputPort(0));
+  group->addChild(normalForceSum);
+  group->connect(prismaticJoint->getPort("input"),
+                 normalForceSum->getPort("output"));
 
   ConstModel* normalForce = new ConstModel("Normal force");
   normalForce->setScalarValue(2000);
-  system->addModel(normalForce);
-  Connection::connect(normalForceSum->getInputPort(0),
-                      normalForce->getOutputPort(0));
+  group->addChild(normalForce);
+  group->connect(normalForceSum->getPort("input0"),
+                 normalForce->getPort("output"));
  
   LinearSpringDamper* strutDamper = new LinearSpringDamper("Strut Damper");
   strutDamper->setSpringConstant(0);
   strutDamper->setDamperConstant(-30);
-  system->addModel(strutDamper);
-  Connection::connect(normalForceSum->getInputPort(1),
-                      strutDamper->getOutputPort(0));
-  Connection::connect(strutDamper->getInputPort(0),
-                      prismaticJoint->getOutputPort(0));
-  Connection::connect(strutDamper->getInputPort(1),
-                      prismaticJoint->getOutputPort(1));
+  group->addChild(strutDamper);
+  group->connect(normalForceSum->getPort("input1"),
+                 strutDamper->getPort("force"));
+  group->connect(strutDamper->getPort("velocity"),
+                 prismaticJoint->getPort("velocity"));
+  group->connect(strutDamper->getPort("position"),
+                 prismaticJoint->getPort("position"));
 
   RigidBody* rootMount = new RigidBody("Root Mount");
-  system->addModel(rootMount);
-  rootMount->setInboardJoint(fixedRootJoint);
-  rootMount->addInteract(prismaticJoint);
+  group->addChild(rootMount);
+  group->connect(rootMount->getPort("link0"), fixedRootJoint->getPort("link"));
+  group->connect(rootMount->getPort("link1"), prismaticJoint->getPort("link0"));
 
-
   RevoluteActuator* camberActuator = new RevoluteActuator("Camber Actuator");
-  system->addModel(camberActuator);
+  group->addChild(camberActuator);
 
   ConstModel* camberAngle = new ConstModel("Camber Angle");
   camberAngle->setScalarValue(0);
-  system->addModel(camberAngle);
-  Connection::connect(camberActuator->getInputPort(0),
-                      camberAngle->getOutputPort(0));
+  group->addChild(camberAngle);
+  group->connect(camberActuator->getPort("input"),
+                 camberAngle->getPort("output"));
 
   RigidBody* normalForceStrut = new RigidBody("Normal Force Strut");
-  system->addModel(normalForceStrut);
-  normalForceStrut->setInboardJoint(prismaticJoint);
-  normalForceStrut->addInteract(camberActuator);
+  group->addChild(normalForceStrut);
+  group->connect(normalForceStrut->getPort("link0"),
+                 prismaticJoint->getPort("link1"));
+  group->connect(normalForceStrut->getPort("link1"),
+                 camberActuator->getPort("link0"));
 
  
   RevoluteActuator* sideActuator = new RevoluteActuator("Sideslip Actuator");
-  system->addModel(sideActuator);
+  group->addChild(sideActuator);
 
   ConstModel* sideslipAngle = new ConstModel("Sideslip Angle");
   sideslipAngle->setScalarValue(0);
-  system->addModel(sideslipAngle);
-  Connection::connect(sideActuator->getInputPort(0),
-                      sideslipAngle->getOutputPort(0));
+  group->addChild(sideslipAngle);
+  group->connect(sideActuator->getPort("input"),
+                 sideslipAngle->getPort("output"));
 
   RigidBody* camberStrut = new RigidBody("Camber Strut");
-  system->addModel(camberStrut);
-  camberStrut->setInboardJoint(camberActuator);
-  camberStrut->addInteract(sideActuator);
+  group->addChild(camberStrut);
+  group->connect(camberStrut->getPort("link0"),
+                 camberActuator->getPort("link1"));
+  group->connect(camberStrut->getPort("link1"), sideActuator->getPort("link0"));
 
 
   RevoluteJoint* hubJoint = new RevoluteJoint("Hub Joint");
-  hubJoint->setJointAxis(Vector3(0, 1, 0));
-  system->addModel(hubJoint);
+  hubJoint->setAxis(Vector3(0, 1, 0));
+  group->addChild(hubJoint);
 
   RigidBody* hubStrut = new RigidBody("Hub Strut");
-  system->addModel(hubStrut);
-  hubStrut->setInboardJoint(sideActuator);
-  hubStrut->addInteract(hubJoint);
+  group->addChild(hubStrut);
+  group->connect(hubStrut->getPort("link0"), sideActuator->getPort("link1"));
+  group->connect(hubStrut->getPort("link1"), hubJoint->getPort("link0"));
 
   RigidBody* rimAndTire = new RigidBody("Rim And Tire");
-  system->addModel(rimAndTire);
-  rimAndTire->setInboardJoint(hubJoint);
+  group->addChild(rimAndTire);
+  group->connect(hubJoint->getPort("link1"), rimAndTire->getPort("link0"));
 
   Mass* tireAndRimMass = new Mass("Rim And Tire Mass");
-  tireAndRimMass->setInertia(1, InertiaMatrix(1, 0, 0, 1, 0, 1));
-  system->addModel(tireAndRimMass);
-  rimAndTire->addInteract(tireAndRimMass);
+  tireAndRimMass->setMass(1);
+  tireAndRimMass->setInertia(InertiaMatrix(1, 0, 0, 1, 0, 1));
+  group->addChild(tireAndRimMass);
+  group->connect(rimAndTire->getPort("link1"), tireAndRimMass->getPort("link"));
   
   WheelContact* wheelContact = new WheelContact("Wheel Contact");
   wheelContact->setWheelRadius(0.3);
   wheelContact->setSpringConstant(1000);
   wheelContact->setSpringDamping(sqrt(wheelContact->getSpringConstant())/10);
-  system->addModel(wheelContact);
-  rimAndTire->addInteract(wheelContact);
+  group->addChild(wheelContact);
+  rimAndTire->addLink("link2");
+  group->connect(rimAndTire->getPort("link2"), wheelContact->getPort("link"));
 
-  if (!system->init()) {
-    std::cout << "Could not initialize the system" << std::endl;
-    return EXIT_FAILURE;
-  }
+  SharedPtr<System> system = new System("Tire Testrig", group);
 
-  HDF5Writer hwriter("system.h5");
-  system->accept(hwriter);
-  while (system->getTime() < 10) {
-    system->simulate(system->getTime() + 0.01);
-    system->accept(hwriter);
-  }
+  // set the moving ground
+  system->getEnvironment()->setGround(new MovingGround(Vector3(10, 0, 0)));
+
+  system->attach(SystemOutput::newDefaultSystemOutput("tiretestrig.h5"));
+  if (!system->init())
+    return 1;
+
+  system->simulate(60);
   
   return EXIT_SUCCESS;
 }



From frohlich at mail.berlios.de  Tue Dec  2 07:21:08 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 2 Dec 2008 07:21:08 +0100
Subject: [OpenFDM-svn] r840 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812020621.mB26L83P012463@sheep.berlios.de>

Author: frohlich
Date: 2008-12-02 07:21:06 +0100 (Tue, 02 Dec 2008)
New Revision: 840

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
Log:
Remove commented out function.

M    WheelContact.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-01 21:43:21 UTC (rev 839)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-02 06:21:06 UTC (rev 840)
@@ -149,15 +149,6 @@
   return (-friction*mFrictionCoeficient*normForce)*slip;
 }
 
-// void
-// WheelContact::getGround(real_type t)
-// {
-//   // Get the position of the contact in the reference system.
-//   Vector3 pos = frame.posToRef(Vector3::zeros());
-//   // Query for the ground parameters at this point.
-//   groundValues = mEnvironment->getGround()->getGroundPlane(t, pos);
-// }
-
 const Vector3&
 WheelContact::getPosition(void) const
 {



From frohlich at mail.berlios.de  Tue Dec  2 07:22:38 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 2 Dec 2008 07:22:38 +0100
Subject: [OpenFDM-svn] r841 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200812020622.mB26McuI013304@sheep.berlios.de>

Author: frohlich
Date: 2008-12-02 07:22:37 +0100 (Tue, 02 Dec 2008)
New Revision: 841

Modified:
   branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
Log:
Adjust a few signs ...

M    src/test/tiretestrig.cpp


Modified: branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2008-12-02 06:21:06 UTC (rev 840)
+++ branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2008-12-02 06:22:37 UTC (rev 841)
@@ -47,7 +47,7 @@
   // First build up the mechanical system
   FixedRootJoint* fixedRootJoint = new FixedRootJoint("Fixed Root Joint");
   group->addChild(fixedRootJoint);
-  fixedRootJoint->setPosition(Vector3(0, 0, 1));
+  fixedRootJoint->setPosition(Vector3(0, 0, -1));
 
   PrismaticJoint* prismaticJoint = new PrismaticJoint("Normal Force joint");
   prismaticJoint->setAxis(Vector3::unit(2));
@@ -68,7 +68,7 @@
  
   LinearSpringDamper* strutDamper = new LinearSpringDamper("Strut Damper");
   strutDamper->setSpringConstant(0);
-  strutDamper->setDamperConstant(-30);
+  strutDamper->setDamperConstant(30);
   group->addChild(strutDamper);
   group->connect(normalForceSum->getPort("input1"),
                  strutDamper->getPort("force"));
@@ -136,7 +136,7 @@
   
   WheelContact* wheelContact = new WheelContact("Wheel Contact");
   wheelContact->setWheelRadius(0.3);
-  wheelContact->setSpringConstant(1000);
+  wheelContact->setSpringConstant(20000);
   wheelContact->setSpringDamping(sqrt(wheelContact->getSpringConstant())/10);
   group->addChild(wheelContact);
   rimAndTire->addLink("link2");



From frohlich at mail.berlios.de  Tue Dec  2 07:46:16 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 2 Dec 2008 07:46:16 +0100
Subject: [OpenFDM-svn] r842 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812020646.mB26kGXN002654@sheep.berlios.de>

Author: frohlich
Date: 2008-12-02 07:46:15 +0100 (Tue, 02 Dec 2008)
New Revision: 842

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
Log:
Use the mount frame as hub reference.

M    src/OpenFDM/WheelContact.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-02 06:22:37 UTC (rev 841)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-02 06:46:15 UTC (rev 842)
@@ -43,12 +43,23 @@
 
   // FIXME, for now relative position
   Vector3 position = mPosition - portValues[mMechanicLink].getDesignPosition();
+
+  // FIXME, frame is constant in its parameters move into a useful context.
+  // Can also make use of that in the Sensor and so on..
+  // Also need Coordinate systems within a frame
+  Frame mountFrame;
+  mountFrame.setPosAndVel(frame, position,
+                          Quaternion::unit(), Vector6::zeros());
+  mountFrame.setAccel(frame, Vector6::zeros());
+
+  // This might go into the environment???
+  // Query at a position wrt a coordinate system
   Vector3 refPos = frame.posToRef(position);
-
+  // Vector3 refPos = mountFrame.posToRef(Vector3::zeros());
   GroundValues groundValues = environment->getGroundPlane(task.getTime(), refPos);
 
   // Transform the plane equation to the local frame.
-  Plane lp = frame.planeFromRef(groundValues.plane);
+  Plane lp = mountFrame.planeFromRef(groundValues.plane);
   
   // Get the intersection length.
   real_type distHubGround = fabs(lp.getDist(Vector3::zeros()));
@@ -61,14 +72,14 @@
   Vector3 contactPoint = distHubGround*lp.getNormal();
   
   // The velocity of the ground patch in the current frame.
-  Vector6 groundVel(frame.rotFromRef(groundValues.vel.getAngular()),
-                    frame.rotFromRef(groundValues.vel.getLinear()));
-  groundVel -= frame.getRefVel();
+  Vector6 groundVel(mountFrame.rotFromRef(groundValues.vel.getAngular()),
+                    mountFrame.rotFromRef(groundValues.vel.getLinear()));
+  groundVel -= mountFrame.getRefVel();
   // Now get the relative velocity of the ground wrt the hub
   Vector6 relVel = - groundVel;
-//   Log(Model,Error) << trans(frame.getRelVel()) << " "
+//   Log(Model,Error) << trans(mountFrame.getRelVel()) << " "
 //                    << trans(groundVel) << " "
-//                    << trans(frame.motionToParent(relVel)) << endl;
+//                    << trans(mountFrame.motionToParent(relVel)) << endl;
 
 
   // The velocity perpandicular to the plane.
@@ -83,7 +94,7 @@
   
   // Get a transform from the current frames coordinates into
   // wheel coordinates.
-  // The wheel coordinates x asxis is defined by the forward orientation
+  // The wheel coordinates x axis is defined by the forward orientation
   // of the wheel, the z axis points perpandicular to the ground
   // plane downwards.
   Vector3 forward = normalize(cross(Vector3::unit(1), lp.getNormal()));



From frohlich at mail.berlios.de  Tue Dec  2 07:53:01 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 2 Dec 2008 07:53:01 +0100
Subject: [OpenFDM-svn] r843 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812020653.mB26r1ru005699@sheep.berlios.de>

Author: frohlich
Date: 2008-12-02 07:52:59 +0100 (Tue, 02 Dec 2008)
New Revision: 843

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h
Log:
A wheel has an axis and a hub position.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-02 06:46:15 UTC (rev 842)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-02 06:52:59 UTC (rev 843)
@@ -11,6 +11,8 @@
 namespace OpenFDM {
 
 BEGIN_OPENFDM_OBJECT_DEF(WheelContact, Interact)
+  DEF_OPENFDM_PROPERTY(Vector3, Position, Serialized)
+  DEF_OPENFDM_PROPERTY(Vector3, Axis, Serialized)
   DEF_OPENFDM_PROPERTY(Real, WheelRadius, Serialized)
   DEF_OPENFDM_PROPERTY(Real, SpringConstant, Serialized)
 /// FIXME want to have similar names than with linearspringdamper
@@ -20,7 +22,9 @@
 
 WheelContact::WheelContact(const std::string& name) :
   Interact(name),
-  mMechanicLink(newMechanicLink("link"))
+  mMechanicLink(newMechanicLink("link")),
+  mPosition(0, 0, 0),
+  mAxis(0, 1, 0)
 {
   mWheelRadius = 0.3;
   mSpringConstant = 0;
@@ -97,7 +101,7 @@
   // The wheel coordinates x axis is defined by the forward orientation
   // of the wheel, the z axis points perpandicular to the ground
   // plane downwards.
-  Vector3 forward = normalize(cross(Vector3::unit(1), lp.getNormal()));
+  Vector3 forward = normalize(cross(mAxis, lp.getNormal()));
   Vector3 side = normalize(cross(lp.getNormal(), forward));
 
   // Transformed velocity to the ground plane
@@ -172,4 +176,18 @@
   mPosition = position;
 }
 
+const Vector3&
+WheelContact::getAxis(void) const
+{
+  return mAxis;
+}
+
+void
+WheelContact::setAxis(const Vector3& axis)
+{
+  if (norm(axis) <= Limits<real_type>::safe_min())
+    return;
+  mAxis = normalize(axis);
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h	2008-12-02 06:46:15 UTC (rev 842)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h	2008-12-02 06:52:59 UTC (rev 843)
@@ -28,16 +28,25 @@
   computeFrictionForce(real_type normForce, const Vector2& vel,
                        real_type omegaR, real_type friction) const;
 
-  /** Set a position offset for the inertia given.
+  /** Set a position for the wheel axis position.
    */
   const Vector3& getPosition(void) const;
   void setPosition(const Vector3& position);
 
+  /** Set wheel axis direction.
+   */
+  const Vector3& getAxis(void) const;
+  void setAxis(const Vector3& axis);
+
+  /** Set wheel radius.
+   */
   void setWheelRadius(const real_type& wheelRadius)
   { mWheelRadius = wheelRadius; }
   const real_type& getWheelRadius(void) const
   { return mWheelRadius; }
 
+  /** Stuff that should move into the tire force implementation.
+   */
   void setSpringConstant(const real_type& springConstant)
   { mSpringConstant = springConstant; }
   const real_type& getSpringConstant(void) const
@@ -57,7 +66,9 @@
   MechanicLink mMechanicLink;
 
   Vector3 mPosition;
+  Vector3 mAxis;
   real_type mWheelRadius;
+
   real_type mSpringConstant;
   real_type mSpringDamping;
   real_type mFrictionCoeficient;



From frohlich at mail.berlios.de  Tue Dec  2 20:19:33 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 2 Dec 2008 20:19:33 +0100
Subject: [OpenFDM-svn] r844 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812021919.mB2JJXlv006697@sheep.berlios.de>

Author: frohlich
Date: 2008-12-02 20:19:32 +0100 (Tue, 02 Dec 2008)
New Revision: 844

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.cpp
Log:
Fix port size checking logic

M    SimpleDirectModel.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.cpp	2008-12-02 06:52:59 UTC (rev 843)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.cpp	2008-12-02 19:19:32 UTC (rev 844)
@@ -122,7 +122,7 @@
       if (sz(j) == 0) {
         sz(j) = sz2(j);
       } else {
-        if (sz(j) != sz2(j)) {
+        if (sz2(j) != 0 && sz(j) != sz2(j)) {
           Log(Initialization, Info)
             << "Port size " << j << " does not match for model \""
             << getName() << "\"!" << std::endl;



From frohlich at mail.berlios.de  Tue Dec  2 20:30:19 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 2 Dec 2008 20:30:19 +0100
Subject: [OpenFDM-svn] r845 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200812021930.mB2JUJQc007746@sheep.berlios.de>

Author: frohlich
Date: 2008-12-02 20:30:18 +0100 (Tue, 02 Dec 2008)
New Revision: 845

Modified:
   branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
Log:
Fix force input connections.

M    tiretestrig.cpp


Modified: branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2008-12-02 19:19:32 UTC (rev 844)
+++ branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2008-12-02 19:30:18 UTC (rev 845)
@@ -28,8 +28,8 @@
 public:
   MovingGround(const Vector3& linearVelocity) : mVelocity(linearVelocity)
   { }
-  virtual GroundValues getGroundPlane(const Environment&, const real_type& t,
-                                      const Vector3& refPos) const
+  virtual GroundValues getGroundPlane(const Environment&, const real_type&,
+                                      const Vector3&) const
   {
     return GroundValues(Plane(Vector3(0, 0, -1), Vector3::zeros()),
                         Vector6(Vector3::zeros(), mVelocity),
@@ -51,13 +51,13 @@
 
   PrismaticJoint* prismaticJoint = new PrismaticJoint("Normal Force joint");
   prismaticJoint->setAxis(Vector3::unit(2));
+  prismaticJoint->setEnableExternalForce(true);
   group->addChild(prismaticJoint);
 
   Summer* normalForceSum = new Summer("Normal Force Sum");
   normalForceSum->setNumSummands(2);
-  normalForceSum->setInputSign(0, Summer::Minus);
   group->addChild(normalForceSum);
-  group->connect(prismaticJoint->getPort("input"),
+  group->connect(prismaticJoint->getPort("force"),
                  normalForceSum->getPort("output"));
 
   ConstModel* normalForce = new ConstModel("Normal force");
@@ -68,7 +68,7 @@
  
   LinearSpringDamper* strutDamper = new LinearSpringDamper("Strut Damper");
   strutDamper->setSpringConstant(0);
-  strutDamper->setDamperConstant(30);
+//   strutDamper->setDamperConstant(30);
   group->addChild(strutDamper);
   group->connect(normalForceSum->getPort("input1"),
                  strutDamper->getPort("force"));
@@ -136,7 +136,7 @@
   
   WheelContact* wheelContact = new WheelContact("Wheel Contact");
   wheelContact->setWheelRadius(0.3);
-  wheelContact->setSpringConstant(20000);
+  wheelContact->setSpringConstant(100000);
   wheelContact->setSpringDamping(sqrt(wheelContact->getSpringConstant())/10);
   group->addChild(wheelContact);
   rimAndTire->addLink("link2");



From frohlich at mail.berlios.de  Tue Dec  2 21:34:58 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 2 Dec 2008 21:34:58 +0100
Subject: [OpenFDM-svn] r846 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200812022034.mB2KYwDH014087@sheep.berlios.de>

Author: frohlich
Date: 2008-12-02 21:34:58 +0100 (Tue, 02 Dec 2008)
New Revision: 846

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/LinearSpringDamper.cpp
   branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
Log:
Fix damper direction.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/LinearSpringDamper.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/LinearSpringDamper.cpp	2008-12-02 19:30:18 UTC (rev 845)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/LinearSpringDamper.cpp	2008-12-02 20:34:58 UTC (rev 846)
@@ -39,7 +39,7 @@
   real_type position = portValues[mPositionPort];
   real_type vel = portValues[mVelocityPort];
   real_type displacement = position - mSpringReference;
-  portValues[mForcePort] = mSpringConstant*displacement + vel*mDamperConstant;
+  portValues[mForcePort] = mSpringConstant*displacement - vel*mDamperConstant;
 }
 
 const real_type&

Modified: branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2008-12-02 19:30:18 UTC (rev 845)
+++ branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2008-12-02 20:34:58 UTC (rev 846)
@@ -68,7 +68,7 @@
  
   LinearSpringDamper* strutDamper = new LinearSpringDamper("Strut Damper");
   strutDamper->setSpringConstant(0);
-//   strutDamper->setDamperConstant(30);
+  strutDamper->setDamperConstant(30);
   group->addChild(strutDamper);
   group->connect(normalForceSum->getPort("input1"),
                  strutDamper->getPort("force"));
@@ -151,7 +151,7 @@
   if (!system->init())
     return 1;
 
-  system->simulate(60);
+  system->simulate(10);
   
   return EXIT_SUCCESS;
 }



From frohlich at mail.berlios.de  Tue Dec  2 22:10:57 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 2 Dec 2008 22:10:57 +0100
Subject: [OpenFDM-svn] r847 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812022110.mB2LAvJ4017079@sheep.berlios.de>

Author: frohlich
Date: 2008-12-02 22:10:57 +0100 (Tue, 02 Dec 2008)
New Revision: 847

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
Log:
Add above ground level sensing.

M    Sensor.h
M    Sensor.cpp
M    Environment.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h	2008-12-02 20:34:58 UTC (rev 846)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h	2008-12-02 21:10:57 UTC (rev 847)
@@ -110,6 +110,17 @@
     // Then we know the plane ...
     return Plane(unitDown, groundOff);
   }
+  real_type getAboveGroundLevel(const real_type& t, const Vector3& position) const
+  {
+    // Get the unit down vector.
+    Vector3 unitDown = getHorizontalLocalDown(position);
+    GroundValues groundValues = getGroundPlane(t, position);
+    Vector3 intersectPoint;
+    if (groundValues.plane.intersectLine(position, unitDown, intersectPoint))
+      return norm(intersectPoint);
+    else
+      return Limits<real_type>::max();
+  }
 
   ///////////////////////////////////////////////////////////////////////////
   // Atmosphere sensing related

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2008-12-02 20:34:58 UTC (rev 846)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2008-12-02 21:10:57 UTC (rev 847)
@@ -22,6 +22,7 @@
   DEF_OPENFDM_PROPERTY(Bool, EnableWindVelocity, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnableTemperature, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnablePressure, Serialized)
+  DEF_OPENFDM_PROPERTY(Bool, EnableAboveGroundLevel, Serialized)
   END_OPENFDM_OBJECT_DEF
 
 Sensor::Sensor(const std::string& name) :
@@ -91,6 +92,12 @@
     if (enablePressure)
       portValues[mPressurePort] = data.pressure;
   }
+
+  if (getEnableAboveGroundLevel()) {
+    real_type agl;
+    agl = environment->getAboveGroundLevel(task.getTime(), refPosition);
+    portValues[mAboveGroundLevelPort] = agl;
+  }
 }
 
 void
@@ -309,6 +316,23 @@
 }
 
 void
+Sensor::setEnableAboveGroundLevel(bool enable)
+{
+  if (enable == getEnableAboveGroundLevel())
+    return;
+  if (enable)
+    mAboveGroundLevelPort = RealOutputPort(this, "aboveGroundLevel");
+  else
+    mAboveGroundLevelPort.clear();
+}
+
+bool
+Sensor::getEnableAboveGroundLevel() const
+{
+  return !mAboveGroundLevelPort.empty();
+}
+
+void
 Sensor::setEnableAll(bool enable)
 {
   setEnablePosition(enable);
@@ -321,6 +345,7 @@
   setEnableWindVelocity(enable);
   setEnableTemperature(enable);
   setEnablePressure(enable);
+  setEnableAboveGroundLevel(enable);
 }
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2008-12-02 20:34:58 UTC (rev 846)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2008-12-02 21:10:57 UTC (rev 847)
@@ -82,6 +82,11 @@
   /// Get availabilty of the pressure output port
   bool getEnablePressure() const;
 
+  /// Set availabilty of the pressure output port
+  void setEnableAboveGroundLevel(bool enable);
+  /// Get availabilty of the pressure output port
+  bool getEnableAboveGroundLevel() const;
+
   /// Set availabilty of all output ports
   /// This is mostly for convinience in testing
   void setEnableAll(bool enable);
@@ -106,6 +111,8 @@
   RealOutputPort mTemperaturePort;
   RealOutputPort mPressurePort;
 //   RealOutputPort mDensityPort;
+
+  RealOutputPort mAboveGroundLevelPort;
 };
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Tue Dec  2 22:48:56 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 2 Dec 2008 22:48:56 +0100
Subject: [OpenFDM-svn] r848 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812022148.mB2LmuII019808@sheep.berlios.de>

Author: frohlich
Date: 2008-12-02 22:48:56 +0100 (Tue, 02 Dec 2008)
New Revision: 848

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractPlanet.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.h
Log:
Fix down vector computations.

M    src/OpenFDM/FlatPlanet.h
M    src/OpenFDM/AbstractPlanet.h
M    src/OpenFDM/Environment.h
M    src/OpenFDM/FlatPlanet.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractPlanet.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractPlanet.h	2008-12-02 21:10:57 UTC (rev 847)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractPlanet.h	2008-12-02 21:48:56 UTC (rev 848)
@@ -83,7 +83,7 @@
 
   /** Orientation of the Geodetic horizontal local frame.
    */
-  Quaternion getGeodHLOrientation(const Geodetic& pos) const;
+  virtual Quaternion getGeodHLOrientation(const Geodetic& pos) const;
 
   /** Orientation of the Geodetic horizontal local frame.
    */

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h	2008-12-02 21:10:57 UTC (rev 847)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h	2008-12-02 21:48:56 UTC (rev 848)
@@ -92,7 +92,7 @@
   Vector3 getHorizontalLocalDown(const Vector3& position) const
   {
     Quaternion hlOr = mPlanet->getGeodHLOrientation(position);
-    return hlOr.backTransform(Vector3::unit(3));
+    return hlOr.backTransform(Vector3::unit(2));
   }
   Vector3 getHorizontalLocalOffset(const Vector3& position) const
   {
@@ -110,14 +110,14 @@
     // Then we know the plane ...
     return Plane(unitDown, groundOff);
   }
-  real_type getAboveGroundLevel(const real_type& t, const Vector3& position) const
+  real_type getAboveGroundLevel(const real_type& t, const Vector3& pos) const
   {
     // Get the unit down vector.
-    Vector3 unitDown = getHorizontalLocalDown(position);
-    GroundValues groundValues = getGroundPlane(t, position);
+    Vector3 unitDown = getHorizontalLocalDown(pos);
+    GroundValues groundValues = getGroundPlane(t, pos);
     Vector3 intersectPoint;
-    if (groundValues.plane.intersectLine(position, unitDown, intersectPoint))
-      return norm(intersectPoint);
+    if (groundValues.plane.intersectLine(pos, unitDown, intersectPoint))
+      return dot(unitDown, intersectPoint - pos);
     else
       return Limits<real_type>::max();
   }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.cpp	2008-12-02 21:10:57 UTC (rev 847)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.cpp	2008-12-02 21:48:56 UTC (rev 848)
@@ -34,4 +34,10 @@
                  -geod.altitude);
 }
 
+Quaternion
+FlatPlanet::getGeodHLOrientation(const Geodetic&) const
+{
+  return Quaternion::unit();
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.h	2008-12-02 21:10:57 UTC (rev 847)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.h	2008-12-02 21:48:56 UTC (rev 848)
@@ -33,6 +33,10 @@
   /** Transform geodetic coordinates to cartesian coordinates.
    */
   virtual Vector3 toCart(const Geodetic& geod) const;
+
+  /** Orientation of the Geodetic horizontal local frame.
+   */
+  virtual Quaternion getGeodHLOrientation(const Geodetic& pos) const;
 };
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Wed Dec  3 07:21:38 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 3 Dec 2008 07:21:38 +0100
Subject: [OpenFDM-svn] r849 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812030621.mB36Lcqq013652@sheep.berlios.de>

Author: frohlich
Date: 2008-12-03 07:21:33 +0100 (Wed, 03 Dec 2008)
New Revision: 849

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractAtmosphere.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractAtmosphere.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/AtmosphereSTD1976.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/AtmosphereSTD1976.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
Log:
Add altitude sensing to the sensor.

M    src/OpenFDM/AtmosphereSTD1976.h
M    src/OpenFDM/Sensor.cpp
M    src/OpenFDM/AbstractAtmosphere.h
M    src/OpenFDM/AbstractAtmosphere.cpp
M    src/OpenFDM/Sensor.h
M    src/OpenFDM/AtmosphereSTD1976.cpp
M    src/OpenFDM/Environment.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractAtmosphere.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractAtmosphere.cpp	2008-12-02 21:48:56 UTC (rev 848)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractAtmosphere.cpp	2008-12-03 06:21:33 UTC (rev 849)
@@ -16,7 +16,7 @@
 }
 
 AtmosphereData
-AbstractAtmosphere::getData(const real_type& alt) const
+AbstractAtmosphere::getData(const real_type&, const real_type& alt) const
 {
   AtmosphereData data;
   // Sea level pressure = 101325 N/m2

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractAtmosphere.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractAtmosphere.h	2008-12-02 21:48:56 UTC (rev 848)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractAtmosphere.h	2008-12-03 06:21:33 UTC (rev 849)
@@ -62,7 +62,8 @@
   { return sqrt(getGamma(temperature)*temperature*getGasConstant()); }
 
   // Get the atmosphere data for a given altitude alt.
-  virtual AtmosphereData getData(const real_type& alt) const;
+  virtual AtmosphereData
+  getData(const real_type& t, const real_type& alt) const;
 
 protected:
   AbstractAtmosphere(const real_type& gasConstant);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AtmosphereSTD1976.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AtmosphereSTD1976.cpp	2008-12-02 21:48:56 UTC (rev 848)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AtmosphereSTD1976.cpp	2008-12-03 06:21:33 UTC (rev 849)
@@ -41,7 +41,7 @@
 }
 
 AtmosphereData
-AtmosphereSTD1976::getData(const real_type& altitude) const
+AtmosphereSTD1976::getData(const real_type&, const real_type& altitude) const
 {
   real_type alt = altitude;
   // We cannot compute data for negative altitudes, just treat them as 0 alt

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AtmosphereSTD1976.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AtmosphereSTD1976.h	2008-12-02 21:48:56 UTC (rev 848)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AtmosphereSTD1976.h	2008-12-03 06:21:33 UTC (rev 849)
@@ -35,7 +35,7 @@
   { mSlTemperature = temperature; }
 
   // Get the atmosphere data for a given height.
-  virtual AtmosphereData getData(const real_type& alt) const;
+  virtual AtmosphereData getData(const real_type&, const real_type& alt) const;
 private:
 
   static const real_type mHydrostaticConstant;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h	2008-12-02 21:48:56 UTC (rev 848)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h	2008-12-03 06:21:33 UTC (rev 849)
@@ -101,6 +101,11 @@
     return mPlanet->toCart(geod);
   }
 public:
+  real_type getAltitude(const Vector3& position) const
+  {
+    Geodetic geod = mPlanet->toGeod(position);
+    return geod.altitude;
+  }
   Plane getHorizontalLocalPlane(const Vector3& position) const
   {
     // Get the unit down vector.
@@ -124,11 +129,9 @@
 
   ///////////////////////////////////////////////////////////////////////////
   // Atmosphere sensing related
-  AtmosphereData getAtmosphereData(const Vector3& position) const
-  {
-    Geodetic geod = mPlanet->toGeod(position);
-    return mAtmosphere->getData(geod.altitude);
-  }
+  AtmosphereData
+  getAtmosphereData(const real_type& t, const real_type& altitude) const
+  { return mAtmosphere->getData(t, altitude); }
 
   ///////////////////////////////////////////////////////////////////////////
   // Intersection interaction related

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2008-12-02 21:48:56 UTC (rev 848)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2008-12-03 06:21:33 UTC (rev 849)
@@ -22,6 +22,7 @@
   DEF_OPENFDM_PROPERTY(Bool, EnableWindVelocity, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnableTemperature, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnablePressure, Serialized)
+  DEF_OPENFDM_PROPERTY(Bool, EnableAltitude, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnableAboveGroundLevel, Serialized)
   END_OPENFDM_OBJECT_DEF
 
@@ -83,14 +84,22 @@
   }
 
   // Atmosphere related sensing
+  bool enableAltitude = getEnableAltitude();
   bool enableTemperature = getEnableTemperature();
   bool enablePressure = getEnablePressure();
-  if (enableTemperature || enablePressure) {
-    AtmosphereData data = environment->getAtmosphereData(refPosition);
-    if (enableTemperature)
-      portValues[mTemperaturePort] = data.temperature;
-    if (enablePressure)
-      portValues[mPressurePort] = data.pressure;
+  if (enableAltitude || enableTemperature || enablePressure) {
+    real_type altitude = environment->getAltitude(refPosition);
+    if (enableAltitude)
+      portValues[mAltitudePort] = altitude;
+
+    if (enableTemperature || enablePressure) {
+      AtmosphereData data
+        = environment->getAtmosphereData(task.getTime(), altitude);
+      if (enableTemperature)
+        portValues[mTemperaturePort] = data.temperature;
+      if (enablePressure)
+        portValues[mPressurePort] = data.pressure;
+    }
   }
 
   if (getEnableAboveGroundLevel()) {
@@ -316,6 +325,23 @@
 }
 
 void
+Sensor::setEnableAltitude(bool enable)
+{
+  if (enable == getEnableAltitude())
+    return;
+  if (enable)
+    mAltitudePort = RealOutputPort(this, "altitude");
+  else
+    mAltitudePort.clear();
+}
+
+bool
+Sensor::getEnableAltitude() const
+{
+  return !mAltitudePort.empty();
+}
+
+void
 Sensor::setEnableAboveGroundLevel(bool enable)
 {
   if (enable == getEnableAboveGroundLevel())
@@ -345,6 +371,7 @@
   setEnableWindVelocity(enable);
   setEnableTemperature(enable);
   setEnablePressure(enable);
+  setEnableAltitude(enable);
   setEnableAboveGroundLevel(enable);
 }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2008-12-02 21:48:56 UTC (rev 848)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2008-12-03 06:21:33 UTC (rev 849)
@@ -82,9 +82,14 @@
   /// Get availabilty of the pressure output port
   bool getEnablePressure() const;
 
-  /// Set availabilty of the pressure output port
+  /// Set availabilty of the altitude output port
+  void setEnableAltitude(bool enable);
+  /// Get availabilty of the altitude output port
+  bool getEnableAltitude() const;
+
+  /// Set availabilty of the above ground level output port
   void setEnableAboveGroundLevel(bool enable);
-  /// Get availabilty of the pressure output port
+  /// Get availabilty of the above ground level output port
   bool getEnableAboveGroundLevel() const;
 
   /// Set availabilty of all output ports
@@ -112,6 +117,7 @@
   RealOutputPort mPressurePort;
 //   RealOutputPort mDensityPort;
 
+  RealOutputPort mAltitudePort;
   RealOutputPort mAboveGroundLevelPort;
 };
 



From frohlich at mail.berlios.de  Wed Dec  3 07:42:24 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 3 Dec 2008 07:42:24 +0100
Subject: [OpenFDM-svn] r850 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812030642.mB36gOMl030505@sheep.berlios.de>

Author: frohlich
Date: 2008-12-03 07:42:23 +0100 (Wed, 03 Dec 2008)
New Revision: 850

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h
Log:
Make const ponter accessors const methods.

M    Environment.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h	2008-12-03 06:21:33 UTC (rev 849)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h	2008-12-03 06:42:23 UTC (rev 850)
@@ -26,32 +26,32 @@
 
   void setInertial(const AbstractInertial* inertial)
   { mInertial = inertial; }
-  const AbstractInertial* getInertial()
+  const AbstractInertial* getInertial() const
   { return mInertial; }
 
   void setGravity(const AbstractGravity* gravity)
   { mGravity = gravity; }
-  const AbstractGravity* getGravity()
+  const AbstractGravity* getGravity() const
   { return mGravity; }
 
   void setWind(const AbstractWind* wind)
   { mWind = wind; }
-  const AbstractWind* getWind()
+  const AbstractWind* getWind() const
   { return mWind; }
 
   void setPlanet(const AbstractPlanet* planet)
   { mPlanet = planet; }
-  const AbstractPlanet* getPlanet()
+  const AbstractPlanet* getPlanet() const
   { return mPlanet; }
 
   void setAtmosphere(const AbstractAtmosphere* atmosphere)
   { mAtmosphere = atmosphere; }
-  const AbstractAtmosphere* getAtmosphere()
+  const AbstractAtmosphere* getAtmosphere() const
   { return mAtmosphere; }
 
   void setGround(const AbstractGround* ground)
   { mGround = ground; }
-  const AbstractGround* getGround()
+  const AbstractGround* getGround() const
   { return mGround; }
 
   ///////////////////////////////////////////////////////////////////////////



From frohlich at mail.berlios.de  Wed Dec  3 07:44:23 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 3 Dec 2008 07:44:23 +0100
Subject: [OpenFDM-svn] r851 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812030644.mB36iMS0032078@sheep.berlios.de>

Author: frohlich
Date: 2008-12-03 07:44:14 +0100 (Wed, 03 Dec 2008)
New Revision: 851

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractAtmosphere.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
Log:
Soundspeed and density sensing.

M    src/OpenFDM/Sensor.cpp
M    src/OpenFDM/AbstractAtmosphere.h
M    src/OpenFDM/Sensor.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractAtmosphere.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractAtmosphere.h	2008-12-03 06:42:23 UTC (rev 850)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractAtmosphere.h	2008-12-03 06:44:14 UTC (rev 851)
@@ -29,9 +29,9 @@
   { return mGasConstant; }
 
   /// Returns the specific heat ratio
-  real_type getSpecificHeatRatio(real_type temperature) const
+  real_type getSpecificHeatRatio(const real_type& temperature) const
   { return getGamma(temperature); }
-  real_type getGamma(real_type temperature) const
+  real_type getGamma(const real_type& temperature) const
   {
     // Taken from SimTurbine, converted to kelvin
     real_type a = -4.48729540632e-12;
@@ -45,7 +45,7 @@
   { return real_type(1.4); }
 
   /// Returns the specific heat constant
-  real_type getCp(real_type temperature) const
+  real_type getCp(const real_type& temperature) const
   {
     real_type gamma = getGamma(temperature);
     return getGasConstant()*gamma/(gamma-1);
@@ -58,7 +58,7 @@
   }
 
   /// Returns the soundspeed for the given temperature
-  real_type getSoundSpeed(real_type temperature) const
+  real_type getSoundSpeed(const real_type& temperature) const
   { return sqrt(getGamma(temperature)*temperature*getGasConstant()); }
 
   // Get the atmosphere data for a given altitude alt.

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2008-12-03 06:42:23 UTC (rev 850)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2008-12-03 06:44:14 UTC (rev 851)
@@ -22,6 +22,8 @@
   DEF_OPENFDM_PROPERTY(Bool, EnableWindVelocity, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnableTemperature, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnablePressure, Serialized)
+  DEF_OPENFDM_PROPERTY(Bool, EnableDensity, Serialized)
+  DEF_OPENFDM_PROPERTY(Bool, EnableSoundSpeed, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnableAltitude, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnableAboveGroundLevel, Serialized)
   END_OPENFDM_OBJECT_DEF
@@ -85,20 +87,30 @@
 
   // Atmosphere related sensing
   bool enableAltitude = getEnableAltitude();
+  
   bool enableTemperature = getEnableTemperature();
   bool enablePressure = getEnablePressure();
-  if (enableAltitude || enableTemperature || enablePressure) {
+  bool enableDensity = getEnableDensity();
+  bool enableSoundSpeed = getEnableSoundSpeed();
+  bool enableAtmosphere = (enableTemperature || enablePressure ||
+                           enableDensity || enableSoundSpeed);
+  if (enableAltitude || enableAtmosphere) {
     real_type altitude = environment->getAltitude(refPosition);
     if (enableAltitude)
       portValues[mAltitudePort] = altitude;
 
-    if (enableTemperature || enablePressure) {
-      AtmosphereData data
-        = environment->getAtmosphereData(task.getTime(), altitude);
+    if (enableAtmosphere) {
+      const AbstractAtmosphere* atmosphere = environment->getAtmosphere();
+      AtmosphereData data = atmosphere->getData(task.getTime(), altitude);
       if (enableTemperature)
         portValues[mTemperaturePort] = data.temperature;
       if (enablePressure)
         portValues[mPressurePort] = data.pressure;
+      if (enableDensity)
+        portValues[mDensityPort] = data.density;
+      if (enableSoundSpeed)
+        portValues[mSoundSpeedPort]
+          = atmosphere->getSoundSpeed(data.temperature);
     }
   }
 
@@ -325,6 +337,40 @@
 }
 
 void
+Sensor::setEnableDensity(bool enable)
+{
+  if (enable == getEnableDensity())
+    return;
+  if (enable)
+    mDensityPort = RealOutputPort(this, "density");
+  else
+    mDensityPort.clear();
+}
+
+bool
+Sensor::getEnableDensity() const
+{
+  return !mDensityPort.empty();
+}
+
+void
+Sensor::setEnableSoundSpeed(bool enable)
+{
+  if (enable == getEnableSoundSpeed())
+    return;
+  if (enable)
+    mSoundSpeedPort = RealOutputPort(this, "soundSpeed");
+  else
+    mSoundSpeedPort.clear();
+}
+
+bool
+Sensor::getEnableSoundSpeed() const
+{
+  return !mSoundSpeedPort.empty();
+}
+
+void
 Sensor::setEnableAltitude(bool enable)
 {
   if (enable == getEnableAltitude())
@@ -371,6 +417,8 @@
   setEnableWindVelocity(enable);
   setEnableTemperature(enable);
   setEnablePressure(enable);
+  setEnableDensity(enable);
+  setEnableSoundSpeed(enable);
   setEnableAltitude(enable);
   setEnableAboveGroundLevel(enable);
 }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2008-12-03 06:42:23 UTC (rev 850)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2008-12-03 06:44:14 UTC (rev 851)
@@ -82,6 +82,17 @@
   /// Get availabilty of the pressure output port
   bool getEnablePressure() const;
 
+  /// Set availabilty of the density output port
+  void setEnableDensity(bool enable);
+  /// Get availabilty of the density output port
+  bool getEnableDensity() const;
+
+  /// Set availabilty of the sound speed output port
+  void setEnableSoundSpeed(bool enable);
+  /// Get availabilty of the sound speed output port
+  bool getEnableSoundSpeed() const;
+
+
   /// Set availabilty of the altitude output port
   void setEnableAltitude(bool enable);
   /// Get availabilty of the altitude output port
@@ -92,6 +103,7 @@
   /// Get availabilty of the above ground level output port
   bool getEnableAboveGroundLevel() const;
 
+
   /// Set availabilty of all output ports
   /// This is mostly for convinience in testing
   void setEnableAll(bool enable);
@@ -115,7 +127,8 @@
 
   RealOutputPort mTemperaturePort;
   RealOutputPort mPressurePort;
-//   RealOutputPort mDensityPort;
+  RealOutputPort mDensityPort;
+  RealOutputPort mSoundSpeedPort;
 
   RealOutputPort mAltitudePort;
   RealOutputPort mAboveGroundLevelPort;



From frohlich at mail.berlios.de  Wed Dec  3 07:49:34 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 3 Dec 2008 07:49:34 +0100
Subject: [OpenFDM-svn] r852 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812030649.mB36nYJm003635@sheep.berlios.de>

Author: frohlich
Date: 2008-12-03 07:49:30 +0100 (Wed, 03 Dec 2008)
New Revision: 852

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/AeroForce.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/AeroForce.h
Log:
Remove those values from the old AeroForce implementation
that can already be sensed.

M    src/OpenFDM/AeroForce.h
M    src/OpenFDM/AeroForce.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AeroForce.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AeroForce.cpp	2008-12-03 06:44:14 UTC (rev 851)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AeroForce.cpp	2008-12-03 06:49:30 UTC (rev 852)
@@ -31,9 +31,6 @@
   addOutputPort("wingArea", this, &AeroForce::getWingArea);
   addOutputPort("coord", this, &AeroForce::getCoord);
 
-  addOutputPort("altitude", this, &AeroForce::getAltitude);
-  addOutputPort("aboveGroundLevel", this, &AeroForce::getAboveGroundLevel);
-
   addOutputPort("trueSpeed", this, &AeroForce::getTrueSpeed);
   addOutputPort("dynamicPressure", this, &AeroForce::getDynamicPressure);
   addOutputPort("alpha", this, &AeroForce::getAlpha);
@@ -43,18 +40,14 @@
 //   addOutputPort("mach", this, &AeroForce::getMach);
   addOutputPort("machNumber", this, &AeroForce::getMachNumber);
   addOutputPort("trueSpeedUW", this, &AeroForce::getTrueSpeedUW);
+
   addOutputPort("wingSpanOver2Speed", this, &AeroForce::getWingSpanOver2Speed);
   addOutputPort("coordOver2Speed", this, &AeroForce::getCoordOver2Speed);
   addOutputPort("hOverWingSpan", this, &AeroForce::getHOverWingSpan);
 
-  addOutputPort("equivalentAirSpeed", this, &AeroForce::getEquivalentAirSpeed);
-  addOutputPort("calibratedAirSpeed", this, &AeroForce::getCalibratedAirSpeed);
+//   addOutputPort("equivalentAirSpeed", this, &AeroForce::getEquivalentAirSpeed);
+//   addOutputPort("calibratedAirSpeed", this, &AeroForce::getCalibratedAirSpeed);
 
-  addOutputPort("pressure", this, &AeroForce::getPressure);
-  addOutputPort("density", this, &AeroForce::getDensity);
-  addOutputPort("soundSpeed", this, &AeroForce::getSoundSpeed);
-  addOutputPort("temperature", this, &AeroForce::getTemperature);
-
   addOutputPort("u", this, &AeroForce::getBodyU);
   addOutputPort("v", this, &AeroForce::getBodyV);
   addOutputPort("w", this, &AeroForce::getBodyW);
@@ -183,19 +176,6 @@
   return mCoord;
 }
 
-const Vector3&
-AeroForce::getRefPosition(void) const
-{
-  if (mDirtyRefPosition) {
-    // Get the position in the earth centered coordinate frame.
-    mRefPosition = mMountFrame->getRefPosition();
-    mDirtyRefPosition = false;
-  }
-  Log(ArtBody, Debug3) << "AeroForce::getRefPosition()"
-                       << trans(mRefPosition) << endl;
-  return mRefPosition;
-}
-
 const Vector6&
 AeroForce::getAirSpeed(void) const
 {
@@ -235,25 +215,25 @@
   return mTrueSpeed;
 }
 
-const real_type&
-AeroForce::getEquivalentAirSpeed(void) const
-{
-  if (mDirtyEquivalentAirSpeed)
-    computeCalEquAirspeed();
-  Log(ArtBody, Debug3) << "AeroForce::getEquivalentAirSpeed()"
-                       << mEquivalentAirSpeed << endl;
-  return mEquivalentAirSpeed;
-}
+// const real_type&
+// AeroForce::getEquivalentAirSpeed(void) const
+// {
+//   if (mDirtyEquivalentAirSpeed)
+//     computeCalEquAirspeed();
+//   Log(ArtBody, Debug3) << "AeroForce::getEquivalentAirSpeed()"
+//                        << mEquivalentAirSpeed << endl;
+//   return mEquivalentAirSpeed;
+// }
 
-const real_type&
-AeroForce::getCalibratedAirSpeed(void) const
-{
-  if (mDirtyCalibratedAirSpeed)
-    computeCalEquAirspeed();
-  Log(ArtBody, Debug3) << "AeroForce::getCalibratedAirSpeed()"
-                       << mCalibratedAirSpeed << endl;
-  return mCalibratedAirSpeed;
-}
+// const real_type&
+// AeroForce::getCalibratedAirSpeed(void) const
+// {
+//   if (mDirtyCalibratedAirSpeed)
+//     computeCalEquAirspeed();
+//   Log(ArtBody, Debug3) << "AeroForce::getCalibratedAirSpeed()"
+//                        << mCalibratedAirSpeed << endl;
+//   return mCalibratedAirSpeed;
+// }
 
 const real_type&
 AeroForce::getDynamicPressure(void) const
@@ -443,132 +423,6 @@
   return mHOverWingSpan;
 }
 
-const real_type&
-AeroForce::getAltitude(void) const
-{
-  if (mDirtyAltitude) {
-    // Get the altitude for the atmosphere.
-    Geodetic geod = getPlanet()->toGeod(getRefPosition());
-
-    // Get the Athmosphere information at this position and the given time.
-    mAltitude = geod.altitude;
-    mDirtyAltitude = false;
-  }
-  Log(ArtBody, Debug3) << "AeroForce::getAltitude() " << mAltitude << endl;
-  return mAltitude;
-}
-
-const real_type&
-AeroForce::getAboveGroundLevel(void) const
-{
-  if (mDirtyAboveGroundLevel) {
-    // Compute the intersection point with the ground plane in down direction
-    Vector3 intersectPoint;
-    if (getLocalGroundPlane().intersectLine(getPosition(), getUnitDown(),
-                                            intersectPoint)) {
-      mAboveGroundLevel = norm(intersectPoint);
-    } else {
-      // Hmm, no intersection? down must be parallel to the plane
-      // FIXME, don't know what is best here
-      mAboveGroundLevel = 1000;
-    }
-    mDirtyAboveGroundLevel = false;
-  }
-  Log(ArtBody, Debug3) << "AeroForce::getAboveGroundLevel() "
-                       << mAboveGroundLevel << endl;
-  return mAboveGroundLevel;
-}
-
-const real_type&
-AeroForce::getPressure(void) const
-{
-  computeAtmosphere();
-  Log(ArtBody, Debug3) << "AeroForce::getPressure() "
-                       << mAtmos.pressure << endl;
-  return mAtmos.pressure;
-}
-
-const real_type&
-AeroForce::getDensity(void) const
-{
-  computeAtmosphere();
-  Log(ArtBody, Debug3) << "AeroForce::getDensity() "
-                       << mAtmos.density << endl;
-  return mAtmos.density;
-}
-
-const real_type&
-AeroForce::getSoundSpeed(void) const
-{
-  computeAtmosphere();
-  Log(ArtBody, Debug3) << "AeroForce::getSoundSpeed() "
-                       << mSoundSpeed << endl;
-  return mSoundSpeed;
-}
-
-const real_type&
-AeroForce::getTemperature(void) const
-{
-  computeAtmosphere();
-  Log(ArtBody, Debug3) << "AeroForce::getTemperature() "
-                       << mAtmos.temperature << endl;
-  return mAtmos.temperature;
-}
-
-const real_type&
-AeroForce::getPressureSeaLevel(void) const
-{
-  computeSLAtmosphere();
-  return mSLAtmos.pressure;
-}
-
-const real_type&
-AeroForce::getDensitySeaLevel(void) const
-{
-  computeSLAtmosphere();
-  return mSLAtmos.density;
-}
-
-const real_type&
-AeroForce::getSoundSpeedSeaLevel(void) const
-{
-  computeSLAtmosphere();
-  return mSLSoundSpeed;
-}
-
-const real_type&
-AeroForce::getTemperatureSeaLevel(void) const
-{
-  computeSLAtmosphere();
-  return mSLAtmos.temperature;
-}
-
-const Vector3&
-AeroForce::getUnitDown(void) const
-{
-  if (mDirtyUnitDown) {
-    // Compute the geodetic unit down vector at our current position.
-    // So we will need the orientation of the horizontal local frame at our
-    // current position.
-    Quaternion gcHL = getPlanet()->getGeocHLOrientation(getRefPosition());
-    // Transform that unit down vector to the current frame.
-    mUnitDown = mMountFrame->rotFromRef(gcHL.backTransform(Vector3::unit(2)));
-    mDirtyUnitDown = false;
-  }
-  return mUnitDown;
-}
-
-const Plane&
-AeroForce::getLocalGroundPlane(void) const
-{
-  if (mDirtyLocalGroundPlane) {
-    // Transform the plane equation to the local frame.
-    mLocalGroundPlane = mMountFrame->planeFromRef(mGroundVal.plane);
-    mDirtyLocalGroundPlane = false;
-  }
-  return mLocalGroundPlane;
-}
-
 void
 AeroForce::setEnvironment(Environment* environment)
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AeroForce.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AeroForce.h	2008-12-03 06:44:14 UTC (rev 851)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AeroForce.h	2008-12-03 06:49:30 UTC (rev 852)
@@ -36,12 +36,11 @@
   void setCoord(const real_type& coord);
   const real_type& getCoord(void) const;
 
-  const Vector3& getRefPosition(void) const;
   const Vector6& getAirSpeed(void) const;
   const Vector3& getMach(void) const;
   const real_type& getTrueSpeed(void) const;
-  const real_type& getEquivalentAirSpeed(void) const;
-  const real_type& getCalibratedAirSpeed(void) const;
+//   const real_type& getEquivalentAirSpeed(void) const;
+//   const real_type& getCalibratedAirSpeed(void) const;
   const real_type& getDynamicPressure(void) const;
   const real_type& getAlpha(void) const;
   const real_type& getAlphaDot(void) const;
@@ -66,23 +65,6 @@
   const real_type& getCoordOver2Speed(void) const;
   const real_type& getHOverWingSpan(void) const;
 
-  const real_type& getAltitude(void) const;
-  const real_type& getAboveGroundLevel(void) const;
-
-  const real_type& getPressure(void) const;
-  const real_type& getDensity(void) const;
-  const real_type& getSoundSpeed(void) const;
-  const real_type& getTemperature(void) const;
-
-
-  const real_type& getPressureSeaLevel(void) const;
-  const real_type& getDensitySeaLevel(void) const;
-  const real_type& getSoundSpeedSeaLevel(void) const;
-  const real_type& getTemperatureSeaLevel(void) const;
-
-  const Vector3& getUnitDown(void) const;
-  const Plane& getLocalGroundPlane(void) const;
-
 protected:
   virtual void setEnvironment(Environment* environment);
 



From frohlich at mail.berlios.de  Wed Dec  3 21:57:22 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 3 Dec 2008 21:57:22 +0100
Subject: [OpenFDM-svn] r853 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812032057.mB3KvMRx029783@sheep.berlios.de>

Author: frohlich
Date: 2008-12-03 21:57:21 +0100 (Wed, 03 Dec 2008)
New Revision: 853

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractPlanet.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractPlanet.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.h
Log:
Refactor the planet part of the environment.

M    src/OpenFDM/FlatPlanet.h
M    src/OpenFDM/AbstractPlanet.cpp
M    src/OpenFDM/EllipticPlanet.cpp
M    src/OpenFDM/EllipticPlanet.h
M    src/OpenFDM/AbstractPlanet.h
M    src/OpenFDM/Environment.h
M    src/OpenFDM/FlatPlanet.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractPlanet.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractPlanet.cpp	2008-12-03 06:49:30 UTC (rev 852)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractPlanet.cpp	2008-12-03 20:57:21 UTC (rev 853)
@@ -4,13 +4,6 @@
 
 #include "AbstractPlanet.h"
 
-#include <iosfwd>
-
-#include "Types.h"
-#include "Math.h"
-#include "Vector.h"
-#include "Quaternion.h"
-
 namespace OpenFDM {
 
 AbstractPlanet::AbstractPlanet(void)
@@ -21,112 +14,4 @@
 {
 }
 
-Geocentric
-AbstractPlanet::toGeoc(const Vector3& cart) const
-{
-  real_type lon = (cart(0) == 0 && cart(1) == 0)
-    ? real_type(0) : atan2(cart(1), cart(0));
-  real_type nxy = sqrt(cart(0)*cart(0)+cart(1)*cart(1));
-  real_type lat = (nxy == 0 && cart(2) == 0)
-    ? real_type(0) : atan2(cart(2), nxy);
-  return Geocentric(lat, lon, norm(cart));
-}
-
-Vector3
-AbstractPlanet::toCart(const Geocentric& geoc) const
-{
-  real_type slat = sin(geoc.latitude);
-  real_type clat = cos(geoc.latitude);
-  real_type slon = sin(geoc.longitude);
-  real_type clon = cos(geoc.longitude);
-  return geoc.radius*Vector3( clat*clon, clat*slon, slat );
-}
-
-Geocentric
-AbstractPlanet::toGeoc(const Geodetic& geod) const
-{
-  return toGeoc(toCart(geod));
-}
-
-Geodetic
-AbstractPlanet::toGeod(const Geocentric& geoc) const
-{
-  return toGeod(toCart(geoc));
-}
-
-Quaternion
-AbstractPlanet::getGeodHLOrientation(const Geodetic& pos) const
-{
-  return Quaternion::fromLonLat(pos.longitude, pos.latitude);
-}
-
-Quaternion
-AbstractPlanet::getGeodHLOrientation(const Vector3& pos) const
-{
-  return getGeodHLOrientation(toGeod(pos));
-}
-
-Quaternion
-AbstractPlanet::getGeodHLOrientation(const Geocentric& pos) const
-{
-  return getGeodHLOrientation(toCart(pos));
-}
-
-Quaternion
-AbstractPlanet::getGeocHLOrientation(const Geodetic& pos) const
-{
-  return getGeocHLOrientation(toCart(pos));
-}
-
-Quaternion
-AbstractPlanet::getGeocHLOrientation(const Vector3& pos) const
-{
-  return getGeocHLOrientation(toGeoc(pos));
-}
-
-Quaternion
-AbstractPlanet::getGeocHLOrientation(const Geocentric& pos) const
-{
-  return Quaternion::fromLonLat(pos.longitude, pos.latitude);
-}
-
-Vector3
-AbstractPlanet::getGoecHLRate(const Geocentric& pos, const Vector3& ecVel) const
-{
-  Quaternion hlOrientation = getGeocHLOrientation(pos);
-  Vector3 hlVel = hlOrientation.transform(ecVel);
-  Vector3 hlRate = Vector3(hlVel(1), -hlVel(0), -hlVel(1)*tan(pos.latitude));
-  return hlOrientation.backTransform((1/pos.radius)*hlRate);
-}
-
-Vector3
-AbstractPlanet::getGoecHLRate(const Vector3& pos, const Vector3& ecVel) const
-{
-  return getGoecHLRate(toGeoc(pos), ecVel);
-}
-
-Vector3
-AbstractPlanet::getGoecHLRate(const Geodetic& pos, const Vector3& ecVel) const
-{
-  return getGoecHLRate(toCart(pos), ecVel);
-}
-
-std::ostream&
-operator<<(std::ostream& os, const Geodetic& geod)
-{
-  return os << "[ lon = " << rad2deg*geod.longitude
-            << ", lat = " << rad2deg*geod.latitude
-            << ", alt = " << geod.altitude
-            << " ]";
-}
-
-std::ostream&
-operator<<(std::ostream& os, const Geocentric& geoc)
-{
-  return os << "[ lon = " << rad2deg*geoc.longitude
-            << ", lat = " << rad2deg*geoc.latitude
-            << ", rad = " << geoc.radius
-            << " ]";
-}
-
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractPlanet.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractPlanet.h	2008-12-03 06:49:30 UTC (rev 852)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractPlanet.h	2008-12-03 20:57:21 UTC (rev 853)
@@ -5,44 +5,14 @@
 #ifndef OpenFDM_AbstractPlanet_H
 #define OpenFDM_AbstractPlanet_H
 
-#include <iosfwd>
-
 #include "Types.h"
 #include "Vector.h"
-#include "Quaternion.h"
+#include "Plane.h"
 #include "Referenced.h"
 
 namespace OpenFDM {
 
 /**
- * Datatype for the Geodetic position on some ellipsoid.
- */
-struct Geodetic {
-  Geodetic(real_type lat = 0.0, real_type lon = 0.0, real_type alt = 0.0)
-    : latitude(lat), longitude(lon), altitude(alt)
-  {}
-  real_type latitude;
-  real_type longitude;
-  real_type altitude;
-};
-
-/**
- * Datatype for a position in speric coordinates.
- */
-struct Geocentric {
-  Geocentric(real_type lat = 0.0, real_type lon = 0.0, real_type rad = 0.0)
-    : latitude(lat), longitude(lon), radius(rad)
-  {}
-  real_type latitude;
-  real_type longitude;
-  real_type radius;
-};
-
-// FIXME Find out what we need, Move the rest of the elliptic stuff in here
-// into the EllipticPlanet class.
-// We probably only need the altitude computation from the cartesian coordinates
-
-/**
  * The Planet class.
  *
  * It holds some information about the planet the simulation is running on.
@@ -57,75 +27,12 @@
    */
   virtual ~AbstractPlanet(void);
 
-  /** Transform cartesian coordinates to geodetic coordinates.
+  /** Returns the horizontal plane at zero altitude.
+   *  Plane normal points downward.
    */
-  virtual Geodetic toGeod(const Vector3& cart) const = 0;
-
-  /** Transform geodetic coordinates to cartesian coordinates.
-   */
-  virtual Vector3 toCart(const Geodetic& geod) const = 0;
-
-  /** Transform cartesian coordinates to geocentric coordinates.
-   */
-  Geocentric toGeoc(const Vector3& cart) const;
-
-  /** Transform geocentric coordinates to cartesian coordinates.
-   */
-  Vector3 toCart(const Geocentric& geoc) const;
-
-  /** Transform geocentric coordinates to geodetic coordinates.
-   */
-  Geocentric toGeoc(const Geodetic& geod) const;
-
-  /** Transform geodetic coordinates to geocentric coordinates.
-   */
-  Geodetic toGeod(const Geocentric& geoc) const;
-
-  /** Orientation of the Geodetic horizontal local frame.
-   */
-  virtual Quaternion getGeodHLOrientation(const Geodetic& pos) const;
-
-  /** Orientation of the Geodetic horizontal local frame.
-   */
-  Quaternion getGeodHLOrientation(const Vector3& pos) const;
-
-  /** Orientation of the Geodetic horizontal local frame.
-   */
-  Quaternion getGeodHLOrientation(const Geocentric& pos) const;
-
-  /** Orientation of the Geocentric horizontal local frame.
-   */
-  Quaternion getGeocHLOrientation(const Geodetic& pos) const;
-
-  /** Orientation of the Geocentric horizontal local frame.
-   */
-  Quaternion getGeocHLOrientation(const Vector3& pos) const;
-
-  /** Orientation of the Geocentric horizontal local frame.
-   */
-  Quaternion getGeocHLOrientation(const Geocentric& pos) const;
-
-  /** Rotation rate of the Geocentric horizontal local frame.
-   */
-  Vector3 getGoecHLRate(const Geocentric& pos, const Vector3& ecVel) const;
-
-  /** Rotation rate of the Geocentric horizontal local frame.
-   */
-  Vector3 getGoecHLRate(const Vector3& pos, const Vector3& ecVel) const;
-
-  /** Rotation rate of the Geocentric horizontal local frame.
-   */
-  Vector3 getGoecHLRate(const Geodetic& pos, const Vector3& ecVel) const;
+  virtual Plane getHorizont(const Vector3& position) const = 0;
 };
 
-/** Pretty printing of geodetic coordinates.
- */
-std::ostream& operator<<(std::ostream& os, const Geodetic& geod);
-
-/** Pretty printing of geocentric coordinates.
- */
-std::ostream& operator<<(std::ostream& os, const Geocentric& geoc);
-
 } // namespace OpenFDM
 
 #endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.cpp	2008-12-03 06:49:30 UTC (rev 852)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.cpp	2008-12-03 20:57:21 UTC (rev 853)
@@ -52,6 +52,15 @@
   e4 = e2*e2;
 }
 
+Plane
+EllipticPlanet::getHorizont(const Vector3& position) const
+{
+  Geodetic geodetic = toGeod(position);
+  geodetic.altitude = 0;
+  Vector down = getGeodHLOrientation(geodetic).backTransform(Vector3::unit(2));
+  return Plane(down, toCart(geodetic));
+}
+
 Geodetic
 EllipticPlanet::toGeod(const Vector3& cart) const
 {
@@ -102,4 +111,112 @@
   return Vector3(X, Y, Z);
 }
 
+Geocentric
+EllipticPlanet::toGeoc(const Vector3& cart) const
+{
+  real_type lon = (cart(0) == 0 && cart(1) == 0)
+    ? real_type(0) : atan2(cart(1), cart(0));
+  real_type nxy = sqrt(cart(0)*cart(0)+cart(1)*cart(1));
+  real_type lat = (nxy == 0 && cart(2) == 0)
+    ? real_type(0) : atan2(cart(2), nxy);
+  return Geocentric(lat, lon, norm(cart));
+}
+
+Vector3
+EllipticPlanet::toCart(const Geocentric& geoc) const
+{
+  real_type slat = sin(geoc.latitude);
+  real_type clat = cos(geoc.latitude);
+  real_type slon = sin(geoc.longitude);
+  real_type clon = cos(geoc.longitude);
+  return geoc.radius*Vector3( clat*clon, clat*slon, slat );
+}
+
+Geocentric
+EllipticPlanet::toGeoc(const Geodetic& geod) const
+{
+  return toGeoc(toCart(geod));
+}
+
+Geodetic
+EllipticPlanet::toGeod(const Geocentric& geoc) const
+{
+  return toGeod(toCart(geoc));
+}
+
+Quaternion
+EllipticPlanet::getGeodHLOrientation(const Geodetic& pos) const
+{
+  return Quaternion::fromLonLat(pos.longitude, pos.latitude);
+}
+
+Quaternion
+EllipticPlanet::getGeodHLOrientation(const Vector3& pos) const
+{
+  return getGeodHLOrientation(toGeod(pos));
+}
+
+Quaternion
+EllipticPlanet::getGeodHLOrientation(const Geocentric& pos) const
+{
+  return getGeodHLOrientation(toCart(pos));
+}
+
+Quaternion
+EllipticPlanet::getGeocHLOrientation(const Geodetic& pos) const
+{
+  return getGeocHLOrientation(toCart(pos));
+}
+
+Quaternion
+EllipticPlanet::getGeocHLOrientation(const Vector3& pos) const
+{
+  return getGeocHLOrientation(toGeoc(pos));
+}
+
+Quaternion
+EllipticPlanet::getGeocHLOrientation(const Geocentric& pos) const
+{
+  return Quaternion::fromLonLat(pos.longitude, pos.latitude);
+}
+
+Vector3
+EllipticPlanet::getGoecHLRate(const Geocentric& pos, const Vector3& ecVel) const
+{
+  Quaternion hlOrientation = getGeocHLOrientation(pos);
+  Vector3 hlVel = hlOrientation.transform(ecVel);
+  Vector3 hlRate = Vector3(hlVel(1), -hlVel(0), -hlVel(1)*tan(pos.latitude));
+  return hlOrientation.backTransform((1/pos.radius)*hlRate);
+}
+
+Vector3
+EllipticPlanet::getGoecHLRate(const Vector3& pos, const Vector3& ecVel) const
+{
+  return getGoecHLRate(toGeoc(pos), ecVel);
+}
+
+Vector3
+EllipticPlanet::getGoecHLRate(const Geodetic& pos, const Vector3& ecVel) const
+{
+  return getGoecHLRate(toCart(pos), ecVel);
+}
+
+std::ostream&
+operator<<(std::ostream& os, const Geodetic& geod)
+{
+  return os << "[ lon = " << rad2deg*geod.longitude
+            << ", lat = " << rad2deg*geod.latitude
+            << ", alt = " << geod.altitude
+            << " ]";
+}
+
+std::ostream&
+operator<<(std::ostream& os, const Geocentric& geoc)
+{
+  return os << "[ lon = " << rad2deg*geoc.longitude
+            << ", lat = " << rad2deg*geoc.latitude
+            << ", rad = " << geoc.radius
+            << " ]";
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.h	2008-12-03 06:49:30 UTC (rev 852)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.h	2008-12-03 20:57:21 UTC (rev 853)
@@ -5,6 +5,8 @@
 #ifndef OpenFDM_EllipticPlanet_H
 #define OpenFDM_EllipticPlanet_H
 
+#include <iosfwd>
+
 #include "Types.h"
 #include "Vector.h"
 #include "Quaternion.h"
@@ -13,6 +15,30 @@
 namespace OpenFDM {
 
 /**
+ * Datatype for the Geodetic position on some ellipsoid.
+ */
+struct Geodetic {
+  Geodetic(real_type lat = 0.0, real_type lon = 0.0, real_type alt = 0.0)
+    : latitude(lat), longitude(lon), altitude(alt)
+  {}
+  real_type latitude;
+  real_type longitude;
+  real_type altitude;
+};
+
+/**
+ * Datatype for a position in speric coordinates.
+ */
+struct Geocentric {
+  Geocentric(real_type lat = 0.0, real_type lon = 0.0, real_type rad = 0.0)
+    : latitude(lat), longitude(lon), radius(rad)
+  {}
+  real_type latitude;
+  real_type longitude;
+  real_type radius;
+};
+
+/**
  * The EllipticPlanet class.
  *
  * It holds some information about the planet the simulation is running on.
@@ -39,14 +65,71 @@
    */
   void setFlattening(real_type flat);
 
+  /** Returns the horizontal plane at zero altitude.
+   *  Plane normal points downward.
+   */
+  virtual Plane getHorizont(const Vector3& position) const;
+
   /** Transform cartesian coordinates to geodetic coordinates.
    */
-  virtual Geodetic toGeod(const Vector3& cart) const;
+  Geodetic toGeod(const Vector3& cart) const;
 
   /** Transform geodetic coordinates to cartesian coordinates.
    */
-  virtual Vector3 toCart(const Geodetic& geod) const;
+  Vector3 toCart(const Geodetic& geod) const;
 
+  /** Transform cartesian coordinates to geocentric coordinates.
+   */
+  Geocentric toGeoc(const Vector3& cart) const;
+
+  /** Transform geocentric coordinates to cartesian coordinates.
+   */
+  Vector3 toCart(const Geocentric& geoc) const;
+
+  /** Transform geocentric coordinates to geodetic coordinates.
+   */
+  Geocentric toGeoc(const Geodetic& geod) const;
+
+  /** Transform geodetic coordinates to geocentric coordinates.
+   */
+  Geodetic toGeod(const Geocentric& geoc) const;
+
+  /** Orientation of the Geodetic horizontal local frame.
+   */
+  Quaternion getGeodHLOrientation(const Geodetic& pos) const;
+
+  /** Orientation of the Geodetic horizontal local frame.
+   */
+  Quaternion getGeodHLOrientation(const Vector3& pos) const;
+
+  /** Orientation of the Geodetic horizontal local frame.
+   */
+  Quaternion getGeodHLOrientation(const Geocentric& pos) const;
+
+  /** Orientation of the Geocentric horizontal local frame.
+   */
+  Quaternion getGeocHLOrientation(const Geodetic& pos) const;
+
+  /** Orientation of the Geocentric horizontal local frame.
+   */
+  Quaternion getGeocHLOrientation(const Vector3& pos) const;
+
+  /** Orientation of the Geocentric horizontal local frame.
+   */
+  Quaternion getGeocHLOrientation(const Geocentric& pos) const;
+
+  /** Rotation rate of the Geocentric horizontal local frame.
+   */
+  Vector3 getGoecHLRate(const Geocentric& pos, const Vector3& ecVel) const;
+
+  /** Rotation rate of the Geocentric horizontal local frame.
+   */
+  Vector3 getGoecHLRate(const Vector3& pos, const Vector3& ecVel) const;
+
+  /** Rotation rate of the Geocentric horizontal local frame.
+   */
+  Vector3 getGoecHLRate(const Geodetic& pos, const Vector3& ecVel) const;
+
 private:
   /**
    */
@@ -57,6 +140,14 @@
   real_type e4;
 };
 
+/** Pretty printing of geodetic coordinates.
+ */
+std::ostream& operator<<(std::ostream& os, const Geodetic& geod);
+
+/** Pretty printing of geocentric coordinates.
+ */
+std::ostream& operator<<(std::ostream& os, const Geocentric& geoc);
+
 } // namespace OpenFDM
 
 #endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h	2008-12-03 06:49:30 UTC (rev 852)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h	2008-12-03 20:57:21 UTC (rev 853)
@@ -82,43 +82,14 @@
 
   ///////////////////////////////////////////////////////////////////////////
   // Planet related
-  // FIXME: find out what we really need here, may be some kind of
-  // abstract horizontal local coordinates?
-  // Is responsible for altitude computations ...
-
-  // From the planet these are so far what we need.
-  // FIXME, invent an abstraction for that, may be optimize???
-protected:
-  Vector3 getHorizontalLocalDown(const Vector3& position) const
-  {
-    Quaternion hlOr = mPlanet->getGeodHLOrientation(position);
-    return hlOr.backTransform(Vector3::unit(2));
-  }
-  Vector3 getHorizontalLocalOffset(const Vector3& position) const
-  {
-    Geodetic geod = mPlanet->toGeod(position);
-    geod.altitude = 0;
-    return mPlanet->toCart(geod);
-  }
-public:
   real_type getAltitude(const Vector3& position) const
-  {
-    Geodetic geod = mPlanet->toGeod(position);
-    return geod.altitude;
-  }
+  { return - mPlanet->getHorizont(position).getDist(position); }
   Plane getHorizontalLocalPlane(const Vector3& position) const
-  {
-    // Get the unit down vector.
-    Vector3 unitDown = getHorizontalLocalDown(position);
-    // Get the distance from the planets center.
-    Vector3 groundOff = getHorizontalLocalOffset(position);
-    // Then we know the plane ...
-    return Plane(unitDown, groundOff);
-  }
+  { return mPlanet->getHorizont(position); }
   real_type getAboveGroundLevel(const real_type& t, const Vector3& pos) const
   {
     // Get the unit down vector.
-    Vector3 unitDown = getHorizontalLocalDown(pos);
+    Vector3 unitDown = mPlanet->getHorizont(pos).getNormal();
     GroundValues groundValues = getGroundPlane(t, pos);
     Vector3 intersectPoint;
     if (groundValues.plane.intersectLine(pos, unitDown, intersectPoint))

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.cpp	2008-12-03 06:49:30 UTC (rev 852)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.cpp	2008-12-03 20:57:21 UTC (rev 853)
@@ -18,26 +18,10 @@
 {
 }
 
-Geodetic
-FlatPlanet::toGeod(const Vector3& cart) const
+Plane
+FlatPlanet::getHorizont(const Vector3& position) const
 {
-  return Geodetic(cart(0)/(111000*rad2deg),
-                  -cart(1)/(111000*rad2deg),
-                  -cart(2));
+  return Plane(Vector3::unit(2), 0);
 }
 
-Vector3
-FlatPlanet::toCart(const Geodetic& geod) const
-{
-  return Vector3(111000*rad2deg*geod.latitude,
-                 -111000*rad2deg*geod.longitude,
-                 -geod.altitude);
-}
-
-Quaternion
-FlatPlanet::getGeodHLOrientation(const Geodetic&) const
-{
-  return Quaternion::unit();
-}
-
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.h	2008-12-03 06:49:30 UTC (rev 852)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.h	2008-12-03 20:57:21 UTC (rev 853)
@@ -26,17 +26,10 @@
    */
   virtual ~FlatPlanet(void);
 
-  /** Transform cartesian coordinates to geodetic coordinates.
+  /** Returns the horizontal plane at zero altitude.
+   *  Plane normal points downward.
    */
-  virtual Geodetic toGeod(const Vector3& cart) const;
-
-  /** Transform geodetic coordinates to cartesian coordinates.
-   */
-  virtual Vector3 toCart(const Geodetic& geod) const;
-
-  /** Orientation of the Geodetic horizontal local frame.
-   */
-  virtual Quaternion getGeodHLOrientation(const Geodetic& pos) const;
+  virtual Plane getHorizont(const Vector3& position) const;
 };
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Thu Dec  4 22:54:26 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 4 Dec 2008 22:54:26 +0100
Subject: [OpenFDM-svn] r854 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812042154.mB4LsQ7X029658@sheep.berlios.de>

Author: frohlich
Date: 2008-12-04 22:54:25 +0100 (Thu, 04 Dec 2008)
New Revision: 854

Added:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Connect.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Connect.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
Log:
Improove Connect api.

M    src/OpenFDM/Group.h
M    src/OpenFDM/Makefile.am
M    src/OpenFDM/Group.cpp
A    src/OpenFDM/Connect.cpp
A    src/OpenFDM/Connect.h


Added: branches/OpenFDM-StateSeparation/src/OpenFDM/Connect.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Connect.cpp	2008-12-03 20:57:21 UTC (rev 853)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Connect.cpp	2008-12-04 21:54:25 UTC (rev 854)
@@ -0,0 +1,86 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
+ *
+ */
+
+#include "Connect.h"
+#include "Group.h"
+
+namespace OpenFDM {
+
+Connect::Connect(const Group* group) :
+  mGroup(group)
+{
+}
+
+Connect::~Connect()
+{
+}
+
+SharedPtr<const Group>
+Connect::getGroup() const
+{
+  return mGroup.lock();
+}
+
+SharedPtr<const PortInfo>
+Connect::getPortInfo0() const
+{
+  return mPortInfo0.lock();
+}
+
+bool
+Connect::setPortInfo0(const PortInfo* portInfo0)
+{
+  SharedPtr<const PortInfo> portInfo1 = mPortInfo1.lock();
+  if (!isCompatible(portInfo0, portInfo1))
+    return false;
+  mPortInfo0 = portInfo0;
+  return true;
+}
+
+SharedPtr<const PortInfo>
+Connect::getPortInfo1() const
+{
+  return mPortInfo1.lock();
+}
+
+bool
+Connect::setPortInfo1(const PortInfo* portInfo1)
+{
+  SharedPtr<const PortInfo> portInfo0 = mPortInfo0.lock();
+  if (!isCompatible(portInfo0, portInfo1))
+    return false;
+  mPortInfo1 = portInfo1;
+  return true;
+}
+
+bool
+Connect::isCompatible(const PortInfo* portInfo0, const PortInfo* portInfo1) const
+{
+  if (!portInfo0)
+    return true;
+  if (!portInfo1)
+    return true;
+  if (!isInGroup(*portInfo0))
+    return false;
+  if (!isInGroup(*portInfo1))
+    return false;
+  // Just a crude first time check if this will work in principle.
+  return portInfo0->canConnect(*portInfo1);
+}
+
+bool
+Connect::isInGroup(const PortInfo& portInfo) const
+{
+  SharedPtr<const Node> node = portInfo.getNode();
+  if (!node)
+    return false;
+  SharedPtr<const Group> group = getGroup();
+  if (!group)
+    return false;
+  if (!node->isChildOf(group))
+    return false;
+  return true;
+}
+
+} // namespace OpenFDM

Added: branches/OpenFDM-StateSeparation/src/OpenFDM/Connect.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Connect.h	2008-12-03 20:57:21 UTC (rev 853)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Connect.h	2008-12-04 21:54:25 UTC (rev 854)
@@ -0,0 +1,42 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_Connect_H
+#define OpenFDM_Connect_H
+
+#include "Node.h"
+#include "PortInfo.h"
+#include "SharedPtr.h"
+#include "WeakPtr.h"
+
+namespace OpenFDM {
+
+class Group;
+
+class Connect : public Referenced {
+public:
+  Connect(const Group* group);
+  virtual ~Connect();
+
+  SharedPtr<const Group> getGroup() const;
+
+  SharedPtr<const PortInfo> getPortInfo0() const;
+  bool setPortInfo0(const PortInfo* portInfo0);
+
+  SharedPtr<const PortInfo> getPortInfo1() const;
+  bool setPortInfo1(const PortInfo* portInfo1);
+
+protected:
+  bool isCompatible(const PortInfo* portInfo0, const PortInfo* portInfo1) const;
+  bool isInGroup(const PortInfo& portInfo) const;
+
+private:
+  WeakPtr<const Group> mGroup;
+  WeakPtr<const PortInfo> mPortInfo0;
+  WeakPtr<const PortInfo> mPortInfo1;
+};
+
+} // namespace OpenFDM
+
+#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-12-03 20:57:21 UTC (rev 853)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-12-04 21:54:25 UTC (rev 854)
@@ -35,69 +35,131 @@
 void Group::traverse(NodeVisitor& visitor)
 {
   ChildList::const_iterator i;
-  for (i = _childList.begin(); i != _childList.end(); ++i)
+  for (i = mChildList.begin(); i != mChildList.end(); ++i)
     (*i)->accept(visitor);
 }
 
 void Group::traverse(ConstNodeVisitor& visitor) const
 {
   ChildList::const_iterator i;
-  for (i = _childList.begin(); i != _childList.end(); ++i)
+  for (i = mChildList.begin(); i != mChildList.end(); ++i)
     (*i)->accept(visitor);
 }
 
 unsigned
-Group::addChild(const SharedPtr<Node>& node)
+Group::addChild(Node* node)
 {
   if (!node)
     return ~0u;
   if (!node->addParent(this))
     return ~0u;
-  _childList.push_back(node);
-  return _childList.size() - 1;
+  mChildList.push_back(node);
+  return mChildList.size() - 1;
 }
 
-bool
+void
 Group::removeChild(const Node* node)
 {
   ChildList::iterator i;
-  i = std::find(_childList.begin(), _childList.end(), node);
-  if (i == _childList.end())
-    return false;
-  _childList.erase(i);
-  return true;
+  i = std::find(mChildList.begin(), mChildList.end(), node);
+  if (i == mChildList.end())
+    return;
+  mChildList.erase(i);
 }
 
+void
+Group::removeChild(unsigned index)
+{
+  if (mChildList.size() <= index)
+    return;
+  ChildList::iterator i = mChildList.begin();
+  std::advance(i, index);
+  mChildList.erase(i);
+}
+
 unsigned
 Group::getNumChildren() const
 {
-  return _childList.size();
+  return mChildList.size();
 }
 
 unsigned
 Group::getChildNumber(const Node* node) const
 {
   ChildList::const_iterator i;
-  i = std::find(_childList.begin(), _childList.end(), node);
-  if (i == _childList.end())
+  i = std::find(mChildList.begin(), mChildList.end(), node);
+  if (i == mChildList.end())
     return ~0u;
-  return std::distance(_childList.begin(), i);
+  return std::distance(mChildList.begin(), i);
 }
 
-SharedPtr<Node>
+Node*
 Group::getChild(unsigned i)
 {
-  if (_childList.size() <= i)
+  if (mChildList.size() <= i)
     return 0;
-  return _childList[i];
+  return mChildList[i];
 }
 
-SharedPtr<const Node>
+const Node*
 Group::getChild(unsigned i) const
 {
-  if (_childList.size() <= i)
+  if (mChildList.size() <= i)
     return 0;
-  return _childList[i];
+  return mChildList[i];
 }
 
+unsigned
+Group::getNumConnects() const
+{
+  return mConnectList.size();
+}
+
+Connect*
+Group::getConnect(unsigned i)
+{
+  if (mConnectList.size() <= i)
+    return 0;
+  return mConnectList[i];
+}
+
+const Connect*
+Group::getConnect(unsigned i) const
+{
+  if (mConnectList.size() <= i)
+    return 0;
+  return mConnectList[i];
+}
+
+void
+Group::removeConnect(unsigned index)
+{
+  if (mConnectList.size() <= index)
+    return;
+  ConnectList::iterator i = mConnectList.begin();
+  std::advance(i, index);
+  mConnectList.erase(i);
+}
+
+void
+Group::removeConnect(const Connect* connect)
+{
+  ConnectList::iterator i;
+  i = std::find(mConnectList.begin(), mConnectList.end(), connect);
+  if (i == mConnectList.end())
+    return;
+  mConnectList.erase(i);
+}
+
+unsigned
+Group::getConnectNumber(const Connect* connect) const
+{
+  ConnectList::const_iterator i;
+  i = std::find(mConnectList.begin(), mConnectList.end(), connect);
+  if (i == mConnectList.end())
+    return ~0u;
+  return std::distance(mConnectList.begin(), i);
+}
+
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-03 20:57:21 UTC (rev 853)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-04 21:54:25 UTC (rev 854)
@@ -7,7 +7,7 @@
 
 #include <string>
 #include <vector>
-#include <sstream>
+#include "Connect.h"
 #include "Node.h"
 #include "PortId.h"
 #include "PortInfo.h"
@@ -31,65 +31,53 @@
 
   /// Add a new child. Returns the number of this child wthin the group
   /// on success else ~0u is returned.
-  unsigned addChild(const SharedPtr<Node>& node);
-  /// Remove the given child. Returns the true on success.
-  bool removeChild(const Node* node);
+  unsigned addChild(Node* node);
+  /// Remove the given child.
+  void removeChild(const Node* node);
+  void removeChild(unsigned i);
   /// Returns the number of children
   unsigned getNumChildren() const;
   /// Get child at index i.
-  SharedPtr<Node> getChild(unsigned i);
+  Node* getChild(unsigned i);
   /// Get child at index i.
-  SharedPtr<const Node> getChild(unsigned i) const;
+  const Node* getChild(unsigned i) const;
   /// Get child number of the given node. If the node is not contained in
   /// the group ~0u is returned.
   unsigned getChildNumber(const Node* node) const;
 
-  bool isChildPort(const PortInfo* portInfo) const
-  {
-    if (!portInfo)
-      return false;
-    SharedPtr<const Node> node = portInfo->getNode();
-    if (!node)
-      return false;
-    if (!node->isChildOf(this))
-      return false;
-    return true;
-  }
-  
-  bool connect(const PortInfo* port0, const PortInfo* port1)
-  {
-    // Make sure the models belong to this group
-    if (!isChildPort(port0))
-      return false;
-    if (!isChildPort(port1))
-      return false;
 
-    // Just a crude first time check if this will work in principle.
-    if (!port0->canConnect(*port1))
-      return false;
+  /// Connect api
+  unsigned getNumConnects() const;
+  Connect* getConnect(unsigned i);
+  const Connect* getConnect(unsigned i) const;
+  void removeConnect(unsigned i);
+  void removeConnect(const Connect* connect);
+  unsigned getConnectNumber(const Connect* connect) const;
 
-    SharedPtr<Connect> connect = new Connect;
-    connect->mPortInfo0 = port0;
-    connect->mPortInfo1 = port1;
-    _connectList.push_back(connect);
-
-    return true;
+  Connect* connect(const PortInfo* port0, const PortInfo* port1)
+  {
+    /// FIXME: more logs ...
+    SharedPtr<Connect> connect = new Connect(this);
+    if (!connect->setPortInfo0(port0))
+      return 0;
+    if (!connect->setPortInfo1(port1))
+      return 0;
+    mConnectList.push_back(connect);
+    return connect.get();
   }
 
-  unsigned getNumConnects() const
-  { return _connectList.size(); }
 
   unsigned getConnectNodeIndex0(unsigned i) const
   {
     if (getNumConnects() <= i)
       return ~0u;
-    return getChildNumber(_connectList[i]->mPortInfo0.lock()->getNode());
+    return getChildNumber(mConnectList[i]->getPortInfo0()->getNode());
   }
   unsigned getConnectNodeIndex1(unsigned i) const
   {
     if (getNumConnects() <= i)
       return ~0u;
-    return getChildNumber(_connectList[i]->mPortInfo1.lock()->getNode());
+    return getChildNumber(mConnectList[i]->getPortInfo1()->getNode());
   }
 
   SharedPtr<const PortInfo>
@@ -97,31 +85,22 @@
   {
     if (getNumConnects() <= i)
       return 0;
-    return _connectList[i]->mPortInfo0.lock();
+    return mConnectList[i]->getPortInfo0();
   }
   SharedPtr<const PortInfo>
   getConnectPortInfo1(unsigned i) const
   {
     if (getNumConnects() <= i)
       return 0;
-    return _connectList[i]->mPortInfo1.lock();
+    return mConnectList[i]->getPortInfo1();
   }
 
 private:
-
-  struct Connect : public Referenced {
-    WeakPtr<const PortInfo> mPortInfo0;
-    WeakPtr<const PortInfo> mPortInfo1;
-
-    // Where the line in the gui will be ...??
-    // std::list<Vector2> _positions;
-  };
-
   typedef std::vector<SharedPtr<Connect> > ConnectList;
-  ConnectList _connectList;
+  ConnectList mConnectList;
 
   typedef std::vector<SharedPtr<Node> > ChildList;
-  ChildList _childList;
+  ChildList mChildList;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-03 20:57:21 UTC (rev 853)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-04 21:54:25 UTC (rev 854)
@@ -25,6 +25,7 @@
   Atomic.h \
   BoolStateInfo.h \
   CentralMassGravity.h \
+  Connect.h \
   ConstNodeVisitor.h \
   ContinousStateInfo.h \
   ContinousStateInfoVector.h \
@@ -144,6 +145,7 @@
   AtmosphereSTD1976.cpp \
   Atomic.cpp \
   CentralMassGravity.cpp \
+  Connect.cpp \
   ConstNodeVisitor.cpp \
   ContinousStateValue.cpp \
   DoPri5.cpp \



From frohlich at mail.berlios.de  Fri Dec  5 07:18:46 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 5 Dec 2008 07:18:46 +0100
Subject: [OpenFDM-svn] r855 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812050618.mB56IkAM019978@sheep.berlios.de>

Author: frohlich
Date: 2008-12-05 07:18:43 +0100 (Fri, 05 Dec 2008)
New Revision: 855

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Use the Connect api in the system. Remove the legacy one.

M    src/OpenFDM/Group.h
M    src/OpenFDM/Group.cpp
M    src/OpenFDM/System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-12-04 21:54:25 UTC (rev 854)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-12-05 06:18:43 UTC (rev 855)
@@ -84,7 +84,7 @@
 }
 
 unsigned
-Group::getChildNumber(const Node* node) const
+Group::getChildIndex(const Node* node) const
 {
   ChildList::const_iterator i;
   i = std::find(mChildList.begin(), mChildList.end(), node);
@@ -152,7 +152,7 @@
 }
 
 unsigned
-Group::getConnectNumber(const Connect* connect) const
+Group::getConnectIndex(const Connect* connect) const
 {
   ConnectList::const_iterator i;
   i = std::find(mConnectList.begin(), mConnectList.end(), connect);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-04 21:54:25 UTC (rev 854)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-05 06:18:43 UTC (rev 855)
@@ -43,7 +43,7 @@
   const Node* getChild(unsigned i) const;
   /// Get child number of the given node. If the node is not contained in
   /// the group ~0u is returned.
-  unsigned getChildNumber(const Node* node) const;
+  unsigned getChildIndex(const Node* node) const;
 
 
   /// Connect api
@@ -52,7 +52,7 @@
   const Connect* getConnect(unsigned i) const;
   void removeConnect(unsigned i);
   void removeConnect(const Connect* connect);
-  unsigned getConnectNumber(const Connect* connect) const;
+  unsigned getConnectIndex(const Connect* connect) const;
 
   Connect* connect(const PortInfo* port0, const PortInfo* port1)
   {
@@ -66,35 +66,6 @@
     return connect.get();
   }
 
-
-  unsigned getConnectNodeIndex0(unsigned i) const
-  {
-    if (getNumConnects() <= i)
-      return ~0u;
-    return getChildNumber(mConnectList[i]->getPortInfo0()->getNode());
-  }
-  unsigned getConnectNodeIndex1(unsigned i) const
-  {
-    if (getNumConnects() <= i)
-      return ~0u;
-    return getChildNumber(mConnectList[i]->getPortInfo1()->getNode());
-  }
-
-  SharedPtr<const PortInfo>
-  getConnectPortInfo0(unsigned i) const
-  {
-    if (getNumConnects() <= i)
-      return 0;
-    return mConnectList[i]->getPortInfo0();
-  }
-  SharedPtr<const PortInfo>
-  getConnectPortInfo1(unsigned i) const
-  {
-    if (getNumConnects() <= i)
-      return 0;
-    return mConnectList[i]->getPortInfo1();
-  }
-
 private:
   typedef std::vector<SharedPtr<Connect> > ConnectList;
   ConnectList mConnectList;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-12-04 21:54:25 UTC (rev 854)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-12-05 06:18:43 UTC (rev 855)
@@ -816,34 +816,61 @@
     // Apply the group internal connections to the instances
     unsigned numConnects = group.getNumConnects();
     for (unsigned i = 0; i < numConnects; ++i) {
-      unsigned nodeIndex0 = group.getConnectNodeIndex0(i);
-      if (nodeIndex0 == ~0u) {
-        Log(Schedule, Error)
-          << "Cannot find node from nodeId" << std::endl;
+      SharedPtr<const Connect> connect = group.getConnect(i);
+      if (!connect) {
+        Log(Schedule, Warning) << "Zero Connect pointer #" << i
+                               << " for Group \""
+                               << Node::toNodePathName(getNodePath())
+                               << "\"" << std::endl;
         continue;
       }
-      unsigned nodeIndex1 = group.getConnectNodeIndex1(i);
-      if (nodeIndex1 == ~0u) {
-        Log(Schedule, Error)
-          << "Cannot find node from nodeId" << std::endl;
-        continue;
-      }
 
-      SharedPtr<const PortInfo> portInfo0 = group.getConnectPortInfo0(i);
+      SharedPtr<const PortInfo> portInfo0 = connect->getPortInfo0();
       if (!portInfo0) {
-        Log(Schedule, Error) << "Cannot find provider Port data node "
-                             << group.getChild(nodeIndex0)->getName()
-                             << std::endl;
+        Log(Schedule, Warning) << "Incomplete connect #" << i << " for Group \""
+                               << Node::toNodePathName(getNodePath())
+                               << "\"" << std::endl;
         continue;
       }
-      SharedPtr<const PortInfo> portInfo1 = group.getConnectPortInfo1(i);
+      SharedPtr<const PortInfo> portInfo1 = connect->getPortInfo1();
       if (!portInfo1) {
-        Log(Schedule, Error) << "Cannot find acceptor Port data node "
-                             << group.getChild(nodeIndex1)->getName()
-                             << std::endl;
+        Log(Schedule, Warning) << "Incomplete connect #" << i << " for Group \""
+                               << Node::toNodePathName(getNodePath())
+                               << "\"" << std::endl;
         continue;
       }
 
+      SharedPtr<const Node> node0 = portInfo0->getNode();
+      if (!node0) {
+        Log(Schedule, Warning) << "Dangling port #0 connected in connect #" << i
+                               << " for Group \""
+                               << Node::toNodePathName(getNodePath())
+                               << "\"" << std::endl;
+        continue;
+      }
+      SharedPtr<const Node> node1 = portInfo1->getNode();
+      if (!node1) {
+        Log(Schedule, Warning) << "Dangling port #1 connected in connect #" << i
+                               << " for Group \""
+                               << Node::toNodePathName(getNodePath())
+                               << "\"" << std::endl;
+        continue;
+      }
+      unsigned nodeIndex0 = group.getChildIndex(node0);
+      if (nodeIndex0 == ~0u) {
+        Log(Schedule, Warning) << "Node #0 does no longer belong to group \""
+                               << Node::toNodePathName(getNodePath())
+                               << "\" in connect #" << i << std::endl;
+        continue;
+      }
+      unsigned nodeIndex1 = group.getChildIndex(node1);
+      if (nodeIndex1 == ~0u) {
+        Log(Schedule, Warning) << "Node #1 does no longer belong to group \""
+                               << Node::toNodePathName(getNodePath())
+                               << "\" in connect #" << i << std::endl;
+        continue;
+      }
+
       unsigned portInfoIndex0 = portInfo0->getIndex();
       unsigned portInfoIndex1 = portInfo1->getIndex();
       if (!mInstanceDataVector[nodeIndex1]->getPortData(portInfoIndex1)->



From frohlich at mail.berlios.de  Fri Dec  5 07:26:06 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 5 Dec 2008 07:26:06 +0100
Subject: [OpenFDM-svn] r856 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812050626.mB56Q6oa023311@sheep.berlios.de>

Author: frohlich
Date: 2008-12-05 07:26:05 +0100 (Fri, 05 Dec 2008)
New Revision: 856

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
Log:
Move Group::connect into the implementation file.

M    src/OpenFDM/Group.h
M    src/OpenFDM/Group.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-12-05 06:18:43 UTC (rev 855)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-12-05 06:26:05 UTC (rev 856)
@@ -161,5 +161,16 @@
   return std::distance(mConnectList.begin(), i);
 }
 
+Connect*
+Group::connect(const PortInfo* port0, const PortInfo* port1)
+{
+  SharedPtr<Connect> connect = new Connect(this);
+  if (!connect->setPortInfo0(port0))
+    return 0;
+  if (!connect->setPortInfo1(port1))
+    return 0;
+  mConnectList.push_back(connect);
+  return connect.get();
+}
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-05 06:18:43 UTC (rev 855)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-05 06:26:05 UTC (rev 856)
@@ -53,19 +53,11 @@
   void removeConnect(unsigned i);
   void removeConnect(const Connect* connect);
   unsigned getConnectIndex(const Connect* connect) const;
+  
+  /// Create a new connect and connect the given ports with it
+  /// FIXME, this is currently the only way to get a Connect into a group ...
+  Connect* connect(const PortInfo* port0, const PortInfo* port1);
 
-  Connect* connect(const PortInfo* port0, const PortInfo* port1)
-  {
-    /// FIXME: more logs ...
-    SharedPtr<Connect> connect = new Connect(this);
-    if (!connect->setPortInfo0(port0))
-      return 0;
-    if (!connect->setPortInfo1(port1))
-      return 0;
-    mConnectList.push_back(connect);
-    return connect.get();
-  }
-
 private:
   typedef std::vector<SharedPtr<Connect> > ConnectList;
   ConnectList mConnectList;



From frohlich at mail.berlios.de  Sat Dec  6 11:00:55 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 6 Dec 2008 11:00:55 +0100
Subject: [OpenFDM-svn] r857 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200812061000.mB6A0tq2021179@sheep.berlios.de>

Author: frohlich
Date: 2008-12-06 11:00:54 +0100 (Sat, 06 Dec 2008)
New Revision: 857

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
   branches/OpenFDM-StateSeparation/src/test/foucault.cpp
   branches/OpenFDM-StateSeparation/src/test/mechanic.cpp
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
   branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
Log:
Move file extension into the actual implementation.

M    OpenFDM/HDF5SystemOutput.h
M    test/foucault.cpp
M    test/mechanic.cpp
M    test/structure.cpp
M    test/tiretestrig.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2008-12-05 06:26:05 UTC (rev 856)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2008-12-06 10:00:54 UTC (rev 857)
@@ -2,8 +2,8 @@
  *
  */
 
-#ifndef OpenFDM_HDF5Writer_H
-#define OpenFDM_HDF5Writer_H
+#ifndef OpenFDM_HDF5SystemOutput_H
+#define OpenFDM_HDF5SystemOutput_H
 
 #include <sstream>
 #include <set>
@@ -285,7 +285,7 @@
 class HDF5SystemOutput : public SystemOutput {
 public:
   HDF5SystemOutput(const std::string& filename, bool outputMechanics = true) :
-    mHDF5File(filename),
+    mHDF5File(filename + ".h5"),
     mToplevelGroup(mHDF5File, "System"),
     mTimeStream(mToplevelGroup, "t", Size(1, 1)),
     mOutputMechanics(outputMechanics)

Modified: branches/OpenFDM-StateSeparation/src/test/foucault.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2008-12-05 06:26:05 UTC (rev 856)
+++ branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2008-12-06 10:00:54 UTC (rev 857)
@@ -67,7 +67,7 @@
   system->getEnvironment()->setInertial(inertial);
   system->getEnvironment()->setPlanet(planet);
   system->getEnvironment()->setGravity(gravity);
-  system->attach(SystemOutput::newDefaultSystemOutput("foucault.h5"));
+  system->attach(SystemOutput::newDefaultSystemOutput("foucault"));
 
   if (!system->init())
     return 1;

Modified: branches/OpenFDM-StateSeparation/src/test/mechanic.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/mechanic.cpp	2008-12-05 06:26:05 UTC (rev 856)
+++ branches/OpenFDM-StateSeparation/src/test/mechanic.cpp	2008-12-06 10:00:54 UTC (rev 857)
@@ -96,7 +96,7 @@
 //   SharedPtr<System> system = new System("System", buildSimpleMechanicExample());
   SharedPtr<System> system = new System("System", buildSimpleMechanicExample2());
 
-  system->attach(SystemOutput::newDefaultSystemOutput("system.h5"));
+  system->attach(SystemOutput::newDefaultSystemOutput("mechanic"));
 
   if (!system->init())
     return 1;

Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-12-05 06:26:05 UTC (rev 856)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-12-06 10:00:54 UTC (rev 857)
@@ -10,7 +10,6 @@
 #include <OpenFDM/LibraryModel.h>
 #include <OpenFDM/Summer.h>
 #include <OpenFDM/System.h>
-#include <OpenFDM/SystemOutput.h>
 
 using namespace OpenFDM;
 

Modified: branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2008-12-05 06:26:05 UTC (rev 856)
+++ branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2008-12-06 10:00:54 UTC (rev 857)
@@ -147,7 +147,7 @@
   // set the moving ground
   system->getEnvironment()->setGround(new MovingGround(Vector3(10, 0, 0)));
 
-  system->attach(SystemOutput::newDefaultSystemOutput("tiretestrig.h5"));
+  system->attach(SystemOutput::newDefaultSystemOutput("tiretestrig"));
   if (!system->init())
     return 1;
 



From frohlich at mail.berlios.de  Sat Dec  6 11:02:34 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 6 Dec 2008 11:02:34 +0100
Subject: [OpenFDM-svn] r858 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200812061002.mB6A2Yfm021458@sheep.berlios.de>

Author: frohlich
Date: 2008-12-06 11:02:33 +0100 (Sat, 06 Dec 2008)
New Revision: 858

Added:
   branches/OpenFDM-StateSeparation/src/OpenFDM/CSVSystemOutput.h
Removed:
   branches/OpenFDM-StateSeparation/src/test/CSVWriter.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.cpp
Log:
Provide alternative default system output in case we have no hdf5 implementation.

D    src/test/CSVWriter.h
M    src/OpenFDM/SystemOutput.cpp
A    src/OpenFDM/CSVSystemOutput.h


Added: branches/OpenFDM-StateSeparation/src/OpenFDM/CSVSystemOutput.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CSVSystemOutput.h	2008-12-06 10:00:54 UTC (rev 857)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CSVSystemOutput.h	2008-12-06 10:02:33 UTC (rev 858)
@@ -0,0 +1,132 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_CSVSystemOutput_H
+#define OpenFDM_CSVSystemOutput_H
+
+#include <sstream>
+#include <set>
+#include <fstream>
+#include "Group.h"
+#include "SystemOutput.h"
+#include "ConstNodeVisitor.h"
+#include "NodeInstance.h"
+
+namespace OpenFDM {
+
+class CSVSystemOutput : public SystemOutput {
+public:
+  CSVSystemOutput(const std::string& filename) :
+    mFileStream((filename + ".csv").c_str())
+  { }
+  virtual ~CSVSystemOutput()
+  { }
+
+  virtual void output(const real_type& t)
+  {
+    mFileStream << t;
+    DumperList::iterator i;
+    for (i = mDumperList.begin(); i != mDumperList.end(); ++i) {
+      mFileStream << ',';
+      (*i)->append(mFileStream);
+    }
+    mFileStream << '\n';
+  }
+
+  virtual void attachTo(const System* system)
+  {
+    mDumperList.clear();
+    if (!system)
+      return;
+    mFileStream << "time";
+    Visitor visitor(system, mFileStream);
+    system->getNode()->accept(visitor);
+    mDumperList = visitor.mDumperList;
+    mFileStream << '\n';
+  }
+
+private:
+  std::ofstream mFileStream;
+
+  struct Dumper : public Referenced {
+    virtual ~Dumper() {}
+    virtual void append(std::ostream&) = 0;
+  };
+
+  struct MatrixDumper : public Dumper {
+    MatrixDumper(const NumericPortValue* numericPortValue, 
+                 const std::string& name) :
+      mNumericPortValue(numericPortValue)
+    { OpenFDMAssert(numericPortValue); }
+    virtual void append(std::ostream& stream)
+    {
+      Size s = size(mNumericPortValue->getValue());
+      for (unsigned i = 0; i < s(0); ++i)
+        for (unsigned j = 0; j < s(1); ++j)
+          stream << ' ' << mNumericPortValue->getValue()(i, j);
+    }
+    SharedPtr<const NumericPortValue> mNumericPortValue;
+  };
+
+  typedef std::list<SharedPtr<Dumper> > DumperList;
+  DumperList mDumperList;
+
+  class Visitor : public ConstNodeVisitor {
+  public:
+    Visitor(const System* system, std::ostream& stream) :
+      mSystem(system),
+      mStream(stream)
+    { }
+    
+    SharedPtr<const System> mSystem;
+    std::ostream& mStream;
+    
+    const AbstractNodeInstance* getNodeInstance(const NodePath& nodePath) const
+    {
+      if (!mSystem)
+        return 0;
+      return mSystem->getNodeInstance(nodePath);
+    }
+    
+    virtual void apply(const NumericPortInfo& portInfo)
+    {
+      const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
+      if (!nodeInstance)
+        return;
+      apply(portInfo, nodeInstance->getPortValue(portInfo));
+    }
+    
+    virtual void apply(const NumericPortInfo& portInfo,
+                       const NumericPortValue* numericPortValue)
+    {
+      std::string name = portInfo.getName();
+      mStream << ',' << Node::toNodePathName(getNodePath()) << '/' << name;
+      mDumperList.push_back(new MatrixDumper(numericPortValue, name));
+    }
+    
+    void appendPortValues(const Node& node)
+    {
+      if (!node.getNumPorts())
+        return;
+      node.traversePorts(*this);
+    }
+    
+    virtual void apply(const Node& node)
+    {
+      appendPortValues(node);
+    }
+    virtual void apply(const Group& group)
+    {
+      appendPortValues(group);
+      group.traverse(*this);
+    }
+    
+    typedef std::list<SharedPtr<Dumper> > DumperList;
+    DumperList mDumperList;
+  };
+};
+
+} // namespace OpenFDM
+
+#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.cpp	2008-12-06 10:00:54 UTC (rev 857)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.cpp	2008-12-06 10:02:33 UTC (rev 858)
@@ -11,6 +11,7 @@
 #ifdef HAVE_HDF5_H
 #include "HDF5SystemOutput.h"
 #endif
+#include "CSVSystemOutput.h"
 
 namespace OpenFDM {
 
@@ -30,7 +31,7 @@
 #ifdef HAVE_HDF5_H
   return new HDF5SystemOutput(filename);
 #else
-  return 0;
+  return new CSVSystemOutput(filename);
 #endif
 }
 

Deleted: branches/OpenFDM-StateSeparation/src/test/CSVWriter.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/CSVWriter.h	2008-12-06 10:00:54 UTC (rev 857)
+++ branches/OpenFDM-StateSeparation/src/test/CSVWriter.h	2008-12-06 10:02:33 UTC (rev 858)
@@ -1,55 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
- *
- */
-
-#ifndef OpenFDM_CSVWriter_H
-#define OpenFDM_CSVWriter_H
-
-#include <fstream>
-#include <OpenFDM/ModelGroup.h>
-#include <OpenFDM/ModelVisitor.h>
-#include <OpenFDM/System.h>
-
-namespace OpenFDM {
-
-class CSVWriter : public ModelVisitor {
-public:
-  CSVWriter(const std::string& filename) :
-    _csvFile(filename.c_str())
-  { }
-  virtual void apply(Model& model)
-  {
-    unsigned numOutputs = model.getNumOutputPorts();
-    for (unsigned i = 0; i < numOutputs; ++i) {
-      NumericPortProvider* numericPort = model.getOutputPort(i);
-      if (!numericPort)
-        continue;
-      PortInterface* portInterface = numericPort->getPortInterface();
-      if (!portInterface)
-        continue;
-      MatrixPortInterface* matrixPortInterface;
-      matrixPortInterface = portInterface->toMatrixPortInterface();
-      if (!matrixPortInterface)
-        continue;
-
-      const Matrix& m = matrixPortInterface->getMatrixValue();
-      for (unsigned i = 0; i < rows(m); ++i)
-        for (unsigned j = 0; j < cols(m); ++j)
-          _csvFile << ", " << m(i, j);
-    }
-  }
-  virtual void apply(ModelGroup& modelGroup)
-  { traverse(modelGroup); }
-  virtual void apply(System& system)
-  {
-    _csvFile << system.getTime();
-    ModelVisitor::apply(system);
-    _csvFile << std::endl;
-  }
-private:
-  std::ofstream _csvFile;
-};
-
-} // namespace OpenFDM
-
-#endif



From frohlich at mail.berlios.de  Sat Dec  6 11:14:46 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 6 Dec 2008 11:14:46 +0100
Subject: [OpenFDM-svn] r859 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812061014.mB6AEklW023048@sheep.berlios.de>

Author: frohlich
Date: 2008-12-06 11:14:46 +0100 (Sat, 06 Dec 2008)
New Revision: 859

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
Log:
Add a flush, to be able to see partial output files.

M    src/OpenFDM/HDF5SystemOutput.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2008-12-06 10:02:33 UTC (rev 858)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2008-12-06 10:14:46 UTC (rev 859)
@@ -147,6 +147,10 @@
     assignNewRef(id);
     return 0 <= id;
   }
+  bool flush()
+  {
+    return 0 == H5Fflush(getId(), H5F_SCOPE_LOCAL);
+  }
 };
 
 class HDFMatrix : public HDF5Object {
@@ -299,6 +303,7 @@
     DumperList::iterator i;
     for (i = mDumperList.begin(); i != mDumperList.end(); ++i)
       (*i)->append();
+    mHDF5File.flush();
   }
 
   virtual void attachTo(const System* system)



From frohlich at mail.berlios.de  Sat Dec  6 14:29:42 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 6 Dec 2008 14:29:42 +0100
Subject: [OpenFDM-svn] r860 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200812061329.mB6DTgoY025932@sheep.berlios.de>

Author: frohlich
Date: 2008-12-06 14:29:41 +0100 (Sat, 06 Dec 2008)
New Revision: 860

Removed:
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractGravity.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractGravity.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractInertial.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractInertial.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractPlanet.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/test/foucault.cpp
Log:
Retire the inertial and gravity environment.
Move that into the planet.
Crude implementations of them based on the old ones.

M    src/test/foucault.cpp
D    src/OpenFDM/AbstractGravity.h
M    src/OpenFDM/CentralMassGravity.cpp
M    src/OpenFDM/FlatPlanet.h
M    src/OpenFDM/Environment.cpp
M    src/OpenFDM/CentralMassGravity.h
M    src/OpenFDM/Makefile.am
M    src/OpenFDM/EllipticPlanet.cpp
M    src/OpenFDM/EllipticPlanet.h
M    src/OpenFDM/AbstractPlanet.h
D    src/OpenFDM/AbstractGravity.cpp
D    src/OpenFDM/AbstractInertial.h
M    src/OpenFDM/Environment.h
D    src/OpenFDM/AbstractInertial.cpp
M    src/OpenFDM/FlatPlanet.cpp


Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractGravity.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractGravity.cpp	2008-12-06 10:14:46 UTC (rev 859)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractGravity.cpp	2008-12-06 13:29:41 UTC (rev 860)
@@ -1,20 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#include "AbstractGravity.h"
-
-namespace OpenFDM {
-
-AbstractGravity::~AbstractGravity()
-{
-}
-
-Vector3
-AbstractGravity::getGravityAcceleration(const Environment&,
-                                        const Vector3&) const
-{
-  return Vector3(0, 0, 9.81);
-}
-
-} // namespace OpenFDM

Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractGravity.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractGravity.h	2008-12-06 10:14:46 UTC (rev 859)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractGravity.h	2008-12-06 13:29:41 UTC (rev 860)
@@ -1,24 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#ifndef OpenFDM_AbstractGravity_H
-#define OpenFDM_AbstractGravity_H
-
-#include "Referenced.h"
-#include "Vector.h"
-
-namespace OpenFDM {
-
-class Environment;
-
-class AbstractGravity : public Referenced {
-public:
-  virtual ~AbstractGravity();
-  virtual Vector3 getGravityAcceleration(const Environment&,
-                                         const Vector3&) const;
-};
-
-} // namespace OpenFDM
-
-#endif

Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractInertial.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractInertial.cpp	2008-12-06 10:14:46 UTC (rev 859)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractInertial.cpp	2008-12-06 13:29:41 UTC (rev 860)
@@ -1,26 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#include "AbstractInertial.h"
-
-namespace OpenFDM {
-
-AbstractInertial::~AbstractInertial()
-{
-}
-
-Vector3
-AbstractInertial::getAngularVelocity(const real_type& t) const
-{
-  // return Vector3(0, 0, pi2/(24*60*60));
-  return Vector3::zeros();
-}
-
-Vector6
-AbstractInertial::getAcceleration(const real_type& t) const
-{
-  return Vector6::zeros();
-}
-
-} // namespace OpenFDM

Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractInertial.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractInertial.h	2008-12-06 10:14:46 UTC (rev 859)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractInertial.h	2008-12-06 13:29:41 UTC (rev 860)
@@ -1,22 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#ifndef OpenFDM_AbstractInertial_H
-#define OpenFDM_AbstractInertial_H
-
-#include "Referenced.h"
-#include "Vector.h"
-
-namespace OpenFDM {
-
-class AbstractInertial : public Referenced {
-public:
-  virtual ~AbstractInertial();
-  virtual Vector3 getAngularVelocity(const real_type& t) const;
-  virtual Vector6 getAcceleration(const real_type& t) const;
-};
-
-} // namespace OpenFDM
-
-#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractPlanet.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractPlanet.h	2008-12-06 10:14:46 UTC (rev 859)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractPlanet.h	2008-12-06 13:29:41 UTC (rev 860)
@@ -31,6 +31,21 @@
    *  Plane normal points downward.
    */
   virtual Plane getHorizont(const Vector3& position) const = 0;
+
+  /** Returns the gravitational acceleration for the given position.
+   *  Note that this should not contain the effects of a non inertial
+   *  reference frame as this effect is captured by the inertial
+   *  frame methods.
+   */
+  virtual Vector3 getGravityAcceleration(const Vector3&) const = 0;
+
+  /** Return the global reference frames velocity and acceleration.
+   *  Note that these both must fit together to make the simulation
+   *  simulate something usable.
+   *  FIXME: ReferenceFrame class???
+   */
+  virtual Vector3 getAngularVelocity(const real_type& t) const = 0;
+  virtual Vector6 getAcceleration(const real_type& t) const = 0;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.cpp	2008-12-06 10:14:46 UTC (rev 859)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.cpp	2008-12-06 13:29:41 UTC (rev 860)
@@ -12,33 +12,77 @@
 
 namespace OpenFDM {
 
-CentralMassGravity::CentralMassGravity(void)
+CentralMassPlanet::CentralMassPlanet(void) :
+  mMass(5.9742e24),
+  mRadius(6371009),
+  mAngularVelocity(0, 0, pi2/(24*60*60))
 {
-  setPlanetMass(5.9742e24);
 }
 
-CentralMassGravity::~CentralMassGravity(void)
+CentralMassPlanet::~CentralMassPlanet(void)
 {
 }
 
-real_type
-CentralMassGravity::getPlanetMass(void) const
+const real_type&
+CentralMassPlanet::getMass(void) const
 {
   return mMass;
 }
 
 void
-CentralMassGravity::setPlanetMass(real_type mass)
+CentralMassPlanet::setMass(const real_type& mass)
 {
   mMass = mass;
 }
 
+const real_type&
+CentralMassPlanet::getRadius(void) const
+{
+  return mRadius;
+}
+
+void
+CentralMassPlanet::setRadius(const real_type& radius)
+{
+  mRadius = radius;
+}
+
+const Vector3&
+CentralMassPlanet::getAngularVelocity(void) const
+{
+  return mAngularVelocity;
+}
+
+void
+CentralMassPlanet::setAngularVelocity(const Vector3& angularVelocity)
+{
+  mAngularVelocity = angularVelocity;
+}
+
+Plane
+CentralMassPlanet::getHorizont(const Vector3& position) const
+{
+  Vector3 up = normalize(position);
+  return Plane(-up, mRadius*up);
+}
+
 Vector3
-CentralMassGravity::getGravityAcceleration(const Environment&,
-                                       const Vector3& cart) const
+CentralMassPlanet::getGravityAcceleration(const Vector3& cart) const
 {
   real_type dist = norm(cart);
   return (-mMass*gravity_constant/(dist*dist*dist))*cart;
 }
 
+Vector3
+CentralMassPlanet::getAngularVelocity(const real_type&) const
+{
+  return mAngularVelocity;
+}
+
+Vector6
+CentralMassPlanet::getAcceleration(const real_type&) const
+{
+  return Vector6::zeros();
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.h	2008-12-06 10:14:46 UTC (rev 859)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.h	2008-12-06 13:29:41 UTC (rev 860)
@@ -2,45 +2,78 @@
  *
  */
 
-#ifndef OpenFDM_CentralMassGravity_H
-#define OpenFDM_CentralMassGravity_H
+#ifndef OpenFDM_CentralMassPlanet_H
+#define OpenFDM_CentralMassPlanet_H
 
 #include "Types.h"
 #include "Vector.h"
-#include "AbstractGravity.h"
+#include "AbstractPlanet.h"
 
 namespace OpenFDM {
 
 /**
- * The CentralMassGravity class.
+ * The CentralMassPlanet class.
  *
  * It holds some information about the gravity the simulation is running on.
  */
-class CentralMassGravity : public AbstractGravity {
+class CentralMassPlanet : public AbstractPlanet {
 public:
   /** CentralMass constructor.
    */
-  CentralMassGravity(void);
+  CentralMassPlanet(void);
 
   /** CentralMass destructor.
    */
-  virtual ~CentralMassGravity(void);
+  virtual ~CentralMassPlanet(void);
 
   /** Get planet mass.
    */
-  real_type getPlanetMass(void) const;
+  const real_type& getMass(void) const;
 
   /** Set planet mass.
    */
-  void setPlanetMass(real_type mass);
+  void setMass(const real_type& mass);
 
-  /** Gravity acceleration at the cartesion position cart.
+  /** Get planet radius.
    */
-  virtual Vector3 getGravityAcceleration(const Environment&,
-                                         const Vector3&) const;
+  const real_type& getRadius(void) const;
 
+  /** Set planet radius.
+   */
+  void setRadius(const real_type& radius);
+
+  /** Get planets angular velocity.
+   */
+  const Vector3& getAngularVelocity(void) const;
+
+  /** Set planes angular velocity.
+   */
+  void setAngularVelocity(const Vector3& angularVelocity);
+
+
+  /** Returns the horizontal plane at zero altitude.
+   *  Plane normal points downward.
+   */
+  virtual Plane getHorizont(const Vector3& position) const;
+
+  /** Returns the gravitational acceleration for the given position.
+   *  Note that this should not contain the effects of a non inertial
+   *  reference frame as this effect is captured by the inertial
+   *  frame methods.
+   */
+  virtual Vector3 getGravityAcceleration(const Vector3&) const;
+
+  /** Return the global reference frames velocity and acceleration.
+   *  Note that these both must fit together to make the simulation
+   *  simulate something usable.
+   */
+  virtual Vector3 getAngularVelocity(const real_type& t) const;
+  virtual Vector6 getAcceleration(const real_type& t) const;
+
 private:
   real_type mMass;
+  real_type mRadius;
+  Vector3 mAngularVelocity;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.cpp	2008-12-06 10:14:46 UTC (rev 859)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.cpp	2008-12-06 13:29:41 UTC (rev 860)
@@ -4,6 +4,7 @@
 
 #include "EllipticPlanet.h"
 
+#include "Environment.h"
 #include "Types.h"
 #include "Unit.h"
 #include "Vector.h"
@@ -61,6 +62,25 @@
   return Plane(down, toCart(geodetic));
 }
 
+Vector3
+EllipticPlanet::getGravityAcceleration(const Vector3& cart) const
+{
+  real_type dist = norm(cart);
+  return (-5.9742e24*gravity_constant/(dist*dist*dist))*cart;
+}
+
+Vector3
+EllipticPlanet::getAngularVelocity(const real_type& t) const
+{
+  return Vector3(0, 0, pi2/(24*60*60));
+}
+
+Vector6
+EllipticPlanet::getAcceleration(const real_type& t) const
+{
+  return Vector6::zeros();
+}
+
 Geodetic
 EllipticPlanet::toGeod(const Vector3& cart) const
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.h	2008-12-06 10:14:46 UTC (rev 859)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.h	2008-12-06 13:29:41 UTC (rev 860)
@@ -70,6 +70,21 @@
    */
   virtual Plane getHorizont(const Vector3& position) const;
 
+  /** Returns the gravitational acceleration for the given position.
+   *  Note that this should not contain the effects of a non inertial
+   *  reference frame as this effect is captured by the inertial
+   *  frame methods.
+   */
+  virtual Vector3 getGravityAcceleration(const Vector3&) const;
+
+  /** Return the global reference frames velocity and acceleration.
+   *  Note that these both must fit together to make the simulation
+   *  simulate something usable.
+   */
+  virtual Vector3 getAngularVelocity(const real_type& t) const;
+  virtual Vector6 getAcceleration(const real_type& t) const;
+
+
   /** Transform cartesian coordinates to geodetic coordinates.
    */
   Geodetic toGeod(const Vector3& cart) const;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.cpp	2008-12-06 10:14:46 UTC (rev 859)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.cpp	2008-12-06 13:29:41 UTC (rev 860)
@@ -10,8 +10,6 @@
 namespace OpenFDM {
 
 Environment::Environment() :
-  mInertial(new AbstractInertial),
-  mGravity(new AbstractGravity),
   mWind(new AbstractWind),
   mPlanet(new FlatPlanet),
   mAtmosphere(new AtmosphereSTD1976),

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h	2008-12-06 10:14:46 UTC (rev 859)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h	2008-12-06 13:29:41 UTC (rev 860)
@@ -6,9 +6,7 @@
 #define OpenFDM_Environment_H
 
 #include "AbstractAtmosphere.h"
-#include "AbstractGravity.h"
 #include "AbstractGround.h"
-#include "AbstractInertial.h"
 #include "AbstractPlanet.h"
 #include "AbstractWind.h"
 #include "Matrix.h"
@@ -24,16 +22,6 @@
   Environment();
   virtual ~Environment();
 
-  void setInertial(const AbstractInertial* inertial)
-  { mInertial = inertial; }
-  const AbstractInertial* getInertial() const
-  { return mInertial; }
-
-  void setGravity(const AbstractGravity* gravity)
-  { mGravity = gravity; }
-  const AbstractGravity* getGravity() const
-  { return mGravity; }
-
   void setWind(const AbstractWind* wind)
   { mWind = wind; }
   const AbstractWind* getWind() const
@@ -62,16 +50,16 @@
   // Note that the acceleration and velocity must fit together to simulate
   // something useful.
   Vector3 getAngularVelocity(const real_type& t) const
-  { return mInertial->getAngularVelocity(t); }
+  { return mPlanet->getAngularVelocity(t); }
   Vector6 getAcceleration(const real_type& t) const
-  { return mInertial->getAcceleration(t); }
+  { return mPlanet->getAcceleration(t); }
 
   ///////////////////////////////////////////////////////////////////////////
   // Gravity related
 
   // The gravity acceleration vector in the global coordinate system
   Vector3 getGravityAcceleration(const Vector3& position) const
-  { return mGravity->getGravityAcceleration(*this, position); }
+  { return mPlanet->getGravityAcceleration(position); }
 
   ///////////////////////////////////////////////////////////////////////////
   // Wind sensing related
@@ -112,8 +100,6 @@
   }
 
 private:
-  SharedPtr<const AbstractInertial> mInertial;
-  SharedPtr<const AbstractGravity> mGravity;
   SharedPtr<const AbstractWind> mWind;
   SharedPtr<const AbstractPlanet> mPlanet;
   SharedPtr<const AbstractAtmosphere> mAtmosphere;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.cpp	2008-12-06 10:14:46 UTC (rev 859)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.cpp	2008-12-06 13:29:41 UTC (rev 860)
@@ -24,4 +24,22 @@
   return Plane(Vector3::unit(2), 0);
 }
 
+Vector3
+FlatPlanet::getGravityAcceleration(const Vector3&) const
+{
+  return Vector3(0, 0, 9.81);
+}
+
+Vector3
+FlatPlanet::getAngularVelocity(const real_type&) const
+{
+  return Vector3::zeros();
+}
+
+Vector6
+FlatPlanet::getAcceleration(const real_type&) const
+{
+  return Vector6::zeros();
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.h	2008-12-06 10:14:46 UTC (rev 859)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.h	2008-12-06 13:29:41 UTC (rev 860)
@@ -11,6 +11,8 @@
 
 namespace OpenFDM {
 
+class Environment;
+
 /**
  * The FlatPlanet class.
  *
@@ -30,6 +32,20 @@
    *  Plane normal points downward.
    */
   virtual Plane getHorizont(const Vector3& position) const;
+
+  /** Returns the gravitational acceleration for the given position.
+   *  Note that this should not contain the effects of a non inertial
+   *  reference frame as this effect is captured by the inertial
+   *  frame methods.
+   */
+  virtual Vector3 getGravityAcceleration(const Vector3&) const;
+
+  /** Return the global reference frames velocity and acceleration.
+   *  Note that these both must fit together to make the simulation
+   *  simulate something usable.
+   */
+  virtual Vector3 getAngularVelocity(const real_type& t) const;
+  virtual Vector6 getAcceleration(const real_type& t) const;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-06 10:14:46 UTC (rev 859)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-06 13:29:41 UTC (rev 860)
@@ -13,8 +13,6 @@
 
 OpenFDMCoreHEADERS = \
   AbstractAtmosphere.h \
-  AbstractGravity.h \
-  AbstractInertial.h \
   AbstractModel.h \
   AbstractNodeContext.h \
   AbstractNodeInstance.h \
@@ -133,9 +131,7 @@
 
 OpenFDMCoreSOURCES = \
   AbstractAtmosphere.cpp \
-  AbstractGravity.cpp \
   AbstractGround.cpp \
-  AbstractInertial.cpp \
   AbstractModel.cpp \
   AbstractNodeContext.cpp \
   AbstractNodeInstance.cpp \

Modified: branches/OpenFDM-StateSeparation/src/test/foucault.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2008-12-06 10:14:46 UTC (rev 859)
+++ branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2008-12-06 13:29:41 UTC (rev 860)
@@ -11,14 +11,6 @@
 
 using namespace OpenFDM;
 
-class EarthInertial : public AbstractInertial {
-public:
-  virtual Vector3 getAngularVelocity(const real_type& t) const
-  { return Vector3(0, 0, pi2/(24*60*60)); }
-  virtual Vector6 getAcceleration(const real_type& t) const
-  { return Vector6::zeros(); }
-};
-
 int main()
 {
   SharedPtr<EllipticPlanet> planet = new EllipticPlanet;
@@ -62,11 +54,7 @@
 
   SharedPtr<System> system = new System("System", group);
 
-  SharedPtr<EarthInertial> inertial = new EarthInertial;
-  SharedPtr<CentralMassGravity> gravity = new CentralMassGravity;
-  system->getEnvironment()->setInertial(inertial);
   system->getEnvironment()->setPlanet(planet);
-  system->getEnvironment()->setGravity(gravity);
   system->attach(SystemOutput::newDefaultSystemOutput("foucault"));
 
   if (!system->init())



From frohlich at mail.berlios.de  Sat Dec  6 14:36:30 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 6 Dec 2008 14:36:30 +0100
Subject: [OpenFDM-svn] r861 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200812061336.mB6DaUbl026905@sheep.berlios.de>

Author: frohlich
Date: 2008-12-06 14:36:29 +0100 (Sat, 06 Dec 2008)
New Revision: 861

Added:
   branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.h
Removed:
   branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/test/foucault.cpp
Log:
Rename the intermediate CentralMass... to SphereicalEarth

M    src/test/foucault.cpp
D    src/OpenFDM/CentralMassGravity.cpp
D    src/OpenFDM/CentralMassGravity.h
M    src/OpenFDM/Makefile.am
A    src/OpenFDM/SphericalEarth.cpp
A    src/OpenFDM/SphericalEarth.h


Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.cpp	2008-12-06 13:29:41 UTC (rev 860)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.cpp	2008-12-06 13:36:29 UTC (rev 861)
@@ -1,88 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#include "CentralMassGravity.h"
-
-#include "Types.h"
-#include "Object.h"
-#include "Unit.h"
-#include "Vector.h"
-#include "Quaternion.h"
-
-namespace OpenFDM {
-
-CentralMassPlanet::CentralMassPlanet(void) :
-  mMass(5.9742e24),
-  mRadius(6371009),
-  mAngularVelocity(0, 0, pi2/(24*60*60))
-{
-}
-
-CentralMassPlanet::~CentralMassPlanet(void)
-{
-}
-
-const real_type&
-CentralMassPlanet::getMass(void) const
-{
-  return mMass;
-}
-
-void
-CentralMassPlanet::setMass(const real_type& mass)
-{
-  mMass = mass;
-}
-
-const real_type&
-CentralMassPlanet::getRadius(void) const
-{
-  return mRadius;
-}
-
-void
-CentralMassPlanet::setRadius(const real_type& radius)
-{
-  mRadius = radius;
-}
-
-const Vector3&
-CentralMassPlanet::getAngularVelocity(void) const
-{
-  return mAngularVelocity;
-}
-
-void
-CentralMassPlanet::setAngularVelocity(const Vector3& angularVelocity)
-{
-  mAngularVelocity = angularVelocity;
-}
-
-Plane
-CentralMassPlanet::getHorizont(const Vector3& position) const
-{
-  Vector3 up = normalize(position);
-  return Plane(-up, mRadius*up);
-}
-
-Vector3
-CentralMassPlanet::getGravityAcceleration(const Vector3& cart) const
-{
-  real_type dist = norm(cart);
-  return (-mMass*gravity_constant/(dist*dist*dist))*cart;
-}
-
-Vector3
-CentralMassPlanet::getAngularVelocity(const real_type&) const
-{
-  return mAngularVelocity;
-}
-
-Vector6
-CentralMassPlanet::getAcceleration(const real_type&) const
-{
-  return Vector6::zeros();
-}
-
-} // namespace OpenFDM

Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.h	2008-12-06 13:29:41 UTC (rev 860)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.h	2008-12-06 13:36:29 UTC (rev 861)
@@ -1,81 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#ifndef OpenFDM_CentralMassPlanet_H
-#define OpenFDM_CentralMassPlanet_H
-
-#include "Types.h"
-#include "Vector.h"
-#include "AbstractPlanet.h"
-
-namespace OpenFDM {
-
-/**
- * The CentralMassPlanet class.
- *
- * It holds some information about the gravity the simulation is running on.
- */
-class CentralMassPlanet : public AbstractPlanet {
-public:
-  /** CentralMass constructor.
-   */
-  CentralMassPlanet(void);
-
-  /** CentralMass destructor.
-   */
-  virtual ~CentralMassPlanet(void);
-
-  /** Get planet mass.
-   */
-  const real_type& getMass(void) const;
-
-  /** Set planet mass.
-   */
-  void setMass(const real_type& mass);
-
-  /** Get planet radius.
-   */
-  const real_type& getRadius(void) const;
-
-  /** Set planet radius.
-   */
-  void setRadius(const real_type& radius);
-
-  /** Get planets angular velocity.
-   */
-  const Vector3& getAngularVelocity(void) const;
-
-  /** Set planes angular velocity.
-   */
-  void setAngularVelocity(const Vector3& angularVelocity);
-
-
-  /** Returns the horizontal plane at zero altitude.
-   *  Plane normal points downward.
-   */
-  virtual Plane getHorizont(const Vector3& position) const;
-
-  /** Returns the gravitational acceleration for the given position.
-   *  Note that this should not contain the effects of a non inertial
-   *  reference frame as this effect is captured by the inertial
-   *  frame methods.
-   */
-  virtual Vector3 getGravityAcceleration(const Vector3&) const;
-
-  /** Return the global reference frames velocity and acceleration.
-   *  Note that these both must fit together to make the simulation
-   *  simulate something usable.
-   */
-  virtual Vector3 getAngularVelocity(const real_type& t) const;
-  virtual Vector6 getAcceleration(const real_type& t) const;
-
-private:
-  real_type mMass;
-  real_type mRadius;
-  Vector3 mAngularVelocity;
-};
-
-} // namespace OpenFDM
-
-#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-06 13:29:41 UTC (rev 860)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-06 13:36:29 UTC (rev 861)
@@ -22,7 +22,6 @@
   Assert.h \
   Atomic.h \
   BoolStateInfo.h \
-  CentralMassGravity.h \
   Connect.h \
   ConstNodeVisitor.h \
   ContinousStateInfo.h \
@@ -104,6 +103,7 @@
   SampleTime.h \
   ScopeLock.h \
   SharedPtr.h \
+  SphericalEarth.h \
   StateStream.h \
   StateInfo.h \
   StateInfoVector.h \
@@ -140,7 +140,6 @@
   Assert.cpp \
   AtmosphereSTD1976.cpp \
   Atomic.cpp \
-  CentralMassGravity.cpp \
   Connect.cpp \
   ConstNodeVisitor.cpp \
   ContinousStateValue.cpp \
@@ -180,6 +179,7 @@
   PortValue.cpp \
   RigidBody.cpp \
   RootJoint.cpp \
+  SphericalEarth.cpp \
   StateValue.cpp \
   System.cpp \
   SystemOutput.cpp \

Copied: branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.cpp (from rev 860, branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.cpp)
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.cpp	2008-12-06 13:29:41 UTC (rev 860)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.cpp	2008-12-06 13:36:29 UTC (rev 861)
@@ -0,0 +1,88 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
+ *
+ */
+
+#include "SphericalEarth.h"
+
+#include "Types.h"
+#include "Object.h"
+#include "Unit.h"
+#include "Vector.h"
+#include "Quaternion.h"
+
+namespace OpenFDM {
+
+SphericalEarth::SphericalEarth(void) :
+  mMass(5.9742e24),
+  mRadius(6371009),
+  mAngularVelocity(0, 0, pi2/(24*60*60))
+{
+}
+
+SphericalEarth::~SphericalEarth(void)
+{
+}
+
+const real_type&
+SphericalEarth::getMass(void) const
+{
+  return mMass;
+}
+
+void
+SphericalEarth::setMass(const real_type& mass)
+{
+  mMass = mass;
+}
+
+const real_type&
+SphericalEarth::getRadius(void) const
+{
+  return mRadius;
+}
+
+void
+SphericalEarth::setRadius(const real_type& radius)
+{
+  mRadius = radius;
+}
+
+const Vector3&
+SphericalEarth::getAngularVelocity(void) const
+{
+  return mAngularVelocity;
+}
+
+void
+SphericalEarth::setAngularVelocity(const Vector3& angularVelocity)
+{
+  mAngularVelocity = angularVelocity;
+}
+
+Plane
+SphericalEarth::getHorizont(const Vector3& position) const
+{
+  Vector3 up = normalize(position);
+  return Plane(-up, mRadius*up);
+}
+
+Vector3
+SphericalEarth::getGravityAcceleration(const Vector3& cart) const
+{
+  real_type dist = norm(cart);
+  return (-mMass*gravity_constant/(dist*dist*dist))*cart;
+}
+
+Vector3
+SphericalEarth::getAngularVelocity(const real_type&) const
+{
+  return mAngularVelocity;
+}
+
+Vector6
+SphericalEarth::getAcceleration(const real_type&) const
+{
+  return Vector6::zeros();
+}
+
+} // namespace OpenFDM

Copied: branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.h (from rev 860, branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.h)
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CentralMassGravity.h	2008-12-06 13:29:41 UTC (rev 860)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.h	2008-12-06 13:36:29 UTC (rev 861)
@@ -0,0 +1,81 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_SphericalEarth_H
+#define OpenFDM_SphericalEarth_H
+
+#include "Types.h"
+#include "Vector.h"
+#include "AbstractPlanet.h"
+
+namespace OpenFDM {
+
+/**
+ * The SphericalEarth class.
+ *
+ * It holds some information about the gravity the simulation is running on.
+ */
+class SphericalEarth : public AbstractPlanet {
+public:
+  /** CentralMass constructor.
+   */
+  SphericalEarth(void);
+
+  /** CentralMass destructor.
+   */
+  virtual ~SphericalEarth(void);
+
+  /** Get planet mass.
+   */
+  const real_type& getMass(void) const;
+
+  /** Set planet mass.
+   */
+  void setMass(const real_type& mass);
+
+  /** Get planet radius.
+   */
+  const real_type& getRadius(void) const;
+
+  /** Set planet radius.
+   */
+  void setRadius(const real_type& radius);
+
+  /** Get planets angular velocity.
+   */
+  const Vector3& getAngularVelocity(void) const;
+
+  /** Set planes angular velocity.
+   */
+  void setAngularVelocity(const Vector3& angularVelocity);
+
+
+  /** Returns the horizontal plane at zero altitude.
+   *  Plane normal points downward.
+   */
+  virtual Plane getHorizont(const Vector3& position) const;
+
+  /** Returns the gravitational acceleration for the given position.
+   *  Note that this should not contain the effects of a non inertial
+   *  reference frame as this effect is captured by the inertial
+   *  frame methods.
+   */
+  virtual Vector3 getGravityAcceleration(const Vector3&) const;
+
+  /** Return the global reference frames velocity and acceleration.
+   *  Note that these both must fit together to make the simulation
+   *  simulate something usable.
+   */
+  virtual Vector3 getAngularVelocity(const real_type& t) const;
+  virtual Vector6 getAcceleration(const real_type& t) const;
+
+private:
+  real_type mMass;
+  real_type mRadius;
+  Vector3 mAngularVelocity;
+};
+
+} // namespace OpenFDM
+
+#endif

Modified: branches/OpenFDM-StateSeparation/src/test/foucault.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2008-12-06 13:29:41 UTC (rev 860)
+++ branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2008-12-06 13:36:29 UTC (rev 861)
@@ -7,7 +7,6 @@
 #include <OpenFDM/System.h>
 #include <OpenFDM/SystemOutput.h>
 #include <OpenFDM/EllipticPlanet.h>
-#include <OpenFDM/CentralMassGravity.h>
 
 using namespace OpenFDM;
 



From frohlich at mail.berlios.de  Sat Dec  6 14:50:05 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 6 Dec 2008 14:50:05 +0100
Subject: [OpenFDM-svn] r862 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200812061350.mB6Do5tB028084@sheep.berlios.de>

Author: frohlich
Date: 2008-12-06 14:50:04 +0100 (Sat, 06 Dec 2008)
New Revision: 862

Added:
   branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.h
Removed:
   branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.h
   branches/OpenFDM-StateSeparation/src/test/foucault.cpp
Log:
Distribute sperical and elliptical stuff across the planets.

M    src/test/foucault.cpp
A    src/OpenFDM/WGS84Planet.h
M    src/OpenFDM/Makefile.am
D    src/OpenFDM/EllipticPlanet.cpp
M    src/OpenFDM/SphericalEarth.cpp
D    src/OpenFDM/EllipticPlanet.h
M    src/OpenFDM/SphericalEarth.h
A    src/OpenFDM/WGS84Planet.cpp


Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.cpp	2008-12-06 13:36:29 UTC (rev 861)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.cpp	2008-12-06 13:50:04 UTC (rev 862)
@@ -1,242 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#include "EllipticPlanet.h"
-
-#include "Environment.h"
-#include "Types.h"
-#include "Unit.h"
-#include "Vector.h"
-#include "Quaternion.h"
-
-namespace OpenFDM {
-
-EllipticPlanet::EllipticPlanet(void)
-{
-  // values taken from simgear
-  setAequatorialRadius(6378137.0);
-  setFlattening(298.257223563);
-
-  // Major semi axis or Aequatorial Radius is called a
-  // Minor semi axis or polar radius is called b.
-  // The the flattening f is defined by f = (a-b)/a.
-  // For our earth these parameters are.
-  //  a = 6378137.0
-  //  b = 6356752.3142
-  //  f = 1/298.257223563
-}
-
-EllipticPlanet::~EllipticPlanet(void)
-{
-}
-
-real_type
-EllipticPlanet::getAequatorialRadius(void) const
-{
-  return a;
-}
-
-void
-EllipticPlanet::setAequatorialRadius(real_type r)
-{
-  a = r;
-  ra2 = 1/(a*a);
-}
-
-void
-EllipticPlanet::setFlattening(real_type flat)
-{
-  real_type squash = 1 - 1/flat;
-  e2 = fabs(1 - squash*squash);
-  e = sqrt(e2);
-  e4 = e2*e2;
-}
-
-Plane
-EllipticPlanet::getHorizont(const Vector3& position) const
-{
-  Geodetic geodetic = toGeod(position);
-  geodetic.altitude = 0;
-  Vector down = getGeodHLOrientation(geodetic).backTransform(Vector3::unit(2));
-  return Plane(down, toCart(geodetic));
-}
-
-Vector3
-EllipticPlanet::getGravityAcceleration(const Vector3& cart) const
-{
-  real_type dist = norm(cart);
-  return (-5.9742e24*gravity_constant/(dist*dist*dist))*cart;
-}
-
-Vector3
-EllipticPlanet::getAngularVelocity(const real_type& t) const
-{
-  return Vector3(0, 0, pi2/(24*60*60));
-}
-
-Vector6
-EllipticPlanet::getAcceleration(const real_type& t) const
-{
-  return Vector6::zeros();
-}
-
-Geodetic
-EllipticPlanet::toGeod(const Vector3& cart) const
-{
-  // according to
-  // H. Vermeille,
-  // Direct transformation from geocentric to geodetic ccordinates,
-  // Journal of Geodesy (2002) 76:451-454
-  real_type X = cart(0);
-  real_type Y = cart(1);
-  real_type Z = cart(2);
-  real_type XXpYY = X*X+Y*Y;
-  real_type sqrtXXpYY = sqrt(XXpYY);
-  real_type p = XXpYY*ra2;
-  real_type q = Z*Z*(1-e*e)*ra2;
-  real_type r = 1.0/6.0*(p+q-e4);
-  real_type s = e4*p*q/(4.0*r*r*r);
-  real_type t = pow(1.0+s+sqrt(s*(2.0+s)), real_type(1)/3);
-  real_type u = r*(1.0+t+1.0/t);
-  real_type v = sqrt(u*u+e4*q);
-  real_type w = e2*(u+v-q)/(2.0*v);
-  real_type k = sqrt(u+v+w*w)-w;
-  real_type D = k*sqrtXXpYY/(k+e2);
-  real_type lambda = 2.0*atan2(Y, X+sqrtXXpYY);
-  real_type sqrtDDpZZ = sqrt(D*D+Z*Z);
-  real_type phi = 2.0*atan2(Z, D+sqrtDDpZZ);
-  real_type h = (k+e2-1)*sqrtDDpZZ/k;
-  return Geodetic(phi, lambda, h);
-}
-
-Vector3
-EllipticPlanet::toCart(const Geodetic& geod) const
-{
-  // according to
-  // H. Vermeille,
-  // Direct transformation from geocentric to geodetic ccordinates,
-  // Journal of Geodesy (2002) 76:451-454
-  real_type lambda = geod.longitude;
-  real_type phi = geod.latitude;
-  real_type h = geod.altitude;
-  real_type sphi = sin(phi);
-  real_type n = a/sqrt(1.0-e2*sphi*sphi);
-  real_type cphi = cos(phi);
-  real_type slambda = sin(lambda);
-  real_type clambda = cos(lambda);
-  real_type X = (h+n)*cphi*clambda;
-  real_type Y = (h+n)*cphi*slambda;
-  real_type Z = (h+n-e2*n)*sphi;
-  return Vector3(X, Y, Z);
-}
-
-Geocentric
-EllipticPlanet::toGeoc(const Vector3& cart) const
-{
-  real_type lon = (cart(0) == 0 && cart(1) == 0)
-    ? real_type(0) : atan2(cart(1), cart(0));
-  real_type nxy = sqrt(cart(0)*cart(0)+cart(1)*cart(1));
-  real_type lat = (nxy == 0 && cart(2) == 0)
-    ? real_type(0) : atan2(cart(2), nxy);
-  return Geocentric(lat, lon, norm(cart));
-}
-
-Vector3
-EllipticPlanet::toCart(const Geocentric& geoc) const
-{
-  real_type slat = sin(geoc.latitude);
-  real_type clat = cos(geoc.latitude);
-  real_type slon = sin(geoc.longitude);
-  real_type clon = cos(geoc.longitude);
-  return geoc.radius*Vector3( clat*clon, clat*slon, slat );
-}
-
-Geocentric
-EllipticPlanet::toGeoc(const Geodetic& geod) const
-{
-  return toGeoc(toCart(geod));
-}
-
-Geodetic
-EllipticPlanet::toGeod(const Geocentric& geoc) const
-{
-  return toGeod(toCart(geoc));
-}
-
-Quaternion
-EllipticPlanet::getGeodHLOrientation(const Geodetic& pos) const
-{
-  return Quaternion::fromLonLat(pos.longitude, pos.latitude);
-}
-
-Quaternion
-EllipticPlanet::getGeodHLOrientation(const Vector3& pos) const
-{
-  return getGeodHLOrientation(toGeod(pos));
-}
-
-Quaternion
-EllipticPlanet::getGeodHLOrientation(const Geocentric& pos) const
-{
-  return getGeodHLOrientation(toCart(pos));
-}
-
-Quaternion
-EllipticPlanet::getGeocHLOrientation(const Geodetic& pos) const
-{
-  return getGeocHLOrientation(toCart(pos));
-}
-
-Quaternion
-EllipticPlanet::getGeocHLOrientation(const Vector3& pos) const
-{
-  return getGeocHLOrientation(toGeoc(pos));
-}
-
-Quaternion
-EllipticPlanet::getGeocHLOrientation(const Geocentric& pos) const
-{
-  return Quaternion::fromLonLat(pos.longitude, pos.latitude);
-}
-
-Vector3
-EllipticPlanet::getGoecHLRate(const Geocentric& pos, const Vector3& ecVel) const
-{
-  Quaternion hlOrientation = getGeocHLOrientation(pos);
-  Vector3 hlVel = hlOrientation.transform(ecVel);
-  Vector3 hlRate = Vector3(hlVel(1), -hlVel(0), -hlVel(1)*tan(pos.latitude));
-  return hlOrientation.backTransform((1/pos.radius)*hlRate);
-}
-
-Vector3
-EllipticPlanet::getGoecHLRate(const Vector3& pos, const Vector3& ecVel) const
-{
-  return getGoecHLRate(toGeoc(pos), ecVel);
-}
-
-Vector3
-EllipticPlanet::getGoecHLRate(const Geodetic& pos, const Vector3& ecVel) const
-{
-  return getGoecHLRate(toCart(pos), ecVel);
-}
-
-std::ostream&
-operator<<(std::ostream& os, const Geodetic& geod)
-{
-  return os << "[ lon = " << rad2deg*geod.longitude
-            << ", lat = " << rad2deg*geod.latitude
-            << ", alt = " << geod.altitude
-            << " ]";
-}
-
-std::ostream&
-operator<<(std::ostream& os, const Geocentric& geoc)
-{
-  return os << "[ lon = " << rad2deg*geoc.longitude
-            << ", lat = " << rad2deg*geoc.latitude
-            << ", rad = " << geoc.radius
-            << " ]";
-}
-
-} // namespace OpenFDM

Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.h	2008-12-06 13:36:29 UTC (rev 861)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.h	2008-12-06 13:50:04 UTC (rev 862)
@@ -1,168 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#ifndef OpenFDM_EllipticPlanet_H
-#define OpenFDM_EllipticPlanet_H
-
-#include <iosfwd>
-
-#include "Types.h"
-#include "Vector.h"
-#include "Quaternion.h"
-#include "AbstractPlanet.h"
-
-namespace OpenFDM {
-
-/**
- * Datatype for the Geodetic position on some ellipsoid.
- */
-struct Geodetic {
-  Geodetic(real_type lat = 0.0, real_type lon = 0.0, real_type alt = 0.0)
-    : latitude(lat), longitude(lon), altitude(alt)
-  {}
-  real_type latitude;
-  real_type longitude;
-  real_type altitude;
-};
-
-/**
- * Datatype for a position in speric coordinates.
- */
-struct Geocentric {
-  Geocentric(real_type lat = 0.0, real_type lon = 0.0, real_type rad = 0.0)
-    : latitude(lat), longitude(lon), radius(rad)
-  {}
-  real_type latitude;
-  real_type longitude;
-  real_type radius;
-};
-
-/**
- * The EllipticPlanet class.
- *
- * It holds some information about the planet the simulation is running on.
- */
-class EllipticPlanet : public AbstractPlanet {
-public:
-  /** Elliptic constructor.
-   */
-  EllipticPlanet(void);
-
-  /** Elliptic destructor.
-   */
-  virtual ~EllipticPlanet(void);
-
-  /** Get aequatorial radius.
-   */
-  real_type getAequatorialRadius(void) const;
-
-  /** Set aequatorial radius.
-   */
-  void setAequatorialRadius(real_type r);
-
-  /** Set planet flattening.
-   */
-  void setFlattening(real_type flat);
-
-  /** Returns the horizontal plane at zero altitude.
-   *  Plane normal points downward.
-   */
-  virtual Plane getHorizont(const Vector3& position) const;
-
-  /** Returns the gravitational acceleration for the given position.
-   *  Note that this should not contain the effects of a non inertial
-   *  reference frame as this effect is captured by the inertial
-   *  frame methods.
-   */
-  virtual Vector3 getGravityAcceleration(const Vector3&) const;
-
-  /** Return the global reference frames velocity and acceleration.
-   *  Note that these both must fit together to make the simulation
-   *  simulate something usable.
-   */
-  virtual Vector3 getAngularVelocity(const real_type& t) const;
-  virtual Vector6 getAcceleration(const real_type& t) const;
-
-
-  /** Transform cartesian coordinates to geodetic coordinates.
-   */
-  Geodetic toGeod(const Vector3& cart) const;
-
-  /** Transform geodetic coordinates to cartesian coordinates.
-   */
-  Vector3 toCart(const Geodetic& geod) const;
-
-  /** Transform cartesian coordinates to geocentric coordinates.
-   */
-  Geocentric toGeoc(const Vector3& cart) const;
-
-  /** Transform geocentric coordinates to cartesian coordinates.
-   */
-  Vector3 toCart(const Geocentric& geoc) const;
-
-  /** Transform geocentric coordinates to geodetic coordinates.
-   */
-  Geocentric toGeoc(const Geodetic& geod) const;
-
-  /** Transform geodetic coordinates to geocentric coordinates.
-   */
-  Geodetic toGeod(const Geocentric& geoc) const;
-
-  /** Orientation of the Geodetic horizontal local frame.
-   */
-  Quaternion getGeodHLOrientation(const Geodetic& pos) const;
-
-  /** Orientation of the Geodetic horizontal local frame.
-   */
-  Quaternion getGeodHLOrientation(const Vector3& pos) const;
-
-  /** Orientation of the Geodetic horizontal local frame.
-   */
-  Quaternion getGeodHLOrientation(const Geocentric& pos) const;
-
-  /** Orientation of the Geocentric horizontal local frame.
-   */
-  Quaternion getGeocHLOrientation(const Geodetic& pos) const;
-
-  /** Orientation of the Geocentric horizontal local frame.
-   */
-  Quaternion getGeocHLOrientation(const Vector3& pos) const;
-
-  /** Orientation of the Geocentric horizontal local frame.
-   */
-  Quaternion getGeocHLOrientation(const Geocentric& pos) const;
-
-  /** Rotation rate of the Geocentric horizontal local frame.
-   */
-  Vector3 getGoecHLRate(const Geocentric& pos, const Vector3& ecVel) const;
-
-  /** Rotation rate of the Geocentric horizontal local frame.
-   */
-  Vector3 getGoecHLRate(const Vector3& pos, const Vector3& ecVel) const;
-
-  /** Rotation rate of the Geocentric horizontal local frame.
-   */
-  Vector3 getGoecHLRate(const Geodetic& pos, const Vector3& ecVel) const;
-
-private:
-  /**
-   */
-  real_type a;
-  real_type ra2;
-  real_type e;
-  real_type e2;
-  real_type e4;
-};
-
-/** Pretty printing of geodetic coordinates.
- */
-std::ostream& operator<<(std::ostream& os, const Geodetic& geod);
-
-/** Pretty printing of geocentric coordinates.
- */
-std::ostream& operator<<(std::ostream& os, const Geocentric& geoc);
-
-} // namespace OpenFDM
-
-#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-06 13:36:29 UTC (rev 861)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-06 13:50:04 UTC (rev 862)
@@ -31,7 +31,6 @@
   CowPtr.h \
   DiscreteStateValueVector.h \
   DoPri5.h \
-  EllipticPlanet.h \
   Environment.h \
   ExplicitAdams.h \
   ExplicitEuler.h \
@@ -127,6 +126,7 @@
   Vector.h \
   WeakPtr.h \
   WeakReferenced.h \
+  WGS84Planet.h \
   XMLDumpModelVisitor.h
 
 OpenFDMCoreSOURCES = \
@@ -144,7 +144,6 @@
   ConstNodeVisitor.cpp \
   ContinousStateValue.cpp \
   DoPri5.cpp \
-  EllipticPlanet.cpp \
   Environment.cpp \
   ExplicitAdams.cpp \
   ExplicitEuler.cpp \
@@ -185,7 +184,8 @@
   SystemOutput.cpp \
   Time.cpp \
   Unit.cpp \
-  Variant.cpp
+  Variant.cpp \
+  WGS84Planet.cpp
 
 #   ReaderWriter.cpp
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.cpp	2008-12-06 13:36:29 UTC (rev 861)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.cpp	2008-12-06 13:50:04 UTC (rev 862)
@@ -85,4 +85,61 @@
   return Vector6::zeros();
 }
 
+Geocentric
+SphericalEarth::toGeoc(const Vector3& cart) const
+{
+  real_type lon = (cart(0) == 0 && cart(1) == 0)
+    ? real_type(0) : atan2(cart(1), cart(0));
+  real_type nxy = sqrt(cart(0)*cart(0)+cart(1)*cart(1));
+  real_type lat = (nxy == 0 && cart(2) == 0)
+    ? real_type(0) : atan2(cart(2), nxy);
+  return Geocentric(lat, lon, norm(cart));
+}
+
+Vector3
+SphericalEarth::toCart(const Geocentric& geoc) const
+{
+  real_type slat = sin(geoc.latitude);
+  real_type clat = cos(geoc.latitude);
+  real_type slon = sin(geoc.longitude);
+  real_type clon = cos(geoc.longitude);
+  return geoc.radius*Vector3( clat*clon, clat*slon, slat );
+}
+
+Quaternion
+SphericalEarth::getGeocHLOrientation(const Vector3& pos) const
+{
+  return getGeocHLOrientation(toGeoc(pos));
+}
+
+Quaternion
+SphericalEarth::getGeocHLOrientation(const Geocentric& pos) const
+{
+  return Quaternion::fromLonLat(pos.longitude, pos.latitude);
+}
+
+Vector3
+SphericalEarth::getGoecHLRate(const Geocentric& pos, const Vector3& ecVel) const
+{
+  Quaternion hlOrientation = getGeocHLOrientation(pos);
+  Vector3 hlVel = hlOrientation.transform(ecVel);
+  Vector3 hlRate = Vector3(hlVel(1), -hlVel(0), -hlVel(1)*tan(pos.latitude));
+  return hlOrientation.backTransform((1/pos.radius)*hlRate);
+}
+
+Vector3
+SphericalEarth::getGoecHLRate(const Vector3& pos, const Vector3& ecVel) const
+{
+  return getGoecHLRate(toGeoc(pos), ecVel);
+}
+
+std::ostream&
+operator<<(std::ostream& os, const Geocentric& geoc)
+{
+  return os << "[ lon = " << rad2deg*geoc.longitude
+            << ", lat = " << rad2deg*geoc.latitude
+            << ", rad = " << geoc.radius
+            << " ]";
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.h	2008-12-06 13:36:29 UTC (rev 861)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.h	2008-12-06 13:50:04 UTC (rev 862)
@@ -5,13 +5,25 @@
 #ifndef OpenFDM_SphericalEarth_H
 #define OpenFDM_SphericalEarth_H
 
-#include "Types.h"
+#include "AbstractPlanet.h"
+#include "Quaternion.h"
 #include "Vector.h"
-#include "AbstractPlanet.h"
 
 namespace OpenFDM {
 
 /**
+ * Datatype for a position in speric coordinates.
+ */
+struct Geocentric {
+  Geocentric(real_type lat = 0.0, real_type lon = 0.0, real_type rad = 0.0)
+    : latitude(lat), longitude(lon), radius(rad)
+  {}
+  real_type latitude;
+  real_type longitude;
+  real_type radius;
+};
+
+/**
  * The SphericalEarth class.
  *
  * It holds some information about the gravity the simulation is running on.
@@ -70,12 +82,40 @@
   virtual Vector3 getAngularVelocity(const real_type& t) const;
   virtual Vector6 getAcceleration(const real_type& t) const;
 
+  /** Transform cartesian coordinates to geocentric coordinates.
+   */
+  Geocentric toGeoc(const Vector3& cart) const;
+
+  /** Transform geocentric coordinates to cartesian coordinates.
+   */
+  Vector3 toCart(const Geocentric& geoc) const;
+
+  /** Orientation of the Geocentric horizontal local frame.
+   */
+  Quaternion getGeocHLOrientation(const Vector3& pos) const;
+
+  /** Orientation of the Geocentric horizontal local frame.
+   */
+  Quaternion getGeocHLOrientation(const Geocentric& pos) const;
+
+  /** Rotation rate of the Geocentric horizontal local frame.
+   */
+  Vector3 getGoecHLRate(const Geocentric& pos, const Vector3& ecVel) const;
+
+  /** Rotation rate of the Geocentric horizontal local frame.
+   */
+  Vector3 getGoecHLRate(const Vector3& pos, const Vector3& ecVel) const;
+
 private:
   real_type mMass;
   real_type mRadius;
   Vector3 mAngularVelocity;
 };
 
+/** Pretty printing of geocentric coordinates.
+ */
+std::ostream& operator<<(std::ostream& os, const Geocentric& geoc);
+
 } // namespace OpenFDM
 
 #endif

Copied: branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.cpp (from rev 860, branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.cpp)
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.cpp	2008-12-06 13:29:41 UTC (rev 860)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.cpp	2008-12-06 13:50:04 UTC (rev 862)
@@ -0,0 +1,158 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
+ *
+ */
+
+#include "WGS84Planet.h"
+
+#include "Environment.h"
+#include "Types.h"
+#include "Unit.h"
+#include "Vector.h"
+#include "Quaternion.h"
+
+namespace OpenFDM {
+
+WGS84Planet::WGS84Planet(void)
+{
+  // values taken from simgear
+  setAequatorialRadius(6378137.0);
+  setFlattening(298.257223563);
+
+  // Major semi axis or Aequatorial Radius is called a
+  // Minor semi axis or polar radius is called b.
+  // The the flattening f is defined by f = (a-b)/a.
+  // For our earth these parameters are.
+  //  a = 6378137.0
+  //  b = 6356752.3142
+  //  f = 1/298.257223563
+}
+
+WGS84Planet::~WGS84Planet(void)
+{
+}
+
+real_type
+WGS84Planet::getAequatorialRadius(void) const
+{
+  return a;
+}
+
+void
+WGS84Planet::setAequatorialRadius(real_type r)
+{
+  a = r;
+  ra2 = 1/(a*a);
+}
+
+void
+WGS84Planet::setFlattening(real_type flat)
+{
+  real_type squash = 1 - 1/flat;
+  e2 = fabs(1 - squash*squash);
+  e = sqrt(e2);
+  e4 = e2*e2;
+}
+
+Plane
+WGS84Planet::getHorizont(const Vector3& position) const
+{
+  Geodetic geodetic = toGeod(position);
+  geodetic.altitude = 0;
+  Vector down = getGeodHLOrientation(geodetic).backTransform(Vector3::unit(2));
+  return Plane(down, toCart(geodetic));
+}
+
+Vector3
+WGS84Planet::getGravityAcceleration(const Vector3& cart) const
+{
+  // FIXME, this is not WGS84!!!
+  Geodetic geodetic = toGeod(cart);
+  Vector down = getGeodHLOrientation(geodetic).backTransform(Vector3::unit(2));
+  real_type dist2 = dot(cart, cart);
+  return (-5.9742e24*gravity_constant/(dist2))*down;
+}
+
+Vector3
+WGS84Planet::getAngularVelocity(const real_type& t) const
+{
+  return Vector3(0, 0, pi2/(24*60*60));
+}
+
+Vector6
+WGS84Planet::getAcceleration(const real_type& t) const
+{
+  return Vector6::zeros();
+}
+
+Geodetic
+WGS84Planet::toGeod(const Vector3& cart) const
+{
+  // according to
+  // H. Vermeille,
+  // Direct transformation from geocentric to geodetic ccordinates,
+  // Journal of Geodesy (2002) 76:451-454
+  real_type X = cart(0);
+  real_type Y = cart(1);
+  real_type Z = cart(2);
+  real_type XXpYY = X*X+Y*Y;
+  real_type sqrtXXpYY = sqrt(XXpYY);
+  real_type p = XXpYY*ra2;
+  real_type q = Z*Z*(1-e*e)*ra2;
+  real_type r = 1.0/6.0*(p+q-e4);
+  real_type s = e4*p*q/(4.0*r*r*r);
+  real_type t = pow(1.0+s+sqrt(s*(2.0+s)), real_type(1)/3);
+  real_type u = r*(1.0+t+1.0/t);
+  real_type v = sqrt(u*u+e4*q);
+  real_type w = e2*(u+v-q)/(2.0*v);
+  real_type k = sqrt(u+v+w*w)-w;
+  real_type D = k*sqrtXXpYY/(k+e2);
+  real_type lambda = 2.0*atan2(Y, X+sqrtXXpYY);
+  real_type sqrtDDpZZ = sqrt(D*D+Z*Z);
+  real_type phi = 2.0*atan2(Z, D+sqrtDDpZZ);
+  real_type h = (k+e2-1)*sqrtDDpZZ/k;
+  return Geodetic(phi, lambda, h);
+}
+
+Vector3
+WGS84Planet::toCart(const Geodetic& geod) const
+{
+  // according to
+  // H. Vermeille,
+  // Direct transformation from geocentric to geodetic ccordinates,
+  // Journal of Geodesy (2002) 76:451-454
+  real_type lambda = geod.longitude;
+  real_type phi = geod.latitude;
+  real_type h = geod.altitude;
+  real_type sphi = sin(phi);
+  real_type n = a/sqrt(1.0-e2*sphi*sphi);
+  real_type cphi = cos(phi);
+  real_type slambda = sin(lambda);
+  real_type clambda = cos(lambda);
+  real_type X = (h+n)*cphi*clambda;
+  real_type Y = (h+n)*cphi*slambda;
+  real_type Z = (h+n-e2*n)*sphi;
+  return Vector3(X, Y, Z);
+}
+
+Quaternion
+WGS84Planet::getGeodHLOrientation(const Geodetic& pos) const
+{
+  return Quaternion::fromLonLat(pos.longitude, pos.latitude);
+}
+
+Quaternion
+WGS84Planet::getGeodHLOrientation(const Vector3& pos) const
+{
+  return getGeodHLOrientation(toGeod(pos));
+}
+
+std::ostream&
+operator<<(std::ostream& os, const Geodetic& geod)
+{
+  return os << "[ lon = " << rad2deg*geod.longitude
+            << ", lat = " << rad2deg*geod.latitude
+            << ", alt = " << geod.altitude
+            << " ]";
+}
+
+} // namespace OpenFDM

Copied: branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.h (from rev 860, branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.h)
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/EllipticPlanet.h	2008-12-06 13:29:41 UTC (rev 860)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.h	2008-12-06 13:50:04 UTC (rev 862)
@@ -0,0 +1,108 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_WGS84Planet_H
+#define OpenFDM_WGS84Planet_H
+
+#include <iosfwd>
+
+#include "Types.h"
+#include "Vector.h"
+#include "Quaternion.h"
+#include "AbstractPlanet.h"
+
+namespace OpenFDM {
+
+/**
+ * Datatype for the Geodetic position on some ellipsoid.
+ */
+struct Geodetic {
+  Geodetic(real_type lat = 0.0, real_type lon = 0.0, real_type alt = 0.0)
+    : latitude(lat), longitude(lon), altitude(alt)
+  {}
+  real_type latitude;
+  real_type longitude;
+  real_type altitude;
+};
+
+/**
+ * The WGS84Planet class.
+ *
+ * It holds some information about the planet the simulation is running on.
+ */
+class WGS84Planet : public AbstractPlanet {
+public:
+  /** Elliptic constructor.
+   */
+  WGS84Planet(void);
+
+  /** Elliptic destructor.
+   */
+  virtual ~WGS84Planet(void);
+
+  /** Get aequatorial radius.
+   */
+  real_type getAequatorialRadius(void) const;
+
+  /** Set aequatorial radius.
+   */
+  void setAequatorialRadius(real_type r);
+
+  /** Set planet flattening.
+   */
+  void setFlattening(real_type flat);
+
+  /** Returns the horizontal plane at zero altitude.
+   *  Plane normal points downward.
+   */
+  virtual Plane getHorizont(const Vector3& position) const;
+
+  /** Returns the gravitational acceleration for the given position.
+   *  Note that this should not contain the effects of a non inertial
+   *  reference frame as this effect is captured by the inertial
+   *  frame methods.
+   */
+  virtual Vector3 getGravityAcceleration(const Vector3&) const;
+
+  /** Return the global reference frames velocity and acceleration.
+   *  Note that these both must fit together to make the simulation
+   *  simulate something usable.
+   */
+  virtual Vector3 getAngularVelocity(const real_type& t) const;
+  virtual Vector6 getAcceleration(const real_type& t) const;
+
+
+  /** Transform cartesian coordinates to geodetic coordinates.
+   */
+  Geodetic toGeod(const Vector3& cart) const;
+
+  /** Transform geodetic coordinates to cartesian coordinates.
+   */
+  Vector3 toCart(const Geodetic& geod) const;
+
+  /** Orientation of the Geodetic horizontal local frame.
+   */
+  Quaternion getGeodHLOrientation(const Geodetic& pos) const;
+
+  /** Orientation of the Geodetic horizontal local frame.
+   */
+  Quaternion getGeodHLOrientation(const Vector3& pos) const;
+
+private:
+  /**
+   */
+  real_type a;
+  real_type ra2;
+  real_type e;
+  real_type e2;
+  real_type e4;
+};
+
+/** Pretty printing of geodetic coordinates.
+ */
+std::ostream& operator<<(std::ostream& os, const Geodetic& geod);
+
+} // namespace OpenFDM
+
+#endif

Modified: branches/OpenFDM-StateSeparation/src/test/foucault.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2008-12-06 13:36:29 UTC (rev 861)
+++ branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2008-12-06 13:50:04 UTC (rev 862)
@@ -6,13 +6,13 @@
 #include <OpenFDM/Sensor.h>
 #include <OpenFDM/System.h>
 #include <OpenFDM/SystemOutput.h>
-#include <OpenFDM/EllipticPlanet.h>
+#include <OpenFDM/WGS84Planet.h>
 
 using namespace OpenFDM;
 
 int main()
 {
-  SharedPtr<EllipticPlanet> planet = new EllipticPlanet;
+  SharedPtr<WGS84Planet> planet = new WGS84Planet;
 
   // Model of the paris pendulum or foucault pendulum to test coriolis effects.
 



From frohlich at mail.berlios.de  Sat Dec  6 17:19:13 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 6 Dec 2008 17:19:13 +0100
Subject: [OpenFDM-svn] r863 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812061619.mB6GJDe8013440@sheep.berlios.de>

Author: frohlich
Date: 2008-12-06 17:19:12 +0100 (Sat, 06 Dec 2008)
New Revision: 863

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.h
Log:
Gravity is now closer to the real wgs84 standard.

M    src/OpenFDM/WGS84Planet.h
M    src/OpenFDM/WGS84Planet.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.cpp	2008-12-06 13:50:04 UTC (rev 862)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.cpp	2008-12-06 16:19:12 UTC (rev 863)
@@ -12,11 +12,23 @@
 
 namespace OpenFDM {
 
+/// Implements the WGS84 ellipsoid as described in
+///
+/// [1] World Geodetic System 1984,
+///     Its Definition and Relationships with Local Geodetic Systems
+/// [2] H Moritz - Journal of Geodesy, 1980
+///
+/// The gravity model is so far the easiest one only valid for low altitudes
+/// FIXME .. implement taylor series and the exact one ...
+
+
 WGS84Planet::WGS84Planet(void)
 {
   // values taken from simgear
   setAequatorialRadius(6378137.0);
-  setFlattening(298.257223563);
+  setFlattening(1/real_type(298.257223563));
+  setGM(3986004.418e8);
+  setOmega(7292115e-11);
 
   // Major semi axis or Aequatorial Radius is called a
   // Minor semi axis or polar radius is called b.
@@ -31,28 +43,60 @@
 {
 }
 
-real_type
+const real_type&
 WGS84Planet::getAequatorialRadius(void) const
 {
   return a;
 }
 
 void
-WGS84Planet::setAequatorialRadius(real_type r)
+WGS84Planet::setAequatorialRadius(const real_type& r)
 {
   a = r;
-  ra2 = 1/(a*a);
+  a2 = a*a;
+  ra2 = 1/a2;
 }
 
+const real_type&
+WGS84Planet::getFlattening() const
+{
+  return f;
+}
+
 void
-WGS84Planet::setFlattening(real_type flat)
+WGS84Planet::setFlattening(const real_type& flat)
 {
-  real_type squash = 1 - 1/flat;
+  f = flat;
+  real_type squash = 1 - f;
   e2 = fabs(1 - squash*squash);
   e = sqrt(e2);
   e4 = e2*e2;
 }
 
+const real_type&
+WGS84Planet::getGM() const
+{
+  return GM;
+}
+
+void
+WGS84Planet::setGM(const real_type& gm)
+{
+  GM = gm;
+}
+
+const real_type&
+WGS84Planet::getOmega() const
+{
+  return mOmega;
+}
+
+void
+WGS84Planet::setOmega(const real_type& omega)
+{
+  mOmega = omega;
+}
+
 Plane
 WGS84Planet::getHorizont(const Vector3& position) const
 {
@@ -63,19 +107,47 @@
 }
 
 Vector3
-WGS84Planet::getGravityAcceleration(const Vector3& cart) const
+WGS84Planet::getGravityAcceleration(const Vector3& position) const
 {
-  // FIXME, this is not WGS84!!!
-  Geodetic geodetic = toGeod(cart);
+  Geodetic geodetic = toGeod(position);
+
+  real_type b = a - f*a;
+
+  real_type m = mOmega*mOmega*a2*b/GM;
+
+  // According to [2]
+  real_type ePrime = e/sqrt(1 - e2);
+  real_type q0 = 0.5*((1 + 3/(ePrime*ePrime))*atan(ePrime) - 3/ePrime);
+  real_type q0Prime = 3*(1 + 1/(ePrime*ePrime))*(1 - 1/ePrime*atan(ePrime)) - 1;
+
+  real_type gammaC = GM/(a*b)*(1 - m - m/6*(ePrime*q0Prime/q0));
+  real_type gammaP = GM/a2*(1 + m/3*ePrime*q0Prime/q0);
+
+  // According to [1]
+  real_type k = b*gammaP/(a*gammaC) - 1;
+
+  real_type sLat = sin(geodetic.latitude);
+  real_type sLat2 = sLat*sLat;
+  real_type gamma = gammaC*(1 + k*sLat2)/sqrt(1 - e2*sLat2);
+
+  real_type h = geodetic.altitude;
+
+  real_type gammaH = gamma*(1 - 2/a*(1 + f + m - 2*f*sLat2)*h + (3/a2)*h*h);
+
+  /// FIXME This is not the whole story, The direction also varies ...
   Vector down = getGeodHLOrientation(geodetic).backTransform(Vector3::unit(2));
-  real_type dist2 = dot(cart, cart);
-  return (-5.9742e24*gravity_constant/(dist2))*down;
+
+  /// FIXME
+  /// Hmm, this includes the centrifugal force also,
+  /// we need to get rid of that again since we handle the effect of the
+  /// rotationg reference frame in an other way.
+  return gammaH*down;
 }
 
 Vector3
 WGS84Planet::getAngularVelocity(const real_type& t) const
 {
-  return Vector3(0, 0, pi2/(24*60*60));
+  return Vector3(0, 0, mOmega);
 }
 
 Vector6

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.h	2008-12-06 13:50:04 UTC (rev 862)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.h	2008-12-06 16:19:12 UTC (rev 863)
@@ -41,18 +41,34 @@
    */
   virtual ~WGS84Planet(void);
 
-  /** Get aequatorial radius.
+  /** Get aequatorial radius, also called semi major axis.
    */
-  real_type getAequatorialRadius(void) const;
+  const real_type& getAequatorialRadius(void) const;
+  /** Set aequatorial radius, also called semi major axis.
+   */
+  void setAequatorialRadius(const real_type& r);
 
-  /** Set aequatorial radius.
+  /** Get planet flattening.
    */
-  void setAequatorialRadius(real_type r);
-
+  const real_type& getFlattening() const;
   /** Set planet flattening.
    */
-  void setFlattening(real_type flat);
+  void setFlattening(const real_type& flat);
 
+  /** Get the gravittational constant multiplied by the planets mass.
+   */
+  const real_type& getGM() const;
+  /** Set the gravittational constant multiplied by the planets mass.
+   */
+  void setGM(const real_type& gm);
+
+  /** Get the rotational speed of the planet.
+   */
+  const real_type& getOmega() const;
+  /** Set the rotational speed of the planet.
+   */
+  void setOmega(const real_type& omega);
+
   /** Returns the horizontal plane at zero altitude.
    *  Plane normal points downward.
    */
@@ -93,10 +109,14 @@
   /**
    */
   real_type a;
+  real_type f;
+  real_type a2;
   real_type ra2;
   real_type e;
   real_type e2;
   real_type e4;
+  real_type GM;
+  real_type mOmega;
 };
 
 /** Pretty printing of geodetic coordinates.



From frohlich at mail.berlios.de  Sun Dec  7 09:22:13 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 7 Dec 2008 09:22:13 +0100
Subject: [OpenFDM-svn] r864 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812070822.mB78MDxQ028201@sheep.berlios.de>

Author: frohlich
Date: 2008-12-07 09:22:12 +0100 (Sun, 07 Dec 2008)
New Revision: 864

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
Log:
Fix some sign problems.

M    src/OpenFDM/WheelContact.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-06 16:19:12 UTC (rev 863)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-07 08:22:12 UTC (rev 864)
@@ -130,7 +130,6 @@
     - normForce*lp.getNormal();
   
   // We don't have an angular moment.
-  force = -force;
   portValues[mMechanicLink].applyForce(forceFrom(contactPoint, force));
 }
 
@@ -138,7 +137,7 @@
 WheelContact::computeNormalForce(real_type compressLen, real_type compressVel) const
 {
   return compressLen*mSpringConstant
-    - mSpringDamping*min(compressVel, static_cast<real_type>(0));
+    + mSpringDamping*min(compressVel, static_cast<real_type>(0));
 }
 
 Vector2



From frohlich at mail.berlios.de  Sun Dec  7 17:26:07 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 7 Dec 2008 17:26:07 +0100
Subject: [OpenFDM-svn] r865 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200812071626.mB7GQ7nP026086@sheep.berlios.de>

Author: frohlich
Date: 2008-12-07 17:26:07 +0100 (Sun, 07 Dec 2008)
New Revision: 865

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Enforce to avoid cycles in the parent chain.

M    src/test/structure.cpp
M    src/OpenFDM/Node.h
M    src/OpenFDM/Node.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-12-07 08:22:12 UTC (rev 864)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-12-07 16:26:07 UTC (rev 865)
@@ -169,6 +169,22 @@
   return i != mPortList.end();
 }
 
+class Node::CycleCheckVisitor : public ConstNodeVisitor {
+public:
+  CycleCheckVisitor(const Node* node) :
+    mNode(node), mDetectedCycle(false)
+  { }
+  virtual void apply(const Node& node)
+  {
+    if (mNode == &node)
+      mDetectedCycle = true;
+    else
+      node.ascend(*this);
+  }
+  const Node* mNode;
+  bool mDetectedCycle;
+};
+
 bool
 Node::addParent(Node* parent)
 {
@@ -177,9 +193,23 @@
   ParentList::const_iterator i;
   for (i = mParentList.begin(); i != mParentList.end(); ++i) {
     SharedPtr<const Node> lockedParent = i->lock();
-    if (parent == lockedParent)
+    if (parent == lockedParent) {
+      Log(Model, Info) << "Cannot add model \"" << getName()
+                       << "\" a second time to the parent \""
+                       << lockedParent->getName() << "\"" << std::endl;
       return false;
+    }
   }
+
+  CycleCheckVisitor visitor(this);
+  visitor.apply(*parent);
+  if (visitor.mDetectedCycle) {
+    Log(Model, Info) << "Cannot add model \"" << getName()
+                     << "\" to parent \"" << parent->getName()
+                     << "\". Node cannot be parent of itself." << std::endl;
+    return false;
+  }
+
   mParentList.push_back(parent);
   return true;
 }
@@ -215,6 +245,7 @@
 Node::getNodePathList() const
 {
   NodePathListCollectVisitor visitor;
+  visitor.apply(*this);
   return visitor.mNodePathList;
 }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-12-07 08:22:12 UTC (rev 864)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-12-07 16:26:07 UTC (rev 865)
@@ -99,6 +99,7 @@
   typedef std::vector<WeakPtr<Node> > ParentList;
   ParentList mParentList;
 
+  class CycleCheckVisitor;
   class NodePathListCollectVisitor;
 
   /// Sample time handling.

Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-12-07 08:22:12 UTC (rev 864)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-12-07 16:26:07 UTC (rev 865)
@@ -118,6 +118,29 @@
   return true;
 }
 
+bool testCyclicParents()
+{
+  SharedPtr<Group> group1 = new Group("Group 1");
+  if (group1->addChild(group1) != ~0u) {
+    std::cerr << "Detection of cyclic parent loops failed! "
+      "Could add group as child of itself." << std::endl;
+    return false;
+  }
+
+  SharedPtr<Group> group2 = new Group("Group 2");
+  if (group1->addChild(group2) == ~0u) {
+    std::cerr << "Could not add unrelated group as child of an other one."
+              << std::endl;
+    return false;
+  }
+  if (group2->addChild(group1) != ~0u) {
+    std::cerr << "Detection of cyclic parent loops failed! "
+      "Could add group as child of a child group." << std::endl;
+    return false;
+  }
+  return true;
+}
+
 int main()
 {
   // Check a self referencing gain model, to see if cyclic loops
@@ -136,6 +159,9 @@
   if (!testCyclicDependencyWithGroup2())
     return EXIT_FAILURE;
 
+  if (!testCyclicParents())
+    return EXIT_FAILURE;
+
   std::cout << "PASSED" << std::endl;
 
   return 0;



From frohlich at mail.berlios.de  Mon Dec  8 08:07:21 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 8 Dec 2008 08:07:21 +0100
Subject: [OpenFDM-svn] r866 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200812080707.mB877Lmq017692@sheep.berlios.de>

Author: frohlich
Date: 2008-12-08 08:07:20 +0100 (Mon, 08 Dec 2008)
New Revision: 866

Added:
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/test/mechanic.cpp
Log:
Add an internal sensor.


Added: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2008-12-07 16:26:07 UTC (rev 865)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2008-12-08 07:07:20 UTC (rev 866)
@@ -0,0 +1,150 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
+ *
+ */
+
+#include "InternalSensor.h"
+
+#include "MechanicLinkValue.h"
+#include "NumericPortValue.h"
+#include "PortValueList.h"
+#include "Task.h"
+
+namespace OpenFDM {
+
+BEGIN_OPENFDM_OBJECT_DEF(InternalSensor, Interact)
+  DEF_OPENFDM_PROPERTY(Vector3, Position0, Serialized)
+  DEF_OPENFDM_PROPERTY(Vector3, Position1, Serialized)
+  DEF_OPENFDM_PROPERTY(Bool, EnableDistance, Serialized)
+  DEF_OPENFDM_PROPERTY(Bool, EnableVelocity, Serialized)
+  END_OPENFDM_OBJECT_DEF
+
+InternalSensor::InternalSensor(const std::string& name) :
+  Interact(name),
+  mMechanicLink0(newMechanicLink("link0")),
+  mMechanicLink1(newMechanicLink("link1")),
+  mPosition0(0, 0, 0),
+  mPosition1(0, 0, 0)
+{
+}
+
+InternalSensor::~InternalSensor(void)
+{
+}
+
+void
+InternalSensor::velocity(const Task& task, const ContinousStateValueVector&,
+                         PortValueList& portValues) const
+{
+  const Frame& frame0 = portValues[mMechanicLink0].getFrame();
+  const Frame& frame1 = portValues[mMechanicLink1].getFrame();
+
+  // FIXME, for now relative position
+  Vector3 position0 = mPosition0-portValues[mMechanicLink0].getDesignPosition();
+  Vector3 position1 = mPosition1-portValues[mMechanicLink1].getDesignPosition();
+
+  bool enableDistance = getEnableDistance();
+  bool enableVelocity = getEnableVelocity();
+  if (enableDistance || enableVelocity) {
+    Vector3 relPos = frame0.posFromRef(frame1.posToRef(position1)) - position0;
+    real_type nrmRelPos = norm(relPos);
+
+    // The relative distance of these two points
+    if (enableDistance)
+      portValues[mDistancePort] = nrmRelPos;
+
+    if (enableVelocity) {
+      /// FIXME: avoid that transform to the reference frame. The relative
+      /// position must be sufficient ...
+      Vector6 refVel1 = frame1.motionToRef(motionTo(position1, frame1.getRefVel()));
+      Vector6 refVel0 = motionTo(position0, frame0.motionFromRef(refVel1) - frame0.getRefVel());
+
+      Vector3 relVel = refVel0.getLinear();
+      if (nrmRelPos <= Limits<real_type>::min())
+        portValues[mVelocityPort] = 0;
+      else
+        portValues[mVelocityPort] = dot(relPos, relVel)/nrmRelPos;
+    }
+  }
+}
+
+/// Force computation:
+//     Vector3 dir;
+//     Vector3 relPos = frame0.getRelPosition(frame1);
+//     // if we have really reached the zero position, we must have the full
+//     // speed in exactly the relPos direction.
+//     real_type nrmRelPos = norm(relPos);
+//     if (nrmRelPos <= Limits<real_type>::min()) {
+//       dir = Vector3::zeros();
+//     } else
+//       dir = (1/nrmRelPos)*relPos;
+//     // Since we assume positive input forces to push the two attached
+//     // RigidBodies, we need that minus sign to negate the current position
+//     // offset
+//     mForce = Vector6(Vector3::zeros(), (-mForcePort.getRealValue())*dir);
+
+void
+InternalSensor::setPosition0(const Vector3& position)
+{
+  mPosition0 = position;
+}
+
+const Vector3&
+InternalSensor::getPosition0() const
+{
+  return mPosition0;
+}
+
+void
+InternalSensor::setPosition1(const Vector3& position)
+{
+  mPosition1 = position;
+}
+
+const Vector3&
+InternalSensor::getPosition1() const
+{
+  return mPosition1;
+}
+
+void
+InternalSensor::setEnableDistance(bool enable)
+{
+  if (enable == getEnableDistance())
+    return;
+  if (enable)
+    mDistancePort = RealOutputPort(this, "distance");
+  else
+    mDistancePort.clear();
+}
+
+bool
+InternalSensor::getEnableDistance() const
+{
+  return !mDistancePort.empty();
+}
+
+void
+InternalSensor::setEnableVelocity(bool enable)
+{
+  if (enable == getEnableVelocity())
+    return;
+  if (enable)
+    mVelocityPort = RealOutputPort(this, "velocity");
+  else
+    mVelocityPort.clear();
+}
+
+bool
+InternalSensor::getEnableVelocity() const
+{
+  return !mVelocityPort.empty();
+}
+
+void
+InternalSensor::setEnableAll(bool enable)
+{
+  setEnableDistance(enable);
+  setEnableVelocity(enable);
+}
+
+} // namespace OpenFDM

Added: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h	2008-12-07 16:26:07 UTC (rev 865)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h	2008-12-08 07:07:20 UTC (rev 866)
@@ -0,0 +1,62 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_InternalSensor_H
+#define OpenFDM_InternalSensor_H
+
+#include "Interact.h"
+#include "MechanicLink.h"
+#include "RealOutputPort.h"
+#include "Vector.h"
+
+namespace OpenFDM {
+
+class InternalSensor : public Interact {
+  OPENFDM_OBJECT(InternalSensor, Interact);
+public:
+  InternalSensor(const std::string& name);
+  virtual ~InternalSensor(void);
+
+  virtual void initDesignPosition(PortValueList&) const {}
+  virtual void velocity(const Task&, const ContinousStateValueVector&,
+                        PortValueList&) const;
+
+  /// Set the position of the sensor in design coordinates
+  void setPosition0(const Vector3& position);
+  /// Get the position of the sensor in design coordinates
+  const Vector3& getPosition0() const;
+
+  /// Set the position of the sensor in design coordinates
+  void setPosition1(const Vector3& position);
+  /// Get the position of the sensor in design coordinates
+  const Vector3& getPosition1() const;
+
+  /// Set availabilty of the distance output port
+  void setEnableDistance(bool enable);
+  /// Get availabilty of the distance output port
+  bool getEnableDistance() const;
+
+  /// Set availabilty of the velocity output port
+  void setEnableVelocity(bool enable);
+  /// Get availabilty of the velocity output port
+  bool getEnableVelocity() const;
+
+  /// Set availabilty of all output ports
+  /// This is mostly for convinience in testing
+  void setEnableAll(bool enable);
+
+protected:
+  MechanicLink mMechanicLink0;
+  MechanicLink mMechanicLink1;
+
+  Vector3 mPosition0;
+  Vector3 mPosition1;
+
+  RealOutputPort mDistancePort;
+  RealOutputPort mVelocityPort;
+};
+
+} // namespace OpenFDM
+
+#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-07 16:26:07 UTC (rev 865)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-08 07:07:20 UTC (rev 866)
@@ -211,6 +211,7 @@
   Gain.h \
   Input.h \
   Integrator.h \
+  InternalSensor.h \
   Joint.h \
   Launchbar.h \
   LinearSpringDamper.h \
@@ -273,6 +274,7 @@
   Joint.cpp \
   ExternalForce.cpp \
   FixedRootJoint.cpp \
+  InternalSensor.cpp \
   Mass.cpp \
   MobileRootJoint.cpp \
   PrismaticJoint.cpp \

Modified: branches/OpenFDM-StateSeparation/src/test/mechanic.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/mechanic.cpp	2008-12-07 16:26:07 UTC (rev 865)
+++ branches/OpenFDM-StateSeparation/src/test/mechanic.cpp	2008-12-08 07:07:20 UTC (rev 866)
@@ -1,5 +1,6 @@
 #include <OpenFDM/ConstModel.h>
 #include <OpenFDM/Group.h>
+#include <OpenFDM/InternalSensor.h>
 #include <OpenFDM/Mass.h>
 #include <OpenFDM/MobileRootJoint.h>
 #include <OpenFDM/RevoluteJoint.h>
@@ -52,6 +53,8 @@
   RigidBody *rigidBody = new RigidBody("Rigid Body");
   rigidBody->addLink("link2");
   rigidBody->addLink("sensorLink");
+  rigidBody->addLink("internalSensorLink");
+  rigidBody->addLink("internalSensorLink2");
   group->addChild(rigidBody);
   InertiaMatrix inertia(1, 0, 0, 1, 0, 1);
   Mass* mass = new Mass("Mass", 1, inertia);
@@ -61,6 +64,8 @@
   group->addChild(revoluteJoint);
   RigidBody *rigidBody2 = new RigidBody("Rigid Body 2");
   rigidBody2->addLink("sensorLink");
+  rigidBody2->addLink("internalSensorLink");
+  rigidBody2->addLink("internalSensorLink2");
   group->addChild(rigidBody2);
   Mass* mass2 = new Mass("Mass 2", 1, inertia);
   group->addChild(mass2);
@@ -86,8 +91,31 @@
   ConstModel* jointForce = new ConstModel("Joint Force", 1);
   group->addChild(jointForce);
 
-  group->connect(jointForce->getPort("output"), revoluteJoint->getPort("force"));
+  group->connect(jointForce->getPort("output"),
+                 revoluteJoint->getPort("force"));
 
+  InternalSensor* internalSensor = new InternalSensor("Internal Sensor");
+  internalSensor->setPosition0(Vector3(0, 0, 1));
+  internalSensor->setPosition1(Vector3(0, 0, 0.8));
+  internalSensor->setEnableAll(true);
+  group->addChild(internalSensor);
+  group->connect(internalSensor->getPort("link0"),
+                 rigidBody->getPort("internalSensorLink"));
+  group->connect(internalSensor->getPort("link1"),
+                 rigidBody2->getPort("internalSensorLink"));
+
+
+  InternalSensor* internalSensor2 = new InternalSensor("Internal Sensor 2");
+  internalSensor2->setPosition0(Vector3(0, 0, 0.8));
+  internalSensor2->setPosition1(Vector3(0, 0, 1));
+  internalSensor2->setEnableAll(true);
+  group->addChild(internalSensor2);
+  group->connect(internalSensor2->getPort("link1"),
+                 rigidBody->getPort("internalSensorLink2"));
+  group->connect(internalSensor2->getPort("link0"),
+                 rigidBody2->getPort("internalSensorLink2"));
+
+
   return group.release();
 }
 



From frohlich at mail.berlios.de  Tue Dec  9 07:09:59 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 9 Dec 2008 07:09:59 +0100
Subject: [OpenFDM-svn] r867 - in branches/OpenFDM-StateSeparation/src:
	JSBSim OpenFDM test
Message-ID: <200812090609.mB969xLe013642@sheep.berlios.de>

Author: frohlich
Date: 2008-12-09 07:09:56 +0100 (Tue, 09 Dec 2008)
New Revision: 867

Modified:
   branches/OpenFDM-StateSeparation/src/JSBSim/JSBSimReader.cpp
   branches/OpenFDM-StateSeparation/src/JSBSim/JSBSimReaderBase.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/LinearSpringDamper.cpp
   branches/OpenFDM-StateSeparation/src/test/mechanic.cpp
Log:
Add the line force part to the Internal sensor.

M    src/test/mechanic.cpp
M    src/JSBSim/JSBSimReaderBase.cpp
M    src/JSBSim/JSBSimReader.cpp
M    src/OpenFDM/InternalSensor.cpp
M    src/OpenFDM/LinearSpringDamper.cpp
M    src/OpenFDM/InternalSensor.h


Modified: branches/OpenFDM-StateSeparation/src/JSBSim/JSBSimReader.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/JSBSim/JSBSimReader.cpp	2008-12-08 07:07:20 UTC (rev 866)
+++ branches/OpenFDM-StateSeparation/src/JSBSim/JSBSimReader.cpp	2008-12-09 06:09:56 UTC (rev 867)
@@ -25,7 +25,6 @@
 #include <OpenFDM/Input.h>
 #include <OpenFDM/Mass.h>
 #include <OpenFDM/Launchbar.h>
-#include <OpenFDM/LinearSpringDamper.h>
 #include <OpenFDM/MaxModel.h>
 #include <OpenFDM/AirSpring.h>
 #include <OpenFDM/PrismaticJoint.h>

Modified: branches/OpenFDM-StateSeparation/src/JSBSim/JSBSimReaderBase.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/JSBSim/JSBSimReaderBase.cpp	2008-12-08 07:07:20 UTC (rev 866)
+++ branches/OpenFDM-StateSeparation/src/JSBSim/JSBSimReaderBase.cpp	2008-12-09 06:09:56 UTC (rev 867)
@@ -25,7 +25,6 @@
 #include <OpenFDM/Input.h>
 #include <OpenFDM/Output.h>
 #include <OpenFDM/Mass.h>
-#include <OpenFDM/LinearSpringDamper.h>
 #include <OpenFDM/MaxModel.h>
 #include <OpenFDM/AirSpring.h>
 #include <OpenFDM/PrismaticJoint.h>

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2008-12-08 07:07:20 UTC (rev 866)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2008-12-09 06:09:56 UTC (rev 867)
@@ -67,21 +67,37 @@
   }
 }
 
-/// Force computation:
-//     Vector3 dir;
-//     Vector3 relPos = frame0.getRelPosition(frame1);
-//     // if we have really reached the zero position, we must have the full
-//     // speed in exactly the relPos direction.
-//     real_type nrmRelPos = norm(relPos);
-//     if (nrmRelPos <= Limits<real_type>::min()) {
-//       dir = Vector3::zeros();
-//     } else
-//       dir = (1/nrmRelPos)*relPos;
-//     // Since we assume positive input forces to push the two attached
-//     // RigidBodies, we need that minus sign to negate the current position
-//     // offset
-//     mForce = Vector6(Vector3::zeros(), (-mForcePort.getRealValue())*dir);
+void
+InternalSensor::articulation(const Task& task, const ContinousStateValueVector&,
+                             PortValueList& portValues) const
+{
+  if (getEnableForce()) {
+    const Frame& frame0 = portValues[mMechanicLink0].getFrame();
+    const Frame& frame1 = portValues[mMechanicLink1].getFrame();
 
+    // FIXME, for now relative position
+    Vector3 position0=mPosition0-portValues[mMechanicLink0].getDesignPosition();
+    Vector3 position1=mPosition1-portValues[mMechanicLink1].getDesignPosition();
+    
+    // FIXME, already have that computed in the velocity step
+    Vector3 relPos = frame0.posFromRef(frame1.posToRef(position1)) - position0;
+    real_type nrmRelPos = norm(relPos);
+
+    // If we have reached the zero position, the force vector is undefined.
+    if (Limits<real_type>::min() < nrmRelPos) {
+      Vector3 dir = (1/nrmRelPos)*relPos;
+      // Since we assume positive input forces to push the two attached
+      // RigidBodies, we need that minus sign to negate the current position
+      // offset
+      Vector3 force0 = portValues[mForcePort]*dir;
+      portValues[mMechanicLink0].applyForce(forceFrom(position0, force0));
+      
+      Vector3 force1 = -frame0.getRelOrientation(frame1).transform(force0);
+      portValues[mMechanicLink1].applyForce(forceFrom(position1, force1));
+    }
+  }
+}
+
 void
 InternalSensor::setPosition0(const Vector3& position)
 {
@@ -141,6 +157,23 @@
 }
 
 void
+InternalSensor::setEnableForce(bool enable)
+{
+  if (enable == getEnableForce())
+    return;
+  if (enable)
+    mForcePort = RealInputPort(this, "force", true);
+  else
+    mForcePort.clear();
+}
+
+bool
+InternalSensor::getEnableForce() const
+{
+  return !mForcePort.empty();
+}
+
+void
 InternalSensor::setEnableAll(bool enable)
 {
   setEnableDistance(enable);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h	2008-12-08 07:07:20 UTC (rev 866)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h	2008-12-09 06:09:56 UTC (rev 867)
@@ -7,6 +7,7 @@
 
 #include "Interact.h"
 #include "MechanicLink.h"
+#include "RealInputPort.h"
 #include "RealOutputPort.h"
 #include "Vector.h"
 
@@ -21,6 +22,8 @@
   virtual void initDesignPosition(PortValueList&) const {}
   virtual void velocity(const Task&, const ContinousStateValueVector&,
                         PortValueList&) const;
+  virtual void articulation(const Task&, const ContinousStateValueVector&,
+                            PortValueList&) const;
 
   /// Set the position of the sensor in design coordinates
   void setPosition0(const Vector3& position);
@@ -42,6 +45,11 @@
   /// Get availabilty of the velocity output port
   bool getEnableVelocity() const;
 
+  /// Set availabilty of the force output port
+  void setEnableForce(bool enable);
+  /// Get availabilty of the force output port
+  bool getEnableForce() const;
+
   /// Set availabilty of all output ports
   /// This is mostly for convinience in testing
   void setEnableAll(bool enable);
@@ -55,6 +63,7 @@
 
   RealOutputPort mDistancePort;
   RealOutputPort mVelocityPort;
+  RealInputPort mForcePort;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/LinearSpringDamper.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/LinearSpringDamper.cpp	2008-12-08 07:07:20 UTC (rev 866)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/LinearSpringDamper.cpp	2008-12-09 06:09:56 UTC (rev 867)
@@ -38,7 +38,7 @@
 {
   real_type position = portValues[mPositionPort];
   real_type vel = portValues[mVelocityPort];
-  real_type displacement = position - mSpringReference;
+  real_type displacement = mSpringReference - position;
   portValues[mForcePort] = mSpringConstant*displacement - vel*mDamperConstant;
 }
 

Modified: branches/OpenFDM-StateSeparation/src/test/mechanic.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/mechanic.cpp	2008-12-08 07:07:20 UTC (rev 866)
+++ branches/OpenFDM-StateSeparation/src/test/mechanic.cpp	2008-12-09 06:09:56 UTC (rev 867)
@@ -1,6 +1,7 @@
 #include <OpenFDM/ConstModel.h>
 #include <OpenFDM/Group.h>
 #include <OpenFDM/InternalSensor.h>
+#include <OpenFDM/LinearSpringDamper.h>
 #include <OpenFDM/Mass.h>
 #include <OpenFDM/MobileRootJoint.h>
 #include <OpenFDM/RevoluteJoint.h>
@@ -98,6 +99,7 @@
   internalSensor->setPosition0(Vector3(0, 0, 1));
   internalSensor->setPosition1(Vector3(0, 0, 0.8));
   internalSensor->setEnableAll(true);
+  internalSensor->setEnableForce(true);
   group->addChild(internalSensor);
   group->connect(internalSensor->getPort("link0"),
                  rigidBody->getPort("internalSensorLink"));
@@ -115,6 +117,16 @@
   group->connect(internalSensor2->getPort("link0"),
                  rigidBody2->getPort("internalSensorLink2"));
 
+  LinearSpringDamper* damper = new LinearSpringDamper("LinearSpringDamper");
+  damper->setSpringConstant(0.5);
+  damper->setDamperConstant(1);
+  group->addChild(damper);
+  group->connect(damper->getPort("velocity"),
+                 internalSensor->getPort("velocity"));
+  group->connect(damper->getPort("position"),
+                 internalSensor->getPort("distance"));
+  group->connect(damper->getPort("force"),
+                 internalSensor->getPort("force"));
 
   return group.release();
 }



From frohlich at mail.berlios.de  Tue Dec  9 07:17:20 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 9 Dec 2008 07:17:20 +0100
Subject: [OpenFDM-svn] r868 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200812090617.mB96HKaf019333@sheep.berlios.de>

Author: frohlich
Date: 2008-12-09 07:17:14 +0100 (Tue, 09 Dec 2008)
New Revision: 868

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
   branches/OpenFDM-StateSeparation/src/test/foucault.cpp
   branches/OpenFDM-StateSeparation/src/test/mechanic.cpp
Log:
setEnableAll(bool enable) -> void setEnableAllOutputs(bool enable)


M    src/test/foucault.cpp
M    src/test/mechanic.cpp
M    src/OpenFDM/InternalSensor.cpp
M    src/OpenFDM/Sensor.cpp
M    src/OpenFDM/InternalSensor.h
M    src/OpenFDM/Sensor.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2008-12-09 06:09:56 UTC (rev 867)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2008-12-09 06:17:14 UTC (rev 868)
@@ -174,7 +174,7 @@
 }
 
 void
-InternalSensor::setEnableAll(bool enable)
+InternalSensor::setEnableAllOutputs(bool enable)
 {
   setEnableDistance(enable);
   setEnableVelocity(enable);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h	2008-12-09 06:09:56 UTC (rev 867)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h	2008-12-09 06:17:14 UTC (rev 868)
@@ -52,7 +52,7 @@
 
   /// Set availabilty of all output ports
   /// This is mostly for convinience in testing
-  void setEnableAll(bool enable);
+  void setEnableAllOutputs(bool enable);
 
 protected:
   MechanicLink mMechanicLink0;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2008-12-09 06:09:56 UTC (rev 867)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2008-12-09 06:17:14 UTC (rev 868)
@@ -405,7 +405,7 @@
 }
 
 void
-Sensor::setEnableAll(bool enable)
+Sensor::setEnableAllOutputs(bool enable)
 {
   setEnablePosition(enable);
   setEnableOrientation(enable);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2008-12-09 06:09:56 UTC (rev 867)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2008-12-09 06:17:14 UTC (rev 868)
@@ -106,7 +106,7 @@
 
   /// Set availabilty of all output ports
   /// This is mostly for convinience in testing
-  void setEnableAll(bool enable);
+  void setEnableAllOutputs(bool enable);
 
 protected:
   MechanicLink mMechanicLink;

Modified: branches/OpenFDM-StateSeparation/src/test/foucault.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2008-12-09 06:09:56 UTC (rev 867)
+++ branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2008-12-09 06:17:14 UTC (rev 868)
@@ -43,7 +43,7 @@
 
   Sensor* sensor = new Sensor("Sensor");
   sensor->setPosition(mass->getPosition());
-  sensor->setEnableAll(true);
+  sensor->setEnableAllOutputs(true);
   group->addChild(sensor);
 
   group->connect(fixedRootJoint->getPort(0), rotationalJoint1->getPort(0));

Modified: branches/OpenFDM-StateSeparation/src/test/mechanic.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/mechanic.cpp	2008-12-09 06:09:56 UTC (rev 867)
+++ branches/OpenFDM-StateSeparation/src/test/mechanic.cpp	2008-12-09 06:17:14 UTC (rev 868)
@@ -34,7 +34,7 @@
 
   Sensor* sensor = new Sensor("Sensor");
   sensor->setPosition(mass->getPosition());
-  sensor->setEnableAll(true);
+  sensor->setEnableAllOutputs(true);
   group->addChild(sensor);
 
   group->connect(mobileRootJoint->getPort("link"), rigidBody->getPort("link0"));
@@ -73,12 +73,12 @@
 
   Sensor* sensor = new Sensor("Sensor");
   sensor->setPosition(mass->getPosition());
-  sensor->setEnableAll(true);
+  sensor->setEnableAllOutputs(true);
   group->addChild(sensor);
 
   Sensor* sensor2 = new Sensor("Sensor 2");
   sensor2->setPosition(mass2->getPosition());
-  sensor2->setEnableAll(true);
+  sensor2->setEnableAllOutputs(true);
   group->addChild(sensor2);
 
   group->connect(mobileRootJoint->getPort("link"), rigidBody->getPort("link0"));
@@ -98,7 +98,7 @@
   InternalSensor* internalSensor = new InternalSensor("Internal Sensor");
   internalSensor->setPosition0(Vector3(0, 0, 1));
   internalSensor->setPosition1(Vector3(0, 0, 0.8));
-  internalSensor->setEnableAll(true);
+  internalSensor->setEnableAllOutputs(true);
   internalSensor->setEnableForce(true);
   group->addChild(internalSensor);
   group->connect(internalSensor->getPort("link0"),
@@ -110,7 +110,7 @@
   InternalSensor* internalSensor2 = new InternalSensor("Internal Sensor 2");
   internalSensor2->setPosition0(Vector3(0, 0, 0.8));
   internalSensor2->setPosition1(Vector3(0, 0, 1));
-  internalSensor2->setEnableAll(true);
+  internalSensor2->setEnableAllOutputs(true);
   group->addChild(internalSensor2);
   group->connect(internalSensor2->getPort("link1"),
                  rigidBody->getPort("internalSensorLink2"));



From frohlich at mail.berlios.de  Tue Dec  9 21:14:07 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 9 Dec 2008 21:14:07 +0100
Subject: [OpenFDM-svn] r869 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812092014.mB9KE7v5018012@sheep.berlios.de>

Author: frohlich
Date: 2008-12-09 21:14:06 +0100 (Tue, 09 Dec 2008)
New Revision: 869

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
Log:
Fixes to the WheelContact

M    src/OpenFDM/WheelContact.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-09 06:17:14 UTC (rev 868)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-09 20:14:06 UTC (rev 869)
@@ -66,7 +66,7 @@
   Plane lp = mountFrame.planeFromRef(groundValues.plane);
   
   // Get the intersection length.
-  real_type distHubGround = fabs(lp.getDist(Vector3::zeros()));
+  real_type distHubGround = fabs(lp.getDist());
   real_type compressLength = mWheelRadius - distHubGround;
   
   // Don't bother if we do not intersect the ground.
@@ -91,11 +91,6 @@
   // negative when decompressed.
   real_type compressVel = - lp.scalarProjectToNormal(relVel.getLinear());
   
-  // Get the plane normal force.
-  real_type normForce = computeNormalForce(compressLength, compressVel);
-  // The normal force cannot get negative here.
-  normForce = max(static_cast<real_type>(0), normForce);
-  
   // Get a transform from the current frames coordinates into
   // wheel coordinates.
   // The wheel coordinates x axis is defined by the forward orientation
@@ -110,7 +105,7 @@
 
   // The wheel rotation speed wrt ground
   Vector3 rotVel = relVel.getAngular();
-  real_type omegaR = rotVel(1) * distHubGround;
+  real_type omegaR = dot(rotVel, mAxis) * distHubGround;
 
 //   Log(Model,Error) << trans(groundVel) << " "
 //                    << trans(wheelVel) << " "
@@ -119,6 +114,10 @@
 //                    << distHubGround << endl;
 
 
+  // Get the plane normal force.
+  real_type normForce = computeNormalForce(compressLength, compressVel);
+  // The normal force cannot get negative here.
+  normForce = max(static_cast<real_type>(0), normForce);
 
   // Get the friction force.
   Vector2 fricForce = computeFrictionForce(normForce, wheelVel,
@@ -126,7 +125,7 @@
   
   // The resulting force is the sum of both.
   // The minus sign is because of the direction of the surface normal.
-  Vector3 force = fricForce(0)*forward + fricForce(1)*side
+  Vector3 force = - fricForce(0)*forward - fricForce(1)*side
     - normForce*lp.getNormal();
   
   // We don't have an angular moment.
@@ -150,7 +149,7 @@
   // The slip angle is the angle between the 'velocity vector' and 
   // the wheel forward direction.
   real_type slipAngle = rad2deg*atan2(vel(1), fabs(vel(0)));
-//   slipAngle = saturate(slipAngle, 10*fabs(vel(2)));
+//   slipAngle = saturate(slipAngle, 10*fabs(vel(1)));
   slipAngle = smoothSaturate(slipAngle, 10*fabs(vel(1)));
   
 //   Vector2 slip(wheelSlip, slipAngle);



From frohlich at mail.berlios.de  Tue Dec  9 21:24:45 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 9 Dec 2008 21:24:45 +0100
Subject: [OpenFDM-svn] r870 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812092024.mB9KOjQp018767@sheep.berlios.de>

Author: frohlich
Date: 2008-12-09 21:24:45 +0100 (Tue, 09 Dec 2008)
New Revision: 870

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
Log:
Correctly indent.

M    CartesianJoint.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-09 20:14:06 UTC (rev 869)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-09 20:24:45 UTC (rev 870)
@@ -259,35 +259,35 @@
     const VectorN& getVelDot() const
     { return velDot; }
     
-  bool allocStates()
-  {
-    unsigned numContinousStates = getNode().getNumContinousStateValues();
-    for (unsigned i = 0; i < numContinousStates; ++i) {
-      const ContinousStateInfo* continousStateInfo;
-      continousStateInfo = getNode().getContinousStateInfo(i);
-      mContinousState.setValue(*continousStateInfo, *this);
-      mContinousStateDerivative.setValue(*continousStateInfo, *this);
+    bool allocStates()
+    {
+      unsigned numContinousStates = getNode().getNumContinousStateValues();
+      for (unsigned i = 0; i < numContinousStates; ++i) {
+        const ContinousStateInfo* continousStateInfo;
+        continousStateInfo = getNode().getContinousStateInfo(i);
+        mContinousState.setValue(*continousStateInfo, *this);
+        mContinousStateDerivative.setValue(*continousStateInfo, *this);
+      }
+      unsigned numDiscreteStates = getNode().getNumDiscreteStateValues();
+      for (unsigned i = 0; i < numDiscreteStates; ++i) {
+        const StateInfo* stateInfo;
+        stateInfo = getNode().getDiscreteStateInfo(i);
+        mDiscreteState.setValue(*stateInfo, *this);
+      }
+      return true;
     }
-    unsigned numDiscreteStates = getNode().getNumDiscreteStateValues();
-    for (unsigned i = 0; i < numDiscreteStates; ++i) {
-      const StateInfo* stateInfo;
-      stateInfo = getNode().getDiscreteStateInfo(i);
-      mDiscreteState.setValue(*stateInfo, *this);
-    }
-    return true;
-  }
-
-  virtual ContinousStateValue* getStateValue(const ContinousStateInfo& info)
-  { return mContinousState.getValue(info); }
-  virtual ContinousStateValue* getStateDerivative(const ContinousStateInfo& info)
-  { return mContinousStateDerivative.getValue(info); }
-
-  /// Set port value for the given port.
-  virtual const PortValue* getPortValue(const PortInfo& portInfo) const
-  {  return mPortValueList.getPortValue(portInfo); }
+    
+    virtual ContinousStateValue* getStateValue(const ContinousStateInfo& info)
+    { return mContinousState.getValue(info); }
+    virtual ContinousStateValue* getStateDerivative(const ContinousStateInfo& info)
+    { return mContinousStateDerivative.getValue(info); }
+    
+    /// Set port value for the given port.
+    virtual const PortValue* getPortValue(const PortInfo& portInfo) const
+    {  return mPortValueList.getPortValue(portInfo); }
     void setPortValue(const PortInfo& portInfo, PortValue* portValue)
     { mPortValueList.setPortValue(portInfo.getIndex(), portValue); }
-  
+    
 protected:
   // PortValues
   PortValueList mPortValueList;



From frohlich at mail.berlios.de  Tue Dec  9 21:25:49 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 9 Dec 2008 21:25:49 +0100
Subject: [OpenFDM-svn] r871 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812092025.mB9KPn3W018821@sheep.berlios.de>

Author: frohlich
Date: 2008-12-09 21:25:49 +0100 (Tue, 09 Dec 2008)
New Revision: 871

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
Log:
Reindent.

M    CartesianJoint.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-09 20:24:45 UTC (rev 870)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-09 20:25:49 UTC (rev 871)
@@ -288,16 +288,16 @@
     void setPortValue(const PortInfo& portInfo, PortValue* portValue)
     { mPortValueList.setPortValue(portInfo.getIndex(), portValue); }
     
-protected:
-  // PortValues
-  PortValueList mPortValueList;
+  protected:
+    // PortValues
+    PortValueList mPortValueList;
+    
+    // Continous States
+    ContinousStateValueVector mContinousState;
+    ContinousStateValueVector mContinousStateDerivative;
+    // Discrete States
+    DiscreteStateValueVector mDiscreteState;
 
-  // Continous States
-  ContinousStateValueVector mContinousState;
-  ContinousStateValueVector mContinousStateDerivative;
-  // Discrete States
-  DiscreteStateValueVector mDiscreteState;
-
   private:
     // Stores some values persistent accross velocity/articulation/acceleration
     MatrixFactorsNN hIh;



From frohlich at mail.berlios.de  Tue Dec  9 21:51:25 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 9 Dec 2008 21:51:25 +0100
Subject: [OpenFDM-svn] r872 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812092051.mB9KpPFn020226@sheep.berlios.de>

Author: frohlich
Date: 2008-12-09 21:51:24 +0100 (Tue, 09 Dec 2008)
New Revision: 872

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
Log:
Remove unused functions.

M    MechanicLinkValue.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-12-09 20:25:49 UTC (rev 871)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-12-09 20:51:24 UTC (rev 872)
@@ -46,14 +46,6 @@
   { mArticulatedInertia += inertia; }
 
 
-  void setPosAndVel(const MechanicLinkValue& linkValue)
-  {
-    mArticulatedInertia = SpatialInertia::zeros();
-    mArticulatedForce = Vector6::zeros();
-    mFrame.setPosAndVel(linkValue.getFrame());
-  }
-  void setAccel(const MechanicLinkValue& linkValue)
-  { mFrame.setAccel(linkValue.getFrame()); }
   void setPosAndVel(const MechanicLinkValue& linkValue, const Vector3& position,
                     const Quaternion& orientation, const Vector6& velocity)
   {
@@ -71,12 +63,6 @@
     mFrame.setPosAndVel(parentAngularVel, position, orientation, velocity);
   }
 
-  void applyArticulation(const MechanicLinkValue& linkValue)
-  {
-    applyForce(linkValue.mArticulatedForce);
-    applyInertia(linkValue.mArticulatedInertia);
-  }
-
   const Vector3& getDesignPosition() const
   { return mDesignPosition; }
   void setDesignPosition(const Vector3& designPosition)



From frohlich at mail.berlios.de  Tue Dec  9 21:51:55 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 9 Dec 2008 21:51:55 +0100
Subject: [OpenFDM-svn] r873 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812092051.mB9KptqH020290@sheep.berlios.de>

Author: frohlich
Date: 2008-12-09 21:51:54 +0100 (Tue, 09 Dec 2008)
New Revision: 873

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
Log:
Rename mRelativePosition to mRelativeDesignPosition.

M    CartesianJoint.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-09 20:51:24 UTC (rev 872)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-09 20:51:54 UTC (rev 873)
@@ -128,7 +128,7 @@
     virtual void initDesignPosition()
     {
       Vector3 jointPosition = mCartesianJoint->getPosition();
-      mRelativePosition = jointPosition - mParentLink->getDesignPosition();
+      mRelativeDesignPosition = jointPosition-mParentLink->getDesignPosition();
       mChildLink->setDesignPosition(jointPosition);
 
       mJointMatrix = mCartesianJoint->getJointMatrix();
@@ -172,7 +172,7 @@
     void setPosAndVel(const Vector3& position, const Quaternion& orientation,
                       const VectorN& velocity)
     {
-      mChildLink->setPosAndVel(*mParentLink, mRelativePosition + position,
+      mChildLink->setPosAndVel(*mParentLink, mRelativeDesignPosition + position,
                                orientation, mJointMatrix*velocity);
     }
 
@@ -305,7 +305,7 @@
     VectorN velDot;
     VectorN mJointForce;
 
-    Vector3 mRelativePosition;
+    Vector3 mRelativeDesignPosition;
 
     Matrix6N mJointMatrix;
     



From frohlich at mail.berlios.de  Wed Dec 10 07:18:59 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 10 Dec 2008 07:18:59 +0100
Subject: [OpenFDM-svn] r874 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200812100618.mBA6IxFx020346@sheep.berlios.de>

Author: frohlich
Date: 2008-12-10 07:18:57 +0100 (Wed, 10 Dec 2008)
New Revision: 874

Added:
   branches/OpenFDM-StateSeparation/src/OpenFDM/CoordinateSystem.h
   branches/OpenFDM-StateSeparation/src/test/coordsys.cpp
Removed:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.cpp
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
   branches/OpenFDM-StateSeparation/src/test/Makefile.am
Log:
Introduce a CoordinateSystem class.

AM   src/test/coordsys.cpp
M    src/test/Makefile.am
M    src/OpenFDM/MobileRootJoint.cpp
M    src/OpenFDM/WheelContact.cpp
M    src/OpenFDM/CartesianJoint.h
M    src/OpenFDM/Makefile.am
D    src/OpenFDM/Frame.cpp
M    src/OpenFDM/Frame.h
M    src/OpenFDM/MechanicLinkValue.h
A    src/OpenFDM/CoordinateSystem.h
M    src/OpenFDM/FixedRootJoint.cpp
M    src/OpenFDM/Environment.h
M    src/OpenFDM/HDF5SystemOutput.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-09 20:51:54 UTC (rev 873)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-10 06:18:57 UTC (rev 874)
@@ -172,6 +172,13 @@
     void setPosAndVel(const Vector3& position, const Quaternion& orientation,
                       const VectorN& velocity)
     {
+      // Set up the local coordinate system of the joint
+      mRelativeCoordinateSystem.setPosition(mRelativeDesignPosition + position);
+      mRelativeCoordinateSystem.setOrientation(orientation);
+
+      // Propagate the reference coordinate system to the parent.
+      mChildLink->setCoordinateSystem(mParentLink->getCoordinateSystem().toReference(mRelativeCoordinateSystem));
+
       mChildLink->setPosAndVel(*mParentLink, mRelativeDesignPosition + position,
                                orientation, mJointMatrix*velocity);
     }
@@ -210,8 +217,10 @@
       I -= SpatialInertia(Ih*hIh.solve(trans(Ih)));
       
       // Transform to parent link's coordinates and apply to the parent link
-      mParentLink->applyForce(mChildLink->getFrame().forceToParent(force));
-      mParentLink->applyInertia(mChildLink->getFrame().inertiaToParent(I));
+      force = mRelativeCoordinateSystem.forceToReference(force);
+      I = mRelativeCoordinateSystem.inertiaToReference(I);
+      mParentLink->applyForce(force);
+      mParentLink->applyInertia(I);
     }
 
     /** Compute the acceleration step for a given joint force.
@@ -219,9 +228,9 @@
      */
     void accelerateDueToForce()
     {
-      Vector6 parentSpAccel
-        = mChildLink->getFrame().motionFromParent(mParentLink->getFrame().getSpAccel());
-    
+      Vector6 parentSpAccel = mParentLink->getFrame().getSpAccel();
+      parentSpAccel = mRelativeCoordinateSystem.motionToLocal(parentSpAccel);
+
       Vector6 f = mChildLink->getInertia()*parentSpAccel + pAlpha;
       velDot = hIh.solve(mJointForce - trans(mJointMatrix)*f);
       mChildLink->setAccel(*mParentLink, mJointMatrix*velDot);
@@ -244,8 +253,10 @@
       force += I*(mChildLink->getFrame().getHdot() + mJointMatrix*velDot);
       
       // Transform to parent link's coordinates and apply to the parent link
-      mParentLink->applyForce(mChildLink->getFrame().forceToParent(force));
-      mParentLink->applyInertia(mChildLink->getFrame().inertiaToParent(I));
+      force = mRelativeCoordinateSystem.forceToReference(force);
+      I = mRelativeCoordinateSystem.inertiaToReference(I);
+      mParentLink->applyForce(force);
+      mParentLink->applyInertia(I);
     }
     
     /** Compute the acceleration step for a given velocity derivative.
@@ -306,6 +317,7 @@
     VectorN mJointForce;
 
     Vector3 mRelativeDesignPosition;
+    CoordinateSystem mRelativeCoordinateSystem;
 
     Matrix6N mJointMatrix;
     

Added: branches/OpenFDM-StateSeparation/src/OpenFDM/CoordinateSystem.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CoordinateSystem.h	2008-12-09 20:51:54 UTC (rev 873)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CoordinateSystem.h	2008-12-10 06:18:57 UTC (rev 874)
@@ -0,0 +1,165 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_CoordinateSystem_H
+#define OpenFDM_CoordinateSystem_H
+
+#include <iosfwd>
+#include "Vector.h"
+#include "Plane.h"
+#include "Transform.h"
+#include "Matrix.h"
+#include "Quaternion.h"
+#include "Rotation.h"
+#include "Inertia.h"
+
+// #include "Frame.h"
+
+namespace OpenFDM {
+
+class CoordinateSystem {
+public:
+  CoordinateSystem() :
+    mPosition(Vector3::zeros()),
+    mOrientation(Quaternion::unit())
+  { }
+  CoordinateSystem(const Vector3& position) :
+    mPosition(position),
+    mOrientation(Quaternion::unit())
+  { }
+  CoordinateSystem(const Quaternion& orientation) :
+    mPosition(Vector3::zeros()),
+    mOrientation(orientation)
+  { }
+  CoordinateSystem(const Vector3& position, const Quaternion& orientation) :
+    mPosition(position),
+    mOrientation(orientation)
+  { }
+  CoordinateSystem(const CoordinateSystem& coordinateSystem) :
+    mPosition(coordinateSystem.mPosition),
+    mOrientation(coordinateSystem.mOrientation)
+  { }
+  /// For a transition time, this might be a good idea
+//   CoordinateSystem(const Frame& frame) :
+//     mPosition(frame.getRefPos()),
+//     mOrientation(frame.getRefOr())
+//   { }
+
+  /// Return the position of this coordinate system wrt the reference coordinate
+  /// system. The position is measured in the reference coordinate
+  /// systems coordinates.
+  const Vector3& getPosition() const
+  { return mPosition; }
+  void setPosition(const Vector3& position)
+  { mPosition = position; }
+
+  /// Return the orientation of this coordinate system wrt the reference
+  /// coordinate system. The orientation is measured in the reference coordinate
+  /// systems coordinates.
+  const Rotation& getOrientation() const
+  { return mOrientation; }
+  void setOrientation(const Rotation& orientation)
+  { mOrientation = orientation; }
+  void setOrientation(const Quaternion& orientation)
+  { mOrientation = orientation; }
+
+  /// Set up a new coordinate system with a relative position
+  /// and a relative orientation to this parent coordinate system.
+  /// ??? is that below ...
+  CoordinateSystem getRelative(const Vector3& position) const
+  { return CoordinateSystem(toReference(position), mOrientation); }
+  CoordinateSystem getRelative(const Quaternion& orientation) const
+  { return CoordinateSystem(mPosition, toReference(orientation)); }
+  CoordinateSystem getRelative(const Vector3& p, const Quaternion& o) const
+  { return CoordinateSystem(toReference(p), toReference(o)); }
+
+  // Returns the reference coordinates system in this coordinate systems
+  // coordinates.
+  CoordinateSystem referenceToLocal() const
+  { return toLocal(CoordinateSystem()); }
+
+  /// Conversion functions between local and reference coordinates
+  CoordinateSystem toReference(const CoordinateSystem& coorinateSystem) const
+  { return CoordinateSystem(toReference(coorinateSystem.getPosition()),
+                            toReference(coorinateSystem.getOrientation())); }
+  CoordinateSystem toLocal(const CoordinateSystem& coorinateSystem) const
+  { return CoordinateSystem(toLocal(coorinateSystem.getPosition()),
+                            toLocal(coorinateSystem.getOrientation())); }
+
+  Vector3 toReference(const Vector3& position) const
+  { return mOrientation.backTransform(position) + mPosition; }
+  Vector3 toLocal(const Vector3& position) const
+  { return mOrientation.transform(position - mPosition); }
+  Quaternion toReference(const Quaternion& orientation) const
+  { return mOrientation*orientation; }
+  Quaternion toLocal(const Quaternion& orientation) const
+  { return orientation*inverse(mOrientation); }
+
+  Vector3 rotToReference(const Vector3& v) const
+  { return mOrientation.backTransform(v); }
+  Vector3 rotToLocal(const Vector3& v) const
+  { return mOrientation.transform(v); }
+
+  Vector6 rotToReference(const Vector6& v) const
+  { return Vector6(mOrientation.backTransform(v.getAngular()),
+                   mOrientation.backTransform(v.getLinear())); }
+  Vector6 rotToLocal(const Vector6& v) const
+  { return Vector6(mOrientation.transform(v.getAngular()),
+                   mOrientation.transform(v.getLinear())); }
+
+
+  Vector6 motionToReference(const Vector6& motion) const
+  { return motionFrom(mPosition, mOrientation, motion); }
+  Vector6 motionToLocal(const Vector6& motion) const
+  { return motionTo(mPosition, mOrientation, motion); }
+
+  Vector6 forceToReference(const Vector6& force) const
+  { return forceFrom(mPosition, mOrientation, force); }
+  Vector6 forceToLocal(const Vector6& force) const
+  { return forceTo(mPosition, mOrientation, force); }
+
+  SpatialInertia inertiaToReference(const SpatialInertia& inertia) const
+  {
+    if (mOrientation.isIdentity()) {
+      if (mPosition == Vector3::zeros()) {
+        return inertia;
+      } else {
+        return inertiaFrom(mPosition, inertia);
+      }
+    } else {
+      if (mPosition == Vector3::zeros()) {
+        return inertiaFrom(mOrientation, inertia);
+      } else {
+        return inertiaFrom(mPosition, mOrientation, inertia);
+      }
+    }
+  }
+  // Seldom used function, optimize at some time
+  SpatialInertia inertiaToLocal(const SpatialInertia& inertia) const
+  { return referenceToLocal().inertiaToReference(inertia); }
+
+  Plane planeToReference(const Plane& plane) const
+  { return planeFrom(mPosition, mOrientation, plane); }
+  Plane planeToLocal(const Plane& plane) const
+  { return planeTo(mPosition, mOrientation, plane); }
+
+private:
+  Vector3 mPosition;
+  Rotation mOrientation;
+};
+
+template<typename char_type, typename traits_type>
+inline
+std::basic_ostream<char_type, traits_type>&
+operator<<(std::basic_ostream<char_type, traits_type>& os,
+           const CoordinateSystem& coordinateSystem)
+{
+  os << os.widen('(') << trans(coordinateSystem.getPosition()) << os.widen(' ')
+     << coordinateSystem.getOrientation() << os.widen(')');
+  return os;
+}
+
+} // namespace OpenFDM
+
+#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h	2008-12-09 20:51:54 UTC (rev 873)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Environment.h	2008-12-10 06:18:57 UTC (rev 874)
@@ -9,6 +9,7 @@
 #include "AbstractGround.h"
 #include "AbstractPlanet.h"
 #include "AbstractWind.h"
+#include "CoordinateSystem.h"
 #include "Matrix.h"
 #include "Plane.h"
 #include "Referenced.h"
@@ -99,6 +100,18 @@
     return mGround->getGroundPlane(*this, t, pos);
   }
 
+
+  /// Return the plane at the position in the given coordinate system.
+  /// The plane is also returned in the given coordinate system
+  GroundValues
+  getGroundPlane(const CoordinateSystem& cs, const real_type& t) const
+  {
+    GroundValues groundValues = getGroundPlane(t, cs.getPosition());
+    return GroundValues(cs.planeToLocal(groundValues.plane),
+                        cs.rotToLocal(groundValues.vel),
+                        groundValues.friction);
+  }
+
 private:
   SharedPtr<const AbstractWind> mWind;
   SharedPtr<const AbstractPlanet> mPlanet;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp	2008-12-09 20:51:54 UTC (rev 873)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp	2008-12-10 06:18:57 UTC (rev 874)
@@ -78,6 +78,8 @@
   const Environment* environment;
   environment = portValues[mMechanicLink].getEnvironment();
   Vector3 angularBaseVelocity = environment->getAngularVelocity(task.getTime());
+  portValues[mMechanicLink].setCoordinateSystem(CoordinateSystem(mPosition,
+                                                                 mOrientation));
   portValues[mMechanicLink].setPosAndVel(angularBaseVelocity, mPosition,
                                          mOrientation, Vector6::zeros());
 }

Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.cpp	2008-12-09 20:51:54 UTC (rev 873)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.cpp	2008-12-10 06:18:57 UTC (rev 874)
@@ -1,52 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#include "Frame.h"
-
-#include "Assert.h"
-#include "LogStream.h"
-#include "Object.h"
-#include "Vector.h"
-#include "Matrix.h"
-#include "Quaternion.h"
-#include "Inertia.h"
-
-namespace OpenFDM {
-
-Frame::Frame() :
-  mPosition(Vector3::zeros()),
-  mOrientation(Quaternion::unit()),
-  mRelVel(Vector6::zeros()),
-  mRelVelDot(Vector6::zeros()),
-  mParentSpVel(Vector6::zeros()),
-  mParentSpAccel(Vector6::zeros()),
-  mRefOrient(Quaternion::unit()),
-  mRefPos(Vector3::zeros()),
-  mRefVel(Vector6::zeros())
-{
-}
-
-Frame::~Frame(void)
-{
-}
-
-SpatialInertia
-Frame::inertiaToParent(const SpatialInertia& I) const
-{
-  if (getOrientation().isIdentity()) {
-    if (getPosition() == Vector3::zeros()) {
-      return I;
-    } else {
-      return inertiaFrom(getPosition(), I);
-    }
-  } else {
-    if (getPosition() == Vector3::zeros()) {
-      return inertiaFrom(getOrientation(), I);
-    } else {
-      return inertiaFrom(getPosition(), getOrientation(), I);
-    }
-  }
-}
-
-} // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h	2008-12-09 20:51:54 UTC (rev 873)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h	2008-12-10 06:18:57 UTC (rev 874)
@@ -12,7 +12,6 @@
 #include "Matrix.h"
 #include "Quaternion.h"
 #include "Rotation.h"
-#include "Inertia.h"
 
 namespace OpenFDM {
 
@@ -23,8 +22,19 @@
 
 class Frame {
 public:
-  Frame();
-  ~Frame(void);
+  Frame() :
+    mPosition(Vector3::zeros()),
+    mOrientation(Quaternion::unit()),
+    mRelVel(Vector6::zeros()),
+    mRelVelDot(Vector6::zeros()),
+    mParentSpVel(Vector6::zeros()),
+    mParentSpAccel(Vector6::zeros()),
+    mRefOrient(Quaternion::unit()),
+    mRefPos(Vector3::zeros()),
+    mRefVel(Vector6::zeros())
+  { }
+  ~Frame(void)
+  { }
 
   void setPosAndVel(const Frame& parent)
   {
@@ -243,7 +253,7 @@
   }
 
 
-  /** FIXME
+  /** FIXME belongs into the joints.
    */
   Vector6 getHdot(void) const
   {
@@ -317,14 +327,6 @@
   Vector6 forceToParent(const Vector6& v) const
   { return forceFrom(getPosition(), getOrientation(), v); }
 
-  /** Spatial inertia transform.
-      Transforms a spatial inertia matrix from the current frame to the parent
-      frame.
-      @param I The inertia matrix in the current frame to be transformed.
-      @return  The inertia matrix transformed to the parent frame.
-   */
-  SpatialInertia inertiaToParent(const SpatialInertia& I) const;
-
   Plane planeFromParent(const Plane& plane) const
   { return planeTo(getPosition(), getOrientation(), plane); }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2008-12-09 20:51:54 UTC (rev 873)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2008-12-10 06:18:57 UTC (rev 874)
@@ -363,11 +363,11 @@
     virtual void append()
     {
       _position.append(mMechanicLinkValue->getFrame().getPosition());
-      _refPosition.append(mMechanicLinkValue->getFrame().getRefPosition());
+      _refPosition.append(mMechanicLinkValue->getCoordinateSystem().getPosition());
       _orientation.append(mMechanicLinkValue->getFrame().getOrientation());
       _eulerAngle.append(mMechanicLinkValue->getFrame().getOrientation().getEuler());
-      _refOrientation.append(mMechanicLinkValue->getFrame().getRefOrientation());
-      _refEulerAngle.append(mMechanicLinkValue->getFrame().getRefOrientation().getEuler());
+      _refOrientation.append(mMechanicLinkValue->getCoordinateSystem().getOrientation());
+      _refEulerAngle.append(mMechanicLinkValue->getCoordinateSystem().getOrientation().getEuler());
       _velocity.append(mMechanicLinkValue->getFrame().getSpVel());
       _refVelocity.append(mMechanicLinkValue->getFrame().getRefVel());
       _acceleration.append(mMechanicLinkValue->getFrame().getSpAccel());

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-09 20:51:54 UTC (rev 873)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-10 06:18:57 UTC (rev 874)
@@ -28,6 +28,7 @@
   ContinousStateInfoVector.h \
   ContinousStateValue.h \
   ContinousStateValueVector.h \
+  CoordinateSystem.h \
   CowPtr.h \
   DiscreteStateValueVector.h \
   DoPri5.h \
@@ -148,7 +149,6 @@
   ExplicitAdams.cpp \
   ExplicitEuler.cpp \
   FlatPlanet.cpp \
-  Frame.cpp \
   Function.cpp \
   Group.cpp \
   GroupInterfaceNode.cpp \

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-12-09 20:51:54 UTC (rev 873)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-12-10 06:18:57 UTC (rev 874)
@@ -5,10 +5,11 @@
 #ifndef OpenFDM_MechanicLinkValue_H
 #define OpenFDM_MechanicLinkValue_H
 
+#include "CoordinateSystem.h"
+#include "Environment.h"
+#include "Frame.h"
 #include "Inertia.h"
 #include "PortValue.h"
-#include "Frame.h"
-#include "Environment.h"
 
 namespace OpenFDM {
 
@@ -25,6 +26,16 @@
   Frame& getFrame()
   { return mFrame; }
 
+  /// Currently duplicate information from the Frame.
+  /// This is an attempt to seperate the coordinate system stuff away from
+  /// the reference frame handling.
+  const CoordinateSystem& getCoordinateSystem() const
+  { return mCoordinateSystem; }
+  CoordinateSystem& getCoordinateSystem()
+  { return mCoordinateSystem; }
+  void setCoordinateSystem(const CoordinateSystem& coordinateSystem)
+  { mCoordinateSystem = coordinateSystem; }
+
   const SpatialInertia& getInertia() const
   { return mArticulatedInertia; }
   void setInertia(const SpatialInertia& inertia)
@@ -68,6 +79,12 @@
   void setDesignPosition(const Vector3& designPosition)
   { mDesignPosition = designPosition; }
 
+  /// Returns the spatial reference velocity at the local position
+  Vector6 getReferenceVelocity(const Vector3& position) const
+  { return motionTo(position, mFrame.getRefVel()); }
+  Vector6 getReferenceVelocity() const
+  { return mFrame.getRefVel(); }
+
   // This is a per link value because of interacts that can be child of two
   // different roots.
   // FIXME, enforce setting that in the contructor
@@ -78,9 +95,9 @@
   { OpenFDMAssert(environment); mEnvironment = environment; }
 
 protected:
-  // May be build a class hierarchy that accounts for different inputs
-  // and outputs a rigid body can have.
-  // Example: force port, force and inertia, frame port, velocity port
+  /// The local coordinate system of the mechanic link.
+  CoordinateSystem mCoordinateSystem;
+
   Frame mFrame;
   Vector6 mArticulatedForce;
   SpatialInertia mArticulatedInertia;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-12-09 20:51:54 UTC (rev 873)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-12-10 06:18:57 UTC (rev 874)
@@ -63,6 +63,8 @@
   Quaternion orientation = continousState[*mOrientationStateInfo];
   Vector6 velocity = continousState[*mVelocityStateInfo];
 
+  portValues[mMechanicLink].setCoordinateSystem(CoordinateSystem(position,
+                                                                 orientation));
   portValues[mMechanicLink].setPosAndVel(angularBaseVelocity,
                                          position, orientation, velocity);
 }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-09 20:51:54 UTC (rev 873)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-10 06:18:57 UTC (rev 874)
@@ -43,28 +43,21 @@
   const Environment* environment;
   environment = portValues[mMechanicLink].getEnvironment();
 
-  const Frame& frame = portValues[mMechanicLink].getFrame();
+  const CoordinateSystem& cs = portValues[mMechanicLink].getCoordinateSystem();
 
   // FIXME, for now relative position
   Vector3 position = mPosition - portValues[mMechanicLink].getDesignPosition();
 
-  // FIXME, frame is constant in its parameters move into a useful context.
-  // Can also make use of that in the Sensor and so on..
-  // Also need Coordinate systems within a frame
-  Frame mountFrame;
-  mountFrame.setPosAndVel(frame, position,
-                          Quaternion::unit(), Vector6::zeros());
-  mountFrame.setAccel(frame, Vector6::zeros());
+  // The coordinate system at the hub.
+  CoordinateSystem hubCoordinateSystem(cs.getRelative(position));
 
-  // This might go into the environment???
-  // Query at a position wrt a coordinate system
-  Vector3 refPos = frame.posToRef(position);
-  // Vector3 refPos = mountFrame.posToRef(Vector3::zeros());
-  GroundValues groundValues = environment->getGroundPlane(task.getTime(), refPos);
+  // Get the ground values in the hub coordinate system.
+  GroundValues groundValues =
+    environment->getGroundPlane(hubCoordinateSystem, task.getTime());
 
   // Transform the plane equation to the local frame.
-  Plane lp = mountFrame.planeFromRef(groundValues.plane);
-  
+  Plane lp = groundValues.plane;
+ 
   // Get the intersection length.
   real_type distHubGround = fabs(lp.getDist());
   real_type compressLength = mWheelRadius - distHubGround;
@@ -76,14 +69,10 @@
   Vector3 contactPoint = distHubGround*lp.getNormal();
   
   // The velocity of the ground patch in the current frame.
-  Vector6 groundVel(mountFrame.rotFromRef(groundValues.vel.getAngular()),
-                    mountFrame.rotFromRef(groundValues.vel.getLinear()));
-  groundVel -= mountFrame.getRefVel();
+  Vector6 groundVel = groundValues.vel;
   // Now get the relative velocity of the ground wrt the hub
-  Vector6 relVel = - groundVel;
-//   Log(Model,Error) << trans(mountFrame.getRelVel()) << " "
-//                    << trans(groundVel) << " "
-//                    << trans(mountFrame.motionToParent(relVel)) << endl;
+  Vector6 relVel
+    = portValues[mMechanicLink].getReferenceVelocity(position) - groundVel;
 
 
   // The velocity perpandicular to the plane.

Modified: branches/OpenFDM-StateSeparation/src/test/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/Makefile.am	2008-12-09 20:51:54 UTC (rev 873)
+++ branches/OpenFDM-StateSeparation/src/test/Makefile.am	2008-12-10 06:18:57 UTC (rev 874)
@@ -1,7 +1,7 @@
 INCLUDES = -I$(srcdir)/..
 
 # define some util programs
-bin_PROGRAMS = foucault mechanic structure tiretestrig
+bin_PROGRAMS = foucault mechanic structure tiretestrig coordsys
 
 # define some unit tests
 check_PROGRAMS = constintegral harmonic limit linalg quattest simulationtime unitstest
@@ -10,6 +10,9 @@
 tiretestrig_SOURCES = tiretestrig.cpp
 tiretestrig_LDADD = ../OpenFDM/libOpenFDM.la
 
+coordsys_SOURCES = coordsys.cpp
+coordsys_LDADD = ../OpenFDM/libOpenFDM.la
+
 unitstest_SOURCES = unitstest.cpp
 unitstest_LDADD = ../OpenFDM/libOpenFDM.la
 

Added: branches/OpenFDM-StateSeparation/src/test/coordsys.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/coordsys.cpp	2008-12-09 20:51:54 UTC (rev 873)
+++ branches/OpenFDM-StateSeparation/src/test/coordsys.cpp	2008-12-10 06:18:57 UTC (rev 874)
@@ -0,0 +1,73 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
+ *
+ */
+
+#include <iostream>
+#include <OpenFDM/CoordinateSystem.h>
+#include <OpenFDM/Quaternion.h>
+#include <OpenFDM/Matrix.h>
+#include <OpenFDM/Rotation.h>
+#include <OpenFDM/Transform.h>
+#include <OpenFDM/Vector.h>
+
+namespace OpenFDM {
+
+class ReferenceFrame {
+public:
+  ReferenceFrame() :
+    mSpatialVelocity(Vector6::zeros()),
+    mSpatialAcceleration(Vector6::zeros())
+  { }
+  ReferenceFrame(const ReferenceFrame& referenceFrame) :
+    mSpatialVelocity(referenceFrame.mSpatialVelocity),
+    mSpatialAcceleration(referenceFrame.mSpatialAcceleration)
+  { }
+
+  const Vector6& getSpatialVelocity() const
+  { return mSpatialVelocity; }
+  void setSpatialVelocity(const Vector6& spatialVelocity)
+  { mSpatialVelocity = spatialVelocity; }
+
+  const Vector6& getSpatialAcceleration() const
+  { return mSpatialAcceleration; }
+  void setSpatialAcceleration(const Vector6& spatialAcceleration)
+  { mSpatialAcceleration = spatialAcceleration; }
+
+  CoordinateSystem mCoordinateSystem; /// ????
+private:
+  Vector6 mSpatialVelocity;
+  Vector6 mSpatialAcceleration;
+};
+
+// LinkValue has a root coordinate system and a chain of them???
+
+}
+
+using namespace OpenFDM;
+
+int
+main(int argc, char *argv[])
+{
+  CoordinateSystem cs(Vector3(1, 0, 0));
+  CoordinateSystem cs2 = cs.getRelative(Vector3(1, 0, 0), Quaternion::fromEuler(Vector3(0, pi/2, 0)));
+  CoordinateSystem cs3 = cs2.getRelative(Vector3(1, 0, 0));
+
+  std::cout << cs << std::endl;
+  std::cout << cs2 << std::endl;
+  std::cout << cs3 << std::endl;
+  std::cout << cs3.referenceToLocal() << std::endl;
+
+  std::cout << trans(cs.toReference(Vector3(1, 1, 1))) << std::endl;
+  std::cout << trans(cs2.toReference(Vector3(1, 1, 1))) << std::endl;
+  std::cout << trans(cs3.toReference(Vector3(1, 1, 1))) << std::endl;
+
+  std::cout << trans(cs.referenceToLocal().toReference(cs.toReference(Vector3(1, 1, 1)))) << std::endl;
+  std::cout << trans(cs2.referenceToLocal().toReference(cs2.toReference(Vector3(1, 1, 1)))) << std::endl;
+  std::cout << trans(cs3.referenceToLocal().toReference(cs3.toReference(Vector3(1, 1, 1)))) << std::endl;
+
+  std::cout << trans(cs.toLocal(cs.toReference(Vector3(1, 1, 1)))) << std::endl;
+  std::cout << trans(cs2.toLocal(cs2.toReference(Vector3(1, 1, 1)))) << std::endl;
+  std::cout << trans(cs3.toLocal(cs3.toReference(Vector3(1, 1, 1)))) << std::endl;
+
+  return EXIT_SUCCESS;
+}


Property changes on: branches/OpenFDM-StateSeparation/src/test/coordsys.cpp
___________________________________________________________________
Name: svn:executable
   + *



From frohlich at mail.berlios.de  Wed Dec 10 07:46:24 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 10 Dec 2008 07:46:24 +0100
Subject: [OpenFDM-svn] r875 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812100646.mBA6kO8C017988@sheep.berlios.de>

Author: frohlich
Date: 2008-12-10 07:46:23 +0100 (Wed, 10 Dec 2008)
New Revision: 875

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/CoordinateSystem.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
Log:
Make use of the coordinate system.

M    src/OpenFDM/InternalSensor.cpp
M    src/OpenFDM/CoordinateSystem.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CoordinateSystem.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CoordinateSystem.h	2008-12-10 06:18:57 UTC (rev 874)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CoordinateSystem.h	2008-12-10 06:46:23 UTC (rev 875)
@@ -14,8 +14,6 @@
 #include "Rotation.h"
 #include "Inertia.h"
 
-// #include "Frame.h"
-
 namespace OpenFDM {
 
 class CoordinateSystem {
@@ -40,11 +38,6 @@
     mPosition(coordinateSystem.mPosition),
     mOrientation(coordinateSystem.mOrientation)
   { }
-  /// For a transition time, this might be a good idea
-//   CoordinateSystem(const Frame& frame) :
-//     mPosition(frame.getRefPos()),
-//     mOrientation(frame.getRefOr())
-//   { }
 
   /// Return the position of this coordinate system wrt the reference coordinate
   /// system. The position is measured in the reference coordinate

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2008-12-10 06:18:57 UTC (rev 874)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2008-12-10 06:46:23 UTC (rev 875)
@@ -42,10 +42,18 @@
   Vector3 position0 = mPosition0-portValues[mMechanicLink0].getDesignPosition();
   Vector3 position1 = mPosition1-portValues[mMechanicLink1].getDesignPosition();
 
+  CoordinateSystem csys0(portValues[mMechanicLink0].getCoordinateSystem());
+  csys0 = csys0.getRelative(position0);
+  
+  CoordinateSystem csys1(portValues[mMechanicLink1].getCoordinateSystem());
+  csys1 = csys1.getRelative(position1);
+  
+  CoordinateSystem relSys = csys0.toLocal(csys1);
+
   bool enableDistance = getEnableDistance();
   bool enableVelocity = getEnableVelocity();
   if (enableDistance || enableVelocity) {
-    Vector3 relPos = frame0.posFromRef(frame1.posToRef(position1)) - position0;
+    Vector3 relPos = relSys.getPosition();
     real_type nrmRelPos = norm(relPos);
 
     // The relative distance of these two points
@@ -72,15 +80,20 @@
                              PortValueList& portValues) const
 {
   if (getEnableForce()) {
-    const Frame& frame0 = portValues[mMechanicLink0].getFrame();
-    const Frame& frame1 = portValues[mMechanicLink1].getFrame();
-
     // FIXME, for now relative position
     Vector3 position0=mPosition0-portValues[mMechanicLink0].getDesignPosition();
     Vector3 position1=mPosition1-portValues[mMechanicLink1].getDesignPosition();
+
+    CoordinateSystem csys0(portValues[mMechanicLink0].getCoordinateSystem());
+    csys0 = csys0.getRelative(position0);
+
+    CoordinateSystem csys1(portValues[mMechanicLink1].getCoordinateSystem());
+    csys1 = csys1.getRelative(position1);
+
+    CoordinateSystem relSys = csys0.toLocal(csys1);
     
     // FIXME, already have that computed in the velocity step
-    Vector3 relPos = frame0.posFromRef(frame1.posToRef(position1)) - position0;
+    Vector3 relPos = relSys.getPosition();
     real_type nrmRelPos = norm(relPos);
 
     // If we have reached the zero position, the force vector is undefined.
@@ -92,7 +105,7 @@
       Vector3 force0 = portValues[mForcePort]*dir;
       portValues[mMechanicLink0].applyForce(forceFrom(position0, force0));
       
-      Vector3 force1 = -frame0.getRelOrientation(frame1).transform(force0);
+      Vector3 force1 = -relSys.rotToLocal(force0);
       portValues[mMechanicLink1].applyForce(forceFrom(position1, force1));
     }
   }



From frohlich at mail.berlios.de  Wed Dec 10 23:06:22 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 10 Dec 2008 23:06:22 +0100
Subject: [OpenFDM-svn] r876 - branches/OpenFDM-StateSeparation
Message-ID: <200812102206.mBAM6M7N020786@sheep.berlios.de>

Author: frohlich
Date: 2008-12-10 23:06:21 +0100 (Wed, 10 Dec 2008)
New Revision: 876

Modified:
   branches/OpenFDM-StateSeparation/TODO
Log:
Note some TODO's

M    TODO


Modified: branches/OpenFDM-StateSeparation/TODO
===================================================================
--- branches/OpenFDM-StateSeparation/TODO	2008-12-10 06:46:23 UTC (rev 875)
+++ branches/OpenFDM-StateSeparation/TODO	2008-12-10 22:06:21 UTC (rev 876)
@@ -1 +1,47 @@
-- AeroForces handling of alphadot/betadot.
+* Rigid body should again do something.
+  - Have multiple coordinate systems defined in the rigid body.
+  - Reuse them across links to that rigid body.
+  - This will avoid recomputations of these local coordinate systems for
+  - multiple models acting at the identical position offset ...
+  - by default, just use the parent coordinate system ...
+
+* More init time checking for SimpleDirectModels
+* Template Contexts for SimpleDirectModels
+* Sensor
+* Move Mechanics into a normal ModelContext??
+* Remove LeafNode??
+* Environmental cache ... May be put that into the Task???
+* Single link MechanicContext has a local coordinate system
+* Give Mass an own Context with a pretransformed Inertia
+
+* Check why harmonic is so bad ...
+* Clean up SampleTime/Fraction
+
+* Connect api in Group is questionable
+* Tests for error checks in Connect and System initialization
+
+* Enable ports, ContextGroups??
+* Nodes duerfen nur zu einem System geh?ren
+* test dazu
+* State allocation ?berarbeiten
+* Library models und parents
+* lock on exec
+* Zap Variant. Use TypeInfo data for that reason
+* PortInfo::isContinous()
+* System externe PortValues
+
+* Improove TransferFunction
+* Test TrasnferFunction!!
+
+* AeroForces handling of alphadot/betadot.
+
+* Improove the WGS84 gravity
+* Test Gravity ...
+
+* Function -> AbstractFunction
+* LLVM - compile optimized c code from a model??
+
+* PortInfo -> Port ??? PortInfo ist dann System init time Datum fuer
+  port typ und size??? Dann kann AbstractModel die typen und sizes checken
+  bevor PortValues alloziert werden und Typ angepasste Kontexte gebaut werden???
+



From frohlich at mail.berlios.de  Thu Dec 11 07:36:59 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 11 Dec 2008 07:36:59 +0100
Subject: [OpenFDM-svn] r877 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200812110636.mBB6axWO028774@sheep.berlios.de>

Author: frohlich
Date: 2008-12-11 07:36:58 +0100 (Thu, 11 Dec 2008)
New Revision: 877

Modified:
   branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
Log:
Only look at the settling process.

M    tiretestrig.cpp


Modified: branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2008-12-10 22:06:21 UTC (rev 876)
+++ branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2008-12-11 06:36:58 UTC (rev 877)
@@ -151,7 +151,7 @@
   if (!system->init())
     return 1;
 
-  system->simulate(10);
+  system->simulate(1);
   
   return EXIT_SUCCESS;
 }



From frohlich at mail.berlios.de  Thu Dec 11 07:37:25 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 11 Dec 2008 07:37:25 +0100
Subject: [OpenFDM-svn] r878 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200812110637.mBB6bPrf029538@sheep.berlios.de>

Author: frohlich
Date: 2008-12-11 07:37:24 +0100 (Thu, 11 Dec 2008)
New Revision: 878

Modified:
   branches/OpenFDM-StateSeparation/src/test/coordsys.cpp
Log:
Hmm, a reference frame has a coordinate system?!

M    coordsys.cpp


Modified: branches/OpenFDM-StateSeparation/src/test/coordsys.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/coordsys.cpp	2008-12-11 06:36:58 UTC (rev 877)
+++ branches/OpenFDM-StateSeparation/src/test/coordsys.cpp	2008-12-11 06:37:24 UTC (rev 878)
@@ -19,10 +19,17 @@
     mSpatialAcceleration(Vector6::zeros())
   { }
   ReferenceFrame(const ReferenceFrame& referenceFrame) :
+    mCoordinateSystem(referenceFrame.mCoordinateSystem),
     mSpatialVelocity(referenceFrame.mSpatialVelocity),
     mSpatialAcceleration(referenceFrame.mSpatialAcceleration)
   { }
 
+  /// The coordinate system this frame values are measured in
+  const CoordinateSystem& getCoordinateSystem() const
+  { return mCoordinateSystem; }
+  void setCoordinateSystem(const CoordinateSystem& coordinateSystem)
+  { mCoordinateSystem = coordinateSystem; }
+
   const Vector6& getSpatialVelocity() const
   { return mSpatialVelocity; }
   void setSpatialVelocity(const Vector6& spatialVelocity)
@@ -33,8 +40,8 @@
   void setSpatialAcceleration(const Vector6& spatialAcceleration)
   { mSpatialAcceleration = spatialAcceleration; }
 
-  CoordinateSystem mCoordinateSystem; /// ????
 private:
+  CoordinateSystem mCoordinateSystem;
   Vector6 mSpatialVelocity;
   Vector6 mSpatialAcceleration;
 };



From frohlich at mail.berlios.de  Fri Dec 12 16:49:42 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 12 Dec 2008 16:49:42 +0100
Subject: [OpenFDM-svn] r879 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812121549.mBCFngjn007388@sheep.berlios.de>

Author: frohlich
Date: 2008-12-12 16:49:40 +0100 (Fri, 12 Dec 2008)
New Revision: 879

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h
Log:
Move the environment into the context.

M    src/OpenFDM/MobileRootJoint.cpp
M    src/OpenFDM/WheelContact.cpp
M    src/OpenFDM/CartesianJoint.h
M    src/OpenFDM/InternalSensor.cpp
M    src/OpenFDM/Mass.h
M    src/OpenFDM/Interact.cpp
M    src/OpenFDM/FixedRootJoint.h
M    src/OpenFDM/Mass.cpp
M    src/OpenFDM/RootJoint.cpp
M    src/OpenFDM/ExternalForce.cpp
M    src/OpenFDM/Interact.h
M    src/OpenFDM/WheelContact.h
M    src/OpenFDM/MechanicContext.h
M    src/OpenFDM/MobileRootJoint.h
M    src/OpenFDM/MechanicLinkValue.h
M    src/OpenFDM/ExternalForce.h
M    src/OpenFDM/Sensor.cpp
M    src/OpenFDM/MechanicContext.cpp
M    src/OpenFDM/RootJoint.h
M    src/OpenFDM/FixedRootJoint.cpp
M    src/OpenFDM/InternalSensor.h
M    src/OpenFDM/Sensor.h
M    src/OpenFDM/System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-12 15:49:40 UTC (rev 879)
@@ -59,12 +59,8 @@
     if (!childLinkValue)
       return 0;
 
-    // Now propagate the root dependent data ...
-    OpenFDMAssert(environment == parentLinkValue->getEnvironment());
-    childLinkValue->setEnvironment(environment);
-
     SharedPtr<Context> context;
-    context = new Context(this, parentLinkValue, childLinkValue);
+    context = new Context(this, environment, parentLinkValue, childLinkValue);
     for (unsigned i = 0; i < getNumPorts(); ++i) {
       PortValue* portValue = portValueList.getPortValue(i);
       if (!portValue) {
@@ -114,8 +110,9 @@
 
   class Context : public MechanicContext {
   public:
-    Context(const CartesianJoint* cartesianJoint, MechanicLinkValue* parentLink,
-            MechanicLinkValue* childLink) :
+    Context(const CartesianJoint* cartesianJoint, const Environment* env,
+            MechanicLinkValue* parentLink, MechanicLinkValue* childLink) :
+      MechanicContext(env),
       mCartesianJoint(cartesianJoint),
       mParentLink(parentLink),
       mChildLink(childLink)

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp	2008-12-12 15:49:40 UTC (rev 879)
@@ -27,7 +27,8 @@
 }
 
 void
-ExternalForce::articulation(const Task&, const ContinousStateValueVector&,
+ExternalForce::articulation(const Task&, const Environment&,
+                            const ContinousStateValueVector&,
                             PortValueList& portValues) const
 {
   // FIXME, for now relative position

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.h	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.h	2008-12-12 15:49:40 UTC (rev 879)
@@ -16,7 +16,8 @@
   ExternalForce(const std::string& name);
   virtual ~ExternalForce(void);
 
-  virtual void articulation(const Task&, const ContinousStateValueVector&,
+  virtual void articulation(const Task&, const Environment&,
+                            const ContinousStateValueVector&,
                             PortValueList& portValues) const;
 
   void setLocalCoordinates(bool localCoordinates);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp	2008-12-12 15:49:40 UTC (rev 879)
@@ -71,13 +71,11 @@
 }
 
 void
-FixedRootJoint::velocity(const Task& task,
+FixedRootJoint::velocity(const Task& task, const Environment& environment,
                          const ContinousStateValueVector& continousState,
                          PortValueList& portValues) const
 {
-  const Environment* environment;
-  environment = portValues[mMechanicLink].getEnvironment();
-  Vector3 angularBaseVelocity = environment->getAngularVelocity(task.getTime());
+  Vector3 angularBaseVelocity = environment.getAngularVelocity(task.getTime());
   portValues[mMechanicLink].setCoordinateSystem(CoordinateSystem(mPosition,
                                                                  mOrientation));
   portValues[mMechanicLink].setPosAndVel(angularBaseVelocity, mPosition,
@@ -85,19 +83,19 @@
 }
 
 void
-FixedRootJoint::articulation(const Task&, const ContinousStateValueVector&,
-                              PortValueList&) const
+FixedRootJoint::articulation(const Task&, const Environment& environment,
+                             const ContinousStateValueVector&,
+                             PortValueList&) const
 {
   /// In this case a noop.
 }
 
 void
-FixedRootJoint::acceleration(const Task& task, const ContinousStateValueVector&,
-                              PortValueList& portValues) const
+FixedRootJoint::acceleration(const Task& task, const Environment& environment,
+                             const ContinousStateValueVector&,
+                             PortValueList& portValues) const
 {
-  const Environment* environment;
-  environment = portValues[mMechanicLink].getEnvironment();
-  Vector6 spatialAcceleration = environment->getAcceleration(task.getTime());
+  Vector6 spatialAcceleration = environment.getAcceleration(task.getTime());
   portValues[mMechanicLink].getFrame().setSpAccel(spatialAcceleration);
 }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h	2008-12-12 15:49:40 UTC (rev 879)
@@ -34,11 +34,14 @@
                     ContinousStateValueVector&,
                     const PortValueList&) const;
   virtual void initDesignPosition(PortValueList&) const;
-  virtual void velocity(const Task&, const ContinousStateValueVector& states,
+  virtual void velocity(const Task&, const Environment& environment,
+                        const ContinousStateValueVector& states,
                         PortValueList& portValues) const;
-  virtual void articulation(const Task&, const ContinousStateValueVector&,
+  virtual void articulation(const Task&, const Environment& environment,
+                            const ContinousStateValueVector&,
                             PortValueList& portValues) const;
-  virtual void acceleration(const Task&, const ContinousStateValueVector&,
+  virtual void acceleration(const Task&, const Environment& environment,
+                            const ContinousStateValueVector&,
                             PortValueList& portValues) const;
 private:
   MechanicLink mMechanicLink;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.cpp	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.cpp	2008-12-12 15:49:40 UTC (rev 879)
@@ -12,7 +12,10 @@
 
 class Interact::Context : public MechanicContext {
 public:
-  Context(const Interact* interact) : mInteract(interact) {}
+  Context(const Interact* interact, const Environment* environment) :
+    MechanicContext(environment),
+    mInteract(interact)
+  {}
   virtual ~Context() {}
 
   virtual const Interact& getNode() const
@@ -26,25 +29,25 @@
   virtual void initVelocities(const /*Init*/Task& task)
   {
     mInteract->init(task, mDiscreteState, mContinousState, mPortValueList);
-    mInteract->velocity(task, mContinousState, mPortValueList);
+    mInteract->velocity(task, getEnvironment(), mContinousState, mPortValueList);
   }
 
   virtual void velocities(const Task& task)
   {
-    mInteract->velocity(task, mContinousState, mPortValueList);
+    mInteract->velocity(task, getEnvironment(), mContinousState, mPortValueList);
   }
   virtual void articulation(const Task& task)
   {
-    mInteract->articulation(task, mContinousState, mPortValueList);
+    mInteract->articulation(task, getEnvironment(), mContinousState, mPortValueList);
   }
   virtual void accelerations(const Task& task)
   {
-    mInteract->acceleration(task, mContinousState, mPortValueList);
+    mInteract->acceleration(task, getEnvironment(), mContinousState, mPortValueList);
   }
 
   virtual void derivative(const Task& task)
   {
-    mInteract->derivative(task, mDiscreteState, mContinousState, mPortValueList,
+    mInteract->derivative(task, getEnvironment(), mDiscreteState, mContinousState, mPortValueList,
                           mContinousStateDerivative);
   }
  
@@ -119,9 +122,10 @@
 }
 
 MechanicContext*
-Interact::newMechanicContext(PortValueList& portValueList) const
+Interact::newMechanicContext(const Environment* environment,
+                             PortValueList& portValueList) const
 {
-  SharedPtr<Context> context = new Context(this);
+  SharedPtr<Context> context = new Context(this, environment);
   for (unsigned i = 0; i < getNumPorts(); ++i) {
     PortValue* portValue = portValueList.getPortValue(i);
     if (!portValue) {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.h	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.h	2008-12-12 15:49:40 UTC (rev 879)
@@ -6,6 +6,7 @@
 #define OpenFDM_Interact_H
 
 #include <string>
+#include "Environment.h"
 #include "MechanicNode.h"
 
 namespace OpenFDM {
@@ -26,27 +27,30 @@
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
 
-  virtual MechanicContext* newMechanicContext(PortValueList& portValues) const;
+  virtual MechanicContext* newMechanicContext(const Environment* environment,
+                                              PortValueList& portValues) const;
 
-  virtual void init(const Task&,DiscreteStateValueVector&,
+  virtual void init(const Task&, DiscreteStateValueVector&,
                     ContinousStateValueVector&, const PortValueList&) const
   { }
   virtual void initDesignPosition(PortValueList&) const = 0;
-  virtual void velocity(const Task&, const ContinousStateValueVector&,
-                        PortValueList&) const
+  virtual void velocity(const Task&, const Environment& environment,
+                        const ContinousStateValueVector&, PortValueList&) const
   { }
-  virtual void articulation(const Task&, const ContinousStateValueVector&,
+  virtual void articulation(const Task&, const Environment& environment,
+                            const ContinousStateValueVector&,
                             PortValueList&) const
   { }
-  virtual void acceleration(const Task&, const ContinousStateValueVector&,
+  virtual void acceleration(const Task&, const Environment& environment,
+                            const ContinousStateValueVector&,
                             PortValueList&) const
   { }
-  virtual void derivative(const Task&, const DiscreteStateValueVector&,
+  virtual void derivative(const Task&, const Environment& environment,
+                          const DiscreteStateValueVector&,
                           const ContinousStateValueVector&,
                           const PortValueList&,
                           ContinousStateValueVector&) const
   { }
-
 private:
   class Context;
 };

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2008-12-12 15:49:40 UTC (rev 879)
@@ -32,7 +32,8 @@
 }
 
 void
-InternalSensor::velocity(const Task& task, const ContinousStateValueVector&,
+InternalSensor::velocity(const Task& task, const Environment&,
+                         const ContinousStateValueVector&,
                          PortValueList& portValues) const
 {
   const Frame& frame0 = portValues[mMechanicLink0].getFrame();
@@ -76,7 +77,8 @@
 }
 
 void
-InternalSensor::articulation(const Task& task, const ContinousStateValueVector&,
+InternalSensor::articulation(const Task& task, const Environment&,
+                             const ContinousStateValueVector&,
                              PortValueList& portValues) const
 {
   if (getEnableForce()) {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h	2008-12-12 15:49:40 UTC (rev 879)
@@ -20,9 +20,11 @@
   virtual ~InternalSensor(void);
 
   virtual void initDesignPosition(PortValueList&) const {}
-  virtual void velocity(const Task&, const ContinousStateValueVector&,
+  virtual void velocity(const Task&, const Environment& environment,
+                        const ContinousStateValueVector&,
                         PortValueList&) const;
-  virtual void articulation(const Task&, const ContinousStateValueVector&,
+  virtual void articulation(const Task&, const Environment& environment,
+                            const ContinousStateValueVector&,
                             PortValueList&) const;
 
   /// Set the position of the sensor in design coordinates

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-12-12 15:49:40 UTC (rev 879)
@@ -35,19 +35,17 @@
 }
 
 void
-Mass::articulation(const Task&, const ContinousStateValueVector&,
+Mass::articulation(const Task&, const Environment& environment,
+                   const ContinousStateValueVector&,
                    PortValueList& portValues) const
 {
-  const Environment* environment;
-  environment = portValues[mMechanicLink].getEnvironment();
-
   // The position of the mass point wrt its parent link frame
   // FIXME precompute that
   Vector3 position = mPosition - portValues[mMechanicLink].getDesignPosition();
 
   // The gravity force that applies to this mass
   Vector3 refPosition = portValues[mMechanicLink].getFrame().posToRef(position);
-  Vector3 gravity = environment->getGravityAcceleration(refPosition);
+  Vector3 gravity = environment.getGravityAcceleration(refPosition);
   gravity = mMass*portValues[mMechanicLink].getFrame().rotFromRef(gravity);
   // The gravity force at the coordinate system of the parent link
   Vector6 force = forceFrom(position, gravity);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h	2008-12-12 15:49:40 UTC (rev 879)
@@ -19,7 +19,8 @@
   virtual ~Mass(void);
 
   virtual void initDesignPosition(PortValueList&) const;
-  virtual void articulation(const Task&, const ContinousStateValueVector&,
+  virtual void articulation(const Task&, const Environment& environment,
+                            const ContinousStateValueVector&,
                             PortValueList&) const;
 
   const InertiaMatrix& getInertia(void) const;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.cpp	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.cpp	2008-12-12 15:49:40 UTC (rev 879)
@@ -6,6 +6,12 @@
 
 namespace OpenFDM {
 
+MechanicContext::MechanicContext(const Environment* environment) :
+  mEnvironment(environment)
+{
+  OpenFDMAssert(mEnvironment);
+}
+
 MechanicContext::~MechanicContext()
 {
 }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-12-12 15:49:40 UTC (rev 879)
@@ -6,6 +6,7 @@
 #define OpenFDM_MechanicContext_H
 
 #include <list>
+#include "Environment.h"
 #include "LeafContext.h"
 #include "MechanicNode.h"
 #include "SharedPtr.h"
@@ -20,7 +21,7 @@
 
 class MechanicContext : public LeafContext {
 public:
-  MechanicContext() {}
+  MechanicContext(const Environment* environment);
   virtual ~MechanicContext();
 
   virtual const MechanicNode& getNode() const = 0;
@@ -33,9 +34,14 @@
   virtual void derivative(const Task&) = 0;
   virtual void update(const DiscreteTask& discreteTask) = 0;
 
+  const Environment& getEnvironment() const
+  { return *mEnvironment; }
+
 private:
   MechanicContext(const MechanicContext&);
   MechanicContext& operator=(const MechanicContext&);
+
+  SharedPtr<const Environment> mEnvironment;
 };
 
 class MechanicContextList : public std::list<SharedPtr<MechanicContext> > {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-12-12 15:49:40 UTC (rev 879)
@@ -6,7 +6,6 @@
 #define OpenFDM_MechanicLinkValue_H
 
 #include "CoordinateSystem.h"
-#include "Environment.h"
 #include "Frame.h"
 #include "Inertia.h"
 #include "PortValue.h"
@@ -85,15 +84,6 @@
   Vector6 getReferenceVelocity() const
   { return mFrame.getRefVel(); }
 
-  // This is a per link value because of interacts that can be child of two
-  // different roots.
-  // FIXME, enforce setting that in the contructor
-  const Environment* getEnvironment() const
-  { return mEnvironment; }
-
-  void setEnvironment(const Environment* environment)
-  { OpenFDMAssert(environment); mEnvironment = environment; }
-
 protected:
   /// The local coordinate system of the mechanic link.
   CoordinateSystem mCoordinateSystem;
@@ -103,8 +93,6 @@
   SpatialInertia mArticulatedInertia;
 
   Vector3 mDesignPosition;
-
-  SharedPtr<const Environment> mEnvironment;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-12-12 15:49:40 UTC (rev 879)
@@ -51,13 +51,11 @@
 }
 
 void
-MobileRootJoint::velocity(const Task& task,
+MobileRootJoint::velocity(const Task& task, const Environment& environment,
                           const ContinousStateValueVector& continousState,
                           PortValueList& portValues) const
 {
-  const Environment* environment;
-  environment = portValues[mMechanicLink].getEnvironment();
-  Vector3 angularBaseVelocity = environment->getAngularVelocity(task.getTime());
+  Vector3 angularBaseVelocity = environment.getAngularVelocity(task.getTime());
 
   Vector3 position = continousState[*mPositionStateInfo];
   Quaternion orientation = continousState[*mOrientationStateInfo];
@@ -70,20 +68,19 @@
 }
 
 void
-MobileRootJoint::articulation(const Task&, const ContinousStateValueVector&,
+MobileRootJoint::articulation(const Task&, const Environment& environment,
+                              const ContinousStateValueVector&,
                               PortValueList&) const
 {
   /// In this case a noop.
 }
 
 void
-MobileRootJoint::acceleration(const Task& task,
+MobileRootJoint::acceleration(const Task& task, const Environment& environment,
                               const ContinousStateValueVector&,
                               PortValueList& portValues) const
 {
-  const Environment* environment;
-  environment = portValues[mMechanicLink].getEnvironment();
-  Vector6 spatialAcceleration = environment->getAcceleration(task.getTime());
+  Vector6 spatialAcceleration = environment.getAcceleration(task.getTime());
 
   SpatialInertia inertia = portValues[mMechanicLink].getInertia();
   Vector6 force = portValues[mMechanicLink].getForce();
@@ -93,7 +90,8 @@
 }
 
 void
-MobileRootJoint::derivative(const DiscreteStateValueVector&,
+MobileRootJoint::derivative(const Environment& environment,
+                            const DiscreteStateValueVector&,
                             const ContinousStateValueVector& continousState,
                             const PortValueList& portValues,
                             ContinousStateValueVector& derivatives) const

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h	2008-12-12 15:49:40 UTC (rev 879)
@@ -26,13 +26,17 @@
                     ContinousStateValueVector&,
                     const PortValueList&) const;
   virtual void initDesignPosition(PortValueList&) const;
-  virtual void velocity(const Task&, const ContinousStateValueVector& states,
+  virtual void velocity(const Task&, const Environment& environment,
+                        const ContinousStateValueVector& states,
                         PortValueList& portValues) const;
-  virtual void articulation(const Task&, const ContinousStateValueVector&,
+  virtual void articulation(const Task&, const Environment& environment,
+                            const ContinousStateValueVector&,
                             PortValueList& portValues) const;
-  virtual void acceleration(const Task&, const ContinousStateValueVector&,
+  virtual void acceleration(const Task&, const Environment& environment,
+                            const ContinousStateValueVector&,
                             PortValueList& portValues) const;
-  virtual void derivative(const DiscreteStateValueVector&,
+  virtual void derivative(const Environment& environment,
+                          const DiscreteStateValueVector&,
                           const ContinousStateValueVector&,
                           const PortValueList& portValues,
                           ContinousStateValueVector&) const;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp	2008-12-12 15:49:40 UTC (rev 879)
@@ -12,7 +12,10 @@
 
 class RootJoint::Context : public MechanicContext {
 public:
-  Context(const RootJoint* rootJoint) : mRootJoint(rootJoint) {}
+  Context(const RootJoint* rootJoint, const Environment* environment) :
+    MechanicContext(environment),
+    mRootJoint(rootJoint)
+  {}
   virtual ~Context() {}
   
   virtual const RootJoint& getNode() const
@@ -26,25 +29,25 @@
   virtual void initVelocities(const /*Init*/Task& task)
   {
     mRootJoint->init(task, mDiscreteState, mContinousState, mPortValueList);
-    mRootJoint->velocity(task, mContinousState, mPortValueList);
+    mRootJoint->velocity(task, getEnvironment(), mContinousState, mPortValueList);
   }
   
   virtual void velocities(const Task& task)
   {
-    mRootJoint->velocity(task, mContinousState, mPortValueList);
+    mRootJoint->velocity(task, getEnvironment(), mContinousState, mPortValueList);
   }
   virtual void articulation(const Task& task)
   {
-    mRootJoint->articulation(task, mContinousState, mPortValueList);
+    mRootJoint->articulation(task, getEnvironment(), mContinousState, mPortValueList);
   }
   virtual void accelerations(const Task& task)
   {
-    mRootJoint->acceleration(task, mContinousState, mPortValueList);
+    mRootJoint->acceleration(task, getEnvironment(), mContinousState, mPortValueList);
   }
   
   virtual void derivative(const Task&)
   {
-    mRootJoint->derivative(mDiscreteState, mContinousState, mPortValueList,
+    mRootJoint->derivative(getEnvironment(), mDiscreteState, mContinousState, mPortValueList,
                            mContinousStateDerivative);
   }
   
@@ -113,7 +116,7 @@
                               const MechanicLinkInfo* childLink,
                               PortValueList& portValueList) const
 {
-  SharedPtr<Context> context = new Context(this);
+  SharedPtr<Context> context = new Context(this, environment);
   for (unsigned i = 0; i < getNumPorts(); ++i) {
     PortValue* portValue = portValueList.getPortValue(i);
     if (!portValue) {
@@ -123,10 +126,6 @@
       return false;
     }
 
-    if (portValue->toMechanicLinkValue()) {
-      portValue->toMechanicLinkValue()->setEnvironment(environment);
-    }
-
     context->setPortValue(*getPort(i), portValue);
   }
   if (!context->allocStates()) {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h	2008-12-12 15:49:40 UTC (rev 879)
@@ -30,13 +30,17 @@
   { }
   virtual void initDesignPosition(PortValueList&) const = 0;
 
-  virtual void velocity(const Task&, const ContinousStateValueVector&,
+  virtual void velocity(const Task&, const Environment& environment,
+                        const ContinousStateValueVector&,
                         PortValueList&) const = 0;
-  virtual void articulation(const Task&, const ContinousStateValueVector&,
+  virtual void articulation(const Task&, const Environment& environment,
+                            const ContinousStateValueVector&,
                             PortValueList&) const = 0;
-  virtual void acceleration(const Task&, const ContinousStateValueVector&,
+  virtual void acceleration(const Task&, const Environment& environment,
+                            const ContinousStateValueVector&,
                             PortValueList&) const = 0;
-  virtual void derivative(const DiscreteStateValueVector&,
+  virtual void derivative(const Environment& environment,
+                          const DiscreteStateValueVector&,
                           const ContinousStateValueVector&,
                           const PortValueList& portValues,
                           ContinousStateValueVector&) const

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2008-12-12 15:49:40 UTC (rev 879)
@@ -45,11 +45,10 @@
 }
 
 void
-Sensor::velocity(const Task& task, const ContinousStateValueVector&,
+Sensor::velocity(const Task& task, const Environment& environment,
+                 const ContinousStateValueVector&,
                  PortValueList& portValues) const
 {
-  const Environment* environment;
-  environment = portValues[mMechanicLink].getEnvironment();
   const Frame& frame = portValues[mMechanicLink].getFrame();
 
   // FIXME, for now relative position
@@ -79,7 +78,7 @@
 
     // Wind sensing
     if (enableWindVelocity) {
-      Vector6 wind = environment->getWindVelocity(task.getTime(), position);
+      Vector6 wind = environment.getWindVelocity(task.getTime(), position);
       wind -= refVelocity;
       portValues[mWindVelocityPort] = frame.rotFromRef(wind.getLinear());
     }
@@ -95,12 +94,12 @@
   bool enableAtmosphere = (enableTemperature || enablePressure ||
                            enableDensity || enableSoundSpeed);
   if (enableAltitude || enableAtmosphere) {
-    real_type altitude = environment->getAltitude(refPosition);
+    real_type altitude = environment.getAltitude(refPosition);
     if (enableAltitude)
       portValues[mAltitudePort] = altitude;
 
     if (enableAtmosphere) {
-      const AbstractAtmosphere* atmosphere = environment->getAtmosphere();
+      const AbstractAtmosphere* atmosphere = environment.getAtmosphere();
       AtmosphereData data = atmosphere->getData(task.getTime(), altitude);
       if (enableTemperature)
         portValues[mTemperaturePort] = data.temperature;
@@ -116,17 +115,16 @@
 
   if (getEnableAboveGroundLevel()) {
     real_type agl;
-    agl = environment->getAboveGroundLevel(task.getTime(), refPosition);
+    agl = environment.getAboveGroundLevel(task.getTime(), refPosition);
     portValues[mAboveGroundLevelPort] = agl;
   }
 }
 
 void
-Sensor::acceleration(const Task&, const ContinousStateValueVector&,
+Sensor::acceleration(const Task&, const Environment& environment,
+                     const ContinousStateValueVector&,
                      PortValueList& portValues) const
 {
-  const Environment* environment;
-  environment = portValues[mMechanicLink].getEnvironment();
   const Frame& frame = portValues[mMechanicLink].getFrame();
 
   // FIXME, for now relative position
@@ -145,7 +143,7 @@
     if (enableLoad) {
       // May be cache that from the velocity step??
       Vector3 refPosition = frame.posToRef(position);
-      Vector3 gravity = environment->getGravityAcceleration(refPosition);
+      Vector3 gravity = environment.getGravityAcceleration(refPosition);
       gravity = frame.rotFromRef(gravity);
       portValues[mLoadPort] = centrifugalAccel - gravity;
     }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2008-12-12 15:49:40 UTC (rev 879)
@@ -20,9 +20,11 @@
   virtual ~Sensor(void);
 
   virtual void initDesignPosition(PortValueList&) const;
-  virtual void velocity(const Task&, const ContinousStateValueVector&,
+  virtual void velocity(const Task&, const Environment&,
+                        const ContinousStateValueVector&,
                         PortValueList&) const;
-  virtual void acceleration(const Task&, const ContinousStateValueVector&,
+  virtual void acceleration(const Task&, const Environment&,
+                            const ContinousStateValueVector&,
                             PortValueList&) const;
 
   /// Set the position of the sensor in design coordinates

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-12-12 15:49:40 UTC (rev 879)
@@ -667,7 +667,8 @@
     virtual bool createMechanicContext(Environment* environment)
     {
       OpenFDMAssert(!mMechanicContext);
-      mMechanicContext = getNode()->newMechanicContext(mPortValueList);
+      mMechanicContext = getNode()->newMechanicContext(environment,
+                                                       mPortValueList);
       if (!mMechanicContext) {
         Log(Schedule, Warning) << "Could not create context for mechanic "
                                << "node \"" << getNodeNamePath()

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-12 15:49:40 UTC (rev 879)
@@ -37,12 +37,10 @@
 }
 
 void
-WheelContact::articulation(const Task& task, const ContinousStateValueVector&,
+WheelContact::articulation(const Task& task, const Environment& environment,
+                           const ContinousStateValueVector&,
                            PortValueList& portValues) const
 {
-  const Environment* environment;
-  environment = portValues[mMechanicLink].getEnvironment();
-
   const CoordinateSystem& cs = portValues[mMechanicLink].getCoordinateSystem();
 
   // FIXME, for now relative position
@@ -53,7 +51,7 @@
 
   // Get the ground values in the hub coordinate system.
   GroundValues groundValues =
-    environment->getGroundPlane(hubCoordinateSystem, task.getTime());
+    environment.getGroundPlane(hubCoordinateSystem, task.getTime());
 
   // Transform the plane equation to the local frame.
   Plane lp = groundValues.plane;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h	2008-12-11 06:37:24 UTC (rev 878)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h	2008-12-12 15:49:40 UTC (rev 879)
@@ -16,7 +16,8 @@
   virtual ~WheelContact(void);
 
   virtual void initDesignPosition(PortValueList&) const {}
-  virtual void articulation(const Task&, const ContinousStateValueVector&,
+  virtual void articulation(const Task&, const Environment&,
+                            const ContinousStateValueVector&,
                             PortValueList& portValues) const;
 
   // Compute the plane normal force.



From frohlich at mail.berlios.de  Sat Dec 13 08:59:05 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 13 Dec 2008 08:59:05 +0100
Subject: [OpenFDM-svn] r880 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200812130759.mBD7x5Uh032394@sheep.berlios.de>

Author: frohlich
Date: 2008-12-13 08:59:05 +0100 (Sat, 13 Dec 2008)
New Revision: 880

Modified:
   branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
Log:
Make it stable for the current hard set default stepsize.

M    tiretestrig.cpp


Modified: branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2008-12-12 15:49:40 UTC (rev 879)
+++ branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2008-12-13 07:59:05 UTC (rev 880)
@@ -136,7 +136,7 @@
   
   WheelContact* wheelContact = new WheelContact("Wheel Contact");
   wheelContact->setWheelRadius(0.3);
-  wheelContact->setSpringConstant(100000);
+  wheelContact->setSpringConstant(50000);
   wheelContact->setSpringDamping(sqrt(wheelContact->getSpringConstant())/10);
   group->addChild(wheelContact);
   rimAndTire->addLink("link2");



From frohlich at mail.berlios.de  Sat Dec 13 11:07:14 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 13 Dec 2008 11:07:14 +0100
Subject: [OpenFDM-svn] r881 - in branches/OpenFDM-StateSeparation: .
	src/OpenFDM
Message-ID: <200812131007.mBDA7Dg8009047@sheep.berlios.de>

Author: frohlich
Date: 2008-12-13 11:07:13 +0100 (Sat, 13 Dec 2008)
New Revision: 881

Added:
   branches/OpenFDM-StateSeparation/src/OpenFDM/JointContext.h
Modified:
   branches/OpenFDM-StateSeparation/TODO
   branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h
Log:
JointContext does something common to all joints.

M    src/OpenFDM/Joint.cpp
M    src/OpenFDM/CartesianJoint.h
M    src/OpenFDM/RootJoint.cpp
M    src/OpenFDM/RootJoint.h
M    src/OpenFDM/Joint.h
A    src/OpenFDM/JointContext.h
M    TODO


Modified: branches/OpenFDM-StateSeparation/TODO
===================================================================
--- branches/OpenFDM-StateSeparation/TODO	2008-12-13 07:59:05 UTC (rev 880)
+++ branches/OpenFDM-StateSeparation/TODO	2008-12-13 10:07:13 UTC (rev 881)
@@ -5,6 +5,17 @@
   - multiple models acting at the identical position offset ...
   - by default, just use the parent coordinate system ...
 
+
+Class Hierarchy for the Contexts and the associated Nodes:
+
+MechanicContext
+ |- JointContext (has a unique parent and child link)
+ |- SingleLinkInteractContext (has a single parent link)
+ |- DoubleLinkInteractContext (has two parent links, constraint
+ |       joints need to implement that in the future)
+ |- RigidBodyContext (has a unique parent and may be a list of links with
+         different local coordinate sysetems, see above)
+
 * More init time checking for SimpleDirectModels
 * Template Contexts for SimpleDirectModels
 * Sensor

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-13 07:59:05 UTC (rev 880)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-13 10:07:13 UTC (rev 881)
@@ -13,7 +13,7 @@
 #include "Quaternion.h"
 #include "Inertia.h"
 #include "Joint.h"
-#include "MechanicContext.h"
+#include "JointContext.h"
 
 namespace OpenFDM {
 
@@ -34,44 +34,26 @@
   void setPosition(const Vector3& position)
   { mPosition = position; }
 
-  virtual MechanicContext*
-  newMechanicContext(const Environment* environment,
-                     const MechanicLinkInfo* parentLink,
-                     const MechanicLinkInfo* childLink,
-                     PortValueList& portValueList) const
+  virtual JointContext*
+  newJointContext(const Environment* environment,
+                  MechanicLinkValue* parentLinkValue,
+                  MechanicLinkValue* childLinkValue,
+                  PortValueList& portValueList) const
   {
-    if (!parentLink) {
+    if (!parentLinkValue) {
       Log(Model, Error) << "Parent link is not set while creating context "
                         << "for model \"" << getName() << "\"" << endl;
       return 0;
     }
-    MechanicLinkValue* parentLinkValue;
-    parentLinkValue = portValueList.getPortValue(*parentLink);
-    if (!parentLinkValue)
-      return 0;
-    if (!childLink) {
+    if (!childLinkValue) {
       Log(Model, Error) << "Child link is not set while creating context "
                         << "for model \"" << getName() << "\"" << endl;
       return 0;
     }
-    MechanicLinkValue* childLinkValue;
-    childLinkValue = portValueList.getPortValue(*childLink);
-    if (!childLinkValue)
-      return 0;
-
     SharedPtr<Context> context;
-    context = new Context(this, environment, parentLinkValue, childLinkValue);
-    for (unsigned i = 0; i < getNumPorts(); ++i) {
-      PortValue* portValue = portValueList.getPortValue(i);
-      if (!portValue) {
-        Log(Model, Error) << "No port value given for model \"" << getName()
-                          << "\" and port \"" << getPort(i)->getName()
-                          << "\"" << endl;
-        return 0;
-      }
-      context->setPortValue(*getPort(i), portValue);
-    }
-    if (!context->alloc()) {
+    context = new Context(environment, this,
+                          parentLinkValue, childLinkValue, portValueList);
+    if (!context->allocStates()) {
       Log(Model, Warning) << "Could not alloc for model \""
                           << getName() << "\"" << endl;
       return 0;
@@ -90,8 +72,7 @@
   { }
 
   virtual void init(const Task&, DiscreteStateValueVector&,
-                    ContinousStateValueVector&, const PortValueList&) const
-  { }
+                    ContinousStateValueVector&, const PortValueList&) const = 0;
   virtual Matrix6N getJointMatrix() const = 0;
 
   virtual void velocity(const Task& task, Context& context,
@@ -108,14 +89,15 @@
                           const PortValueList& portValues,
                           ContinousStateValueVector&) const = 0;
 
-  class Context : public MechanicContext {
+  class Context : public JointContext {
   public:
-    Context(const CartesianJoint* cartesianJoint, const Environment* env,
-            MechanicLinkValue* parentLink, MechanicLinkValue* childLink) :
-      MechanicContext(env),
-      mCartesianJoint(cartesianJoint),
-      mParentLink(parentLink),
-      mChildLink(childLink)
+    Context(const Environment* environment,
+            const CartesianJoint* cartesianJoint,
+            MechanicLinkValue* parentLinkValue,
+            MechanicLinkValue* childLinkValue,
+            PortValueList& portValueList) :
+      JointContext(environment, parentLinkValue, childLinkValue, portValueList),
+      mCartesianJoint(cartesianJoint)
     { }
     virtual ~Context() {}
     
@@ -131,10 +113,6 @@
       mJointMatrix = mCartesianJoint->getJointMatrix();
     }
 
-    bool alloc()
-    {
-      return allocStates();
-    }
     virtual void initVelocities(const /*Init*/Task& task)
     {
       mCartesianJoint->init(task, mDiscreteState,
@@ -267,45 +245,6 @@
     const VectorN& getVelDot() const
     { return velDot; }
     
-    bool allocStates()
-    {
-      unsigned numContinousStates = getNode().getNumContinousStateValues();
-      for (unsigned i = 0; i < numContinousStates; ++i) {
-        const ContinousStateInfo* continousStateInfo;
-        continousStateInfo = getNode().getContinousStateInfo(i);
-        mContinousState.setValue(*continousStateInfo, *this);
-        mContinousStateDerivative.setValue(*continousStateInfo, *this);
-      }
-      unsigned numDiscreteStates = getNode().getNumDiscreteStateValues();
-      for (unsigned i = 0; i < numDiscreteStates; ++i) {
-        const StateInfo* stateInfo;
-        stateInfo = getNode().getDiscreteStateInfo(i);
-        mDiscreteState.setValue(*stateInfo, *this);
-      }
-      return true;
-    }
-    
-    virtual ContinousStateValue* getStateValue(const ContinousStateInfo& info)
-    { return mContinousState.getValue(info); }
-    virtual ContinousStateValue* getStateDerivative(const ContinousStateInfo& info)
-    { return mContinousStateDerivative.getValue(info); }
-    
-    /// Set port value for the given port.
-    virtual const PortValue* getPortValue(const PortInfo& portInfo) const
-    {  return mPortValueList.getPortValue(portInfo); }
-    void setPortValue(const PortInfo& portInfo, PortValue* portValue)
-    { mPortValueList.setPortValue(portInfo.getIndex(), portValue); }
-    
-  protected:
-    // PortValues
-    PortValueList mPortValueList;
-    
-    // Continous States
-    ContinousStateValueVector mContinousState;
-    ContinousStateValueVector mContinousStateDerivative;
-    // Discrete States
-    DiscreteStateValueVector mDiscreteState;
-
   private:
     // Stores some values persistent accross velocity/articulation/acceleration
     MatrixFactorsNN hIh;
@@ -318,9 +257,6 @@
 
     Matrix6N mJointMatrix;
     
-    SharedPtr<MechanicLinkValue> mParentLink;
-    SharedPtr<MechanicLinkValue> mChildLink;
-    
     SharedPtr<const CartesianJoint> mCartesianJoint;
   };
   

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.cpp	2008-12-13 07:59:05 UTC (rev 880)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.cpp	2008-12-13 10:07:13 UTC (rev 881)
@@ -4,14 +4,8 @@
 
 #include "Joint.h"
 
-#include "Assert.h"
 #include "ConstNodeVisitor.h"
-#include "Object.h"
-#include "Vector.h"
-#include "Matrix.h"
-#include "Quaternion.h"
-#include "Inertia.h"
-#include "Interact.h"
+#include "JointContext.h"
 #include "LogStream.h"
 #include "PortValueList.h"
 #include "NodeVisitor.h"
@@ -42,4 +36,20 @@
   visitor.handleNodePathAndApply(this);
 }
 
+MechanicContext*
+Joint::newMechanicContext(const Environment* environment,
+                          const MechanicLinkInfo* parentLinkInfo,
+                          const MechanicLinkInfo* childLinkInfo,
+                          PortValueList& portValueList) const
+{
+  MechanicLinkValue* parentLinkValue = 0;
+  if (parentLinkInfo)
+    parentLinkValue = portValueList.getPortValue(*parentLinkInfo);
+  MechanicLinkValue* childLinkValue = 0;
+  if (childLinkInfo)
+    childLinkValue = portValueList.getPortValue(*childLinkInfo);
+  return newJointContext(environment, parentLinkValue,
+                         childLinkValue, portValueList);
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.h	2008-12-13 07:59:05 UTC (rev 880)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.h	2008-12-13 10:07:13 UTC (rev 881)
@@ -16,15 +16,23 @@
 #include "Frame.h"
 #include "LogStream.h"
 
+#include "MechanicContext.h"
+
 namespace OpenFDM {
 
+class JointContext;
+
 // May be each joint can be a root joint.
 // A joint with one link is a root joint?
-// The given position is then meant to be in the root coordinate system?
-// That is: if connected to a parent, it is the designPosition wrt root joint
-// If not connected, in the root coordinate system of the simulation?
+
 // It would be nice if each joint is lockable anyway
 // May be then unify all that joint stuff in a common framework here??
+
+// design position consitency:
+// Each joint has a design positon property.
+// This is for a root joint the position of the joint coorinate system of the
+// mechanical system simulation and this is of limited external use.
+// For a usual joint, this is an invariant point in the joint.
 class Joint : public MechanicNode {
   OPENFDM_OBJECT(Joint, MechanicNode);
 public:
@@ -36,9 +44,15 @@
 
   virtual MechanicContext*
   newMechanicContext(const Environment* environment,
-                     const MechanicLinkInfo* parentLink,
-                     const MechanicLinkInfo* childLink,
-                     PortValueList& portValues) const = 0;
+                     const MechanicLinkInfo* parentLinkInfo,
+                     const MechanicLinkInfo* childLinkInfo,
+                     PortValueList& portValueList) const;
+
+  virtual JointContext*
+  newJointContext(const Environment* environment,
+                  MechanicLinkValue* parentLinkValue,
+                  MechanicLinkValue* childLinkValue,
+                  PortValueList& portValueList) const = 0;
 };
 
 } // namespace OpenFDM

Added: branches/OpenFDM-StateSeparation/src/OpenFDM/JointContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/JointContext.h	2008-12-13 07:59:05 UTC (rev 880)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/JointContext.h	2008-12-13 10:07:13 UTC (rev 881)
@@ -0,0 +1,71 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_JointContext_H
+#define OpenFDM_JointContext_H
+
+#include "Joint.h"
+#include "MechanicContext.h"
+
+namespace OpenFDM {
+
+class JointContext : public MechanicContext {
+public:
+  JointContext(const Environment* environment,
+               MechanicLinkValue* parentLinkValue,
+               MechanicLinkValue* childLinkValue,
+               PortValueList& portValueList) :
+    MechanicContext(environment),
+    mPortValueList(portValueList),
+    mParentLink(parentLinkValue),
+    mChildLink(childLinkValue)
+  { }
+  virtual ~JointContext() {}
+    
+  virtual const Joint& getNode() const = 0;
+    
+  bool allocStates()
+  {
+    unsigned numContinousStates = getNode().getNumContinousStateValues();
+    for (unsigned i = 0; i < numContinousStates; ++i) {
+      const ContinousStateInfo* continousStateInfo;
+      continousStateInfo = getNode().getContinousStateInfo(i);
+      mContinousState.setValue(*continousStateInfo, *this);
+      mContinousStateDerivative.setValue(*continousStateInfo, *this);
+    }
+    unsigned numDiscreteStates = getNode().getNumDiscreteStateValues();
+    for (unsigned i = 0; i < numDiscreteStates; ++i) {
+      const StateInfo* stateInfo;
+      stateInfo = getNode().getDiscreteStateInfo(i);
+      mDiscreteState.setValue(*stateInfo, *this);
+    }
+    return true;
+  }
+    
+  virtual ContinousStateValue* getStateValue(const ContinousStateInfo& info)
+  { return mContinousState.getValue(info); }
+  virtual ContinousStateValue* getStateDerivative(const ContinousStateInfo& info)
+  { return mContinousStateDerivative.getValue(info); }
+    
+  /// Set port value for the given port.
+  virtual const PortValue* getPortValue(const PortInfo& portInfo) const
+  {  return mPortValueList.getPortValue(portInfo); }
+    
+protected:
+  // PortValues
+  PortValueList mPortValueList;
+    
+  // Continous States
+  ContinousStateValueVector mContinousState;
+  ContinousStateValueVector mContinousStateDerivative;
+  // Discrete States
+  DiscreteStateValueVector mDiscreteState;
+
+  SharedPtr<MechanicLinkValue> mParentLink;
+  SharedPtr<MechanicLinkValue> mChildLink;
+};
+
+} // namespace OpenFDM
+
+#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp	2008-12-13 07:59:05 UTC (rev 880)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp	2008-12-13 10:07:13 UTC (rev 881)
@@ -5,15 +5,18 @@
 #include "RootJoint.h"
 
 #include "ConstNodeVisitor.h"
-#include "MechanicContext.h"
+#include "JointContext.h"
+#include "MechanicLinkValue.h"
 #include "NodeVisitor.h"
 
 namespace OpenFDM {
 
-class RootJoint::Context : public MechanicContext {
+class RootJoint::Context : public JointContext {
 public:
-  Context(const RootJoint* rootJoint, const Environment* environment) :
-    MechanicContext(environment),
+  Context(const RootJoint* rootJoint, const Environment* environment,
+          MechanicLinkValue* parentLinkValue, MechanicLinkValue* childLinkValue,
+          PortValueList& portValueList) :
+    JointContext(environment, parentLinkValue, childLinkValue, portValueList),
     mRootJoint(rootJoint)
   {}
   virtual ~Context() {}
@@ -54,46 +57,6 @@
   virtual void update(const DiscreteTask&)
   { }
 
-  virtual bool allocStates()
-  {
-    unsigned numContinousStates = getNode().getNumContinousStateValues();
-    for (unsigned i = 0; i < numContinousStates; ++i) {
-      const ContinousStateInfo* continousStateInfo;
-      continousStateInfo = getNode().getContinousStateInfo(i);
-      mContinousState.setValue(*continousStateInfo, *this);
-      mContinousStateDerivative.setValue(*continousStateInfo, *this);
-    }
-    unsigned numDiscreteStates = getNode().getNumDiscreteStateValues();
-    for (unsigned i = 0; i < numDiscreteStates; ++i) {
-      const StateInfo* stateInfo;
-      stateInfo = getNode().getDiscreteStateInfo(i);
-      mDiscreteState.setValue(*stateInfo, *this);
-    }
-    return true;
-  }
-  
-  virtual ContinousStateValue* getStateValue(const ContinousStateInfo& info)
-  { return mContinousState.getValue(info); }
-  virtual ContinousStateValue* getStateDerivative(const ContinousStateInfo& info)
-  { return mContinousStateDerivative.getValue(info); }
-  
-  /// Set port value for the given port.
-  virtual const PortValue* getPortValue(const PortInfo& portInfo) const
-  {  return mPortValueList.getPortValue(portInfo); }
-  void setPortValue(const PortInfo& portInfo, PortValue* portValue)
-  { mPortValueList.setPortValue(portInfo.getIndex(), portValue); }
-  
-  
-protected:
-  // PortValues
-  PortValueList mPortValueList;
-  
-  // Continous States
-  ContinousStateValueVector mContinousState;
-  ContinousStateValueVector mContinousStateDerivative;
-  // Discrete States
-  DiscreteStateValueVector mDiscreteState;
-  
 private:
   SharedPtr<const RootJoint> mRootJoint;
 };
@@ -110,32 +73,6 @@
 {
 }
 
-MechanicContext*
-RootJoint::newMechanicContext(const Environment* environment,
-                              const MechanicLinkInfo* parentLink,
-                              const MechanicLinkInfo* childLink,
-                              PortValueList& portValueList) const
-{
-  SharedPtr<Context> context = new Context(this, environment);
-  for (unsigned i = 0; i < getNumPorts(); ++i) {
-    PortValue* portValue = portValueList.getPortValue(i);
-    if (!portValue) {
-      Log(Model, Error) << "No port value given for model \"" << getName()
-                        << "\" and port \"" << getPort(i)->getName()
-                        << "\"" << endl;
-      return false;
-    }
-
-    context->setPortValue(*getPort(i), portValue);
-  }
-  if (!context->allocStates()) {
-    Log(Model, Warning) << "Could not alloc for model \""
-                        << getName() << "\"" << endl;
-    return false;
-  }
-  return context.release();
-}
-
 void
 RootJoint::accept(NodeVisitor& visitor)
 {
@@ -148,4 +85,20 @@
   visitor.handleNodePathAndApply(this);
 }
 
+JointContext*
+RootJoint::newJointContext(const Environment* environment,
+                           MechanicLinkValue* parentLinkValue,
+                           MechanicLinkValue* childLinkValue,
+                           PortValueList& portValueList) const
+{
+  SharedPtr<Context> context = new Context(this, environment, parentLinkValue,
+                                           childLinkValue, portValueList);
+  if (!context->allocStates()) {
+    Log(Model, Warning) << "Could not alloc for model \""
+                        << getName() << "\"" << endl;
+    return false;
+  }
+  return context.release();
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h	2008-12-13 07:59:05 UTC (rev 880)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h	2008-12-13 10:07:13 UTC (rev 881)
@@ -16,18 +16,17 @@
   RootJoint(const std::string& name);
   virtual ~RootJoint();
 
-  virtual MechanicContext*
-  newMechanicContext(const Environment* environment,
-                     const MechanicLinkInfo* parentLink,
-                     const MechanicLinkInfo* childLink,
-                     PortValueList& portValueList) const;
-
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
 
+  virtual JointContext*
+  newJointContext(const Environment* environment,
+                  MechanicLinkValue* parentLink,
+                  MechanicLinkValue* childLink,
+                  PortValueList& portValueList) const;
+
   virtual void init(const Task&,DiscreteStateValueVector&,
-                    ContinousStateValueVector&, const PortValueList&) const
-  { }
+                    ContinousStateValueVector&, const PortValueList&) const = 0;
   virtual void initDesignPosition(PortValueList&) const = 0;
 
   virtual void velocity(const Task&, const Environment& environment,



From frohlich at mail.berlios.de  Tue Dec 16 07:04:51 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 16 Dec 2008 07:04:51 +0100
Subject: [OpenFDM-svn] r882 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812160604.mBG64piq017223@sheep.berlios.de>

Author: frohlich
Date: 2008-12-16 07:04:48 +0100 (Tue, 16 Dec 2008)
New Revision: 882

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.cpp
Log:
assign the port values in the constructor.

	modified:   src/OpenFDM/Interact.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.cpp	2008-12-13 10:07:13 UTC (rev 881)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.cpp	2008-12-16 06:04:48 UTC (rev 882)
@@ -12,8 +12,10 @@
 
 class Interact::Context : public MechanicContext {
 public:
-  Context(const Interact* interact, const Environment* environment) :
+  Context(const Interact* interact, const Environment* environment,
+          PortValueList& portValueList) :
     MechanicContext(environment),
+    mPortValueList(portValueList),
     mInteract(interact)
   {}
   virtual ~Context() {}
@@ -80,8 +82,6 @@
   /// Set port value for the given port.
   virtual const PortValue* getPortValue(const PortInfo& portInfo) const
   {  return mPortValueList.getPortValue(portInfo); }
-  void setPortValue(const PortInfo& portInfo, PortValue* portValue)
-  { mPortValueList.setPortValue(portInfo.getIndex(), portValue); }
   
 protected:
   // PortValues
@@ -125,17 +125,7 @@
 Interact::newMechanicContext(const Environment* environment,
                              PortValueList& portValueList) const
 {
-  SharedPtr<Context> context = new Context(this, environment);
-  for (unsigned i = 0; i < getNumPorts(); ++i) {
-    PortValue* portValue = portValueList.getPortValue(i);
-    if (!portValue) {
-      Log(Model, Error) << "No port value given for model \"" << getName()
-                        << "\" and port \"" << getPort(i)->getName()
-                        << "\"" << endl;
-      return false;
-    }
-    context->setPortValue(*getPort(i), portValue);
-  }
+  SharedPtr<Context> context = new Context(this, environment, portValueList);
   if (!context->alloc()) {
     Log(Model, Warning) << "Could not alloc for model \""
                         << getName() << "\"" << endl;



From frohlich at mail.berlios.de  Wed Dec 24 09:44:25 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 24 Dec 2008 09:44:25 +0100
Subject: [OpenFDM-svn] r883 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM/LinAlg test
Message-ID: <200812240844.mBO8iPcb025525@sheep.berlios.de>

Author: frohlich
Date: 2008-12-24 09:44:24 +0100 (Wed, 24 Dec 2008)
New Revision: 883

Added:
   branches/OpenFDM-StateSeparation/src/test/inertianav.cpp
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Algorithm.h
   branches/OpenFDM-StateSeparation/src/test/Makefile.am
Log:
Add hacking area for inertia navigation.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Algorithm.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Algorithm.h	2008-12-16 06:04:48 UTC (rev 882)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Algorithm.h	2008-12-24 08:44:24 UTC (rev 883)
@@ -559,7 +559,7 @@
   return ret;
 }
 
-/** Cross product multiplication.
+/** Cross product matrix.
  */
 template<typename Impl1>
 OpenFDM_FORCE_INLINE
@@ -574,11 +574,47 @@
   return ret;
 }
 
+/** Cross product kernel.
+ *  Compute x so that
+ *    || cross(a, x) - b ||_2 = min!, where || x ||_2 = min!
+ *  Note that the whole minimum solution space of the cross product
+ *  matrix equation is formed by
+ *    crossKern(a, x) + alpha*a
+ *  for scalar alpha.
+ */
+template<typename Impl1, typename Impl2>
+OpenFDM_FORCE_INLINE
+Vector3<typename Impl1::value_type>
+crossKern(const MatrixRValue<Impl1,3,1>& a, const MatrixRValue<Impl2,3,1>& b)
+{
+  typedef typename Impl1::value_type value_type;
+
+  value_type a2 = dot(a, a);
+  if (fabs(a2) <= Limits<value_type>::safe_min())
+    return Vector3<value_type>(0, 0, 0);
+
+  // Cache the 1/a2 value
+  value_type ra2 = value_type(1)/a2;
+  
+  // Since a cross product with a cannot result in components directing into
+  // a, project out components of b in direction of a.
+  // So in effect we solve cross(a, x) - bPer = 0, where || x ||_2 = min!
+  Vector3<value_type> bPer = b - (dot(a, b)*ra2)*a;
+  
+  // The solution must be perpandicular to bPer and a.
+  Vector3<value_type> xPrime = cross(bPer, a);
+  
+  // Comparison of coefficients:
+  // Put x' = cross(bPer, a) into the original equation.
+  // Look at
+  //  cross(a, x') = cross(a, cross(bPer, a)) = dot(a, a)*bPer + dot(a, bPer)*a
+  // since we have a perpandicular to bPer this is
+  //  cross(a, x') - dot(a, a)*bPer = 0
+  // So we need to rescale x' with 1/dot(a, a)
+  return ra2*xPrime;
+}
+
 // return any normalized vector perpendicular to v
-// template<typename Impl1, typename Impl2>
-// OpenFDM_FORCE_INLINE
-// Vector<typename Impl1::value_type,3>
-// cross(const MatrixRValue<Impl1,3,1>& u, const MatrixRValue<Impl2,3,1>& v)
 template<typename T>
 OpenFDM_FORCE_INLINE
 Vector3<T>

Modified: branches/OpenFDM-StateSeparation/src/test/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/Makefile.am	2008-12-16 06:04:48 UTC (rev 882)
+++ branches/OpenFDM-StateSeparation/src/test/Makefile.am	2008-12-24 08:44:24 UTC (rev 883)
@@ -1,7 +1,7 @@
 INCLUDES = -I$(srcdir)/..
 
 # define some util programs
-bin_PROGRAMS = foucault mechanic structure tiretestrig coordsys
+bin_PROGRAMS = foucault inertianav mechanic structure tiretestrig coordsys
 
 # define some unit tests
 check_PROGRAMS = constintegral harmonic limit linalg quattest simulationtime unitstest
@@ -22,6 +22,9 @@
 mechanic_SOURCES = mechanic.cpp
 mechanic_LDADD = ../OpenFDM/libOpenFDM.la
 
+inertianav_SOURCES = inertianav.cpp
+inertianav_LDADD = ../OpenFDM/libOpenFDM.la
+
 linalg_SOURCES = linalg.cpp
 linalg_LDADD = ../OpenFDM/libOpenFDM.la
 

Added: branches/OpenFDM-StateSeparation/src/test/inertianav.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/inertianav.cpp	2008-12-16 06:04:48 UTC (rev 882)
+++ branches/OpenFDM-StateSeparation/src/test/inertianav.cpp	2008-12-24 08:44:24 UTC (rev 883)
@@ -0,0 +1,394 @@
+#include <OpenFDM/ConstModel.h>
+#include <OpenFDM/Group.h>
+#include <OpenFDM/InternalSensor.h>
+#include <OpenFDM/LinearSpringDamper.h>
+#include <OpenFDM/Mass.h>
+#include <OpenFDM/MobileRootJoint.h>
+#include <OpenFDM/RevoluteJoint.h>
+#include <OpenFDM/RigidBody.h>
+#include <OpenFDM/Sensor.h>
+#include <OpenFDM/System.h>
+#include <OpenFDM/SystemOutput.h>
+
+using namespace OpenFDM;
+
+class AccelerationTracking : public Interact {
+public:
+  AccelerationTracking() :
+    Interact("AccelerationTracking"),
+    mMechanicLink(newMechanicLink("link")),
+//     mAccelerationInputPort0(this, "accelerationInput0", Size(3, 1), true),
+//     mAccelerationInputPort1(this, "accelerationInput1", Size(3, 1), true),
+//     mVelocityPort(this, "velocity", Size(6, 1), true),
+    mAccelerationPort(this, "acceleration", Size(6, 1), true)
+  { }
+
+  virtual void initDesignPosition(PortValueList&) const
+  {
+  }
+  virtual void velocity(const Task& task, const Environment& environment,
+                        const ContinousStateValueVector&,
+                        PortValueList&) const
+  {
+  }
+  virtual void acceleration(const Task&, const Environment& environment,
+                            const ContinousStateValueVector&,
+                            PortValueList& portValues) const
+  {
+    Vector3 p1(0, 1, 0);
+    Vector3 p2(0, -1, 0);
+
+    const Frame& frame = portValues[mMechanicLink].getFrame();
+
+    CoordinateSystem csys0 = portValues[mMechanicLink].getCoordinateSystem();
+
+    CoordinateSystem csys1 = csys0.getRelative(p1);
+    CoordinateSystem csys2 = csys0.getRelative(p2);
+
+    Frame frame1;
+    frame1.setPosAndVel(frame, p1, Quaternion::unit(), Vector6::zeros());
+    frame1.setAccel(frame, Vector6::zeros());
+    Frame frame2;
+    frame2.setPosAndVel(frame, p2, Quaternion::unit(), Vector6::zeros());
+    frame2.setAccel(frame, Vector6::zeros());
+
+    Vector3 refPosition = csys0.getPosition();
+    Vector3 gravity = environment.getGravityAcceleration(refPosition);
+    gravity = frame.rotFromRef(gravity);
+
+    Vector3 a1 = frame1.getClassicAccel().getLinear() - gravity;
+    Vector3 a2 = frame2.getClassicAccel().getLinear() - gravity;
+   
+    /// Here we have constructed the synthetic example
+//     std::cout << trans(a1) << " " << trans(a2) << std::endl;
+
+    Vector6 v = frame.getSpVel();
+    Vector6 aExact = frame.getSpAccel();
+
+    Vector3 dp = p2 - p1;
+    
+    Vector3 omega0 = v.getAngular();
+    Vector3 v0 = v.getLinear();
+    
+//   Vector6 getClassicAccel(void) const
+//   {
+//     Vector6 iv = getSpVel();
+//     return getRelVelDot() + getParentSpAccel() + getHdot()
+//       + Vector6(Vector3::zeros(), cross(iv.getAngular(), iv.getLinear()));
+//   }
+
+//   /** FIXME belongs into the joints.
+//    */
+//   Vector6 getHdot(void) const
+//   {
+//     /**
+//        This is the cross product of the inertial spatial velocity
+//        vector with the relative spatial velocity vector (motion type
+//        cross product). Since the inertial velocity is the transformed
+//        inertial velocity of the parent frame plus the relative
+//        velocity of the current frame, all the relative velocity
+//        components cancel out in this expression. What remains is the
+//        transformed spatial velocity of the parent frame cross the
+//        relative velocity.
+//      */
+//     Vector6 pivel = getParentSpVel();
+//     return Vector6(cross(pivel.getAngular(), getAngularRelVel()),
+//                    cross(pivel.getAngular(), getLinearRelVel()) + 
+//                    cross(pivel.getLinear(), getAngularRelVel()));
+//   }
+
+//   Vector6 getSpVel(void) const
+//   { return getRelVel() + getParentSpVel(); }
+
+//     Vector3 a1_ = aExact.getLinear() - cross(p1, aExact.getAngular())
+//       - cross(omega0, cross(p1, omega0)) + cross(omega0, v0) - gravity;
+//     Vector3 a2_ = aExact.getLinear() - cross(p2, aExact.getAngular())
+//       - cross(omega0, cross(p2, omega0)) + cross(omega0, v0) - gravity;
+//     std::cout << trans(a1) << " " << trans(a1_) << std::endl;
+
+    Vector3 dpOmega = -(a2 - a1 + cross(omega0, cross(dp, omega0)));
+
+//     Vector3 dpOmegaExact = cross(dp, aExact.getAngular());
+//     std::cout << trans(dpOmega) << " " << trans(dpOmegaExact) << std::endl;
+
+
+    Vector3 omegaDot = crossKern(dp, dpOmega);
+
+//     std::cout << trans(dpOmega) << " " << trans(cross(dp, omegaDot)) << " " << std::endl;
+//     std::cout << trans(omegaDot) << " " << trans(aExact.getAngular()) << std::endl;
+    
+    Vector3 vDot1 = a1 + cross(p1, omegaDot) + cross(omega0, cross(p1, omega0)) - cross(omega0, v0) + gravity;
+    Vector3 vDot2 = a2 + cross(p2, omegaDot) + cross(omega0, cross(p2, omega0)) - cross(omega0, v0) + gravity;
+
+    Vector6 a(omegaDot, vDot1);
+
+    std::cout << trans(a) << " " << trans(frame.getSpAccel()) << std::endl;
+
+    portValues[mAccelerationPort] = a;
+  }
+
+protected:
+  MechanicLink mMechanicLink;
+  MatrixInputPort mVelocityPort;
+  MatrixInputPort mAccelerationInputPort0;
+  MatrixInputPort mAccelerationInputPort1;
+  MatrixOutputPort mAccelerationPort;
+};
+
+
+class MobileRootJoint2 : public RootJoint {
+  OPENFDM_OBJECT(MobileRootJoint2, RootJoint);
+public:
+  MobileRootJoint2(const std::string& name) :
+    RootJoint(name),
+    mAccelerationPort(this, "acceleration", Size(6, 1), true),
+    mVelocityPort(this, "velocity", Size(6, 1)),
+    mPositionPort(this, "position", Size(3, 1)),
+    mOrientationPort(this, "orientation", Size(4, 1)),
+    mPositionStateInfo(new Vector3StateInfo),
+    mOrientationStateInfo(new Vector4StateInfo),
+    mVelocityStateInfo(new Vector6StateInfo)
+  {
+    addContinousStateInfo(mPositionStateInfo);
+    addContinousStateInfo(mOrientationStateInfo);
+    addContinousStateInfo(mVelocityStateInfo);
+  }
+  virtual ~MobileRootJoint2() {}
+
+
+  void init(const Task&, DiscreteStateValueVector&,
+            ContinousStateValueVector& continousState,
+            const PortValueList& portValues) const
+  {
+    continousState[*mPositionStateInfo] = Vector3::zeros();
+    continousState[*mOrientationStateInfo] = Quaternion::unit();
+    continousState[*mVelocityStateInfo] = Vector6::zeros();
+  }
+
+  void initDesignPosition(PortValueList& portValues) const
+  {
+//     portValues[mMechanicLink].setDesignPosition(Vector3::zeros());
+  }
+
+  void velocity(const Task& task, const Environment& environment,
+                const ContinousStateValueVector& continousState,
+                PortValueList& portValues) const
+  {
+//     const Environment* environment;
+//     environment = portValues[mMechanicLink].getEnvironment();
+//     Vector3 angularBaseVelocity = environment->getAngularVelocity(task.getTime());
+    
+//     Vector3 position = continousState[*mPositionStateInfo];
+//     Quaternion orientation = continousState[*mOrientationStateInfo];
+//     Vector6 velocity = continousState[*mVelocityStateInfo];
+    
+//     portValues[mMechanicLink].setCoordinateSystem(CoordinateSystem(position,
+//                                                                    orientation));
+//     portValues[mMechanicLink].setPosAndVel(angularBaseVelocity,
+//                                            position, orientation, velocity);
+  }
+
+  void articulation(const Task&, const Environment& environment,
+                    const ContinousStateValueVector&, PortValueList&) const
+  {
+    /// In this case a noop.
+  }
+  
+  void acceleration(const Task& task, const Environment& environment,
+                    const ContinousStateValueVector&,
+                    PortValueList& portValues) const
+  {
+//     const Environment* environment;
+//     environment = portValues[mMechanicLink].getEnvironment();
+//     Vector6 spatialAcceleration = environment->getAcceleration(task.getTime());
+    Vector6 spatialAcceleration = Vector6::zeros();
+    
+//     SpatialInertia inertia = portValues[mMechanicLink].getInertia();
+//     Vector6 force = portValues[mMechanicLink].getForce();
+    
+    spatialAcceleration = portValues[mAccelerationPort];
+//     portValues[mMechanicLink].getFrame().setSpAccel(spatialAcceleration);
+  }
+  
+  void derivative(const Environment& environment,
+                  const DiscreteStateValueVector&,
+                  const ContinousStateValueVector& continousState,
+                  const PortValueList& portValues,
+                  ContinousStateValueVector& derivatives) const
+  {
+    Quaternion orientation = continousState[*mOrientationStateInfo];
+    Vector6 velocity = continousState[*mVelocityStateInfo];
+    
+    Vector3 pDot = orientation.backTransform(velocity.getLinear());
+    
+    // Compute the derivative term originating from the angular velocity.
+    // Correction term to keep the quaternion normalized.
+    // That is if |q| < 1 add a little radial component outward,
+    // if |q| > 1 add a little radial component inward
+    Quaternion q = orientation;
+    Vector3 angVel = velocity.getAngular();
+    Vector4 qderiv = LinAlg::derivative(q, angVel) + 1e1*(normalize(q) - q);
+    
+//     Vector6 velDeriv = portValues[mMechanicLink].getFrame().getRelVelDot();
+    
+    derivatives[*mPositionStateInfo] = pDot;
+    derivatives[*mOrientationStateInfo] = qderiv;
+//     derivatives[*mVelocityStateInfo] = velDeriv;
+  }
+private:
+  MatrixInputPort mAccelerationPort;
+  MatrixOutputPort mVelocityPort;
+  MatrixOutputPort mPositionPort;
+  MatrixOutputPort mOrientationPort;
+  
+  SharedPtr<Vector3StateInfo> mPositionStateInfo;
+  SharedPtr<Vector4StateInfo> mOrientationStateInfo;
+  SharedPtr<Vector6StateInfo> mVelocityStateInfo;
+};
+
+
+
+Node* buildSimpleMechanicExample()
+{
+  /// sensible test cases:
+  /// drop: gravity
+  /// throw: just this test with a different start condition
+  /// harmonic oszilator: compare with 2nd order linear system
+  /// arrow: see if the tip stays in front
+  /// satellit: coriolis
+  /// paris pendulum: coriolis
+
+  SharedPtr<Group> group = new Group("G");
+
+  MobileRootJoint* mobileRootJoint = new MobileRootJoint("Root Joint");
+  group->addChild(mobileRootJoint);
+  RigidBody* rigidBody = new RigidBody("Rigid Body");
+  rigidBody->addLink("sensorLink");
+  group->addChild(rigidBody);
+  Mass* mass = new Mass("Mass", 1, InertiaMatrix(1, 0, 0, 1, 0, 1));
+  group->addChild(mass);
+
+  Sensor* sensor = new Sensor("Sensor");
+  sensor->setPosition(mass->getPosition());
+  sensor->setEnableAllOutputs(true);
+  group->addChild(sensor);
+
+  group->connect(mobileRootJoint->getPort("link"), rigidBody->getPort("link0"));
+  group->connect(rigidBody->getPort("link1"), mass->getPort("link"));
+  group->connect(rigidBody->getPort("sensorLink"), sensor->getPort("link"));
+
+  return group.release();
+}
+
+Node* buildSimpleMechanicExample2()
+{
+  SharedPtr<Group> group = new Group("G");
+
+  MobileRootJoint* mobileRootJoint = new MobileRootJoint("Root Joint");
+  group->addChild(mobileRootJoint);
+
+  RigidBody *rigidBody = new RigidBody("Rigid Body");
+  rigidBody->addLink("link2");
+  rigidBody->addLink("sensorLink");
+  rigidBody->addLink("internalSensorLink");
+  rigidBody->addLink("internalSensorLink2");
+  rigidBody->addLink("accelerationTrackerLink");
+  group->addChild(rigidBody);
+  InertiaMatrix inertia(1, 0, 0, 1, 0, 1);
+  Mass* mass = new Mass("Mass", 1, inertia);
+  group->addChild(mass);
+  RevoluteJoint* revoluteJoint = new RevoluteJoint("Revolute Joint");
+  revoluteJoint->setEnableExternalForce(true);
+  group->addChild(revoluteJoint);
+  RigidBody *rigidBody2 = new RigidBody("Rigid Body 2");
+  rigidBody2->addLink("sensorLink");
+  rigidBody2->addLink("internalSensorLink");
+  rigidBody2->addLink("internalSensorLink2");
+  group->addChild(rigidBody2);
+  Mass* mass2 = new Mass("Mass 2", 1, inertia);
+  group->addChild(mass2);
+
+  Sensor* sensor = new Sensor("Sensor");
+  sensor->setPosition(mass->getPosition());
+  sensor->setEnableAllOutputs(true);
+  group->addChild(sensor);
+
+  Sensor* sensor2 = new Sensor("Sensor 2");
+  sensor2->setPosition(mass2->getPosition());
+  sensor2->setEnableAllOutputs(true);
+  group->addChild(sensor2);
+
+  group->connect(mobileRootJoint->getPort("link"), rigidBody->getPort("link0"));
+  group->connect(rigidBody->getPort("link1"), mass->getPort("link"));
+  group->connect(rigidBody->getPort("link2"), revoluteJoint->getPort("link0"));
+  group->connect(revoluteJoint->getPort("link1"), rigidBody2->getPort("link0"));
+  group->connect(rigidBody2->getPort("link1"), mass2->getPort("link"));
+  group->connect(rigidBody->getPort("sensorLink"), sensor->getPort("link"));
+  group->connect(rigidBody2->getPort("sensorLink"), sensor2->getPort("link"));
+
+  ConstModel* jointForce = new ConstModel("Joint Force", 1);
+  group->addChild(jointForce);
+
+  group->connect(jointForce->getPort("output"),
+                 revoluteJoint->getPort("force"));
+
+  InternalSensor* internalSensor = new InternalSensor("Internal Sensor");
+  internalSensor->setPosition0(Vector3(0, 0, 1));
+  internalSensor->setPosition1(Vector3(0, 0, 0.8));
+  internalSensor->setEnableAllOutputs(true);
+  internalSensor->setEnableForce(true);
+  group->addChild(internalSensor);
+  group->connect(internalSensor->getPort("link0"),
+                 rigidBody->getPort("internalSensorLink"));
+  group->connect(internalSensor->getPort("link1"),
+                 rigidBody2->getPort("internalSensorLink"));
+
+
+  InternalSensor* internalSensor2 = new InternalSensor("Internal Sensor 2");
+  internalSensor2->setPosition0(Vector3(0, 0, 0.8));
+  internalSensor2->setPosition1(Vector3(0, 0, 1));
+  internalSensor2->setEnableAllOutputs(true);
+  group->addChild(internalSensor2);
+  group->connect(internalSensor2->getPort("link1"),
+                 rigidBody->getPort("internalSensorLink2"));
+  group->connect(internalSensor2->getPort("link0"),
+                 rigidBody2->getPort("internalSensorLink2"));
+
+  LinearSpringDamper* damper = new LinearSpringDamper("LinearSpringDamper");
+  damper->setSpringConstant(0.5);
+  damper->setDamperConstant(1);
+  group->addChild(damper);
+  group->connect(damper->getPort("velocity"),
+                 internalSensor->getPort("velocity"));
+  group->connect(damper->getPort("position"),
+                 internalSensor->getPort("distance"));
+  group->connect(damper->getPort("force"),
+                 internalSensor->getPort("force"));
+
+
+  AccelerationTracking* accelerationTracking = new AccelerationTracking;
+  group->addChild(accelerationTracking);
+  group->connect(accelerationTracking->getPort("link"),
+                 rigidBody->getPort("accelerationTrackerLink"));
+
+  return group.release();
+}
+
+int main()
+{
+//   SharedPtr<System> system = new System("System", buildSimpleMechanicExample());
+  SharedPtr<System> system = new System("System", buildSimpleMechanicExample2());
+
+  system->attach(SystemOutput::newDefaultSystemOutput("mechanic"));
+
+  if (!system->init())
+    return 1;
+
+  system->simulate(10);
+
+  return 0;
+}
+
+// Kabelbaum <-> PortBundle ??? Original Kabelbaum == Cabel Bundle
+// Oder Cable Set <-> Port Set???
+



From frohlich at mail.berlios.de  Wed Dec 24 09:50:22 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 24 Dec 2008 09:50:22 +0100
Subject: [OpenFDM-svn] r884 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200812240850.mBO8oMpv025925@sheep.berlios.de>

Author: frohlich
Date: 2008-12-24 09:50:21 +0100 (Wed, 24 Dec 2008)
New Revision: 884

Modified:
   branches/OpenFDM-StateSeparation/src/test/linalg.cpp
Log:
Remove executalbe bit.

_M   linalg.cpp



Property changes on: branches/OpenFDM-StateSeparation/src/test/linalg.cpp
___________________________________________________________________
Name: svn:executable
   - *



From frohlich at mail.berlios.de  Wed Dec 24 09:52:03 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 24 Dec 2008 09:52:03 +0100
Subject: [OpenFDM-svn] r885 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200812240852.mBO8q3to026138@sheep.berlios.de>

Author: frohlich
Date: 2008-12-24 09:52:02 +0100 (Wed, 24 Dec 2008)
New Revision: 885

Modified:
   branches/OpenFDM-StateSeparation/src/test/coordsys.cpp
Log:
Demove executable bit

_M   coordsys.cpp



Property changes on: branches/OpenFDM-StateSeparation/src/test/coordsys.cpp
___________________________________________________________________
Name: svn:executable
   - *



From frohlich at mail.berlios.de  Wed Dec 24 09:55:42 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 24 Dec 2008 09:55:42 +0100
Subject: [OpenFDM-svn] r886 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200812240855.mBO8tgxw026506@sheep.berlios.de>

Author: frohlich
Date: 2008-12-24 09:55:40 +0100 (Wed, 24 Dec 2008)
New Revision: 886

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteActuator.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteActuator.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/UniversalJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/UniversalJoint.h
   branches/OpenFDM-StateSeparation/src/test/foucault.cpp
Log:
Move the position property into the joint class.

M    src/test/foucault.cpp
M    src/OpenFDM/MobileRootJoint.cpp
M    src/OpenFDM/Joint.cpp
M    src/OpenFDM/CartesianJoint.h
M    src/OpenFDM/FixedRootJoint.h
M    src/OpenFDM/RotationalJoint.cpp
M    src/OpenFDM/PrismaticJoint.cpp
M    src/OpenFDM/RevoluteActuator.cpp
M    src/OpenFDM/RevoluteJoint.cpp
M    src/OpenFDM/RotationalJoint.h
M    src/OpenFDM/UniversalJoint.h
M    src/OpenFDM/PrismaticJoint.h
M    src/OpenFDM/FixedRootJoint.cpp
M    src/OpenFDM/RevoluteActuator.h
M    src/OpenFDM/RevoluteJoint.h
M    src/OpenFDM/UniversalJoint.cpp
M    src/OpenFDM/Joint.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-24 08:52:02 UTC (rev 885)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-24 08:55:40 UTC (rev 886)
@@ -28,12 +28,6 @@
   typedef LinAlg::Matrix<real_type,n,n> MatrixNN;
   typedef LinAlg::MatrixFactors<real_type,n,n,LinAlg::LUTag> MatrixFactorsNN;
 
-  // Each Cartesian joint has a position that has some kind of invariance
-  const Vector3& getPosition() const
-  { return mPosition; }
-  void setPosition(const Vector3& position)
-  { mPosition = position; }
-
   virtual JointContext*
   newJointContext(const Environment* environment,
                   MechanicLinkValue* parentLinkValue,
@@ -65,8 +59,7 @@
   CartesianJoint(const std::string& name) :
     Joint(name),
     mParentLink(newMechanicLink("link0")),
-    mChildLink(newMechanicLink("link1")),
-    mPosition(0, 0, 0)
+    mChildLink(newMechanicLink("link1"))
   { }
   virtual ~CartesianJoint(void)
   { }
@@ -263,8 +256,6 @@
 private:
   MechanicLink mParentLink;
   MechanicLink mChildLink;
-
-  Vector3 mPosition;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp	2008-12-24 08:52:02 UTC (rev 885)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp	2008-12-24 08:55:40 UTC (rev 886)
@@ -17,15 +17,15 @@
 namespace OpenFDM {
 
 BEGIN_OPENFDM_OBJECT_DEF(FixedRootJoint, RootJoint)
-  DEF_OPENFDM_PROPERTY(Vector3, Position, Serialized)
-  DEF_OPENFDM_PROPERTY(Quaternion, Orientation, Serialized)
+  DEF_OPENFDM_PROPERTY(Vector3, RootPosition, Serialized)
+  DEF_OPENFDM_PROPERTY(Quaternion, RootOrientation, Serialized)
   END_OPENFDM_OBJECT_DEF
 
 FixedRootJoint::FixedRootJoint(const std::string& name) :
   RootJoint(name),
   mMechanicLink(newMechanicLink("link")),
-  mPosition(0, 0, 0),
-  mOrientation(Quaternion::unit())
+  mRootPosition(0, 0, 0),
+  mRootOrientation(Quaternion::unit())
 {
 }
 
@@ -34,27 +34,27 @@
 }
 
 const Vector3&
-FixedRootJoint::getPosition() const
+FixedRootJoint::getRootPosition() const
 {
-  return mPosition;
+  return mRootPosition;
 }
 
 void
-FixedRootJoint::setPosition(const Vector3& position)
+FixedRootJoint::setRootPosition(const Vector3& rootPosition)
 {
-  mPosition = position;
+  mRootPosition = rootPosition;
 }
 
 const Quaternion&
-FixedRootJoint::getOrientation() const
+FixedRootJoint::getRootOrientation() const
 {
-  return mOrientation;
+  return mRootOrientation;
 }
 
 void
-FixedRootJoint::setOrientation(const Quaternion& orientation)
+FixedRootJoint::setRootOrientation(const Quaternion& rootOrientation)
 {
-  mOrientation = orientation;
+  mRootOrientation = rootOrientation;
 }
 
 void
@@ -67,7 +67,7 @@
 void
 FixedRootJoint::initDesignPosition(PortValueList& portValues) const
 {
-  portValues[mMechanicLink].setDesignPosition(Vector3::zeros());
+  portValues[mMechanicLink].setDesignPosition(getPosition());
 }
 
 void
@@ -76,10 +76,10 @@
                          PortValueList& portValues) const
 {
   Vector3 angularBaseVelocity = environment.getAngularVelocity(task.getTime());
-  portValues[mMechanicLink].setCoordinateSystem(CoordinateSystem(mPosition,
-                                                                 mOrientation));
-  portValues[mMechanicLink].setPosAndVel(angularBaseVelocity, mPosition,
-                                         mOrientation, Vector6::zeros());
+  portValues[mMechanicLink].setCoordinateSystem(CoordinateSystem(mRootPosition,
+                                                                 mRootOrientation));
+  portValues[mMechanicLink].setPosAndVel(angularBaseVelocity, mRootPosition,
+                                         mRootOrientation, Vector6::zeros());
 }
 
 void

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h	2008-12-24 08:52:02 UTC (rev 885)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h	2008-12-24 08:55:40 UTC (rev 886)
@@ -23,12 +23,12 @@
   virtual ~FixedRootJoint();
 
   /// The position is global coordinates
-  const Vector3& getPosition() const;
-  void setPosition(const Vector3& position);
+  const Vector3& getRootPosition() const;
+  void setRootPosition(const Vector3& rootRosition);
 
   /// The orientation is global coordinates
-  const Quaternion& getOrientation() const;
-  void setOrientation(const Quaternion& orientation);
+  const Quaternion& getRootOrientation() const;
+  void setRootOrientation(const Quaternion& rootOrientation);
 
   virtual void init(const Task&, DiscreteStateValueVector&,
                     ContinousStateValueVector&,
@@ -46,8 +46,8 @@
 private:
   MechanicLink mMechanicLink;
 
-  Vector3 mPosition;
-  Quaternion mOrientation;
+  Vector3 mRootPosition;
+  Quaternion mRootOrientation;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.cpp	2008-12-24 08:52:02 UTC (rev 885)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.cpp	2008-12-24 08:55:40 UTC (rev 886)
@@ -13,10 +13,12 @@
 namespace OpenFDM {
 
 BEGIN_OPENFDM_OBJECT_DEF(Joint, MechanicNode)
+  DEF_OPENFDM_PROPERTY(Vector3, Position, Serialized)
   END_OPENFDM_OBJECT_DEF
 
 Joint::Joint(const std::string& name) :
-  MechanicNode(name)
+  MechanicNode(name),
+  mPosition(0, 0, 0)
 {
 }
 
@@ -52,4 +54,16 @@
                          childLinkValue, portValueList);
 }
 
+const Vector3&
+Joint::getPosition() const
+{
+  return mPosition;
+}
+
+void
+Joint::setPosition(const Vector3& position)
+{
+  mPosition = position;
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.h	2008-12-24 08:52:02 UTC (rev 885)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.h	2008-12-24 08:55:40 UTC (rev 886)
@@ -53,6 +53,15 @@
                   MechanicLinkValue* parentLinkValue,
                   MechanicLinkValue* childLinkValue,
                   PortValueList& portValueList) const = 0;
+
+
+  /** The design position of the joint.
+   */
+  const Vector3& getPosition() const;
+  void setPosition(const Vector3& position);
+
+private:
+  Vector3 mPosition;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-12-24 08:52:02 UTC (rev 885)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-12-24 08:55:40 UTC (rev 886)
@@ -47,7 +47,7 @@
 void
 MobileRootJoint::initDesignPosition(PortValueList& portValues) const
 {
-  portValues[mMechanicLink].setDesignPosition(Vector3::zeros());
+  portValues[mMechanicLink].setDesignPosition(getPosition());
 }
 
 void

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticJoint.cpp	2008-12-24 08:52:02 UTC (rev 885)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticJoint.cpp	2008-12-24 08:55:40 UTC (rev 886)
@@ -19,7 +19,6 @@
 
 BEGIN_OPENFDM_OBJECT_DEF(PrismaticJoint, Joint)
   DEF_OPENFDM_PROPERTY(Vector3, Axis, Serialized)
-  DEF_OPENFDM_PROPERTY(Vector3, Position, Serialized)
   END_OPENFDM_OBJECT_DEF
 
 PrismaticJoint::PrismaticJoint(const std::string& name) :
@@ -58,19 +57,7 @@
   mAxis = (1/nrm)*axis;
 }
 
-const Vector3&
-PrismaticJoint::getPosition() const
-{
-  return CartesianJoint<1>::getPosition();
-}
-
 void
-PrismaticJoint::setPosition(const Vector3& position)
-{
-  CartesianJoint<1>::setPosition(position);
-}
-
-void
 PrismaticJoint::setEnableExternalForce(bool enable)
 {
   if (enable == getEnableExternalForce())

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticJoint.h	2008-12-24 08:52:02 UTC (rev 885)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticJoint.h	2008-12-24 08:55:40 UTC (rev 886)
@@ -33,9 +33,6 @@
   const Vector3& getAxis() const;
   void setAxis(const Vector3& axis);
 
-  const Vector3& getPosition() const;
-  void setPosition(const Vector3& position);
-
   void setEnableExternalForce(bool enable);
   bool getEnableExternalForce() const;
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteActuator.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteActuator.cpp	2008-12-24 08:52:02 UTC (rev 885)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteActuator.cpp	2008-12-24 08:55:40 UTC (rev 886)
@@ -19,7 +19,6 @@
 
 BEGIN_OPENFDM_OBJECT_DEF(RevoluteActuator, Joint)
   DEF_OPENFDM_PROPERTY(Vector3, Axis, Serialized)
-  DEF_OPENFDM_PROPERTY(Vector3, Position, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, VelocityControl, Serialized)
   DEF_OPENFDM_PROPERTY(Real, MaxVel, Serialized)
   DEF_OPENFDM_PROPERTY(Real, VelGain, Serialized)
@@ -67,19 +66,7 @@
   mAxis = (1/nrm)*axis;
 }
 
-const Vector3&
-RevoluteActuator::getPosition() const
-{
-  return CartesianJoint<1>::getPosition();
-}
-
 void
-RevoluteActuator::setPosition(const Vector3& position)
-{
-  CartesianJoint<1>::setPosition(position);
-}
-
-void
 RevoluteActuator::init(const Task&, DiscreteStateValueVector&,
                        ContinousStateValueVector& continousState,
                        const PortValueList&) const

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteActuator.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteActuator.h	2008-12-24 08:52:02 UTC (rev 885)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteActuator.h	2008-12-24 08:55:40 UTC (rev 886)
@@ -33,9 +33,6 @@
   const Vector3& getAxis() const;
   void setAxis(const Vector3& axis);
 
-  const Vector3& getPosition() const;
-  void setPosition(const Vector3& position);
-
   const bool& getVelocityControl(void) const
   { return mVelocityControl; }
   void setVelocityControl(const bool& velocityControl)

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.cpp	2008-12-24 08:52:02 UTC (rev 885)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.cpp	2008-12-24 08:55:40 UTC (rev 886)
@@ -19,7 +19,6 @@
 
 BEGIN_OPENFDM_OBJECT_DEF(RevoluteJoint, Joint)
   DEF_OPENFDM_PROPERTY(Vector3, Axis, Serialized)
-  DEF_OPENFDM_PROPERTY(Vector3, Position, Serialized)
   END_OPENFDM_OBJECT_DEF
 
 RevoluteJoint::RevoluteJoint(const std::string& name) :
@@ -55,19 +54,7 @@
   mAxis = (1/nrm)*axis;
 }
 
-const Vector3&
-RevoluteJoint::getPosition() const
-{
-  return CartesianJoint<1>::getPosition();
-}
-
 void
-RevoluteJoint::setPosition(const Vector3& position)
-{
-  CartesianJoint<1>::setPosition(position);
-}
-
-void
 RevoluteJoint::setEnableExternalForce(bool enable)
 {
   if (enable == getEnableExternalForce())

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.h	2008-12-24 08:52:02 UTC (rev 885)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.h	2008-12-24 08:55:40 UTC (rev 886)
@@ -33,9 +33,6 @@
   const Vector3& getAxis() const;
   void setAxis(const Vector3& axis);
 
-  const Vector3& getPosition() const;
-  void setPosition(const Vector3& position);
-
   void setEnableExternalForce(bool enable);
   bool getEnableExternalForce() const;
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.cpp	2008-12-24 08:52:02 UTC (rev 885)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.cpp	2008-12-24 08:55:40 UTC (rev 886)
@@ -18,7 +18,6 @@
 namespace OpenFDM {
 
 BEGIN_OPENFDM_OBJECT_DEF(RotationalJoint, Joint)
-  DEF_OPENFDM_PROPERTY(Vector3, Position, Serialized)
   END_OPENFDM_OBJECT_DEF
 
 RotationalJoint::RotationalJoint(const std::string& name) :
@@ -36,19 +35,7 @@
 {
 }
 
-const Vector3&
-RotationalJoint::getPosition() const
-{
-  return CartesianJoint<3>::getPosition();
-}
-
 void
-RotationalJoint::setPosition(const Vector3& position)
-{
-  CartesianJoint<3>::setPosition(position);
-}
-
-void
 RotationalJoint::setEnableExternalForce(bool enable)
 {
   if (enable == getEnableExternalForce())

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.h	2008-12-24 08:52:02 UTC (rev 885)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.h	2008-12-24 08:55:40 UTC (rev 886)
@@ -28,11 +28,6 @@
   RotationalJoint(const std::string& name);
   virtual ~RotationalJoint(void);
 
-  /** Sets the joint axis where this joint is allowed to rotate around.
-   */
-  const Vector3& getPosition() const;
-  void setPosition(const Vector3& position);
-
   void setEnableExternalForce(bool enable);
   bool getEnableExternalForce() const;
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/UniversalJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/UniversalJoint.cpp	2008-12-24 08:52:02 UTC (rev 885)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/UniversalJoint.cpp	2008-12-24 08:55:40 UTC (rev 886)
@@ -19,7 +19,6 @@
 
 BEGIN_OPENFDM_OBJECT_DEF(UniversalJoint, Joint)
   DEF_OPENFDM_PROPERTY(Vector3, Axis, Serialized)
-  DEF_OPENFDM_PROPERTY(Vector3, Position, Serialized)
   END_OPENFDM_OBJECT_DEF
 
 UniversalJoint::UniversalJoint(const std::string& name) :
@@ -56,19 +55,7 @@
   mOrientation = Quaternion::fromRotateTo(Vector3(0, 0, 1), mAxis);
 }
 
-const Vector3&
-UniversalJoint::getPosition() const
-{
-  return CartesianJoint<2>::getPosition();
-}
-
 void
-UniversalJoint::setPosition(const Vector3& position)
-{
-  CartesianJoint<2>::setPosition(position);
-}
-
-void
 UniversalJoint::setEnableExternalForce(bool enable)
 {
   if (enable == getEnableExternalForce())

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/UniversalJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/UniversalJoint.h	2008-12-24 08:52:02 UTC (rev 885)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/UniversalJoint.h	2008-12-24 08:55:40 UTC (rev 886)
@@ -33,9 +33,6 @@
   const Vector3& getAxis() const;
   void setAxis(const Vector3& axis);
 
-  const Vector3& getPosition() const;
-  void setPosition(const Vector3& position);
-
   void setEnableExternalForce(bool enable);
   bool getEnableExternalForce() const;
 

Modified: branches/OpenFDM-StateSeparation/src/test/foucault.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2008-12-24 08:52:02 UTC (rev 885)
+++ branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2008-12-24 08:55:40 UTC (rev 886)
@@ -28,8 +28,8 @@
   // FIXME, need usable environment stuff like gravity first ...
   SharedPtr<Group> group = new Group("Foucault");
   FixedRootJoint* fixedRootJoint = new FixedRootJoint("Root");
-  fixedRootJoint->setPosition(planet->toCart(geodetic));
-  fixedRootJoint->setOrientation(planet->getGeodHLOrientation(geodetic));
+  fixedRootJoint->setRootPosition(planet->toCart(geodetic));
+  fixedRootJoint->setRootOrientation(planet->getGeodHLOrientation(geodetic));
   group->addChild(fixedRootJoint);
   RotationalJoint* rotationalJoint1 = new RotationalJoint("Rotational Joint 1");
   group->addChild(rotationalJoint1);



From frohlich at mail.berlios.de  Wed Dec 24 10:05:31 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 24 Dec 2008 10:05:31 +0100
Subject: [OpenFDM-svn] r887 - in branches/OpenFDM-StateSeparation: .
	src/OpenFDM src/test
Message-ID: <200812240905.mBO95VFH027185@sheep.berlios.de>

Author: frohlich
Date: 2008-12-24 10:05:27 +0100 (Wed, 24 Dec 2008)
New Revision: 887

Modified:
   branches/OpenFDM-StateSeparation/AUTHORS
   branches/OpenFDM-StateSeparation/COPYING
   branches/OpenFDM-StateSeparation/COPYING.LIB
   branches/OpenFDM-StateSeparation/ChangeLog
   branches/OpenFDM-StateSeparation/INSTALL
   branches/OpenFDM-StateSeparation/NEWS
   branches/OpenFDM-StateSeparation/README
   branches/OpenFDM-StateSeparation/TODO
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractAtmosphere.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractAtmosphere.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractGround.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractGround.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractModel.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractModel.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractSystem.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractWind.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractWind.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Atomic.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Atomic.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/BoolStateInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/BreakPointLookup.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/BreakPointLookup.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/CSVSystemOutput.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Connect.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Connect.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateInfoVector.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateValue.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateValueVector.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/CoordinateSystem.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteStateValueVector.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Fraction.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInput.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInput.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/GroupMechanicLink.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/GroupMechanicLink.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/GroupOutput.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/GroupOutput.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Interval.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/JointContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/LeafContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/LeafNode.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/LeafNode.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/LibraryModel.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/LibraryModel.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/LibraryNode.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/LibraryNode.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MPFRFloat.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixInputPort.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixOutputPort.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Output.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Output.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PhysicalDimension.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortId.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RealInputPort.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RealOutputPort.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RealStateInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/SimulationTime.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SimulationTime.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/StateInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/StateInfoVector.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/StateValue.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/StateValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateContinousStateInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateDiscreteStateInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateInfoVector.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateStateInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateValueVector.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Time.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Time.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/TypeTraits.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/UnitConversion.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/UnitConversion.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/UniversalJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/UniversalJoint.h
   branches/OpenFDM-StateSeparation/src/test/ErrorCollectorCallback.h
   branches/OpenFDM-StateSeparation/src/test/Makefile.am
   branches/OpenFDM-StateSeparation/src/test/constintegral.cpp
   branches/OpenFDM-StateSeparation/src/test/coordsys.cpp
   branches/OpenFDM-StateSeparation/src/test/foucault.cpp
   branches/OpenFDM-StateSeparation/src/test/harmonic.cpp
   branches/OpenFDM-StateSeparation/src/test/inertianav.cpp
   branches/OpenFDM-StateSeparation/src/test/limit.cpp
   branches/OpenFDM-StateSeparation/src/test/linalg.cpp
   branches/OpenFDM-StateSeparation/src/test/mechanic.cpp
   branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
   branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
Log:
Set all sources to native line endings

_M   AUTHORS
_M   src/test/inertianav.cpp
_M   src/test/structure.cpp
_M   src/test/harmonic.cpp
_M   src/test/simulationtime.cpp
_M   src/test/tiretestrig.cpp
_M   src/test/coordsys.cpp
_M   src/test/linalg.cpp
_M   src/test/mechanic.cpp
_M   src/test/constintegral.cpp
_M   src/test/limit.cpp
_M   src/test/foucault.cpp
_M   src/test/ErrorCollectorCallback.h
_M   src/test/Makefile.am
_M   src/OpenFDM/SimulationTime.h
_M   src/OpenFDM/AbstractSystem.h
_M   src/OpenFDM/MatrixStateInfo.h
_M   src/OpenFDM/BreakPointLookup.h
_M   src/OpenFDM/FlatPlanet.h
_M   src/OpenFDM/SimulationTime.cpp
_M   src/OpenFDM/RealStateInfo.h
_M   src/OpenFDM/LibraryNode.cpp
_M   src/OpenFDM/RealOutputPort.h
_M   src/OpenFDM/PortValue.cpp
_M   src/OpenFDM/LeafNode.h
_M   src/OpenFDM/CartesianJoint.h
_M   src/OpenFDM/StateInfoVector.h
_M   src/OpenFDM/MatrixOutputPort.h
_M   src/OpenFDM/Group.h
_M   src/OpenFDM/GroupMechanicLink.cpp
_M   src/OpenFDM/ModelContext.cpp
_M   src/OpenFDM/LibraryNode.h
_M   src/OpenFDM/ContinousStateValue.cpp
_M   src/OpenFDM/LibraryModel.h
_M   src/OpenFDM/MPFRFloat.h
_M   src/OpenFDM/SystemOutput.cpp
_M   src/OpenFDM/InternalSensor.cpp
_M   src/OpenFDM/GroupMechanicLink.h
_M   src/OpenFDM/FixedRootJoint.h
_M   src/OpenFDM/AbstractNodeInstance.cpp
_M   src/OpenFDM/Output.cpp
_M   src/OpenFDM/TypeTraits.h
_M   src/OpenFDM/MechanicNode.cpp
_M   src/OpenFDM/RotationalJoint.cpp
_M   src/OpenFDM/Atomic.h
_M   src/OpenFDM/PortValue.h
_M   src/OpenFDM/RootJoint.cpp
_M   src/OpenFDM/AbstractModel.h
_M   src/OpenFDM/Interval.h
_M   src/OpenFDM/UnitConversion.h
_M   src/OpenFDM/Group.cpp
_M   src/OpenFDM/SphericalEarth.cpp
_M   src/OpenFDM/TemplateContinousStateInfo.h
_M   src/OpenFDM/ContinousStateValueVector.h
_M   src/OpenFDM/Connect.cpp
_M   src/OpenFDM/MatrixInputPort.h
_M   src/OpenFDM/ExternalForce.cpp
_M   src/OpenFDM/ContinousStateInfo.h
_M   src/OpenFDM/Task.h
_M   src/OpenFDM/RealInputPort.h
_M   src/OpenFDM/LeafNode.cpp
_M   src/OpenFDM/AbstractNodeContext.cpp
_M   src/OpenFDM/TemplateInfoVector.h
_M   src/OpenFDM/TemplateDiscreteStateInfo.h
_M   src/OpenFDM/GroupInput.h
_M   src/OpenFDM/MechanicLinkValue.cpp
_M   src/OpenFDM/GroupOutput.h
_M   src/OpenFDM/CSVSystemOutput.h
_M   src/OpenFDM/Node.h
_M   src/OpenFDM/AbstractWind.h
_M   src/OpenFDM/NodeVisitor.h
_M   src/OpenFDM/Atomic.cpp
_M   src/OpenFDM/MechanicContext.h
_M   src/OpenFDM/AbstractModel.cpp
_M   src/OpenFDM/LibraryModel.cpp
_M   src/OpenFDM/MechanicLinkValue.h
_M   src/OpenFDM/PhysicalDimension.h
_M   src/OpenFDM/MechanicLink.h
_M   src/OpenFDM/StateInfo.h
_M   src/OpenFDM/Delay.h
_M   src/OpenFDM/Time.h
_M   src/OpenFDM/SimpleDirectModel.h
_M   src/OpenFDM/Connect.h
_M   src/OpenFDM/TemplateValueVector.h
_M   src/OpenFDM/Output.h
_M   src/OpenFDM/ExternalForce.h
_M   src/OpenFDM/NumericPortValue.h
_M   src/OpenFDM/Sensor.cpp
_M   src/OpenFDM/GroupInput.cpp
_M   src/OpenFDM/LeafContext.h
_M   src/OpenFDM/AbstractGround.cpp
_M   src/OpenFDM/StateValue.h
_M   src/OpenFDM/ContinousStateValue.h
_M   src/OpenFDM/RotationalJoint.h
_M   src/OpenFDM/UnitConversion.cpp
_M   src/OpenFDM/DiscreteStateValueVector.h
_M   src/OpenFDM/PortInfo.cpp
_M   src/OpenFDM/CoordinateSystem.h
_M   src/OpenFDM/MechanicContext.cpp
_M   src/OpenFDM/ConstNodeVisitor.h
_M   src/OpenFDM/PortValueList.h
_M   src/OpenFDM/AbstractGround.h
_M   src/OpenFDM/TemplateStateInfo.h
_M   src/OpenFDM/AbstractAtmosphere.h
_M   src/OpenFDM/GroupOutput.cpp
_M   src/OpenFDM/BoolStateInfo.h
_M   src/OpenFDM/UniversalJoint.h
_M   src/OpenFDM/AbstractWind.cpp
_M   src/OpenFDM/Node.cpp
_M   src/OpenFDM/ContinousStateInfoVector.h
_M   src/OpenFDM/GroupInterfaceNode.h
_M   src/OpenFDM/BreakPointLookup.cpp
_M   src/OpenFDM/AbstractAtmosphere.cpp
_M   src/OpenFDM/RootJoint.h
_M   src/OpenFDM/NumericPortValue.cpp
_M   src/OpenFDM/NodeVisitor.cpp
_M   src/OpenFDM/PortId.h
_M   src/OpenFDM/FixedRootJoint.cpp
_M   src/OpenFDM/Fraction.h
_M   src/OpenFDM/InternalSensor.h
_M   src/OpenFDM/GroupInterfaceNode.cpp
_M   src/OpenFDM/AbstractNodeInstance.h
_M   src/OpenFDM/SimpleDirectModel.cpp
_M   src/OpenFDM/ModelContext.h
_M   src/OpenFDM/NodeInstance.cpp
_M   src/OpenFDM/ConstNodeVisitor.cpp
_M   src/OpenFDM/SphericalEarth.h
_M   src/OpenFDM/SystemOutput.h
_M   src/OpenFDM/UniversalJoint.cpp
_M   src/OpenFDM/StateValue.cpp
_M   src/OpenFDM/NodeInstance.h
_M   src/OpenFDM/HDF5SystemOutput.h
_M   src/OpenFDM/Time.cpp
_M   src/OpenFDM/Delay.cpp
_M   src/OpenFDM/PortInfo.h
_M   src/OpenFDM/MechanicNode.h
_M   src/OpenFDM/AbstractNodeContext.h
_M   src/OpenFDM/FlatPlanet.cpp
_M   src/OpenFDM/JointContext.h
_M   ChangeLog
_M   README
_M   TODO
_M   INSTALL
_M   COPYING
_M   NEWS
_M   COPYING.LIB



Property changes on: branches/OpenFDM-StateSeparation/AUTHORS
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/COPYING
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/COPYING.LIB
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/ChangeLog
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/INSTALL
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/NEWS
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/README
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/TODO
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractAtmosphere.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractAtmosphere.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractGround.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractGround.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractModel.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractModel.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractSystem.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractWind.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractWind.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Atomic.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Atomic.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/BoolStateInfo.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/BreakPointLookup.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/BreakPointLookup.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/CSVSystemOutput.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Connect.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Connect.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateInfo.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateInfoVector.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateValue.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateValue.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateValueVector.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/CoordinateSystem.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteStateValueVector.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/FlatPlanet.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Fraction.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInput.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInput.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/GroupMechanicLink.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/GroupMechanicLink.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/GroupOutput.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/GroupOutput.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Interval.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/JointContext.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/LeafContext.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/LeafNode.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/LeafNode.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/LibraryModel.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/LibraryModel.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/LibraryNode.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/LibraryNode.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/MPFRFloat.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixInputPort.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixOutputPort.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateInfo.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Output.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Output.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/PhysicalDimension.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/PortId.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/RealInputPort.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/RealOutputPort.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/RealStateInfo.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/SimulationTime.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/SimulationTime.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/SphericalEarth.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/StateInfo.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/StateInfoVector.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/StateValue.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/StateValue.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateContinousStateInfo.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateDiscreteStateInfo.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateInfoVector.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateStateInfo.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateValueVector.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Time.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/Time.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/TypeTraits.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/UnitConversion.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/UnitConversion.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/UniversalJoint.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/UniversalJoint.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/test/ErrorCollectorCallback.h
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/test/Makefile.am
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/test/constintegral.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/test/coordsys.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/test/foucault.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/test/harmonic.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/test/inertianav.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/test/limit.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/test/linalg.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/test/mechanic.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/test/structure.cpp
___________________________________________________________________
Name: svn:eol-style
   + native


Property changes on: branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
___________________________________________________________________
Name: svn:eol-style
   + native



From frohlich at mail.berlios.de  Thu Dec 25 12:20:18 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 25 Dec 2008 12:20:18 +0100
Subject: [OpenFDM-svn] r888 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812251120.mBPBKI36032191@sheep.berlios.de>

Author: frohlich
Date: 2008-12-25 12:20:17 +0100 (Thu, 25 Dec 2008)
New Revision: 888

Removed:
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortId.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.h
Log:
Retire PortId.

M    src/OpenFDM/Group.h
M    src/OpenFDM/Makefile.am
M    src/OpenFDM/RigidBody.h
M    src/OpenFDM/Node.h
M    src/OpenFDM/SimpleDirectModel.h
M    src/OpenFDM/RigidBody.cpp
M    src/OpenFDM/Node.cpp
M    src/OpenFDM/GroupInterfaceNode.h
D    src/OpenFDM/PortId.h
M    src/OpenFDM/SimpleDirectModel.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-24 09:05:27 UTC (rev 887)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-25 11:20:17 UTC (rev 888)
@@ -9,7 +9,6 @@
 #include <vector>
 #include "Connect.h"
 #include "Node.h"
-#include "PortId.h"
 #include "PortInfo.h"
 #include "SharedPtr.h"
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.h	2008-12-24 09:05:27 UTC (rev 887)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.h	2008-12-25 11:20:17 UTC (rev 888)
@@ -12,7 +12,6 @@
 #include "Node.h"
 #include "NodeVisitor.h"
 #include "Object.h"
-#include "PortId.h"
 #include "PortInfo.h"
 #include "SharedPtr.h"
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-24 09:05:27 UTC (rev 887)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-25 11:20:17 UTC (rev 888)
@@ -87,7 +87,6 @@
   OpenFDMConfig.h \
   PhysicalDimension.h \
   Plane.h \
-  PortId.h \
   PortInfo.h \
   PortValue.h \
   PortValueList.h \

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-12-24 09:05:27 UTC (rev 887)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-12-25 11:20:17 UTC (rev 888)
@@ -103,10 +103,10 @@
   return false;
 }
 
-SharedPtr<const PortInfo>
-Node::getPort(const PortId& portId) const
+unsigned
+Node::getNumPorts() const
 {
-  return portId._port.lock();
+  return mPortList.size();
 }
 
 SharedPtr<const PortInfo>
@@ -120,53 +120,34 @@
 SharedPtr<const PortInfo>
 Node::getPort(const std::string& name) const
 {
-  return getPort(getPortId(name));
-}
-
-unsigned
-Node::getNumPorts() const
-{
-  return mPortList.size();
-}
-
-PortId
-Node::getPortId(unsigned index) const
-{
-  if (mPortList.size() <= index)
-    return PortId();
-  return PortId(mPortList[index]);
-}
-
-PortId
-Node::getPortId(const std::string& name) const
-{
   PortList::const_iterator i;
   for (i = mPortList.begin(); i != mPortList.end(); ++i) {
     if (name == (*i)->getName())
-      return PortId(*i);
-  }
-  return PortId();
+      return *i;
+   }
+  return 0;
 }
 
 unsigned
-Node::getPortIndex(const PortId& portId) const
+Node::getPortIndex(const PortInfo* portInfo) const
 {
-  SharedPtr<const PortInfo> port = portId._port.lock();
-  if (!port)
-    return ~0u;
   PortList::const_iterator i;
-  i = std::find(mPortList.begin(), mPortList.end(), portId._port.lock());
-  if (i == mPortList.end())
-    return ~0u;
-  return port->getIndex();
+  for (i = mPortList.begin(); i != mPortList.end(); ++i) {
+    if (portInfo == i->get())
+      return std::distance(mPortList.begin(), i);
+  }
+  return ~0u;
 }
 
 bool
-Node::checkPort(const PortId& portId) const
+Node::checkPort(const PortInfo* portInfo) const
 {
   PortList::const_iterator i;
-  i = std::find(mPortList.begin(), mPortList.end(), portId._port.lock());
-  return i != mPortList.end();
+  for (i = mPortList.begin(); i != mPortList.end(); ++i) {
+    if (portInfo == i->get())
+      return true;
+  }
+  return false;
 }
 
 class Node::CycleCheckVisitor : public ConstNodeVisitor {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-12-24 09:05:27 UTC (rev 887)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-12-25 11:20:17 UTC (rev 888)
@@ -8,7 +8,6 @@
 #include <string>
 #include <vector>
 #include "Object.h"
-#include "PortId.h"
 #include "PortInfo.h"
 #include "SampleTime.h"
 #include "SharedPtr.h"
@@ -43,17 +42,12 @@
   WeakPtr<Node> getParent(unsigned i);
   bool isChildOf(const Group* group) const;
 
-  SharedPtr<const PortInfo> getPort(const PortId& portId) const;
+  unsigned getNumPorts() const;
   SharedPtr<const PortInfo> getPort(unsigned index) const;
   SharedPtr<const PortInfo> getPort(const std::string& name) const;
+  unsigned getPortIndex(const PortInfo* portInfo) const;
+  bool checkPort(const PortInfo* portInfo) const;
 
-  unsigned getNumPorts() const;
-  PortId getPortId(unsigned index) const;
-  PortId getPortId(const std::string& name) const;
-
-  unsigned getPortIndex(const PortId& portId) const;
-  bool checkPort(const PortId& portId) const;
-
   const SampleTime& getSampleTime() const
   { return mSampleTime; }
   void setSampleTime(const SampleTime& sampleTime)

Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/PortId.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortId.h	2008-12-24 09:05:27 UTC (rev 887)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortId.h	2008-12-25 11:20:17 UTC (rev 888)
@@ -1,37 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
- *
- */
-
-#ifndef OpenFDM_PortId_H
-#define OpenFDM_PortId_H
-
-#include "PortInfo.h"
-#include "SharedPtr.h"
-#include "WeakPtr.h"
-
-namespace OpenFDM {
-
-// Forward decl for friends ...
-class Node;
-
-class PortId {
-public:
-  PortId() {}
-  // Hmm, FIXME, public??
-  PortId(const SharedPtr<const PortInfo>& port) : _port(port) {}
-
-  bool operator==(const PortId& other) const
-  { return _port == other._port; }
-  bool operator!=(const PortId& other) const
-  { return _port != other._port; }
-  bool operator<(const PortId& other) const
-  { return _port < other._port; }
-
-private:
-  friend class Node;
-  WeakPtr<const PortInfo> _port;
-};
-
-} // namespace OpenFDM
-
-#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2008-12-24 09:05:27 UTC (rev 887)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2008-12-25 11:20:17 UTC (rev 888)
@@ -37,20 +37,22 @@
   visitor.handleNodePathAndApply(this);
 }
 
-PortId
+const PortInfo*
 RigidBody::addLink(const std::string& name)
 {
+  // FIXME: simplify
   MechanicLink mechanicLink = newMechanicLink(name);
   mMechanicLinks.push_back(mechanicLink);
-  return getPortId(mechanicLink.getPortIndex());
+  return getPort(mechanicLink.getPortIndex());
 }
 
 void
-RigidBody::removeLink(const PortId& portId)
+RigidBody::removeLink(const PortInfo* portInfo)
 {
+  // FIXME: simplify
   MechanicLinkVector::iterator i = mMechanicLinks.begin();
   while (i != mMechanicLinks.end()) {
-    if (getPortIndex(portId) == i->getPortIndex()) {
+    if (getPort(i->getPortIndex()) == portInfo) {
       i->clear();
       i = mMechanicLinks.erase(i);
     } else

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h	2008-12-24 09:05:27 UTC (rev 887)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h	2008-12-25 11:20:17 UTC (rev 888)
@@ -19,8 +19,8 @@
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
 
-  PortId addLink(const std::string& name);
-  void removeLink(const PortId& portId);
+  const PortInfo* addLink(const std::string& name);
+  void removeLink(const PortInfo* portInfo);
 
 private:
   typedef std::vector<MechanicLink> MechanicLinkVector;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.cpp	2008-12-24 09:05:27 UTC (rev 887)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.cpp	2008-12-25 11:20:17 UTC (rev 888)
@@ -147,6 +147,26 @@
   return new Context(this, inputValues, outputPortValue);
 }
 
+unsigned
+SimpleDirectModel::getNumInputPorts() const
+{
+  return mInputPorts.size();
+}
+
+const InputPortInfo*
+SimpleDirectModel::getInputPort(unsigned i) const
+{
+  if (mInputPorts.size() <= i)
+    return 0;
+  return mInputPorts[i];
+}
+
+const OutputPortInfo*
+SimpleDirectModel::getOutputPort() const
+{
+  return mOutputPort;
+}
+
 void
 SimpleDirectModel::setNumInputPorts(unsigned numInputPorts)
 {
@@ -160,19 +180,19 @@
     removeInputPort(getInputPort(oldnum-1));
 }
 
-PortId
+const InputPortInfo*
 SimpleDirectModel::addInputPort(const std::string& name)
 {
   mInputPorts.push_back(new InputPortInfo(this, name, Size(0, 0), true));
-  return PortId(mInputPorts.back());
+  return mInputPorts.back();
 }
 
 void
-SimpleDirectModel::removeInputPort(const PortId& portId)
+SimpleDirectModel::removeInputPort(const InputPortInfo* portInfo)
 {
   InputPortVector::iterator i = mInputPorts.begin();
   while (i != mInputPorts.end()) {
-    if (portId != PortId(*i)) {
+    if (portInfo != i->get()) {
       ++i;
       continue;
     }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.h	2008-12-24 09:05:27 UTC (rev 887)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.h	2008-12-25 11:20:17 UTC (rev 888)
@@ -19,17 +19,6 @@
   SimpleDirectModel(const std::string& name);
   virtual ~SimpleDirectModel();
 
-  unsigned getNumInputPorts() const
-  { return mInputPorts.size(); }
-  PortId getInputPort(unsigned i) const
-  {
-    if (mInputPorts.size() <= i)
-      return PortId();
-    return PortId(mInputPorts[i]);
-  }
-  PortId getOutputPort() const
-  { return PortId(mOutputPort); }
-
   class Context;
   virtual AbstractModelContext* newModelContext(PortValueList& portValueList) const;
   virtual void output(Context& context) const = 0;
@@ -66,10 +55,14 @@
     SharedPtr<NumericPortValue> mOutputValue;
   };
 
+  unsigned getNumInputPorts() const;
+  const InputPortInfo* getInputPort(unsigned i) const;
+  const OutputPortInfo* getOutputPort() const;
+
 protected:
   void setNumInputPorts(unsigned numInputPorts);
-  PortId addInputPort(const std::string& name);
-  void removeInputPort(const PortId& portId);
+  const InputPortInfo* addInputPort(const std::string& name);
+  void removeInputPort(const InputPortInfo* portInfo);
 
 private:
   typedef std::vector<SharedPtr<InputPortInfo> > InputPortVector;



From frohlich at mail.berlios.de  Thu Dec 25 21:17:50 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 25 Dec 2008 21:17:50 +0100
Subject: [OpenFDM-svn] r889 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812252017.mBPKHoFx026147@sheep.berlios.de>

Author: frohlich
Date: 2008-12-25 21:17:50 +0100 (Thu, 25 Dec 2008)
New Revision: 889

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
Log:
Fix typo.

M    Group.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-25 11:20:17 UTC (rev 888)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-12-25 20:17:50 UTC (rev 889)
@@ -28,7 +28,7 @@
   void traverse(NodeVisitor& visitor);
   void traverse(ConstNodeVisitor& visitor) const;
 
-  /// Add a new child. Returns the number of this child wthin the group
+  /// Add a new child. Returns the number of this child within the group
   /// on success else ~0u is returned.
   unsigned addChild(Node* node);
   /// Remove the given child.



From frohlich at mail.berlios.de  Fri Dec 26 16:28:33 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 26 Dec 2008 16:28:33 +0100
Subject: [OpenFDM-svn] r890 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812261528.mBQFSXEK026832@sheep.berlios.de>

Author: frohlich
Date: 2008-12-26 16:28:32 +0100 (Fri, 26 Dec 2008)
New Revision: 890

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Remove the optional property from the port infos.

M    src/OpenFDM/PortInfo.cpp
M    src/OpenFDM/System.cpp
M    src/OpenFDM/PortInfo.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.cpp	2008-12-25 20:17:50 UTC (rev 889)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.cpp	2008-12-26 15:28:32 UTC (rev 890)
@@ -13,8 +13,7 @@
 PortInfo::PortInfo(Node* node, const std::string& name) :
   mNode(node),
   mName(name),
-  mIndex(~0u),
-  mOptional(false)
+  mIndex(~0u)
 {
   OpenFDMAssert(node);
   node->addPort(this);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-12-25 20:17:50 UTC (rev 889)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-12-26 15:28:32 UTC (rev 890)
@@ -46,9 +46,6 @@
   SharedPtr<const Node> getNode() const
   { return mNode.lock(); }
 
-  bool getOptional() const { return mOptional; }
-  void setOptional(bool optional) { mOptional = optional; }
-
   unsigned getIndex() const { return mIndex; }
 
   virtual const NumericPortInfo* toNumericPortInfo() const { return 0; }
@@ -87,7 +84,6 @@
   WeakPtr<Node> mNode;
   std::string mName;
   unsigned mIndex;
-  bool mOptional;
 
   // FIXME: Hmm, can I avoid this??
   friend class Node;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-12-25 20:17:50 UTC (rev 889)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-12-26 15:28:32 UTC (rev 890)
@@ -1307,8 +1307,6 @@
       const Node* node = i->second->getNode();
       for (unsigned k = 0; k < node->getNumPorts(); ++k) {
         SharedPtr<const PortInfo> portInfo = node->getPort(k);
-        if (portInfo->getOptional())
-          continue;
         if (!i->second->getPortValue(*portInfo)) {
           Log(Schedule, Warning) << "Mandatory port value for port \""
                                  << portInfo->getName() << "\" for model \""



From frohlich at mail.berlios.de  Fri Dec 26 19:29:22 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 26 Dec 2008 19:29:22 +0100
Subject: [OpenFDM-svn] r891 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812261829.mBQITMeO007213@sheep.berlios.de>

Author: frohlich
Date: 2008-12-26 19:29:19 +0100 (Fri, 26 Dec 2008)
New Revision: 891

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h
Log:
Remove more leftovers of unconnected ports values.

M    src/OpenFDM/PortValueList.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h	2008-12-26 15:28:32 UTC (rev 890)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h	2008-12-26 18:29:19 UTC (rev 891)
@@ -26,22 +26,12 @@
 public:
 
   // Accessors for real valued ports
-  bool isConnected(const RealInputPort& port) const
-  { return port.getPortValue(mPortValueVector); }
-  bool isConnected(const RealOutputPort& port) const
-  { return port.getPortValue(mPortValueVector); }
-
   const real_type& operator[](const RealInputPort& port) const
   { return port.getPortValue(mPortValueVector)->getValue()(0, 0); }
   real_type& operator[](const RealOutputPort& port)
   { return port.getPortValue(mPortValueVector)->getValue()(0, 0); }
 
   // Accessors for matrix valued ports
-  bool isConnected(const MatrixInputPort& port) const
-  { return port.getPortValue(mPortValueVector); }
-  bool isConnected(const MatrixOutputPort& port) const
-  { return port.getPortValue(mPortValueVector); }
-
   const Matrix& operator[](const MatrixInputPort& port) const
   { return port.getPortValue(mPortValueVector)->getValue(); }
   // FIXME, make sure that the size cannot change.
@@ -52,16 +42,11 @@
 
 
   // Accessors for matrix valued ports
-  bool isConnected(const MechanicLink& port) const
-  { return port.getPortValue(mPortValueVector); }
-
   // FIXME Implement access control for the port value
   MechanicLinkValue& operator[](const MechanicLink& port) const
   { return *port.getPortValue(mPortValueVector); }
 
 
-
-
   // FIXME, avoid this method here. With this method the output stage of a model
   // can change the port values, this should not be available in a model.
   // may be this must be a derived class that provides some more access??



From frohlich at mail.berlios.de  Fri Dec 26 19:34:15 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 26 Dec 2008 19:34:15 +0100
Subject: [OpenFDM-svn] r892 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812261834.mBQIYFdo025036@sheep.berlios.de>

Author: frohlich
Date: 2008-12-26 19:34:15 +0100 (Fri, 26 Dec 2008)
New Revision: 892

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h
Log:
Move virtual functions into the implementation file.

M    PortValue.h
M    PortValue.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.cpp	2008-12-26 18:29:19 UTC (rev 891)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.cpp	2008-12-26 18:34:15 UTC (rev 892)
@@ -10,4 +10,34 @@
 {
 }
 
+void
+PortValue::destroy(const PortValue* portValue)
+{
+  delete portValue;
+}
+
+NumericPortValue*
+PortValue::toNumericPortValue()
+{
+  return 0;
+}
+
+const NumericPortValue*
+PortValue::toNumericPortValue() const
+{
+  return 0;
+}
+
+MechanicLinkValue*
+PortValue::toMechanicLinkValue()
+{
+  return 0;
+}
+
+const MechanicLinkValue*
+PortValue::toMechanicLinkValue() const
+{
+  return 0;
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h	2008-12-26 18:29:19 UTC (rev 891)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h	2008-12-26 18:34:15 UTC (rev 892)
@@ -16,13 +16,12 @@
 
 class PortValue : public Referenced {
 public:
-  virtual NumericPortValue* toNumericPortValue() { return 0; }
-  virtual const NumericPortValue* toNumericPortValue() const { return 0; }
-  virtual MechanicLinkValue* toMechanicLinkValue() { return 0; }
-  virtual const MechanicLinkValue* toMechanicLinkValue() const { return 0; }
+  virtual NumericPortValue* toNumericPortValue();
+  virtual const NumericPortValue* toNumericPortValue() const;
+  virtual MechanicLinkValue* toMechanicLinkValue();
+  virtual const MechanicLinkValue* toMechanicLinkValue() const;
 
-  static void destroy(const PortValue* portValue)
-  { delete portValue; }
+  static void destroy(const PortValue* portValue);
 
 protected:
   virtual ~PortValue();



From frohlich at mail.berlios.de  Sat Dec 27 11:58:28 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 27 Dec 2008 11:58:28 +0100
Subject: [OpenFDM-svn] r893 - branches/OpenFDM-StateSeparation
Message-ID: <200812271058.mBRAwSZG009757@sheep.berlios.de>

Author: frohlich
Date: 2008-12-27 11:58:28 +0100 (Sat, 27 Dec 2008)
New Revision: 893

Modified:
   branches/OpenFDM-StateSeparation/TODO
Log:
a new TODO.

M    TODO


Modified: branches/OpenFDM-StateSeparation/TODO
===================================================================
--- branches/OpenFDM-StateSeparation/TODO	2008-12-26 18:34:15 UTC (rev 892)
+++ branches/OpenFDM-StateSeparation/TODO	2008-12-27 10:58:28 UTC (rev 893)
@@ -23,6 +23,7 @@
 * Remove LeafNode??
 * Environmental cache ... May be put that into the Task???
 * Single link MechanicContext has a local coordinate system
+* Optimize inertia transforms.
 * Give Mass an own Context with a pretransformed Inertia
 
 * Check why harmonic is so bad ...



From frohlich at mail.berlios.de  Sat Dec 27 12:03:02 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 27 Dec 2008 12:03:02 +0100
Subject: [OpenFDM-svn] r894 - branches/OpenFDM-StateSeparation
Message-ID: <200812271103.mBRB32DH010269@sheep.berlios.de>

Author: frohlich
Date: 2008-12-27 12:03:02 +0100 (Sat, 27 Dec 2008)
New Revision: 894

Modified:
   branches/OpenFDM-StateSeparation/TODO
Log:
More todos.

M    TODO


Modified: branches/OpenFDM-StateSeparation/TODO
===================================================================
--- branches/OpenFDM-StateSeparation/TODO	2008-12-27 10:58:28 UTC (rev 893)
+++ branches/OpenFDM-StateSeparation/TODO	2008-12-27 11:03:02 UTC (rev 894)
@@ -14,14 +14,18 @@
  |- DoubleLinkInteractContext (has two parent links, constraint
  |       joints need to implement that in the future)
  |- RigidBodyContext (has a unique parent and may be a list of links with
-         different local coordinate sysetems, see above)
+         different local coordinate systems, see above)
 
 * More init time checking for SimpleDirectModels
 * Template Contexts for SimpleDirectModels
 * Sensor
 * Move Mechanics into a normal ModelContext??
 * Remove LeafNode??
-* Environmental cache ... May be put that into the Task???
+* Environmental cache ...
+  - May be put that into the Task???
+  - May be an extra argument to the mechanical system functions?
+  - May be have a 'RootLink' pointer/id in each MechanicLinkValue, and have
+    an environment cache for each RootLink (std::map<RootLinkId, Cache>)??
 * Single link MechanicContext has a local coordinate system
 * Optimize inertia transforms.
 * Give Mass an own Context with a pretransformed Inertia
@@ -48,6 +52,8 @@
 * AeroForces handling of alphadot/betadot.
 
 * Improove the WGS84 gravity
+* Add link property to tell if we already have the gravity applied at the
+  root link or if this should be applied in the mass models.
 * Test Gravity ...
 
 * Function -> AbstractFunction



From frohlich at mail.berlios.de  Sat Dec 27 12:31:45 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 27 Dec 2008 12:31:45 +0100
Subject: [OpenFDM-svn] r895 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812271131.mBRBVjWw013608@sheep.berlios.de>

Author: frohlich
Date: 2008-12-27 12:31:43 +0100 (Sat, 27 Dec 2008)
New Revision: 895

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Model.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.h
Log:
Make initOutput/initVelocities a convinience function.

M    src/OpenFDM/CartesianJoint.h
M    src/OpenFDM/Interact.cpp
M    src/OpenFDM/RootJoint.cpp
M    src/OpenFDM/MechanicContext.h
M    src/OpenFDM/SimpleDirectModel.h
M    src/OpenFDM/Model.cpp
M    src/OpenFDM/SimpleDirectModel.cpp
M    src/OpenFDM/ModelContext.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-27 11:03:02 UTC (rev 894)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-27 11:31:43 UTC (rev 895)
@@ -106,11 +106,10 @@
       mJointMatrix = mCartesianJoint->getJointMatrix();
     }
 
-    virtual void initVelocities(const /*Init*/Task& task)
+    virtual void init(const /*Init*/Task& task)
     {
       mCartesianJoint->init(task, mDiscreteState,
                             mContinousState, mPortValueList);
-      mCartesianJoint->velocity(task, *this, mContinousState, mPortValueList);
     }
     
     virtual void velocities(const Task& task)

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.cpp	2008-12-27 11:03:02 UTC (rev 894)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.cpp	2008-12-27 11:31:43 UTC (rev 895)
@@ -28,10 +28,9 @@
     mInteract->initDesignPosition(mPortValueList);
   }
 
-  virtual void initVelocities(const /*Init*/Task& task)
+  virtual void init(const /*Init*/Task& task)
   {
     mInteract->init(task, mDiscreteState, mContinousState, mPortValueList);
-    mInteract->velocity(task, getEnvironment(), mContinousState, mPortValueList);
   }
 
   virtual void velocities(const Task& task)

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-12-27 11:03:02 UTC (rev 894)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-12-27 11:31:43 UTC (rev 895)
@@ -27,7 +27,13 @@
   virtual const MechanicNode& getNode() const = 0;
 
   virtual void initDesignPosition() = 0;
-  virtual void initVelocities(const /*Init*/Task& task) = 0;
+
+  void initVelocities(const /*Init*/Task& task)
+  {
+    init(task);
+    velocities(task);
+  }
+  virtual void init(const /*Init*/Task& task) = 0;
   virtual void velocities(const Task& task) = 0;
   virtual void articulation(const Task& task) = 0;
   virtual void accelerations(const Task& task) = 0;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Model.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Model.cpp	2008-12-27 11:03:02 UTC (rev 894)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Model.cpp	2008-12-27 11:31:43 UTC (rev 895)
@@ -29,10 +29,9 @@
       return false;
     return mModel->alloc(*this);
   }
-  virtual void initOutput(const /*Init*/Task& task)
+  virtual void init(const /*Init*/Task& task)
   {
     mModel->init(task, mDiscreteState, mContinousState, mPortValueList);
-    mModel->output(task, mDiscreteState, mContinousState, mPortValueList);
   }
   virtual void output(const Task& task)
   {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h	2008-12-27 11:03:02 UTC (rev 894)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h	2008-12-27 11:31:43 UTC (rev 895)
@@ -25,7 +25,12 @@
 
   virtual const AbstractModel& getNode() const = 0;
 
-  virtual void initOutput(const /*Init*/Task& task) = 0;
+  void initOutput(const /*Init*/Task& task)
+  {
+    init(task);
+    output(task);
+  }
+  virtual void init(const /*Init*/Task& task) = 0;
   virtual void output(const Task& task) = 0;
   virtual void update(const DiscreteTask& discreteTask) = 0;
   virtual void derivative(const Task&) = 0;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp	2008-12-27 11:03:02 UTC (rev 894)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp	2008-12-27 11:31:43 UTC (rev 895)
@@ -29,10 +29,9 @@
     mRootJoint->initDesignPosition(mPortValueList);
   }
 
-  virtual void initVelocities(const /*Init*/Task& task)
+  virtual void init(const /*Init*/Task& task)
   {
     mRootJoint->init(task, mDiscreteState, mContinousState, mPortValueList);
-    mRootJoint->velocity(task, getEnvironment(), mContinousState, mPortValueList);
   }
   
   virtual void velocities(const Task& task)

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.cpp	2008-12-27 11:03:02 UTC (rev 894)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.cpp	2008-12-27 11:31:43 UTC (rev 895)
@@ -55,9 +55,8 @@
 }
 
 void
-SimpleDirectModel::Context::initOutput(const /*Init*/Task&)
+SimpleDirectModel::Context::init(const /*Init*/Task&)
 {
-  mModel->output(*this);
 }
 
 void

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.h	2008-12-27 11:03:02 UTC (rev 894)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleDirectModel.h	2008-12-27 11:31:43 UTC (rev 895)
@@ -36,7 +36,7 @@
     virtual ContinousStateValue* getStateValue(const ContinousStateInfo&);
     virtual ContinousStateValue* getStateDerivative(const ContinousStateInfo&);
     
-    virtual void initOutput(const /*Init*/Task&);
+    virtual void init(const /*Init*/Task&);
     virtual void output(const Task&);
     virtual void update(const DiscreteTask&);
     virtual void derivative(const Task&);



From frohlich at mail.berlios.de  Mon Dec 29 20:36:16 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 29 Dec 2008 20:36:16 +0100
Subject: [OpenFDM-svn] r896 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200812291936.mBTJaGLu027003@sheep.berlios.de>

Author: frohlich
Date: 2008-12-29 20:36:15 +0100 (Mon, 29 Dec 2008)
New Revision: 896

Added:
   branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h
   branches/OpenFDM-StateSeparation/src/test/inertianav.cpp
Log:
Split Interact into two classes.

M    src/test/inertianav.cpp
M    src/OpenFDM/WheelContact.cpp
M    src/OpenFDM/InternalSensor.cpp
M    src/OpenFDM/Mass.h
M    src/OpenFDM/Interact.cpp
M    src/OpenFDM/Makefile.am
M    src/OpenFDM/Mass.cpp
AM   src/OpenFDM/SingleLinkInteract.cpp
M    src/OpenFDM/Interact.h
M    src/OpenFDM/WheelContact.h
AM   src/OpenFDM/SingleLinkInteract.h
M    src/OpenFDM/Sensor.cpp
M    src/OpenFDM/InternalSensor.h
M    src/OpenFDM/Sensor.h
AM   src/OpenFDM/DoubleLinkInteract.cpp
AM   src/OpenFDM/DoubleLinkInteract.h


Added: branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.cpp	2008-12-27 11:31:43 UTC (rev 895)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.cpp	2008-12-29 19:36:15 UTC (rev 896)
@@ -0,0 +1,23 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
+ *
+ */
+
+#include "DoubleLinkInteract.h"
+
+namespace OpenFDM {
+
+BEGIN_OPENFDM_OBJECT_DEF(DoubleLinkInteract, Interact)
+  END_OPENFDM_OBJECT_DEF
+
+DoubleLinkInteract::DoubleLinkInteract(const std::string& name) :
+  Interact(name),
+  mMechanicLink0(this, "link0"),
+  mMechanicLink1(this, "link1")
+{
+}
+
+DoubleLinkInteract::~DoubleLinkInteract()
+{
+}
+
+} // namespace OpenFDM


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.cpp
___________________________________________________________________
Name: svn:eol-style
   + native

Added: branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h	2008-12-27 11:31:43 UTC (rev 895)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h	2008-12-29 19:36:15 UTC (rev 896)
@@ -0,0 +1,160 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_DoubleLinkInteract_H
+#define OpenFDM_DoubleLinkInteract_H
+
+#include <string>
+#include "Interact.h"
+#include "Environment.h"
+#include "MechanicContext.h"
+
+namespace OpenFDM {
+
+class DoubleLinkInteract : public Interact {
+  OPENFDM_OBJECT(DoubleLinkInteract, Interact);
+public:
+  DoubleLinkInteract(const std::string& name);
+  virtual ~DoubleLinkInteract();
+
+  class Context : public MechanicContext {
+  public:
+    Context(const DoubleLinkInteract* interact, const Environment* environment,
+            PortValueList& portValueList) :
+      MechanicContext(environment),
+      mInteract(interact),
+      mPortValueList(portValueList)
+    {
+      mMechanicLinkValue0 = portValueList.getPortValue(interact->mMechanicLink0.getPortIndex())->toMechanicLinkValue();
+      OpenFDMAssert(mMechanicLinkValue0);
+      mMechanicLinkValue1 = portValueList.getPortValue(interact->mMechanicLink1.getPortIndex())->toMechanicLinkValue();
+      OpenFDMAssert(mMechanicLinkValue1);
+    }
+    virtual ~Context() {}
+    
+    virtual const DoubleLinkInteract& getNode() const
+    { return *mInteract; }
+    
+    virtual void initDesignPosition()
+    {
+      mInteract->initDesignPosition(mPortValueList);
+    }
+    
+    virtual void init(const /*Init*/Task& task)
+    {
+      mInteract->init(task, mDiscreteState, mContinousState, mPortValueList);
+    }
+    
+    virtual void velocities(const Task& task)
+    {
+      mInteract->velocity(task, getEnvironment(), mContinousState, mPortValueList);
+    }
+    virtual void articulation(const Task& task)
+    {
+      mInteract->articulation(task, getEnvironment(), mContinousState, mPortValueList);
+    }
+    virtual void accelerations(const Task& task)
+    {
+      mInteract->acceleration(task, getEnvironment(), mContinousState, mPortValueList);
+    }
+    
+    virtual void derivative(const Task& task)
+    {
+      mInteract->derivative(task, getEnvironment(), mDiscreteState, mContinousState, mPortValueList,
+                            mContinousStateDerivative);
+    }
+    
+    virtual void update(const DiscreteTask&)
+    { }
+    
+    bool alloc()
+    {
+      unsigned numContinousStates = getNode().getNumContinousStateValues();
+      for (unsigned i = 0; i < numContinousStates; ++i) {
+        const ContinousStateInfo* continousStateInfo;
+        continousStateInfo = getNode().getContinousStateInfo(i);
+        mContinousState.setValue(*continousStateInfo, *this);
+        mContinousStateDerivative.setValue(*continousStateInfo, *this);
+      }
+      unsigned numDiscreteStates = getNode().getNumDiscreteStateValues();
+      for (unsigned i = 0; i < numDiscreteStates; ++i) {
+        const StateInfo* stateInfo;
+        stateInfo = getNode().getDiscreteStateInfo(i);
+        mDiscreteState.setValue(*stateInfo, *this);
+      }
+      return true;
+    }
+    
+    virtual ContinousStateValue* getStateValue(const ContinousStateInfo& info)
+    { return mContinousState.getValue(info); }
+    virtual ContinousStateValue* getStateDerivative(const ContinousStateInfo& info)
+    { return mContinousStateDerivative.getValue(info); }
+    
+    /// Set port value for the given port.
+    virtual const PortValue* getPortValue(const PortInfo& portInfo) const
+    {  return mPortValueList.getPortValue(portInfo); }
+    
+    MechanicLinkValue& getMechanicLinkValue0() const
+    { return *mMechanicLinkValue0; }
+    MechanicLinkValue& getMechanicLinkValue1() const
+    { return *mMechanicLinkValue1; }
+
+  protected:
+    // PortValues
+    PortValueList mPortValueList;
+    
+    // Continous States
+    ContinousStateValueVector mContinousState;
+    ContinousStateValueVector mContinousStateDerivative;
+    // Discrete States
+    DiscreteStateValueVector mDiscreteState;
+    
+  private:
+    SharedPtr<const DoubleLinkInteract> mInteract;
+    SharedPtr<MechanicLinkValue> mMechanicLinkValue0;
+    SharedPtr<MechanicLinkValue> mMechanicLinkValue1;
+  };
+  
+  virtual MechanicContext* newMechanicContext(const Environment* environment,
+                                              PortValueList& portValueList) const
+  {
+    SharedPtr<Context> context = new Context(this, environment, portValueList);
+    if (!context->alloc()) {
+      Log(Model, Warning) << "Could not alloc for model \""
+                          << getName() << "\"" << endl;
+      return 0;
+    }
+    return context.release();
+  }
+  
+  virtual void init(const Task&, DiscreteStateValueVector&,
+                    ContinousStateValueVector&, const PortValueList&) const
+  { }
+  virtual void initDesignPosition(PortValueList&) const = 0;
+  virtual void velocity(const Task&, const Environment& environment,
+                        const ContinousStateValueVector&, PortValueList&) const
+  { }
+  virtual void articulation(const Task&, const Environment& environment,
+                            const ContinousStateValueVector&,
+                            PortValueList&) const
+  { }
+  virtual void acceleration(const Task&, const Environment& environment,
+                            const ContinousStateValueVector&,
+                            PortValueList&) const
+  { }
+  virtual void derivative(const Task&, const Environment& environment,
+                          const DiscreteStateValueVector&,
+                          const ContinousStateValueVector&,
+                          const PortValueList&,
+                          ContinousStateValueVector&) const
+  { }
+
+protected:
+  MechanicLink mMechanicLink0;
+  MechanicLink mMechanicLink1;
+};
+
+} // namespace OpenFDM
+
+#endif


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.cpp	2008-12-27 11:31:43 UTC (rev 895)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.cpp	2008-12-29 19:36:15 UTC (rev 896)
@@ -10,92 +10,6 @@
 
 namespace OpenFDM {
 
-class Interact::Context : public MechanicContext {
-public:
-  Context(const Interact* interact, const Environment* environment,
-          PortValueList& portValueList) :
-    MechanicContext(environment),
-    mPortValueList(portValueList),
-    mInteract(interact)
-  {}
-  virtual ~Context() {}
-
-  virtual const Interact& getNode() const
-  { return *mInteract; }
-
-  virtual void initDesignPosition()
-  {
-    mInteract->initDesignPosition(mPortValueList);
-  }
-
-  virtual void init(const /*Init*/Task& task)
-  {
-    mInteract->init(task, mDiscreteState, mContinousState, mPortValueList);
-  }
-
-  virtual void velocities(const Task& task)
-  {
-    mInteract->velocity(task, getEnvironment(), mContinousState, mPortValueList);
-  }
-  virtual void articulation(const Task& task)
-  {
-    mInteract->articulation(task, getEnvironment(), mContinousState, mPortValueList);
-  }
-  virtual void accelerations(const Task& task)
-  {
-    mInteract->acceleration(task, getEnvironment(), mContinousState, mPortValueList);
-  }
-
-  virtual void derivative(const Task& task)
-  {
-    mInteract->derivative(task, getEnvironment(), mDiscreteState, mContinousState, mPortValueList,
-                          mContinousStateDerivative);
-  }
- 
-  virtual void update(const DiscreteTask&)
-  { }
-
-  bool alloc()
-  {
-    unsigned numContinousStates = getNode().getNumContinousStateValues();
-    for (unsigned i = 0; i < numContinousStates; ++i) {
-      const ContinousStateInfo* continousStateInfo;
-      continousStateInfo = getNode().getContinousStateInfo(i);
-      mContinousState.setValue(*continousStateInfo, *this);
-      mContinousStateDerivative.setValue(*continousStateInfo, *this);
-    }
-    unsigned numDiscreteStates = getNode().getNumDiscreteStateValues();
-    for (unsigned i = 0; i < numDiscreteStates; ++i) {
-      const StateInfo* stateInfo;
-      stateInfo = getNode().getDiscreteStateInfo(i);
-      mDiscreteState.setValue(*stateInfo, *this);
-    }
-    return true;
-  }
-
-  virtual ContinousStateValue* getStateValue(const ContinousStateInfo& info)
-  { return mContinousState.getValue(info); }
-  virtual ContinousStateValue* getStateDerivative(const ContinousStateInfo& info)
-  { return mContinousStateDerivative.getValue(info); }
-
-  /// Set port value for the given port.
-  virtual const PortValue* getPortValue(const PortInfo& portInfo) const
-  {  return mPortValueList.getPortValue(portInfo); }
-  
-protected:
-  // PortValues
-  PortValueList mPortValueList;
-
-  // Continous States
-  ContinousStateValueVector mContinousState;
-  ContinousStateValueVector mContinousStateDerivative;
-  // Discrete States
-  DiscreteStateValueVector mDiscreteState;
-
-private:
-  SharedPtr<const Interact> mInteract;
-};
-
 BEGIN_OPENFDM_OBJECT_DEF(Interact, MechanicNode)
   END_OPENFDM_OBJECT_DEF
 
@@ -120,17 +34,4 @@
   visitor.handleNodePathAndApply(this);
 }
 
-MechanicContext*
-Interact::newMechanicContext(const Environment* environment,
-                             PortValueList& portValueList) const
-{
-  SharedPtr<Context> context = new Context(this, environment, portValueList);
-  if (!context->alloc()) {
-    Log(Model, Warning) << "Could not alloc for model \""
-                        << getName() << "\"" << endl;
-    return false;
-  }
-  return context.release();
-}
-
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.h	2008-12-27 11:31:43 UTC (rev 895)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Interact.h	2008-12-29 19:36:15 UTC (rev 896)
@@ -6,17 +6,15 @@
 #define OpenFDM_Interact_H
 
 #include <string>
-#include "Environment.h"
 #include "MechanicNode.h"
 
 namespace OpenFDM {
 
 class ConstNodeVisitor;
-class ContinousStateValueVector;
-class DiscreteStateValueVector;
+class Environment;
+class MechanicContext;
 class NodeVisitor;
 class PortValueList;
-class Task;
 
 class Interact : public MechanicNode {
   OPENFDM_OBJECT(Interact, MechanicNode);
@@ -27,32 +25,8 @@
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
 
-  virtual MechanicContext* newMechanicContext(const Environment* environment,
-                                              PortValueList& portValues) const;
-
-  virtual void init(const Task&, DiscreteStateValueVector&,
-                    ContinousStateValueVector&, const PortValueList&) const
-  { }
-  virtual void initDesignPosition(PortValueList&) const = 0;
-  virtual void velocity(const Task&, const Environment& environment,
-                        const ContinousStateValueVector&, PortValueList&) const
-  { }
-  virtual void articulation(const Task&, const Environment& environment,
-                            const ContinousStateValueVector&,
-                            PortValueList&) const
-  { }
-  virtual void acceleration(const Task&, const Environment& environment,
-                            const ContinousStateValueVector&,
-                            PortValueList&) const
-  { }
-  virtual void derivative(const Task&, const Environment& environment,
-                          const DiscreteStateValueVector&,
-                          const ContinousStateValueVector&,
-                          const PortValueList&,
-                          ContinousStateValueVector&) const
-  { }
-private:
-  class Context;
+  virtual MechanicContext*
+  newMechanicContext(const Environment*, PortValueList&) const = 0;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2008-12-27 11:31:43 UTC (rev 895)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2008-12-29 19:36:15 UTC (rev 896)
@@ -11,7 +11,7 @@
 
 namespace OpenFDM {
 
-BEGIN_OPENFDM_OBJECT_DEF(InternalSensor, Interact)
+BEGIN_OPENFDM_OBJECT_DEF(InternalSensor, DoubleLinkInteract)
   DEF_OPENFDM_PROPERTY(Vector3, Position0, Serialized)
   DEF_OPENFDM_PROPERTY(Vector3, Position1, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnableDistance, Serialized)
@@ -19,9 +19,7 @@
   END_OPENFDM_OBJECT_DEF
 
 InternalSensor::InternalSensor(const std::string& name) :
-  Interact(name),
-  mMechanicLink0(newMechanicLink("link0")),
-  mMechanicLink1(newMechanicLink("link1")),
+  DoubleLinkInteract(name),
   mPosition0(0, 0, 0),
   mPosition1(0, 0, 0)
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h	2008-12-27 11:31:43 UTC (rev 895)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h	2008-12-29 19:36:15 UTC (rev 896)
@@ -5,7 +5,7 @@
 #ifndef OpenFDM_InternalSensor_H
 #define OpenFDM_InternalSensor_H
 
-#include "Interact.h"
+#include "DoubleLinkInteract.h"
 #include "MechanicLink.h"
 #include "RealInputPort.h"
 #include "RealOutputPort.h"
@@ -13,8 +13,8 @@
 
 namespace OpenFDM {
 
-class InternalSensor : public Interact {
-  OPENFDM_OBJECT(InternalSensor, Interact);
+class InternalSensor : public DoubleLinkInteract {
+  OPENFDM_OBJECT(InternalSensor, DoubleLinkInteract);
 public:
   InternalSensor(const std::string& name);
   virtual ~InternalSensor(void);
@@ -57,9 +57,6 @@
   void setEnableAllOutputs(bool enable);
 
 protected:
-  MechanicLink mMechanicLink0;
-  MechanicLink mMechanicLink1;
-
   Vector3 mPosition0;
   Vector3 mPosition1;
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-27 11:31:43 UTC (rev 895)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-12-29 19:36:15 UTC (rev 896)
@@ -31,6 +31,7 @@
   CoordinateSystem.h \
   CowPtr.h \
   DiscreteStateValueVector.h \
+  DoubleLinkInteract.h \
   DoPri5.h \
   Environment.h \
   ExplicitAdams.h \
@@ -102,6 +103,7 @@
   SampleTime.h \
   ScopeLock.h \
   SharedPtr.h \
+  SingleLinkInteract.h \
   SphericalEarth.h \
   StateStream.h \
   StateInfo.h \
@@ -270,6 +272,7 @@
   UnitConversion.cpp
 
 OpenFDMMechanicSOURCES = \
+  DoubleLinkInteract.cpp \
   Joint.cpp \
   ExternalForce.cpp \
   FixedRootJoint.cpp \
@@ -281,6 +284,7 @@
   RevoluteJoint.cpp \
   RotationalJoint.cpp \
   Sensor.cpp \
+  SingleLinkInteract.cpp \
   UniversalJoint.cpp \
   WheelContact.cpp
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-12-27 11:31:43 UTC (rev 895)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-12-29 19:36:15 UTC (rev 896)
@@ -9,7 +9,7 @@
 
 namespace OpenFDM {
 
-BEGIN_OPENFDM_OBJECT_DEF(Mass, Interact)
+BEGIN_OPENFDM_OBJECT_DEF(Mass, SingleLinkInteract)
   DEF_OPENFDM_PROPERTY(Vector3, Position, Serialized)
   DEF_OPENFDM_PROPERTY(Inertia, Inertia, Serialized)
   DEF_OPENFDM_PROPERTY(Real, Mass, Serialized)
@@ -17,8 +17,7 @@
 
 Mass::Mass(const std::string& name, const real_type& mass,
            const InertiaMatrix& inertia, const Vector3& position) :
-  Interact(name),
-  mMechanicLink(newMechanicLink("link")),
+  SingleLinkInteract(name),
   mMass(mass),
   mInertia(inertia),
   mPosition(position)

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h	2008-12-27 11:31:43 UTC (rev 895)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h	2008-12-29 19:36:15 UTC (rev 896)
@@ -5,13 +5,13 @@
 #ifndef OpenFDM_Mass_H
 #define OpenFDM_Mass_H
 
-#include "Interact.h"
+#include "SingleLinkInteract.h"
 #include "Inertia.h"
 
 namespace OpenFDM {
 
-class Mass : public Interact {
-  OPENFDM_OBJECT(Mass, Interact);
+class Mass : public SingleLinkInteract {
+  OPENFDM_OBJECT(Mass, SingleLinkInteract);
 public:
   Mass(const std::string& name, const real_type& mass = 0,
        const InertiaMatrix& inertia = InertiaMatrix(0, 0, 0, 0, 0, 0),
@@ -45,8 +45,6 @@
   void setPosition(const Vector3& position);
 
 private:
-  MechanicLink mMechanicLink;
-
   /// The paremeters that can be set from outside
   real_type mMass;
   InertiaMatrix mInertia;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2008-12-27 11:31:43 UTC (rev 895)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2008-12-29 19:36:15 UTC (rev 896)
@@ -11,7 +11,7 @@
 
 namespace OpenFDM {
 
-BEGIN_OPENFDM_OBJECT_DEF(Sensor, Interact)
+BEGIN_OPENFDM_OBJECT_DEF(Sensor, SingleLinkInteract)
   DEF_OPENFDM_PROPERTY(Vector3, Position, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnablePosition, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnableOrientation, Serialized)
@@ -29,8 +29,7 @@
   END_OPENFDM_OBJECT_DEF
 
 Sensor::Sensor(const std::string& name) :
-  Interact(name),
-  mMechanicLink(newMechanicLink("link")),
+  SingleLinkInteract(name),
   mPosition(0, 0, 0)
 {
 }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2008-12-27 11:31:43 UTC (rev 895)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2008-12-29 19:36:15 UTC (rev 896)
@@ -5,7 +5,7 @@
 #ifndef OpenFDM_Sensor_H
 #define OpenFDM_Sensor_H
 
-#include "Interact.h"
+#include "SingleLinkInteract.h"
 #include "MatrixOutputPort.h"
 #include "MechanicLink.h"
 #include "RealOutputPort.h"
@@ -13,8 +13,8 @@
 
 namespace OpenFDM {
 
-class Sensor : public Interact {
-  OPENFDM_OBJECT(Sensor, Interact);
+class Sensor : public SingleLinkInteract {
+  OPENFDM_OBJECT(Sensor, SingleLinkInteract);
 public:
   Sensor(const std::string& name);
   virtual ~Sensor(void);
@@ -111,8 +111,6 @@
   void setEnableAllOutputs(bool enable);
 
 protected:
-  MechanicLink mMechanicLink;
-
   Vector3 mPosition;
 
   MatrixOutputPort mPositionPort;

Added: branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.cpp	2008-12-27 11:31:43 UTC (rev 895)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.cpp	2008-12-29 19:36:15 UTC (rev 896)
@@ -0,0 +1,22 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
+ *
+ */
+
+#include "SingleLinkInteract.h"
+
+namespace OpenFDM {
+
+BEGIN_OPENFDM_OBJECT_DEF(SingleLinkInteract, Interact)
+  END_OPENFDM_OBJECT_DEF
+
+SingleLinkInteract::SingleLinkInteract(const std::string& name) :
+  Interact(name),
+  mMechanicLink(this, "link")
+{
+}
+
+SingleLinkInteract::~SingleLinkInteract()
+{
+}
+
+} // namespace OpenFDM


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.cpp
___________________________________________________________________
Name: svn:eol-style
   + native

Added: branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2008-12-27 11:31:43 UTC (rev 895)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2008-12-29 19:36:15 UTC (rev 896)
@@ -0,0 +1,162 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_SingleLinkInteract_H
+#define OpenFDM_SingleLinkInteract_H
+
+#include <string>
+#include "Interact.h"
+#include "Environment.h"
+#include "MechanicContext.h"
+
+namespace OpenFDM {
+
+class ConstNodeVisitor;
+class ContinousStateValueVector;
+class DiscreteStateValueVector;
+class NodeVisitor;
+class PortValueList;
+class Task;
+
+class SingleLinkInteract : public Interact {
+  OPENFDM_OBJECT(SingleLinkInteract, Interact);
+public:
+  SingleLinkInteract(const std::string& name);
+  virtual ~SingleLinkInteract();
+
+  class Context : public MechanicContext {
+  public:
+    Context(const SingleLinkInteract* interact, const Environment* environment,
+            PortValueList& portValueList) :
+      MechanicContext(environment),
+      mInteract(interact),
+      mPortValueList(portValueList)
+    {
+      mMechanicLinkValue = portValueList.getPortValue(interact->mMechanicLink.getPortIndex())->toMechanicLinkValue();
+      OpenFDMAssert(mMechanicLinkValue);
+    }
+    virtual ~Context() {}
+    
+    virtual const SingleLinkInteract& getNode() const
+    { return *mInteract; }
+    
+    virtual void initDesignPosition()
+    {
+      mInteract->initDesignPosition(mPortValueList);
+    }
+    
+    virtual void init(const /*Init*/Task& task)
+    {
+      mInteract->init(task, mDiscreteState, mContinousState, mPortValueList);
+    }
+    
+    virtual void velocities(const Task& task)
+    {
+      mInteract->velocity(task, getEnvironment(), mContinousState, mPortValueList);
+    }
+    virtual void articulation(const Task& task)
+    {
+      mInteract->articulation(task, getEnvironment(), mContinousState, mPortValueList);
+    }
+    virtual void accelerations(const Task& task)
+    {
+      mInteract->acceleration(task, getEnvironment(), mContinousState, mPortValueList);
+    }
+    
+    virtual void derivative(const Task& task)
+    {
+      mInteract->derivative(task, getEnvironment(), mDiscreteState, mContinousState, mPortValueList,
+                            mContinousStateDerivative);
+    }
+    
+    virtual void update(const DiscreteTask&)
+    { }
+    
+    bool alloc()
+    {
+      unsigned numContinousStates = getNode().getNumContinousStateValues();
+      for (unsigned i = 0; i < numContinousStates; ++i) {
+        const ContinousStateInfo* continousStateInfo;
+        continousStateInfo = getNode().getContinousStateInfo(i);
+        mContinousState.setValue(*continousStateInfo, *this);
+        mContinousStateDerivative.setValue(*continousStateInfo, *this);
+      }
+      unsigned numDiscreteStates = getNode().getNumDiscreteStateValues();
+      for (unsigned i = 0; i < numDiscreteStates; ++i) {
+        const StateInfo* stateInfo;
+        stateInfo = getNode().getDiscreteStateInfo(i);
+        mDiscreteState.setValue(*stateInfo, *this);
+      }
+      return true;
+    }
+    
+    virtual ContinousStateValue* getStateValue(const ContinousStateInfo& info)
+    { return mContinousState.getValue(info); }
+    virtual ContinousStateValue* getStateDerivative(const ContinousStateInfo& info)
+    { return mContinousStateDerivative.getValue(info); }
+    
+    /// Set port value for the given port.
+    virtual const PortValue* getPortValue(const PortInfo& portInfo) const
+    {  return mPortValueList.getPortValue(portInfo); }
+    
+    MechanicLinkValue& getMechanicLinkValue() const
+    { return *mMechanicLinkValue; }
+
+  protected:
+    // PortValues
+    PortValueList mPortValueList;
+    
+    // Continous States
+    ContinousStateValueVector mContinousState;
+    ContinousStateValueVector mContinousStateDerivative;
+    // Discrete States
+    DiscreteStateValueVector mDiscreteState;
+    
+  private:
+    SharedPtr<const SingleLinkInteract> mInteract;
+    SharedPtr<MechanicLinkValue> mMechanicLinkValue;
+  };
+  
+
+  virtual MechanicContext* newMechanicContext(const Environment* environment,
+                                              PortValueList& portValueList) const
+  {
+    SharedPtr<Context> context = new Context(this, environment, portValueList);
+    if (!context->alloc()) {
+      Log(Model, Warning) << "Could not alloc for model \""
+                          << getName() << "\"" << endl;
+      return 0;
+    }
+    return context.release();
+  }
+  
+  virtual void init(const Task&, DiscreteStateValueVector&,
+                    ContinousStateValueVector&, const PortValueList&) const
+  { }
+  virtual void initDesignPosition(PortValueList&) const = 0;
+  virtual void velocity(const Task&, const Environment& environment,
+                        const ContinousStateValueVector&, PortValueList&) const
+  { }
+  virtual void articulation(const Task&, const Environment& environment,
+                            const ContinousStateValueVector&,
+                            PortValueList&) const
+  { }
+  virtual void acceleration(const Task&, const Environment& environment,
+                            const ContinousStateValueVector&,
+                            PortValueList&) const
+  { }
+  virtual void derivative(const Task&, const Environment& environment,
+                          const DiscreteStateValueVector&,
+                          const ContinousStateValueVector&,
+                          const PortValueList&,
+                          ContinousStateValueVector&) const
+  { }
+
+protected:
+  MechanicLink mMechanicLink;
+};
+
+} // namespace OpenFDM
+
+#endif


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-27 11:31:43 UTC (rev 895)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-29 19:36:15 UTC (rev 896)
@@ -10,7 +10,7 @@
 
 namespace OpenFDM {
 
-BEGIN_OPENFDM_OBJECT_DEF(WheelContact, Interact)
+BEGIN_OPENFDM_OBJECT_DEF(WheelContact, SingleLinkInteract)
   DEF_OPENFDM_PROPERTY(Vector3, Position, Serialized)
   DEF_OPENFDM_PROPERTY(Vector3, Axis, Serialized)
   DEF_OPENFDM_PROPERTY(Real, WheelRadius, Serialized)
@@ -21,8 +21,7 @@
   END_OPENFDM_OBJECT_DEF
 
 WheelContact::WheelContact(const std::string& name) :
-  Interact(name),
-  mMechanicLink(newMechanicLink("link")),
+  SingleLinkInteract(name),
   mPosition(0, 0, 0),
   mAxis(0, 1, 0)
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h	2008-12-27 11:31:43 UTC (rev 895)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h	2008-12-29 19:36:15 UTC (rev 896)
@@ -5,12 +5,12 @@
 #ifndef OpenFDM_WheelContact_H
 #define OpenFDM_WheelContact_H
 
-#include "Interact.h"
+#include "SingleLinkInteract.h"
 
 namespace OpenFDM {
 
-class WheelContact : public Interact {
-  OPENFDM_OBJECT(WheelContact, Interact);
+class WheelContact : public SingleLinkInteract {
+  OPENFDM_OBJECT(WheelContact, SingleLinkInteract);
 public:
   WheelContact(const std::string& name);
   virtual ~WheelContact(void);
@@ -64,8 +64,6 @@
   { return mFrictionCoeficient; }
 
 private:
-  MechanicLink mMechanicLink;
-
   Vector3 mPosition;
   Vector3 mAxis;
   real_type mWheelRadius;

Modified: branches/OpenFDM-StateSeparation/src/test/inertianav.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/inertianav.cpp	2008-12-27 11:31:43 UTC (rev 895)
+++ branches/OpenFDM-StateSeparation/src/test/inertianav.cpp	2008-12-29 19:36:15 UTC (rev 896)
@@ -12,11 +12,10 @@
 
 using namespace OpenFDM;
 
-class AccelerationTracking : public Interact {
+class AccelerationTracking : public SingleLinkInteract {
 public:
   AccelerationTracking() :
-    Interact("AccelerationTracking"),
-    mMechanicLink(newMechanicLink("link")),
+    SingleLinkInteract("AccelerationTracking"),
 //     mAccelerationInputPort0(this, "accelerationInput0", Size(3, 1), true),
 //     mAccelerationInputPort1(this, "accelerationInput1", Size(3, 1), true),
 //     mVelocityPort(this, "velocity", Size(6, 1), true),
@@ -128,7 +127,6 @@
   }
 
 protected:
-  MechanicLink mMechanicLink;
   MatrixInputPort mVelocityPort;
   MatrixInputPort mAccelerationInputPort0;
   MatrixInputPort mAccelerationInputPort1;



From frohlich at mail.berlios.de  Mon Dec 29 21:38:10 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 29 Dec 2008 21:38:10 +0100
Subject: [OpenFDM-svn] r897 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812292038.mBTKcAZu001748@sheep.berlios.de>

Author: frohlich
Date: 2008-12-29 21:38:09 +0100 (Mon, 29 Dec 2008)
New Revision: 897

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
Log:
Provide default implementations for the MechanicContext methods.

M    src/OpenFDM/MobileRootJoint.cpp
M    src/OpenFDM/CartesianJoint.h
M    src/OpenFDM/RootJoint.cpp
M    src/OpenFDM/MechanicContext.h
M    src/OpenFDM/SingleLinkInteract.h
M    src/OpenFDM/MechanicContext.cpp
M    src/OpenFDM/DoubleLinkInteract.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-29 19:36:15 UTC (rev 896)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-29 20:38:09 UTC (rev 897)
@@ -133,9 +133,6 @@
                                   mPortValueList, mContinousStateDerivative);
     }
     
-    virtual void update(const DiscreteTask&)
-    { }
-
     void setPosAndVel(const Vector3& position, const Quaternion& orientation,
                       const VectorN& velocity)
     {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h	2008-12-29 19:36:15 UTC (rev 896)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h	2008-12-29 20:38:09 UTC (rev 897)
@@ -65,9 +65,6 @@
                             mContinousStateDerivative);
     }
     
-    virtual void update(const DiscreteTask&)
-    { }
-    
     bool alloc()
     {
       unsigned numContinousStates = getNode().getNumContinousStateValues();

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.cpp	2008-12-29 19:36:15 UTC (rev 896)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.cpp	2008-12-29 20:38:09 UTC (rev 897)
@@ -16,4 +16,46 @@
 {
 }
 
+void
+MechanicContext::initDesignPosition()
+{
+}
+
+void
+MechanicContext::initVelocities(const /*Init*/Task& task)
+{
+  init(task);
+  velocities(task);
+}
+
+void
+MechanicContext::init(const /*Init*/Task& task)
+{
+}
+
+void
+MechanicContext::velocities(const Task& task)
+{
+}
+
+void
+MechanicContext::articulation(const Task& task)
+{
+}
+
+void
+MechanicContext::accelerations(const Task& task)
+{
+}
+
+void
+MechanicContext::derivative(const Task&)
+{
+}
+
+void
+MechanicContext::update(const DiscreteTask& discreteTask)
+{
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-12-29 19:36:15 UTC (rev 896)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-12-29 20:38:09 UTC (rev 897)
@@ -26,20 +26,15 @@
 
   virtual const MechanicNode& getNode() const = 0;
 
-  virtual void initDesignPosition() = 0;
+  virtual void initDesignPosition();
+  void initVelocities(const /*Init*/Task& task);
+  virtual void init(const /*Init*/Task& task);
+  virtual void velocities(const Task& task);
+  virtual void articulation(const Task& task);
+  virtual void accelerations(const Task& task);
+  virtual void derivative(const Task&);
+  virtual void update(const DiscreteTask& discreteTask);
 
-  void initVelocities(const /*Init*/Task& task)
-  {
-    init(task);
-    velocities(task);
-  }
-  virtual void init(const /*Init*/Task& task) = 0;
-  virtual void velocities(const Task& task) = 0;
-  virtual void articulation(const Task& task) = 0;
-  virtual void accelerations(const Task& task) = 0;
-  virtual void derivative(const Task&) = 0;
-  virtual void update(const DiscreteTask& discreteTask) = 0;
-
   const Environment& getEnvironment() const
   { return *mEnvironment; }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-12-29 19:36:15 UTC (rev 896)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-12-29 20:38:09 UTC (rev 897)
@@ -11,7 +11,6 @@
 #include "Quaternion.h"
 #include "Inertia.h"
 #include "Task.h"
-#include "MechanicContext.h"
 
 namespace OpenFDM {
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp	2008-12-29 19:36:15 UTC (rev 896)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp	2008-12-29 20:38:09 UTC (rev 897)
@@ -53,9 +53,6 @@
                            mContinousStateDerivative);
   }
   
-  virtual void update(const DiscreteTask&)
-  { }
-
 private:
   SharedPtr<const RootJoint> mRootJoint;
 };

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2008-12-29 19:36:15 UTC (rev 896)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2008-12-29 20:38:09 UTC (rev 897)
@@ -70,9 +70,6 @@
                             mContinousStateDerivative);
     }
     
-    virtual void update(const DiscreteTask&)
-    { }
-    
     bool alloc()
     {
       unsigned numContinousStates = getNode().getNumContinousStateValues();



From frohlich at mail.berlios.de  Tue Dec 30 09:23:30 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 30 Dec 2008 09:23:30 +0100
Subject: [OpenFDM-svn] r898 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812300823.mBU8NUaS007098@sheep.berlios.de>

Author: frohlich
Date: 2008-12-30 09:23:29 +0100 (Tue, 30 Dec 2008)
New Revision: 898

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
Log:
Convenience api for getting port values with direct port handles.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h	2008-12-29 20:38:09 UTC (rev 897)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h	2008-12-30 08:23:29 UTC (rev 898)
@@ -26,9 +26,9 @@
       mInteract(interact),
       mPortValueList(portValueList)
     {
-      mMechanicLinkValue0 = portValueList.getPortValue(interact->mMechanicLink0.getPortIndex())->toMechanicLinkValue();
+      mMechanicLinkValue0 = portValueList.getPortValue(interact->mMechanicLink0);
       OpenFDMAssert(mMechanicLinkValue0);
-      mMechanicLinkValue1 = portValueList.getPortValue(interact->mMechanicLink1.getPortIndex())->toMechanicLinkValue();
+      mMechanicLinkValue1 = portValueList.getPortValue(interact->mMechanicLink1);
       OpenFDMAssert(mMechanicLinkValue1);
     }
     virtual ~Context() {}

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h	2008-12-29 20:38:09 UTC (rev 897)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h	2008-12-30 08:23:29 UTC (rev 898)
@@ -40,12 +40,41 @@
   Matrix& operator[](const MatrixOutputPort& port)
   { return port.getPortValue(mPortValueVector)->getValue(); }
 
-
   // Accessors for matrix valued ports
   // FIXME Implement access control for the port value
   MechanicLinkValue& operator[](const MechanicLink& port) const
   { return *port.getPortValue(mPortValueVector); }
 
+  const NumericPortValue* getPortValue(const RealInputPort& port)
+  {
+    if (port.empty())
+      return 0;
+    return port.getPortValue(mPortValueVector);
+  }
+  NumericPortValue* getPortValue(const RealOutputPort& port)
+  {
+    if (port.empty())
+      return 0;
+    return port.getPortValue(mPortValueVector);
+  }
+  const NumericPortValue* getPortValue(const MatrixInputPort& port)
+  {
+    if (port.empty())
+      return 0;
+    return port.getPortValue(mPortValueVector);
+  }
+  NumericPortValue* getPortValue(const MatrixOutputPort& port)
+  {
+    if (port.empty())
+      return 0;
+    return port.getPortValue(mPortValueVector);
+  }
+  MechanicLinkValue* getPortValue(const MechanicLink& port)
+  {
+    if (port.empty())
+      return 0;
+    return port.getPortValue(mPortValueVector);
+  }
 
   // FIXME, avoid this method here. With this method the output stage of a model
   // can change the port values, this should not be available in a model.

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2008-12-29 20:38:09 UTC (rev 897)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2008-12-30 08:23:29 UTC (rev 898)
@@ -33,7 +33,7 @@
       mInteract(interact),
       mPortValueList(portValueList)
     {
-      mMechanicLinkValue = portValueList.getPortValue(interact->mMechanicLink.getPortIndex())->toMechanicLinkValue();
+      mMechanicLinkValue = portValueList.getPortValue(interact->mMechanicLink);
       OpenFDMAssert(mMechanicLinkValue);
     }
     virtual ~Context() {}



From frohlich at mail.berlios.de  Tue Dec 30 11:19:46 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 30 Dec 2008 11:19:46 +0100
Subject: [OpenFDM-svn] r899 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812301019.mBUAJkpi018977@sheep.berlios.de>

Author: frohlich
Date: 2008-12-30 11:19:45 +0100 (Tue, 30 Dec 2008)
New Revision: 899

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
Log:
Applying forces to a link has a different sign.

M    src/OpenFDM/WheelContact.cpp
M    src/OpenFDM/CartesianJoint.h
M    src/OpenFDM/InternalSensor.cpp
M    src/OpenFDM/Mass.cpp
M    src/OpenFDM/ExternalForce.cpp
M    src/OpenFDM/MechanicLinkValue.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-30 08:23:29 UTC (rev 898)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2008-12-30 10:19:45 UTC (rev 899)
@@ -183,8 +183,8 @@
       // Transform to parent link's coordinates and apply to the parent link
       force = mRelativeCoordinateSystem.forceToReference(force);
       I = mRelativeCoordinateSystem.inertiaToReference(I);
-      mParentLink->applyForce(force);
-      mParentLink->applyInertia(I);
+      mParentLink->addForce(force);
+      mParentLink->addInertia(I);
     }
 
     /** Compute the acceleration step for a given joint force.
@@ -219,8 +219,8 @@
       // Transform to parent link's coordinates and apply to the parent link
       force = mRelativeCoordinateSystem.forceToReference(force);
       I = mRelativeCoordinateSystem.inertiaToReference(I);
-      mParentLink->applyForce(force);
-      mParentLink->applyInertia(I);
+      mParentLink->addForce(force);
+      mParentLink->addInertia(I);
     }
     
     /** Compute the acceleration step for a given velocity derivative.

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp	2008-12-30 08:23:29 UTC (rev 898)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp	2008-12-30 10:19:45 UTC (rev 899)
@@ -34,15 +34,13 @@
   // FIXME, for now relative position
   Vector3 position = mPosition - portValues[mMechanicLink].getDesignPosition();
   if (mLocalCoordinates) {
-    Vector6 force = -portValues[mForcePort];
-    force = forceFrom(position, force);
-    portValues[mMechanicLink].applyForce(force);
+    Vector6 force = portValues[mForcePort];
+    portValues[mMechanicLink].applyForce(position, force);
   } else {
     const Frame& frame = portValues[mMechanicLink].getFrame();
-    Vector6 force = -portValues[mForcePort];
+    Vector6 force = portValues[mForcePort];
     force = forceTo(Vector3::zeros(), frame.getRefOrientation(), force);
-    force = forceFrom(position, force);
-    portValues[mMechanicLink].applyForce(force);
+    portValues[mMechanicLink].applyForce(position, force);
   }
 }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2008-12-30 08:23:29 UTC (rev 898)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2008-12-30 10:19:45 UTC (rev 899)
@@ -98,15 +98,15 @@
 
     // If we have reached the zero position, the force vector is undefined.
     if (Limits<real_type>::min() < nrmRelPos) {
-      Vector3 dir = (1/nrmRelPos)*relPos;
+      Vector3 dir = (-1/nrmRelPos)*relPos;
       // Since we assume positive input forces to push the two attached
       // RigidBodies, we need that minus sign to negate the current position
       // offset
       Vector3 force0 = portValues[mForcePort]*dir;
-      portValues[mMechanicLink0].applyForce(forceFrom(position0, force0));
+      portValues[mMechanicLink0].applyForce(position0, force0);
       
       Vector3 force1 = -relSys.rotToLocal(force0);
-      portValues[mMechanicLink1].applyForce(forceFrom(position1, force1));
+      portValues[mMechanicLink1].applyForce(position1, force1);
     }
   }
 }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-12-30 08:23:29 UTC (rev 898)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-12-30 10:19:45 UTC (rev 899)
@@ -61,8 +61,8 @@
                         cross(v.getLinear(), Iv.getLinear()),
                         cross(v.getAngular(), Iv.getLinear()));
 
-  portValues[mMechanicLink].applyInertia(I);
-  portValues[mMechanicLink].applyForce(Vector6(vIv - force));
+  portValues[mMechanicLink].addInertia(I);
+  portValues[mMechanicLink].addForce(Vector6(vIv - force));
 }
 
 const InertiaMatrix&

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-12-30 08:23:29 UTC (rev 898)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-12-30 10:19:45 UTC (rev 899)
@@ -46,13 +46,19 @@
   { mArticulatedForce = force; }
 
   void applyForce(const Vector6& force)
-  { mArticulatedForce += force; }
+  { mArticulatedForce -= force; }
+  void applyForce(const Vector3& position, const Vector6& force)
+  { applyForce(forceFrom(position, force)); }
   void applyForce(const Vector3& force)
   { applyForce(Vector6(Vector3::zeros(), force)); }
+  void applyForce(const Vector3& position, const Vector3& force)
+  { applyForce(forceFrom(position, force)); }
   void applyTorque(const Vector3& torque)
   { applyForce(Vector6(torque, Vector3::zeros())); }
 
-  void applyInertia(const SpatialInertia& inertia)
+  void addForce(const Vector6& force)
+  { mArticulatedForce += force; }
+  void addInertia(const SpatialInertia& inertia)
   { mArticulatedInertia += inertia; }
 
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-30 08:23:29 UTC (rev 898)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2008-12-30 10:19:45 UTC (rev 899)
@@ -111,11 +111,11 @@
   
   // The resulting force is the sum of both.
   // The minus sign is because of the direction of the surface normal.
-  Vector3 force = - fricForce(0)*forward - fricForce(1)*side
-    - normForce*lp.getNormal();
+  Vector3 force = fricForce(0)*forward + fricForce(1)*side
+    + normForce*lp.getNormal();
   
   // We don't have an angular moment.
-  portValues[mMechanicLink].applyForce(forceFrom(contactPoint, force));
+  portValues[mMechanicLink].applyForce(contactPoint, force);
 }
 
 real_type



From frohlich at mail.berlios.de  Tue Dec 30 12:13:53 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 30 Dec 2008 12:13:53 +0100
Subject: [OpenFDM-svn] r900 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812301113.mBUBDrgD024035@sheep.berlios.de>

Author: frohlich
Date: 2008-12-30 12:13:53 +0100 (Tue, 30 Dec 2008)
New Revision: 900

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
Log:
Implement the InternalSensor in the context class.

M    src/OpenFDM/InternalSensor.cpp
M    src/OpenFDM/MechanicLinkValue.h
M    src/OpenFDM/SingleLinkInteract.h
M    src/OpenFDM/InternalSensor.h
M    src/OpenFDM/DoubleLinkInteract.cpp
M    src/OpenFDM/DoubleLinkInteract.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.cpp	2008-12-30 10:19:45 UTC (rev 899)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.cpp	2008-12-30 11:13:53 UTC (rev 900)
@@ -11,8 +11,8 @@
 
 DoubleLinkInteract::DoubleLinkInteract(const std::string& name) :
   Interact(name),
-  mMechanicLink0(this, "link0"),
-  mMechanicLink1(this, "link1")
+  mMechanicLinkInfo0(new MechanicLinkInfo(this, "link0")),
+  mMechanicLinkInfo1(new MechanicLinkInfo(this, "link1"))
 {
 }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h	2008-12-30 10:19:45 UTC (rev 899)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h	2008-12-30 11:13:53 UTC (rev 900)
@@ -23,48 +23,17 @@
     Context(const DoubleLinkInteract* interact, const Environment* environment,
             PortValueList& portValueList) :
       MechanicContext(environment),
-      mInteract(interact),
       mPortValueList(portValueList)
     {
-      mMechanicLinkValue0 = portValueList.getPortValue(interact->mMechanicLink0);
+      mMechanicLinkValue0 = portValueList.getPortValue(*interact->mMechanicLinkInfo0);
       OpenFDMAssert(mMechanicLinkValue0);
-      mMechanicLinkValue1 = portValueList.getPortValue(interact->mMechanicLink1);
+      mMechanicLinkValue1 = portValueList.getPortValue(*interact->mMechanicLinkInfo1);
       OpenFDMAssert(mMechanicLinkValue1);
     }
     virtual ~Context() {}
-    
-    virtual const DoubleLinkInteract& getNode() const
-    { return *mInteract; }
-    
-    virtual void initDesignPosition()
-    {
-      mInteract->initDesignPosition(mPortValueList);
-    }
-    
-    virtual void init(const /*Init*/Task& task)
-    {
-      mInteract->init(task, mDiscreteState, mContinousState, mPortValueList);
-    }
-    
-    virtual void velocities(const Task& task)
-    {
-      mInteract->velocity(task, getEnvironment(), mContinousState, mPortValueList);
-    }
-    virtual void articulation(const Task& task)
-    {
-      mInteract->articulation(task, getEnvironment(), mContinousState, mPortValueList);
-    }
-    virtual void accelerations(const Task& task)
-    {
-      mInteract->acceleration(task, getEnvironment(), mContinousState, mPortValueList);
-    }
-    
-    virtual void derivative(const Task& task)
-    {
-      mInteract->derivative(task, getEnvironment(), mDiscreteState, mContinousState, mPortValueList,
-                            mContinousStateDerivative);
-    }
-    
+
+    virtual const DoubleLinkInteract& getNode() const = 0;
+
     bool alloc()
     {
       unsigned numContinousStates = getNode().getNumContinousStateValues();
@@ -92,9 +61,9 @@
     virtual const PortValue* getPortValue(const PortInfo& portInfo) const
     {  return mPortValueList.getPortValue(portInfo); }
     
-    MechanicLinkValue& getMechanicLinkValue0() const
+    MechanicLinkValue& getLink0() const
     { return *mMechanicLinkValue0; }
-    MechanicLinkValue& getMechanicLinkValue1() const
+    MechanicLinkValue& getLink1() const
     { return *mMechanicLinkValue1; }
 
   protected:
@@ -108,48 +77,13 @@
     DiscreteStateValueVector mDiscreteState;
     
   private:
-    SharedPtr<const DoubleLinkInteract> mInteract;
     SharedPtr<MechanicLinkValue> mMechanicLinkValue0;
     SharedPtr<MechanicLinkValue> mMechanicLinkValue1;
   };
   
-  virtual MechanicContext* newMechanicContext(const Environment* environment,
-                                              PortValueList& portValueList) const
-  {
-    SharedPtr<Context> context = new Context(this, environment, portValueList);
-    if (!context->alloc()) {
-      Log(Model, Warning) << "Could not alloc for model \""
-                          << getName() << "\"" << endl;
-      return 0;
-    }
-    return context.release();
-  }
-  
-  virtual void init(const Task&, DiscreteStateValueVector&,
-                    ContinousStateValueVector&, const PortValueList&) const
-  { }
-  virtual void initDesignPosition(PortValueList&) const = 0;
-  virtual void velocity(const Task&, const Environment& environment,
-                        const ContinousStateValueVector&, PortValueList&) const
-  { }
-  virtual void articulation(const Task&, const Environment& environment,
-                            const ContinousStateValueVector&,
-                            PortValueList&) const
-  { }
-  virtual void acceleration(const Task&, const Environment& environment,
-                            const ContinousStateValueVector&,
-                            PortValueList&) const
-  { }
-  virtual void derivative(const Task&, const Environment& environment,
-                          const DiscreteStateValueVector&,
-                          const ContinousStateValueVector&,
-                          const PortValueList&,
-                          ContinousStateValueVector&) const
-  { }
-
 protected:
-  MechanicLink mMechanicLink0;
-  MechanicLink mMechanicLink1;
+  SharedPtr<MechanicLinkInfo> mMechanicLinkInfo0;
+  SharedPtr<MechanicLinkInfo> mMechanicLinkInfo1;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2008-12-30 10:19:45 UTC (rev 899)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2008-12-30 11:13:53 UTC (rev 900)
@@ -16,99 +16,104 @@
   DEF_OPENFDM_PROPERTY(Vector3, Position1, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnableDistance, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnableVelocity, Serialized)
+  DEF_OPENFDM_PROPERTY(Bool, EnableForce, Serialized)
   END_OPENFDM_OBJECT_DEF
 
-InternalSensor::InternalSensor(const std::string& name) :
-  DoubleLinkInteract(name),
-  mPosition0(0, 0, 0),
-  mPosition1(0, 0, 0)
-{
-}
+class InternalSensor::Context : public DoubleLinkInteract::Context {
+public:
+  Context(const InternalSensor* internalSensor,
+          const Environment* environment, PortValueList& portValueList) :
+    DoubleLinkInteract::Context(internalSensor, environment, portValueList),
+    mInternalSensor(internalSensor),
+    mLinkRelPos0(Vector3::zeros()),
+    mLinkRelPos1(Vector3::zeros())
+  {
+    mDistanceValue = portValueList.getPortValue(internalSensor->mDistancePort);
+    mVelocityValue = portValueList.getPortValue(internalSensor->mVelocityPort);
+    mForceValue = portValueList.getPortValue(internalSensor->mForcePort);
+  }
+  virtual ~Context() {}
+    
+  virtual const InternalSensor& getNode() const
+  { return *mInternalSensor; }
 
-InternalSensor::~InternalSensor(void)
-{
-}
-
-void
-InternalSensor::velocity(const Task& task, const Environment&,
-                         const ContinousStateValueVector&,
-                         PortValueList& portValues) const
-{
-  const Frame& frame0 = portValues[mMechanicLink0].getFrame();
-  const Frame& frame1 = portValues[mMechanicLink1].getFrame();
-
-  // FIXME, for now relative position
-  Vector3 position0 = mPosition0-portValues[mMechanicLink0].getDesignPosition();
-  Vector3 position1 = mPosition1-portValues[mMechanicLink1].getDesignPosition();
-
-  CoordinateSystem csys0(portValues[mMechanicLink0].getCoordinateSystem());
-  csys0 = csys0.getRelative(position0);
+  virtual void initDesignPosition()
+  {
+    mLinkRelPos0 = mInternalSensor->getPosition0();
+    mLinkRelPos0 -= getLink0().getDesignPosition();
+    mLinkRelPos1 = mInternalSensor->getPosition1();
+    mLinkRelPos1 -= getLink1().getDesignPosition();
+  }
+  virtual void velocities(const Task&)
+  {
+    mRelCoordSys = getLink0().getRelativeCoordinateSystem(getLink1());
   
-  CoordinateSystem csys1(portValues[mMechanicLink1].getCoordinateSystem());
-  csys1 = csys1.getRelative(position1);
-  
-  CoordinateSystem relSys = csys0.toLocal(csys1);
-
-  bool enableDistance = getEnableDistance();
-  bool enableVelocity = getEnableVelocity();
-  if (enableDistance || enableVelocity) {
-    Vector3 relPos = relSys.getPosition();
+    Vector3 relPos = mRelCoordSys.toReference(mLinkRelPos1) - mLinkRelPos0;
     real_type nrmRelPos = norm(relPos);
+    if (nrmRelPos <= Limits<real_type>::min())
+      mDirection = Vector3::zeros();
+    else
+      mDirection = (1/nrmRelPos)*relPos;
 
     // The relative distance of these two points
-    if (enableDistance)
-      portValues[mDistancePort] = nrmRelPos;
+    if (mDistanceValue)
+      mDistanceValue->getValue()(0, 0) = nrmRelPos;
 
-    if (enableVelocity) {
-      /// FIXME: avoid that transform to the reference frame. The relative
-      /// position must be sufficient ...
-      Vector6 refVel1 = frame1.motionToRef(motionTo(position1, frame1.getRefVel()));
-      Vector6 refVel0 = motionTo(position0, frame0.motionFromRef(refVel1) - frame0.getRefVel());
-
-      Vector3 relVel = refVel0.getLinear();
-      if (nrmRelPos <= Limits<real_type>::min())
-        portValues[mVelocityPort] = 0;
-      else
-        portValues[mVelocityPort] = dot(relPos, relVel)/nrmRelPos;
+    if (mVelocityValue) {
+      // The motion of link1 measured in link0
+      Vector6 relVel = mRelCoordSys.motionToReference(getLink1().getSpVel());
+      // The relative motion of link1 wrt link0 measured in link0
+      relVel -= getLink0().getSpVel();
+      // Transform to the internal reference point
+      relVel = motionTo(mLinkRelPos0, relVel);
+      // The scalar product is what we need.
+      // Here the additional cross product term cancels out
+      mVelocityValue->getValue()(0, 0) = dot(mDirection, relVel.getLinear());
     }
   }
-}
+  virtual void articulation(const Task&)
+  {
+    if (!mForceValue)
+      return;
 
-void
-InternalSensor::articulation(const Task& task, const Environment&,
-                             const ContinousStateValueVector&,
-                             PortValueList& portValues) const
-{
-  if (getEnableForce()) {
-    // FIXME, for now relative position
-    Vector3 position0=mPosition0-portValues[mMechanicLink0].getDesignPosition();
-    Vector3 position1=mPosition1-portValues[mMechanicLink1].getDesignPosition();
+    // Since we assume positive input forces to push the two attached
+    // RigidBodies, we need that minus sign to negate the current position
+    // offset
+    real_type force = mForceValue->getValue()(0, 0);
+    Vector3 force0 = (-force)*mDirection;
+    getLink0().applyForce(mLinkRelPos0, force0);
+    
+    Vector3 force1 = force*mRelCoordSys.rotToLocal(mDirection);
+    getLink1().applyForce(mLinkRelPos1, force1);
+  }
 
-    CoordinateSystem csys0(portValues[mMechanicLink0].getCoordinateSystem());
-    csys0 = csys0.getRelative(position0);
+private:
+  SharedPtr<const InternalSensor> mInternalSensor;
+  SharedPtr<NumericPortValue> mDistanceValue;
+  SharedPtr<NumericPortValue> mVelocityValue;
+  SharedPtr<const NumericPortValue> mForceValue;
+  Vector3 mLinkRelPos0;
+  Vector3 mLinkRelPos1;
+  CoordinateSystem mRelCoordSys;
+  Vector3 mDirection;
+};
 
-    CoordinateSystem csys1(portValues[mMechanicLink1].getCoordinateSystem());
-    csys1 = csys1.getRelative(position1);
+InternalSensor::InternalSensor(const std::string& name) :
+  DoubleLinkInteract(name),
+  mPosition0(0, 0, 0),
+  mPosition1(0, 0, 0)
+{
+}
 
-    CoordinateSystem relSys = csys0.toLocal(csys1);
-    
-    // FIXME, already have that computed in the velocity step
-    Vector3 relPos = relSys.getPosition();
-    real_type nrmRelPos = norm(relPos);
+InternalSensor::~InternalSensor(void)
+{
+}
 
-    // If we have reached the zero position, the force vector is undefined.
-    if (Limits<real_type>::min() < nrmRelPos) {
-      Vector3 dir = (-1/nrmRelPos)*relPos;
-      // Since we assume positive input forces to push the two attached
-      // RigidBodies, we need that minus sign to negate the current position
-      // offset
-      Vector3 force0 = portValues[mForcePort]*dir;
-      portValues[mMechanicLink0].applyForce(position0, force0);
-      
-      Vector3 force1 = -relSys.rotToLocal(force0);
-      portValues[mMechanicLink1].applyForce(position1, force1);
-    }
-  }
+MechanicContext*
+InternalSensor::newMechanicContext(const Environment* environment,
+                                   PortValueList& portValueList) const
+{
+  return new Context(this, environment, portValueList);
 }
 
 void

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h	2008-12-30 10:19:45 UTC (rev 899)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.h	2008-12-30 11:13:53 UTC (rev 900)
@@ -15,17 +15,14 @@
 
 class InternalSensor : public DoubleLinkInteract {
   OPENFDM_OBJECT(InternalSensor, DoubleLinkInteract);
+  class Context;
 public:
   InternalSensor(const std::string& name);
   virtual ~InternalSensor(void);
 
-  virtual void initDesignPosition(PortValueList&) const {}
-  virtual void velocity(const Task&, const Environment& environment,
-                        const ContinousStateValueVector&,
-                        PortValueList&) const;
-  virtual void articulation(const Task&, const Environment& environment,
-                            const ContinousStateValueVector&,
-                            PortValueList&) const;
+  virtual MechanicContext*
+  newMechanicContext(const Environment* environment,
+                     PortValueList& portValueList) const;
 
   /// Set the position of the sensor in design coordinates
   void setPosition0(const Vector3& position);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-12-30 10:19:45 UTC (rev 899)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-12-30 11:13:53 UTC (rev 900)
@@ -35,6 +35,7 @@
   void setCoordinateSystem(const CoordinateSystem& coordinateSystem)
   { mCoordinateSystem = coordinateSystem; }
 
+
   const SpatialInertia& getInertia() const
   { return mArticulatedInertia; }
   void setInertia(const SpatialInertia& inertia)
@@ -45,6 +46,7 @@
   void setForce(const Vector6& force)
   { mArticulatedForce = force; }
 
+
   void applyForce(const Vector6& force)
   { mArticulatedForce -= force; }
   void applyForce(const Vector3& position, const Vector6& force)
@@ -61,7 +63,30 @@
   void addInertia(const SpatialInertia& inertia)
   { mArticulatedInertia += inertia; }
 
+  /// Returns the coordinate system of link wrt this links coordinate system
+  CoordinateSystem
+  getRelativeCoordinateSystem(const MechanicLinkValue& link) const
+  { return mCoordinateSystem.toLocal(link.mCoordinateSystem); }
 
+  /// Returns the velocity of the link measured in this links coordinate
+  /// system and measured in this links reference frame
+  Vector6 getRelativeVelocity(const MechanicLinkValue& link) const
+  {
+    CoordinateSystem csys = getRelativeCoordinateSystem(link);
+    return csys.motionToReference(link.getSpVel()) - getSpVel();
+  }
+
+
+//   const Vector6& getSpVel() const
+  Vector6 getSpVel() const
+  { return mFrame.getSpVel(); }
+//   const Vector6& getSpAccel() const
+  Vector6 getSpAccel() const
+  { return mFrame.getSpAccel(); }
+
+
+
+
   void setPosAndVel(const MechanicLinkValue& linkValue, const Vector3& position,
                     const Quaternion& orientation, const Vector6& velocity)
   {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2008-12-30 10:19:45 UTC (rev 899)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2008-12-30 11:13:53 UTC (rev 900)
@@ -97,7 +97,7 @@
     virtual const PortValue* getPortValue(const PortInfo& portInfo) const
     {  return mPortValueList.getPortValue(portInfo); }
     
-    MechanicLinkValue& getMechanicLinkValue() const
+    MechanicLinkValue& getLink() const
     { return *mMechanicLinkValue; }
 
   protected:



From frohlich at mail.berlios.de  Tue Dec 30 15:17:47 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 30 Dec 2008 15:17:47 +0100
Subject: [OpenFDM-svn] r901 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812301417.mBUEHlS3023539@sheep.berlios.de>

Author: frohlich
Date: 2008-12-30 15:17:46 +0100 (Tue, 30 Dec 2008)
New Revision: 901

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.cpp
Log:
Use Vector3 for 3 component vectors.

M    WGS84Planet.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.cpp	2008-12-30 11:13:53 UTC (rev 900)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WGS84Planet.cpp	2008-12-30 14:17:46 UTC (rev 901)
@@ -102,7 +102,7 @@
 {
   Geodetic geodetic = toGeod(position);
   geodetic.altitude = 0;
-  Vector down = getGeodHLOrientation(geodetic).backTransform(Vector3::unit(2));
+  Vector3 down = getGeodHLOrientation(geodetic).backTransform(Vector3::unit(2));
   return Plane(down, toCart(geodetic));
 }
 
@@ -135,7 +135,7 @@
   real_type gammaH = gamma*(1 - 2/a*(1 + f + m - 2*f*sLat2)*h + (3/a2)*h*h);
 
   /// FIXME This is not the whole story, The direction also varies ...
-  Vector down = getGeodHLOrientation(geodetic).backTransform(Vector3::unit(2));
+  Vector3 down = getGeodHLOrientation(geodetic).backTransform(Vector3::unit(2));
 
   /// FIXME
   /// Hmm, this includes the centrifugal force also,



From frohlich at mail.berlios.de  Tue Dec 30 15:18:19 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 30 Dec 2008 15:18:19 +0100
Subject: [OpenFDM-svn] r902 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812301418.mBUEIJMI023603@sheep.berlios.de>

Author: frohlich
Date: 2008-12-30 15:18:18 +0100 (Tue, 30 Dec 2008)
New Revision: 902

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
Log:
No need to make initDesignPosition pure virtual.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2008-12-30 14:17:46 UTC (rev 901)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2008-12-30 14:18:18 UTC (rev 902)
@@ -131,7 +131,8 @@
   virtual void init(const Task&, DiscreteStateValueVector&,
                     ContinousStateValueVector&, const PortValueList&) const
   { }
-  virtual void initDesignPosition(PortValueList&) const = 0;
+  virtual void initDesignPosition(PortValueList&) const
+  { }
   virtual void velocity(const Task&, const Environment& environment,
                         const ContinousStateValueVector&, PortValueList&) const
   { }



From frohlich at mail.berlios.de  Tue Dec 30 15:19:12 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 30 Dec 2008 15:19:12 +0100
Subject: [OpenFDM-svn] r903 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812301419.mBUEJC8x023702@sheep.berlios.de>

Author: frohlich
Date: 2008-12-30 15:19:12 +0100 (Tue, 30 Dec 2008)
New Revision: 903

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Assert.h
Log:
Do not introduce sideeffects in NDEBUG void casts.

M    Assert.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Assert.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Assert.h	2008-12-30 14:18:18 UTC (rev 902)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Assert.h	2008-12-30 14:19:12 UTC (rev 903)
@@ -24,7 +24,7 @@
   }                                                 \
 } while (0)
 #else
-# define OpenFDMAssert(a) do { (void)(a); } while (0)
+# define OpenFDMAssert(a) ((void)(0))
 #endif
 
 #ifdef OpenFDMLinAlgDebug
@@ -35,7 +35,7 @@
   }                                                 \
 } while (0)
 #else
-# define OpenFDMLinAlgAssert(a) do { (void)(a); } while (0)
+# define OpenFDMLinAlgAssert(a) ((void)(0))
 #endif
 
 #define OpenFDMError(a) ::OpenFDM::Assertion(__FILE__, __LINE__, a );



From frohlich at mail.berlios.de  Tue Dec 30 18:50:28 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 30 Dec 2008 18:50:28 +0100
Subject: [OpenFDM-svn] r904 - branches/OpenFDM-StateSeparation
Message-ID: <200812301750.mBUHoSUU000571@sheep.berlios.de>

Author: frohlich
Date: 2008-12-30 18:50:27 +0100 (Tue, 30 Dec 2008)
New Revision: 904

Modified:
   branches/OpenFDM-StateSeparation/TODO
Log:
More todo ...

M    TODO


Modified: branches/OpenFDM-StateSeparation/TODO
===================================================================
--- branches/OpenFDM-StateSeparation/TODO	2008-12-30 14:19:12 UTC (rev 903)
+++ branches/OpenFDM-StateSeparation/TODO	2008-12-30 17:50:27 UTC (rev 904)
@@ -63,3 +63,5 @@
   port typ und size??? Dann kann AbstractModel die typen und sizes checken
   bevor PortValues alloziert werden und Typ angepasste Kontexte gebaut werden???
 
+* LinAlg has too many pitfalls.
+* Use more in place algorithms in lu*
\ No newline at end of file



From frohlich at mail.berlios.de  Tue Dec 30 18:56:45 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 30 Dec 2008 18:56:45 +0100
Subject: [OpenFDM-svn] r905 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812301756.mBUHujiC006621@sheep.berlios.de>

Author: frohlich
Date: 2008-12-30 18:56:44 +0100 (Tue, 30 Dec 2008)
New Revision: 905

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h
Log:
Move Mass implementation into a Context.

M    src/OpenFDM/Mass.h
M    src/OpenFDM/Mass.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-12-30 17:50:27 UTC (rev 904)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-12-30 17:56:44 UTC (rev 905)
@@ -15,6 +15,54 @@
   DEF_OPENFDM_PROPERTY(Real, Mass, Serialized)
   END_OPENFDM_OBJECT_DEF
 
+class Mass::Context : public SingleLinkInteract::Context {
+public:
+  Context(const Mass* mass,
+          const Environment* environment, PortValueList& portValueList) :
+    SingleLinkInteract::Context(mass, environment, portValueList),
+    mMass(mass),
+    mLinkRelPos(Vector3::zeros()),
+    mSpatialInertia(SpatialInertia::zeros())
+  { }
+  virtual ~Context() {}
+    
+  virtual const Mass& getNode() const
+  { return *mMass; }
+
+  virtual void initDesignPosition()
+  {
+    mLinkRelPos = mMass->getPosition() - getLink().getDesignPosition();
+    mSpatialInertia = SpatialInertia(mMass->getInertia(), mMass->getMass());
+    mSpatialInertia = inertiaFrom(mLinkRelPos, mSpatialInertia);
+  }
+  virtual void articulation(const Task&)
+  {
+    // Contribute the inerita
+    getLink().addInertia(mSpatialInertia);
+
+    // Each inertia has a contribution to the spatial force.
+    // This part is handled here.
+    Vector6 v = getLink().getSpVel();
+    Vector6 Iv = mSpatialInertia*v;
+    Vector6 vIv = Vector6(cross(v.getAngular(), Iv.getAngular()) +
+                          cross(v.getLinear(), Iv.getLinear()),
+                          cross(v.getAngular(), Iv.getLinear()));
+    getLink().addForce(vIv);
+
+    // Now the gravity part
+    Vector3 refPos = getLink().getCoordinateSystem().toReference(mLinkRelPos);
+    Vector3 gravity = getEnvironment().getGravityAcceleration(refPos);
+    gravity = getLink().getCoordinateSystem().rotToLocal(gravity);
+    gravity *= mMass->getMass();
+    getLink().applyForce(mLinkRelPos, gravity);
+  }
+
+private:
+  SharedPtr<const Mass> mMass;
+  Vector3 mLinkRelPos;
+  SpatialInertia mSpatialInertia;
+};
+
 Mass::Mass(const std::string& name, const real_type& mass,
            const InertiaMatrix& inertia, const Vector3& position) :
   SingleLinkInteract(name),
@@ -28,43 +76,13 @@
 {
 }
 
-void
-Mass::initDesignPosition(PortValueList&) const
+MechanicContext*
+Mass::newMechanicContext(const Environment* environment,
+                         PortValueList& portValueList) const
 {
+  return new Context(this, environment, portValueList);
 }
 
-void
-Mass::articulation(const Task&, const Environment& environment,
-                   const ContinousStateValueVector&,
-                   PortValueList& portValues) const
-{
-  // The position of the mass point wrt its parent link frame
-  // FIXME precompute that
-  Vector3 position = mPosition - portValues[mMechanicLink].getDesignPosition();
-
-  // The gravity force that applies to this mass
-  Vector3 refPosition = portValues[mMechanicLink].getFrame().posToRef(position);
-  Vector3 gravity = environment.getGravityAcceleration(refPosition);
-  gravity = mMass*portValues[mMechanicLink].getFrame().rotFromRef(gravity);
-  // The gravity force at the coordinate system of the parent link
-  Vector6 force = forceFrom(position, gravity);
-
-  // The inertia at the coordinate system of the parent link
-  // FIXME precompute that
-  SpatialInertia I = inertiaFrom(position, SpatialInertia(mInertia, mMass));
-
-  // FIXME: do we really need that in the mass
-  // I did search for a while until I found that missing term here ...
-  Vector6 v = portValues[mMechanicLink].getFrame().getSpVel();
-  Vector6 Iv = I*v;
-  Vector6 vIv = Vector6(cross(v.getAngular(), Iv.getAngular()) +
-                        cross(v.getLinear(), Iv.getLinear()),
-                        cross(v.getAngular(), Iv.getLinear()));
-
-  portValues[mMechanicLink].addInertia(I);
-  portValues[mMechanicLink].addForce(Vector6(vIv - force));
-}
-
 const InertiaMatrix&
 Mass::getInertia(void) const
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h	2008-12-30 17:50:27 UTC (rev 904)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h	2008-12-30 17:56:44 UTC (rev 905)
@@ -12,16 +12,15 @@
 
 class Mass : public SingleLinkInteract {
   OPENFDM_OBJECT(Mass, SingleLinkInteract);
+  class Context;
 public:
   Mass(const std::string& name, const real_type& mass = 0,
        const InertiaMatrix& inertia = InertiaMatrix(0, 0, 0, 0, 0, 0),
        const Vector3& position = Vector3::zeros());
   virtual ~Mass(void);
 
-  virtual void initDesignPosition(PortValueList&) const;
-  virtual void articulation(const Task&, const Environment& environment,
-                            const ContinousStateValueVector&,
-                            PortValueList&) const;
+  virtual MechanicContext*
+  newMechanicContext(const Environment*, PortValueList&) const;
 
   const InertiaMatrix& getInertia(void) const;
   void setInertia(const InertiaMatrix& inertia);



From frohlich at mail.berlios.de  Wed Dec 31 11:46:40 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 31 Dec 2008 11:46:40 +0100
Subject: [OpenFDM-svn] r906 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200812311046.mBVAkeFa000326@sheep.berlios.de>

Author: frohlich
Date: 2008-12-31 11:46:39 +0100 (Wed, 31 Dec 2008)
New Revision: 906

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
Log:
Fix comment.

M    Mass.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-12-30 17:56:44 UTC (rev 905)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-12-31 10:46:39 UTC (rev 906)
@@ -40,7 +40,7 @@
     // Contribute the inerita
     getLink().addInertia(mSpatialInertia);
 
-    // Each inertia has a contribution to the spatial force.
+    // Each inertia has a contribution to the spatial bias force.
     // This part is handled here.
     Vector6 v = getLink().getSpVel();
     Vector6 Iv = mSpatialInertia*v;



