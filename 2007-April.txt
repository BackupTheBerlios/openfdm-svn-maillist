From frohlich at mail.berlios.de  Fri Apr  6 08:10:12 2007
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 6 Apr 2007 08:10:12 +0200
Subject: [OpenFDM-svn] r312 - trunk/OpenFDM/src/OpenFDM
Message-ID: <200704060610.l366ACwf012636@sheep.berlios.de>

Author: frohlich
Date: 2007-04-06 08:10:12 +0200 (Fri, 06 Apr 2007)
New Revision: 312

Modified:
   trunk/OpenFDM/src/OpenFDM/Atomic.h
Log:
Use also builtins on irix.


Modified: trunk/OpenFDM/src/OpenFDM/Atomic.h
===================================================================
--- trunk/OpenFDM/src/OpenFDM/Atomic.h	2007-02-08 06:18:08 UTC (rev 311)
+++ trunk/OpenFDM/src/OpenFDM/Atomic.h	2007-04-06 06:10:12 UTC (rev 312)
@@ -5,10 +5,12 @@
 #ifndef OpenFDM_Atomic_H
 #define OpenFDM_Atomic_H
 
-#if defined(__GNUC__) && (4 <= __GNUC__) && (1 <= __GNUC_MINOR__) \
-  && (defined(__i386__) || defined(__x86_64__))
+#if defined(__GNUC__) && (4 <= __GNUC__) && (1 <= __GNUC_MINOR__)
 // No need to include something. Is a Compiler API ...
 # define OpenFDM_USE_GCC4_BUILTINS
+#elif defined(__sgi) && defined(_COMPILER_VERSION) && (_COMPILER_VERSION>=730)
+// No need to include something. Is a Compiler API ...
+# define OpenFDM_USE_MIPSPRO_BUILTINS
 #elif defined(WIN32) || defined(_WIN32) || defined(__WIN32__)
 // Neat old Win32 functions
 # include <windows.h>
@@ -16,7 +18,7 @@
 #else
 // The sledge hammer ...
 # include "Mutex.h"
-# include "ScopedLock.h"
+# include "ScopeLock.h"
 #endif
 
 namespace OpenFDM {
@@ -29,10 +31,12 @@
   {
 #if defined(OpenFDM_USE_GCC4_BUILTINS)
     return __sync_add_and_fetch(&mValue, 1);
+#elif defined(OpenFDM_USE_MIPOSPRO_BUILTINS)
+    return __add_and_fetch(&mValue, 1);
 #elif defined(OpenFDM_USE_WIN32_INTERLOCKED)
     return InterlockedIncrement(reinterpret_cast<long volatile*>(&mValue));
 #else
-    ScopedLock lock(mMutex);
+    ScopeLock lock(mMutex);
     return ++mValue;
 #endif
   }
@@ -40,10 +44,12 @@
   {
 #if defined(OpenFDM_USE_GCC4_BUILTINS)
     return __sync_sub_and_fetch(&mValue, 1);
+#elif defined(OpenFDM_USE_MIPOSPRO_BUILTINS)
+    return __sub_and_fetch(&mValue, 1);
 #elif defined(OpenFDM_USE_WIN32_INTERLOCKED)
     return InterlockedDecrement(reinterpret_cast<long volatile*>(&mValue));
 #else
-    ScopedLock lock(mMutex);
+    ScopeLock lock(mMutex);
     return --mValue;
 #endif
   }
@@ -52,10 +58,13 @@
 #if defined(OpenFDM_USE_GCC4_BUILTINS)
     __sync_synchronize();
     return mValue;
+#elif defined(OpenFDM_USE_MIPOSPRO_BUILTINS)
+    __synchronize();
+    return mValue;
 #elif defined(OpenFDM_USE_WIN32_INTERLOCKED)
     return static_cast<unsigned const volatile &>(mValue);
 #else
-    ScopedLock lock(mMutex);
+    ScopeLock lock(mMutex);
     return mValue;
 #endif
  }
@@ -65,6 +74,7 @@
   Atomic& operator=(const Atomic&);
 
 #if !defined(OpenFDM_USE_GCC4_BUILTINS) \
+  && !defined(OpenFDM_USE_MIPOSPRO_BUILTINS) \
   && !defined(OpenFDM_USE_WIN32_INTERLOCKED)
   mutable Mutex mMutex;
 #endif



