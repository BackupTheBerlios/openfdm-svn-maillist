From frohlich at mail.berlios.de  Fri Nov 10 06:36:04 2006
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 10 Nov 2006 06:36:04 +0100
Subject: [OpenFDM-svn] r298 - trunk/OpenFDM/src/OpenFDM
Message-ID: <200611100536.kAA5a4he022395@sheep.berlios.de>

Author: frohlich
Date: 2006-11-10 06:36:02 +0100 (Fri, 10 Nov 2006)
New Revision: 298

Added:
   trunk/OpenFDM/src/OpenFDM/Atomic.h
Modified:
   trunk/OpenFDM/src/OpenFDM/Makefile.am
   trunk/OpenFDM/src/OpenFDM/Referenced.h
Log:
Make refcounting threadsafe


Added: trunk/OpenFDM/src/OpenFDM/Atomic.h
===================================================================
--- trunk/OpenFDM/src/OpenFDM/Atomic.h	2006-09-26 18:29:34 UTC (rev 297)
+++ trunk/OpenFDM/src/OpenFDM/Atomic.h	2006-11-10 05:36:02 UTC (rev 298)
@@ -0,0 +1,74 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2004-2006 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_Atomic_H
+#define OpenFDM_Atomic_H
+
+#if defined(__GNUC__) && (4 <= __GNUC__) && (1 <= __GNUC_MINOR__)
+// No need to include something. Is a Compiler API ...
+# define OpenFDM_USE_GCC4_BUILTINS
+#elif defined(WIN32) || defined(_WIN32) || defined(__WIN32__)
+// Neat old Win32 functions
+# include <windows.h>
+# define OpenFDM_USE_WIN32_INTERLOCKED
+#else
+// The sledge hammer ...
+# include "Mutex.h"
+# include "ScopedLock.h"
+#endif
+
+namespace OpenFDM {
+
+class Atomic {
+public:
+  Atomic(unsigned value = 0) : mValue(value)
+  { }
+  unsigned operator++()
+  {
+#if defined(OpenFDM_USE_GCC4_BUILTINS)
+    return __sync_add_and_fetch(&mValue, 1);
+#elif defined(OpenFDM_USE_WIN32_INTERLOCKED)
+    return InterlockedIncrement(reinterpret_cast<long volatile*>(&mValue));
+#else
+    ScopedLock lock(mMutex);
+    return ++mValue;
+#endif
+  }
+  unsigned operator--()
+  {
+#if defined(OpenFDM_USE_GCC4_BUILTINS)
+    return __sync_sub_and_fetch(&mValue, 1);
+#elif defined(OpenFDM_USE_WIN32_INTERLOCKED)
+    return InterlockedDecrement(reinterpret_cast<long volatile*>(&mValue));
+#else
+    ScopedLock lock(mMutex);
+    return --mValue;
+#endif
+  }
+  operator unsigned() const
+  {
+#if defined(OpenFDM_USE_GCC4_BUILTINS)
+    __sync_synchronize();
+    return mValue;
+#elif defined(OpenFDM_USE_WIN32_INTERLOCKED)
+    return static_cast<unsigned const volatile &>(mValue);
+#else
+    ScopedLock lock(mMutex);
+    return mValue;
+#endif
+ }
+
+private:
+  Atomic(const Atomic&);
+  Atomic& operator=(const Atomic&);
+
+#if !defined(OpenFDM_USE_GCC4_BUILTINS) && !defined(OpenFDM_USE_WIN32_INTERLOCKED)
+  mutable Mutex mMutex;
+#endif
+  unsigned mValue;
+};
+
+}  // namespace OpenFDM
+
+#endif

Modified: trunk/OpenFDM/src/OpenFDM/Makefile.am
===================================================================
--- trunk/OpenFDM/src/OpenFDM/Makefile.am	2006-09-26 18:29:34 UTC (rev 297)
+++ trunk/OpenFDM/src/OpenFDM/Makefile.am	2006-11-10 05:36:02 UTC (rev 298)
@@ -26,6 +26,7 @@
   Assert.h \
   Atmosphere.h \
   AtmosphereSTD1976.h \
+  Atomic.h \
   Bias.h \
   BinaryFunctionModel.h \
   CartesianActuatorFrame.h \

Modified: trunk/OpenFDM/src/OpenFDM/Referenced.h
===================================================================
--- trunk/OpenFDM/src/OpenFDM/Referenced.h	2006-09-26 18:29:34 UTC (rev 297)
+++ trunk/OpenFDM/src/OpenFDM/Referenced.h	2006-11-10 05:36:02 UTC (rev 298)
@@ -5,6 +5,8 @@
 #ifndef OpenFDM_Referenced_H
 #define OpenFDM_Referenced_H
 
+#include "Atomic.h"
+
 namespace OpenFDM {
 
 class Referenced {
@@ -28,7 +30,7 @@
   { if (ref) return 1u < ref->_refcount; else return false; }
 
 private:
-  mutable unsigned _refcount;
+  mutable Atomic _refcount;
 };
 
 } // namespace OpenFDM



