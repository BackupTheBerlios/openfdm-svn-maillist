From frohlich at mail.berlios.de  Thu Jan  1 20:14:34 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 1 Jan 2009 20:14:34 +0100
Subject: [OpenFDM-svn] r907 -
	branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg
Message-ID: <200901011914.n01JEY59019128@sheep.berlios.de>

Author: frohlich
Date: 2009-01-01 20:14:34 +0100 (Thu, 01 Jan 2009)
New Revision: 907

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Algorithm.h
Log:
Fix matrix solve problem.

M    Algorithm.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Algorithm.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Algorithm.h	2008-12-31 10:46:39 UTC (rev 906)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Algorithm.h	2009-01-01 19:14:34 UTC (rev 907)
@@ -665,7 +665,7 @@
   size_type cols = A.cols();
   size_type vcols = v.cols();
   for (size_type i = 0; i < rows-1; ++i) {
-    for (size_type j = 0; j < vcols-1; ++j) {
+    for (size_type j = 0; j < vcols; ++j) {
       if (v(i,j) != static_cast<value_type>(0))
         v(Range(i+1, cols-1),j) -= v(i,j)*A(Range(i+1, cols-1),i);
     }



From frohlich at mail.berlios.de  Thu Jan  1 20:15:30 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 1 Jan 2009 20:15:30 +0100
Subject: [OpenFDM-svn] r908 - trunk/OpenFDM/src/OpenFDM/LinAlg
Message-ID: <200901011915.n01JFUx3019232@sheep.berlios.de>

Author: frohlich
Date: 2009-01-01 20:15:30 +0100 (Thu, 01 Jan 2009)
New Revision: 908

Modified:
   trunk/OpenFDM/src/OpenFDM/LinAlg/Algorithm.h
Log:
Fix matrix solve problem.

M    Algorithm.h


Modified: trunk/OpenFDM/src/OpenFDM/LinAlg/Algorithm.h
===================================================================
--- trunk/OpenFDM/src/OpenFDM/LinAlg/Algorithm.h	2009-01-01 19:14:34 UTC (rev 907)
+++ trunk/OpenFDM/src/OpenFDM/LinAlg/Algorithm.h	2009-01-01 19:15:30 UTC (rev 908)
@@ -600,7 +600,7 @@
   size_type cols = A.cols();
   size_type vcols = v.cols();
   for (size_type i = 0; i < rows-1; ++i) {
-    for (size_type j = 0; j < vcols-1; ++j) {
+    for (size_type j = 0; j < vcols; ++j) {
       if (v(i,j) != static_cast<value_type>(0))
         v(Range(i+1, cols-1),j) -= v(i,j)*A(Range(i+1, cols-1),i);
     }



From frohlich at mail.berlios.de  Sat Jan  3 11:18:22 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 3 Jan 2009 11:18:22 +0100
Subject: [OpenFDM-svn] r909 -
	branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg
Message-ID: <200901031018.n03AIMR3025422@sheep.berlios.de>

Author: frohlich
Date: 2009-01-03 11:18:21 +0100 (Sat, 03 Jan 2009)
New Revision: 909

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Algorithm.h
Log:
More inplace algorithms. Saves plenty mallocs.

M    Algorithm.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Algorithm.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Algorithm.h	2009-01-01 19:15:30 UTC (rev 908)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Algorithm.h	2009-01-03 10:18:21 UTC (rev 909)
@@ -649,8 +649,14 @@
   size_type rows = A.rows();
   size_type cols = A.cols();
   for (size_type i = 0; i < rows-1; ++i) {
-    if (v(i) != static_cast<value_type>(0))
+    if (v(i) != static_cast<value_type>(0)) {
+#if 0
       v(Range(i+1, cols-1)) -= v(i)*A(Range(i+1, cols-1),i);
+#else
+      for (size_type k = i+1; k < cols; ++k)
+        v(k) -= v(i)*A(k,i);
+#endif
+    }
   }
 }
 
@@ -666,8 +672,14 @@
   size_type vcols = v.cols();
   for (size_type i = 0; i < rows-1; ++i) {
     for (size_type j = 0; j < vcols; ++j) {
-      if (v(i,j) != static_cast<value_type>(0))
+      if (v(i,j) != static_cast<value_type>(0)) {
+#if 0
         v(Range(i+1, cols-1),j) -= v(i,j)*A(Range(i+1, cols-1),i);
+#else
+        for (size_type k = i+1; k < cols; ++k)
+          v(k,j) -= v(i,j)*A(k,i);
+#endif
+      }
     }
   }
 }
@@ -690,8 +702,14 @@
         v(i) = static_cast<value_type>(0);
       } else {
         v(i) /= Aii;
-        if (0 < i)
+        if (0 < i) {
+#if 0
           v(Range(0,i-1)) -= v(i)*A(Range(0,i-1),i);
+#else
+          for (size_type k = 0; k < i; ++k)
+            v(k) -= v(i)*A(k,i);
+#endif
+        }
       }
     }
   }
@@ -717,8 +735,14 @@
           v(i,j) = static_cast<value_type>(0);
         } else {
           v(i,j) /= Aii;
-          if (0 < i)
+          if (0 < i) {
+#if 0
             v(Range(0,i-1),j) -= v(i,j)*A(Range(0,i-1),i);
+#else
+            for (size_type k = 0; k < i; ++k)
+              v(k,j) -= v(i,j)*A(k,i);
+#endif
+          }
         }
       }
     }
@@ -834,9 +858,17 @@
       if (j < n-1) {
         // Compute elements J+1:M of J-th column.
         A(Range(j+1, m-1), j) *= static_cast<value_type>(1)/A(j,j);
-        
+
+#if 0
         A(Range(j+1, m-1), Range(j+1, n-1))
           -= A(Range(j+1,m-1),j)*A(j, Range(j+1, n-1));
+#else
+        for (size_type k = j+1; k < m; ++k) {
+          for (size_type l = j+1; l < n; ++l) {
+            A(k, l) -= A(k, j)*A(j, l);
+          }
+        }
+#endif
       }
     }
   }
@@ -877,9 +909,17 @@
       if (j < n-1) {
         // Compute elements J+1:M of J-th column.
         A(Range(j+1, m-1), j) *= static_cast<value_type>(1)/A(j, j);
-        
+
+#if 0
         A(Range(j+1, m-1), Range(j+1, n-1))
           -= A(Range(j+1,m-1),j)*A(j, Range(j+1, n-1));
+#else
+        for (size_type k = j+1; k < m; ++k) {
+          for (size_type l = j+1; l < n; ++l) {
+            A(k, l) -= A(k, j)*A(j, l);
+          }
+        }
+#endif
       }
     }
   }



From frohlich at mail.berlios.de  Sat Jan  3 11:34:15 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 3 Jan 2009 11:34:15 +0100
Subject: [OpenFDM-svn] r910 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200901031034.n03AYF8g026539@sheep.berlios.de>

Author: frohlich
Date: 2009-01-03 11:34:15 +0100 (Sat, 03 Jan 2009)
New Revision: 910

Modified:
   branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
Log:
Use setRootPosition for the position of the tire testrigs root.

M    tiretestrig.cpp


Modified: branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2009-01-03 10:18:21 UTC (rev 909)
+++ branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2009-01-03 10:34:15 UTC (rev 910)
@@ -47,7 +47,7 @@
   // First build up the mechanical system
   FixedRootJoint* fixedRootJoint = new FixedRootJoint("Fixed Root Joint");
   group->addChild(fixedRootJoint);
-  fixedRootJoint->setPosition(Vector3(0, 0, -1));
+  fixedRootJoint->setRootPosition(Vector3(0, 0, -1));
 
   PrismaticJoint* prismaticJoint = new PrismaticJoint("Normal Force joint");
   prismaticJoint->setAxis(Vector3::unit(2));



From frohlich at mail.berlios.de  Sat Jan  3 12:02:36 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 3 Jan 2009 12:02:36 +0100
Subject: [OpenFDM-svn] r911 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901031102.n03B2ag2028719@sheep.berlios.de>

Author: frohlich
Date: 2009-01-03 12:02:35 +0100 (Sat, 03 Jan 2009)
New Revision: 911

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h
Log:
Make WheelContact use its own Context.

M    OpenFDM/WheelContact.cpp
M    OpenFDM/WheelContact.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2009-01-03 10:34:15 UTC (rev 910)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2009-01-03 11:02:35 UTC (rev 911)
@@ -20,6 +20,105 @@
   DEF_OPENFDM_PROPERTY(Real, FrictionCoeficient, Serialized)
   END_OPENFDM_OBJECT_DEF
 
+class WheelContact::Context : public SingleLinkInteract::Context {
+public:
+  Context(const WheelContact* wheelContact,
+          const Environment* environment, PortValueList& portValueList) :
+    SingleLinkInteract::Context(wheelContact, environment, portValueList),
+    mWheelContact(wheelContact),
+    mLinkRelPos(Vector3::zeros())
+  { }
+  virtual ~Context() {}
+    
+  virtual const WheelContact& getNode() const
+  { return *mWheelContact; }
+
+  virtual void initDesignPosition()
+  {
+    mLinkRelPos = mWheelContact->getPosition() - getLink().getDesignPosition();
+  }
+  virtual void articulation(const Task& task)
+  {
+    const CoordinateSystem& cs = getLink().getCoordinateSystem();
+
+    // The coordinate system at the hub.
+    CoordinateSystem hubCoordinateSystem(cs.getRelative(mLinkRelPos));
+    
+    // Get the ground values in the hub coordinate system.
+    GroundValues groundValues =
+      getEnvironment().getGroundPlane(hubCoordinateSystem, task.getTime());
+    
+    // Transform the plane equation to the local frame.
+    Plane lp = groundValues.plane;
+    
+    // Get the intersection length.
+    real_type distHubGround = fabs(lp.getDist());
+    Vector3 down = -copysign(1, lp.getDist())*lp.getNormal();
+    real_type compressLength = mWheelContact->getWheelRadius() - distHubGround;
+    
+    // Don't bother if we do not intersect the ground.
+    if (compressLength < 0)
+      return;
+    
+    Vector3 contactPoint = distHubGround*down;
+    
+    // The velocity of the ground patch in the current frame.
+    Vector6 groundVel = groundValues.vel;
+    // Now get the relative velocity of the ground wrt the hub
+    Vector6 relVel = getLink().getReferenceVelocity(mLinkRelPos) - groundVel;
+    
+    
+    // The velocity perpandicular to the plane.
+    // Positive when the contact spring is compressed,
+    // negative when decompressed.
+    real_type compressVel = - lp.scalarProjectToNormal(relVel.getLinear());
+    
+    // Get a transform from the current frames coordinates into
+    // wheel coordinates.
+    // The wheel coordinates x axis is defined by the forward orientation
+    // of the wheel, the z axis points perpandicular to the ground
+    // plane downwards.
+    Vector3 forward = normalize(cross(mWheelContact->getAxis(), down));
+    Vector3 side = normalize(cross(down, forward));
+    
+    // Transformed velocity to the ground plane
+    Vector2 wheelVel(dot(forward, relVel.getLinear()),
+                     dot(side, relVel.getLinear()));
+    
+    // The wheel rotation speed wrt ground
+    Vector3 rotVel = relVel.getAngular();
+    real_type omegaR = dot(rotVel, mWheelContact->getAxis()) * distHubGround;
+    
+    //   Log(Model,Error) << trans(groundVel) << " "
+    //                    << trans(wheelVel) << " "
+    //                    << omegaR << " "
+    //                    << compressLength << " "
+    //                    << distHubGround << endl;
+    
+    
+    // Get the plane normal force.
+    real_type normForce = mWheelContact->computeNormalForce(compressLength,
+                                                            compressVel);
+    // The normal force cannot get negative here.
+    normForce = max(static_cast<real_type>(0), normForce);
+    
+    // Get the friction force.
+    Vector2 fricForce = mWheelContact->computeFrictionForce(normForce, wheelVel,
+                                             omegaR, groundValues.friction);
+    
+    // The resulting force is the sum of both.
+    // The minus sign is because of the direction of the surface normal.
+    Vector3 force = fricForce(0)*forward + fricForce(1)*side - normForce*down;
+    
+    // We don't have an angular moment.
+    getLink().applyForce(contactPoint, force);
+  }
+
+private:
+  SharedPtr<const WheelContact> mWheelContact;
+  Vector3 mLinkRelPos;
+};
+
 WheelContact::WheelContact(const std::string& name) :
   SingleLinkInteract(name),
   mPosition(0, 0, 0),
@@ -35,87 +134,11 @@
 {
 }
 
-void
-WheelContact::articulation(const Task& task, const Environment& environment,
-                           const ContinousStateValueVector&,
-                           PortValueList& portValues) const
+MechanicContext*
+WheelContact::newMechanicContext(const Environment* environment,
+                                 PortValueList& portValueList) const
 {
-  const CoordinateSystem& cs = portValues[mMechanicLink].getCoordinateSystem();
-
-  // FIXME, for now relative position
-  Vector3 position = mPosition - portValues[mMechanicLink].getDesignPosition();
-
-  // The coordinate system at the hub.
-  CoordinateSystem hubCoordinateSystem(cs.getRelative(position));
-
-  // Get the ground values in the hub coordinate system.
-  GroundValues groundValues =
-    environment.getGroundPlane(hubCoordinateSystem, task.getTime());
-
-  // Transform the plane equation to the local frame.
-  Plane lp = groundValues.plane;
- 
-  // Get the intersection length.
-  real_type distHubGround = fabs(lp.getDist());
-  real_type compressLength = mWheelRadius - distHubGround;
-  
-  // Don't bother if we do not intersect the ground.
-  if (compressLength < 0)
-    return;
-
-  Vector3 contactPoint = distHubGround*lp.getNormal();
-  
-  // The velocity of the ground patch in the current frame.
-  Vector6 groundVel = groundValues.vel;
-  // Now get the relative velocity of the ground wrt the hub
-  Vector6 relVel
-    = portValues[mMechanicLink].getReferenceVelocity(position) - groundVel;
-
-
-  // The velocity perpandicular to the plane.
-  // Positive when the contact spring is compressed,
-  // negative when decompressed.
-  real_type compressVel = - lp.scalarProjectToNormal(relVel.getLinear());
-  
-  // Get a transform from the current frames coordinates into
-  // wheel coordinates.
-  // The wheel coordinates x axis is defined by the forward orientation
-  // of the wheel, the z axis points perpandicular to the ground
-  // plane downwards.
-  Vector3 forward = normalize(cross(mAxis, lp.getNormal()));
-  Vector3 side = normalize(cross(lp.getNormal(), forward));
-
-  // Transformed velocity to the ground plane
-  Vector2 wheelVel(dot(forward, relVel.getLinear()),
-                   dot(side, relVel.getLinear()));
-
-  // The wheel rotation speed wrt ground
-  Vector3 rotVel = relVel.getAngular();
-  real_type omegaR = dot(rotVel, mAxis) * distHubGround;
-
-//   Log(Model,Error) << trans(groundVel) << " "
-//                    << trans(wheelVel) << " "
-//                    << omegaR << " "
-//                    << compressLength << " "
-//                    << distHubGround << endl;
-
-
-  // Get the plane normal force.
-  real_type normForce = computeNormalForce(compressLength, compressVel);
-  // The normal force cannot get negative here.
-  normForce = max(static_cast<real_type>(0), normForce);
-
-  // Get the friction force.
-  Vector2 fricForce = computeFrictionForce(normForce, wheelVel,
-                                           omegaR, groundValues.friction);
-  
-  // The resulting force is the sum of both.
-  // The minus sign is because of the direction of the surface normal.
-  Vector3 force = fricForce(0)*forward + fricForce(1)*side
-    + normForce*lp.getNormal();
-  
-  // We don't have an angular moment.
-  portValues[mMechanicLink].applyForce(contactPoint, force);
+  return new Context(this, environment, portValueList);
 }
 
 real_type

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h	2009-01-03 10:34:15 UTC (rev 910)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h	2009-01-03 11:02:35 UTC (rev 911)
@@ -11,14 +11,13 @@
 
 class WheelContact : public SingleLinkInteract {
   OPENFDM_OBJECT(WheelContact, SingleLinkInteract);
+  class Context;
 public:
   WheelContact(const std::string& name);
   virtual ~WheelContact(void);
 
-  virtual void initDesignPosition(PortValueList&) const {}
-  virtual void articulation(const Task&, const Environment&,
-                            const ContinousStateValueVector&,
-                            PortValueList& portValues) const;
+  virtual MechanicContext*
+  newMechanicContext(const Environment*, PortValueList&) const;
 
   // Compute the plane normal force.
   virtual real_type



From frohlich at mail.berlios.de  Sat Jan  3 12:26:52 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 3 Jan 2009 12:26:52 +0100
Subject: [OpenFDM-svn] r912 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200901031126.n03BQq2a031417@sheep.berlios.de>

Author: frohlich
Date: 2009-01-03 12:26:51 +0100 (Sat, 03 Jan 2009)
New Revision: 912

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
   branches/OpenFDM-StateSeparation/src/test/inertianav.cpp
Log:
make Sensor use its own Context.

M    test/inertianav.cpp
M    OpenFDM/SingleLinkInteract.h
M    OpenFDM/Sensor.cpp
M    OpenFDM/Sensor.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2009-01-03 11:02:35 UTC (rev 911)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2009-01-03 11:26:51 UTC (rev 912)
@@ -28,6 +28,42 @@
   DEF_OPENFDM_PROPERTY(Bool, EnableAboveGroundLevel, Serialized)
   END_OPENFDM_OBJECT_DEF
 
+class Sensor::Context : public SingleLinkInteract::Context {
+public:
+  Context(const Sensor* sensor,
+          const Environment* environment, PortValueList& portValueList) :
+    SingleLinkInteract::Context(sensor, environment, portValueList),
+    mSensor(sensor),
+    mLinkRelPos(Vector3::zeros())
+  { }
+  virtual ~Context() {}
+    
+  virtual const Sensor& getNode() const
+  { return *mSensor; }
+  
+  virtual void initDesignPosition()
+  {
+    mLinkRelPos = mSensor->getPosition() - getLink().getDesignPosition();
+  }
+  
+  virtual void velocities(const Task& task)
+  {
+    mSensor->velocity(task, getEnvironment(), mContinousState, mPortValueList);
+  }
+  virtual void articulation(const Task& task)
+  {
+    mSensor->articulation(task, getEnvironment(), mContinousState, mPortValueList);
+  }
+  virtual void accelerations(const Task& task)
+  {
+    mSensor->acceleration(task, getEnvironment(), mContinousState, mPortValueList);
+  }
+  
+private:
+  SharedPtr<const Sensor> mSensor;
+  Vector3 mLinkRelPos;
+};
+
 Sensor::Sensor(const std::string& name) :
   SingleLinkInteract(name),
   mPosition(0, 0, 0)
@@ -38,9 +74,17 @@
 {
 }
 
-void
-Sensor::initDesignPosition(PortValueList& portValues) const
+MechanicContext*
+Sensor::newMechanicContext(const Environment* environment,
+                           PortValueList& portValueList) const
 {
+  SharedPtr<Context> context = new Context(this, environment, portValueList);
+  if (!context->alloc()) {
+    Log(Model, Warning) << "Could not alloc for model \""
+                        << getName() << "\"" << endl;
+    return 0;
+  }
+  return context.release();
 }
 
 void

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2009-01-03 11:02:35 UTC (rev 911)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2009-01-03 11:26:51 UTC (rev 912)
@@ -15,14 +15,21 @@
 
 class Sensor : public SingleLinkInteract {
   OPENFDM_OBJECT(Sensor, SingleLinkInteract);
+  class Context;
 public:
   Sensor(const std::string& name);
   virtual ~Sensor(void);
 
-  virtual void initDesignPosition(PortValueList&) const;
+  virtual MechanicContext*
+  newMechanicContext(const Environment*, PortValueList&) const;
+
   virtual void velocity(const Task&, const Environment&,
                         const ContinousStateValueVector&,
                         PortValueList&) const;
+  virtual void articulation(const Task&, const Environment& environment,
+                            const ContinousStateValueVector&,
+                            PortValueList&) const
+  { }
   virtual void acceleration(const Task&, const Environment&,
                             const ContinousStateValueVector&,
                             PortValueList&) const;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2009-01-03 11:02:35 UTC (rev 911)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2009-01-03 11:26:51 UTC (rev 912)
@@ -30,7 +30,6 @@
     Context(const SingleLinkInteract* interact, const Environment* environment,
             PortValueList& portValueList) :
       MechanicContext(environment),
-      mInteract(interact),
       mPortValueList(portValueList)
     {
       mMechanicLinkValue = portValueList.getPortValue(interact->mMechanicLink);
@@ -38,38 +37,6 @@
     }
     virtual ~Context() {}
     
-    virtual const SingleLinkInteract& getNode() const
-    { return *mInteract; }
-    
-    virtual void initDesignPosition()
-    {
-      mInteract->initDesignPosition(mPortValueList);
-    }
-    
-    virtual void init(const /*Init*/Task& task)
-    {
-      mInteract->init(task, mDiscreteState, mContinousState, mPortValueList);
-    }
-    
-    virtual void velocities(const Task& task)
-    {
-      mInteract->velocity(task, getEnvironment(), mContinousState, mPortValueList);
-    }
-    virtual void articulation(const Task& task)
-    {
-      mInteract->articulation(task, getEnvironment(), mContinousState, mPortValueList);
-    }
-    virtual void accelerations(const Task& task)
-    {
-      mInteract->acceleration(task, getEnvironment(), mContinousState, mPortValueList);
-    }
-    
-    virtual void derivative(const Task& task)
-    {
-      mInteract->derivative(task, getEnvironment(), mDiscreteState, mContinousState, mPortValueList,
-                            mContinousStateDerivative);
-    }
-    
     bool alloc()
     {
       unsigned numContinousStates = getNode().getNumContinousStateValues();
@@ -111,46 +78,10 @@
     DiscreteStateValueVector mDiscreteState;
     
   private:
-    SharedPtr<const SingleLinkInteract> mInteract;
     SharedPtr<MechanicLinkValue> mMechanicLinkValue;
   };
   
 
-  virtual MechanicContext* newMechanicContext(const Environment* environment,
-                                              PortValueList& portValueList) const
-  {
-    SharedPtr<Context> context = new Context(this, environment, portValueList);
-    if (!context->alloc()) {
-      Log(Model, Warning) << "Could not alloc for model \""
-                          << getName() << "\"" << endl;
-      return 0;
-    }
-    return context.release();
-  }
-  
-  virtual void init(const Task&, DiscreteStateValueVector&,
-                    ContinousStateValueVector&, const PortValueList&) const
-  { }
-  virtual void initDesignPosition(PortValueList&) const
-  { }
-  virtual void velocity(const Task&, const Environment& environment,
-                        const ContinousStateValueVector&, PortValueList&) const
-  { }
-  virtual void articulation(const Task&, const Environment& environment,
-                            const ContinousStateValueVector&,
-                            PortValueList&) const
-  { }
-  virtual void acceleration(const Task&, const Environment& environment,
-                            const ContinousStateValueVector&,
-                            PortValueList&) const
-  { }
-  virtual void derivative(const Task&, const Environment& environment,
-                          const DiscreteStateValueVector&,
-                          const ContinousStateValueVector&,
-                          const PortValueList&,
-                          ContinousStateValueVector&) const
-  { }
-
 protected:
   MechanicLink mMechanicLink;
 };

Modified: branches/OpenFDM-StateSeparation/src/test/inertianav.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/inertianav.cpp	2009-01-03 11:02:35 UTC (rev 911)
+++ branches/OpenFDM-StateSeparation/src/test/inertianav.cpp	2009-01-03 11:26:51 UTC (rev 912)
@@ -22,6 +22,54 @@
     mAccelerationPort(this, "acceleration", Size(6, 1), true)
   { }
 
+class Context : public SingleLinkInteract::Context {
+public:
+  Context(const AccelerationTracking* accelerationTracking,
+          const Environment* environment, PortValueList& portValueList) :
+    SingleLinkInteract::Context(accelerationTracking, environment, portValueList),
+    mAccelerationTracking(accelerationTracking),
+    mLinkRelPos(Vector3::zeros())
+  { }
+  virtual ~Context() {}
+    
+  virtual const AccelerationTracking& getNode() const
+  { return *mAccelerationTracking; }
+  
+  virtual void initDesignPosition()
+  {
+//     mLinkRelPos = mAccelerationTracking->getPosition() - getLink().getDesignPosition();
+  }
+  
+  virtual void velocities(const Task& task)
+  {
+    mAccelerationTracking->velocity(task, getEnvironment(), mContinousState, mPortValueList);
+  }
+  virtual void articulation(const Task& task)
+  {
+//     mAccelerationTracking->articulation(task, getEnvironment(), mContinousState, mPortValueList);
+  }
+  virtual void accelerations(const Task& task)
+  {
+    mAccelerationTracking->acceleration(task, getEnvironment(), mContinousState, mPortValueList);
+  }
+  
+private:
+  SharedPtr<const AccelerationTracking> mAccelerationTracking;
+  Vector3 mLinkRelPos;
+};
+
+  virtual MechanicContext* newMechanicContext(const Environment* environment,
+                                              PortValueList& portValueList) const
+  {
+    SharedPtr<Context> context = new Context(this, environment, portValueList);
+    if (!context->alloc()) {
+      Log(Model, Warning) << "Could not alloc for model \""
+                          << getName() << "\"" << endl;
+      return 0;
+    }
+    return context.release();
+  }
+  
   virtual void initDesignPosition(PortValueList&) const
   {
   }



From frohlich at mail.berlios.de  Sat Jan  3 14:09:30 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 3 Jan 2009 14:09:30 +0100
Subject: [OpenFDM-svn] r913 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200901031309.n03D9UPD029240@sheep.berlios.de>

Author: frohlich
Date: 2009-01-03 14:09:28 +0100 (Sat, 03 Jan 2009)
New Revision: 913

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h
   branches/OpenFDM-StateSeparation/src/test/inertianav.cpp
Log:
Move the position property into the SingleLinkInteract class.
Factor out some common functionality.

M    test/inertianav.cpp
M    OpenFDM/WheelContact.cpp
M    OpenFDM/Mass.h
M    OpenFDM/Mass.cpp
M    OpenFDM/SingleLinkInteract.cpp
M    OpenFDM/WheelContact.h
M    OpenFDM/SingleLinkInteract.h
M    OpenFDM/Sensor.cpp
M    OpenFDM/Sensor.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2009-01-03 11:26:51 UTC (rev 912)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2009-01-03 13:09:28 UTC (rev 913)
@@ -10,7 +10,6 @@
 namespace OpenFDM {
 
 BEGIN_OPENFDM_OBJECT_DEF(Mass, SingleLinkInteract)
-  DEF_OPENFDM_PROPERTY(Vector3, Position, Serialized)
   DEF_OPENFDM_PROPERTY(Inertia, Inertia, Serialized)
   DEF_OPENFDM_PROPERTY(Real, Mass, Serialized)
   END_OPENFDM_OBJECT_DEF
@@ -21,7 +20,6 @@
           const Environment* environment, PortValueList& portValueList) :
     SingleLinkInteract::Context(mass, environment, portValueList),
     mMass(mass),
-    mLinkRelPos(Vector3::zeros()),
     mSpatialInertia(SpatialInertia::zeros())
   { }
   virtual ~Context() {}
@@ -31,9 +29,9 @@
 
   virtual void initDesignPosition()
   {
-    mLinkRelPos = mMass->getPosition() - getLink().getDesignPosition();
+    SingleLinkInteract::Context::initDesignPosition();
     mSpatialInertia = SpatialInertia(mMass->getInertia(), mMass->getMass());
-    mSpatialInertia = inertiaFrom(mLinkRelPos, mSpatialInertia);
+    mSpatialInertia = inertiaFrom(getLinkRelPos(), mSpatialInertia);
   }
   virtual void articulation(const Task&)
   {
@@ -50,16 +48,15 @@
     getLink().addForce(vIv);
 
     // Now the gravity part
-    Vector3 refPos = getLink().getCoordinateSystem().toReference(mLinkRelPos);
+    Vector3 refPos = getLink().getCoordinateSystem().toReference(getLinkRelPos());
     Vector3 gravity = getEnvironment().getGravityAcceleration(refPos);
     gravity = getLink().getCoordinateSystem().rotToLocal(gravity);
     gravity *= mMass->getMass();
-    getLink().applyForce(mLinkRelPos, gravity);
+    applyBodyForce(gravity);
   }
 
 private:
   SharedPtr<const Mass> mMass;
-  Vector3 mLinkRelPos;
   SpatialInertia mSpatialInertia;
 };
 
@@ -67,8 +64,7 @@
            const InertiaMatrix& inertia, const Vector3& position) :
   SingleLinkInteract(name),
   mMass(mass),
-  mInertia(inertia),
-  mPosition(position)
+  mInertia(inertia)
 {
 }
 
@@ -107,16 +103,4 @@
   mMass = mass;
 }
 
-const Vector3&
-Mass::getPosition(void) const
-{
-  return mPosition;
-}
-
-void
-Mass::setPosition(const Vector3& position)
-{
-  mPosition = position;
-}
-
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h	2009-01-03 11:26:51 UTC (rev 912)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h	2009-01-03 13:09:28 UTC (rev 913)
@@ -38,16 +38,10 @@
   const real_type& getMass() const;
   void setMass(const real_type& mass);
 
-  /** Set a position offset for the inertia given.
-   */
-  const Vector3& getPosition(void) const;
-  void setPosition(const Vector3& position);
-
 private:
   /// The paremeters that can be set from outside
   real_type mMass;
   InertiaMatrix mInertia;
-  Vector3 mPosition;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2009-01-03 11:26:51 UTC (rev 912)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2009-01-03 13:09:28 UTC (rev 913)
@@ -12,7 +12,6 @@
 namespace OpenFDM {
 
 BEGIN_OPENFDM_OBJECT_DEF(Sensor, SingleLinkInteract)
-  DEF_OPENFDM_PROPERTY(Vector3, Position, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnablePosition, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnableOrientation, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnableEulerAngles, Serialized)
@@ -33,19 +32,13 @@
   Context(const Sensor* sensor,
           const Environment* environment, PortValueList& portValueList) :
     SingleLinkInteract::Context(sensor, environment, portValueList),
-    mSensor(sensor),
-    mLinkRelPos(Vector3::zeros())
+    mSensor(sensor)
   { }
   virtual ~Context() {}
     
   virtual const Sensor& getNode() const
   { return *mSensor; }
   
-  virtual void initDesignPosition()
-  {
-    mLinkRelPos = mSensor->getPosition() - getLink().getDesignPosition();
-  }
-  
   virtual void velocities(const Task& task)
   {
     mSensor->velocity(task, getEnvironment(), mContinousState, mPortValueList);
@@ -61,12 +54,10 @@
   
 private:
   SharedPtr<const Sensor> mSensor;
-  Vector3 mLinkRelPos;
 };
 
 Sensor::Sensor(const std::string& name) :
-  SingleLinkInteract(name),
-  mPosition(0, 0, 0)
+  SingleLinkInteract(name)
 {
 }
 
@@ -194,18 +185,6 @@
 }
 
 void
-Sensor::setPosition(const Vector3& position)
-{
-  mPosition = position;
-}
-
-const Vector3&
-Sensor::getPosition() const
-{
-  return mPosition;
-}
-
-void
 Sensor::setEnablePosition(bool enable)
 {
   if (enable == getEnablePosition())

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2009-01-03 11:26:51 UTC (rev 912)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2009-01-03 13:09:28 UTC (rev 913)
@@ -34,11 +34,6 @@
                             const ContinousStateValueVector&,
                             PortValueList&) const;
 
-  /// Set the position of the sensor in design coordinates
-  void setPosition(const Vector3& position);
-  /// Get the position of the sensor in design coordinates
-  const Vector3& getPosition() const;
-
   /// Set availabilty of the position output port
   void setEnablePosition(bool enable);
   /// Get availabilty of the position output port
@@ -118,8 +113,6 @@
   void setEnableAllOutputs(bool enable);
 
 protected:
-  Vector3 mPosition;
-
   MatrixOutputPort mPositionPort;
   MatrixOutputPort mOrientationPort;
   MatrixOutputPort mEulerAnglesPort;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.cpp	2009-01-03 11:26:51 UTC (rev 912)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.cpp	2009-01-03 13:09:28 UTC (rev 913)
@@ -7,11 +7,13 @@
 namespace OpenFDM {
 
 BEGIN_OPENFDM_OBJECT_DEF(SingleLinkInteract, Interact)
+  DEF_OPENFDM_PROPERTY(Vector3, Position, Serialized)
   END_OPENFDM_OBJECT_DEF
 
 SingleLinkInteract::SingleLinkInteract(const std::string& name) :
   Interact(name),
-  mMechanicLink(this, "link")
+  mMechanicLink(this, "link"),
+  mPosition(0, 0, 0)
 {
 }
 
@@ -19,4 +21,16 @@
 {
 }
 
+void
+SingleLinkInteract::setPosition(const Vector3& position)
+{
+  mPosition = position;
+}
+
+const Vector3&
+SingleLinkInteract::getPosition() const
+{
+  return mPosition;
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2009-01-03 11:26:51 UTC (rev 912)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2009-01-03 13:09:28 UTC (rev 913)
@@ -30,13 +30,19 @@
     Context(const SingleLinkInteract* interact, const Environment* environment,
             PortValueList& portValueList) :
       MechanicContext(environment),
-      mPortValueList(portValueList)
+      mPortValueList(portValueList),
+      mLinkRelPos(Vector3::zeros())
     {
       mMechanicLinkValue = portValueList.getPortValue(interact->mMechanicLink);
       OpenFDMAssert(mMechanicLinkValue);
     }
     virtual ~Context() {}
     
+    virtual const SingleLinkInteract& getNode() const = 0;
+
+    virtual void initDesignPosition()
+    { mLinkRelPos = getNode().getPosition() - getLink().getDesignPosition(); }
+  
     bool alloc()
     {
       unsigned numContinousStates = getNode().getNumContinousStateValues();
@@ -67,6 +73,28 @@
     MechanicLinkValue& getLink() const
     { return *mMechanicLinkValue; }
 
+    const Vector3& getLinkRelPos() const
+    { return mLinkRelPos; }
+
+    /// FIXME: Hmm, may be some kind of MechanicLinkHandle class that has a
+    /// link value and these methods???
+    void applyBodyForce(const Vector6& force)
+    { mMechanicLinkValue->applyForce(mLinkRelPos, force); }
+    void applyBodyForce(const Vector3& bodyPosition, const Vector6& force)
+    { mMechanicLinkValue->applyForce(bodyPosition + mLinkRelPos, force); }
+    void applyBodyForceAtLink(const Vector6& force)
+    { mMechanicLinkValue->applyForce(force); }
+
+    void applyBodyForce(const Vector3& force)
+    { mMechanicLinkValue->applyForce(mLinkRelPos, force); }
+    void applyBodyForce(const Vector3& bodyPosition, const Vector3& force)
+    { mMechanicLinkValue->applyForce(bodyPosition + mLinkRelPos, force); }
+    void applyBodyForceAtLink(const Vector3& force)
+    { mMechanicLinkValue->applyForce(force); }
+
+    void applyBodyTorque(const Vector3& torque)
+    { mMechanicLinkValue->applyTorque(torque); }
+
   protected:
     // PortValues
     PortValueList mPortValueList;
@@ -79,11 +107,18 @@
     
   private:
     SharedPtr<MechanicLinkValue> mMechanicLinkValue;
+    Vector3 mLinkRelPos;
   };
   
+  /// Set the position of the sensor in design coordinates
+  void setPosition(const Vector3& position);
+  /// Get the position of the sensor in design coordinates
+  const Vector3& getPosition() const;
 
 protected:
   MechanicLink mMechanicLink;
+
+  Vector3 mPosition;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2009-01-03 11:26:51 UTC (rev 912)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2009-01-03 13:09:28 UTC (rev 913)
@@ -11,7 +11,6 @@
 namespace OpenFDM {
 
 BEGIN_OPENFDM_OBJECT_DEF(WheelContact, SingleLinkInteract)
-  DEF_OPENFDM_PROPERTY(Vector3, Position, Serialized)
   DEF_OPENFDM_PROPERTY(Vector3, Axis, Serialized)
   DEF_OPENFDM_PROPERTY(Real, WheelRadius, Serialized)
   DEF_OPENFDM_PROPERTY(Real, SpringConstant, Serialized)
@@ -25,24 +24,19 @@
   Context(const WheelContact* wheelContact,
           const Environment* environment, PortValueList& portValueList) :
     SingleLinkInteract::Context(wheelContact, environment, portValueList),
-    mWheelContact(wheelContact),
-    mLinkRelPos(Vector3::zeros())
+    mWheelContact(wheelContact)
   { }
   virtual ~Context() {}
     
   virtual const WheelContact& getNode() const
   { return *mWheelContact; }
 
-  virtual void initDesignPosition()
-  {
-    mLinkRelPos = mWheelContact->getPosition() - getLink().getDesignPosition();
-  }
   virtual void articulation(const Task& task)
   {
     const CoordinateSystem& cs = getLink().getCoordinateSystem();
 
     // The coordinate system at the hub.
-    CoordinateSystem hubCoordinateSystem(cs.getRelative(mLinkRelPos));
+    CoordinateSystem hubCoordinateSystem(cs.getRelative(getLinkRelPos()));
     
     // Get the ground values in the hub coordinate system.
     GroundValues groundValues =
@@ -65,7 +59,7 @@
     // The velocity of the ground patch in the current frame.
     Vector6 groundVel = groundValues.vel;
     // Now get the relative velocity of the ground wrt the hub
-    Vector6 relVel = getLink().getReferenceVelocity(mLinkRelPos) - groundVel;
+    Vector6 relVel = getLink().getReferenceVelocity(getLinkRelPos()) - groundVel;
     
     
     // The velocity perpandicular to the plane.
@@ -111,17 +105,15 @@
     Vector3 force = fricForce(0)*forward + fricForce(1)*side - normForce*down;
     
     // We don't have an angular moment.
-    getLink().applyForce(contactPoint, force);
+    applyBodyForce(contactPoint, force);
   }
 
 private:
   SharedPtr<const WheelContact> mWheelContact;
-  Vector3 mLinkRelPos;
 };
 
 WheelContact::WheelContact(const std::string& name) :
   SingleLinkInteract(name),
-  mPosition(0, 0, 0),
   mAxis(0, 1, 0)
 {
   mWheelRadius = 0.3;
@@ -172,18 +164,6 @@
 }
 
 const Vector3&
-WheelContact::getPosition(void) const
-{
-  return mPosition;
-}
-
-void
-WheelContact::setPosition(const Vector3& position)
-{
-  mPosition = position;
-}
-
-const Vector3&
 WheelContact::getAxis(void) const
 {
   return mAxis;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h	2009-01-03 11:26:51 UTC (rev 912)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h	2009-01-03 13:09:28 UTC (rev 913)
@@ -28,11 +28,6 @@
   computeFrictionForce(real_type normForce, const Vector2& vel,
                        real_type omegaR, real_type friction) const;
 
-  /** Set a position for the wheel axis position.
-   */
-  const Vector3& getPosition(void) const;
-  void setPosition(const Vector3& position);
-
   /** Set wheel axis direction.
    */
   const Vector3& getAxis(void) const;
@@ -63,7 +58,6 @@
   { return mFrictionCoeficient; }
 
 private:
-  Vector3 mPosition;
   Vector3 mAxis;
   real_type mWheelRadius;
 

Modified: branches/OpenFDM-StateSeparation/src/test/inertianav.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/inertianav.cpp	2009-01-03 11:26:51 UTC (rev 912)
+++ branches/OpenFDM-StateSeparation/src/test/inertianav.cpp	2009-01-03 13:09:28 UTC (rev 913)
@@ -27,19 +27,13 @@
   Context(const AccelerationTracking* accelerationTracking,
           const Environment* environment, PortValueList& portValueList) :
     SingleLinkInteract::Context(accelerationTracking, environment, portValueList),
-    mAccelerationTracking(accelerationTracking),
-    mLinkRelPos(Vector3::zeros())
+    mAccelerationTracking(accelerationTracking)
   { }
   virtual ~Context() {}
     
   virtual const AccelerationTracking& getNode() const
   { return *mAccelerationTracking; }
   
-  virtual void initDesignPosition()
-  {
-//     mLinkRelPos = mAccelerationTracking->getPosition() - getLink().getDesignPosition();
-  }
-  
   virtual void velocities(const Task& task)
   {
     mAccelerationTracking->velocity(task, getEnvironment(), mContinousState, mPortValueList);
@@ -55,7 +49,6 @@
   
 private:
   SharedPtr<const AccelerationTracking> mAccelerationTracking;
-  Vector3 mLinkRelPos;
 };
 
   virtual MechanicContext* newMechanicContext(const Environment* environment,



From frohlich at mail.berlios.de  Sat Jan  3 15:06:38 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 3 Jan 2009 15:06:38 +0100
Subject: [OpenFDM-svn] r914 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901031406.n03E6chx003581@sheep.berlios.de>

Author: frohlich
Date: 2009-01-03 15:06:38 +0100 (Sat, 03 Jan 2009)
New Revision: 914

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleContact.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleContact.h
Log:
Reactivate Contact and SimpleContact.

M    src/OpenFDM/Makefile.am
M    src/OpenFDM/Contact.h
M    src/OpenFDM/Contact.cpp
M    src/OpenFDM/SimpleContact.h
M    src/OpenFDM/SimpleContact.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.cpp	2009-01-03 13:09:28 UTC (rev 913)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.cpp	2009-01-03 14:06:38 UTC (rev 914)
@@ -6,89 +6,96 @@
 
 #include "Assert.h"
 #include "LogStream.h"
-#include "Object.h"
-#include "Vector.h"
-#include "Frame.h"
-#include "Force.h"
+#include "Task.h"
 
 namespace OpenFDM {
 
-BEGIN_OPENFDM_OBJECT_DEF(Contact, ExternalForce)
+BEGIN_OPENFDM_OBJECT_DEF(Contact, SingleLinkInteract)
   END_OPENFDM_OBJECT_DEF
 
-Contact::Contact(const std::string& name)
-  : ExternalForce(name)
-{
-  setDisableMode(Model::ResetHold);
+class Contact::Context : public SingleLinkInteract::Context {
+public:
+  Context(const Contact* wheelContact,
+          const Environment* environment, PortValueList& portValueList) :
+    SingleLinkInteract::Context(wheelContact, environment, portValueList),
+    mContact(wheelContact)
+  { }
+  virtual ~Context() {}
+    
+  virtual const Contact& getNode() const
+  { return *mContact; }
 
-  // FIXME??
-  addSampleTime(SampleTime::PerTimestep);
-  addSampleTime(SampleTime::Continous);
-}
+  virtual void articulation(const Task& task)
+  {
+    const CoordinateSystem& cs = getLink().getCoordinateSystem();
 
-Contact::~Contact(void)
+    // The coordinate system at the hub.
+    CoordinateSystem localCoordSys(cs.getRelative(getLinkRelPos()));
+    
+    // Get the ground values in the hub coordinate system.
+    GroundValues groundValues =
+      getEnvironment().getGroundPlane(localCoordSys, task.getTime());
+    
+    // Transform the plane equation to the local frame.
+    Plane lp = groundValues.plane;
+    
+    // Get the intersection length.
+    real_type compressLength = lp.getDist(Vector3::zeros());
+    
+    // Don't bother if we do not intersect the ground.
+    if (compressLength < 0)
+      return;
+    
+    // The velocity of the ground patch in the current frame.
+    Vector3 relVel = groundValues.vel.getLinear();
+    // Now get the relative velocity of the ground wrt the contact point
+    relVel -= getLink().getReferenceVelocity(getLinkRelPos()).getLinear();
+    
+    // The velocity perpandicular to the plane.
+    // Positive when the contact spring is compressed,
+    // negative when decompressed.
+    real_type compressVel = - lp.scalarProjectToNormal(relVel);
+    
+    // The in plane velocity.
+    Vector3 sVel = lp.projectToPlane(relVel);
+    
+    // Get the plane normal force.
+    real_type normForce = mContact->computeNormalForce(compressLength,
+                                                       compressVel);
+    // The normal force cannot get negative here.
+    normForce = max(static_cast<real_type>(0), normForce);
+    
+    // Get the friction force.
+    Vector3 fricForce = mContact->computeFrictionForce(normForce, sVel,
+                                                       lp.getNormal(),
+                                                       groundValues.friction);
+    
+    // The resulting force is the sum of both.
+    // The minus sign is because of the direction of the surface normal.
+    Vector3 force = fricForce - normForce*lp.getNormal();
+    
+    // We don't have an angular moment.
+    applyBodyForce(force);
+  }
+
+private:
+  SharedPtr<const Contact> mContact;
+};
+
+Contact::Contact(const std::string& name) :
+  SingleLinkInteract(name)
 {
 }
 
-bool
-Contact::init(void)
+Contact::~Contact(void)
 {
-  setForce(Vector6::zeros());
-  return ExternalForce::init();
 }
 
-void
-Contact::output(const TaskInfo& taskInfo)
+MechanicContext*
+Contact::newMechanicContext(const Environment* environment,
+                            PortValueList& portValueList) const
 {
-  if (nonZeroIntersection(taskInfo.getSampleTimeSet(),
-                          SampleTime::PerTimestep)) {
-    Log(Model, Debug) << "Contact::output(): \"" << getName()
-                      << "\" computing ground plane below" << endl;
-    getGround(taskInfo.getTime());
-  }
-
-  // Transform the plane equation to the local frame.
-  Plane lp = mMountFrame->planeFromRef(mGroundVal.plane);
-  
-  // Get the intersection length.
-  real_type compressLength = lp.getDist(Vector3::zeros());
-  
-  // Don't bother if we do not intersect the ground.
-  if (compressLength < 0) {
-    setForce(Vector6::zeros());
-    return;
-  }
-  
-  // The velocity of the ground patch in the current frame.
-  Vector6 groundVel(mMountFrame->rotFromRef(mGroundVal.vel.getAngular()),
-                    mMountFrame->rotFromRef(mGroundVal.vel.getLinear()));
-  groundVel -= mMountFrame->getRefVel();
-  // Now get the relative velocity of the ground wrt the contact point
-  Vector3 relVel = - groundVel.getLinear();
-
-  // The velocity perpandicular to the plane.
-  // Positive when the contact spring is compressed,
-  // negative when decompressed.
-  real_type compressVel = - lp.scalarProjectToNormal(relVel);
-  
-  // The in plane velocity.
-  Vector3 sVel = lp.projectToPlane(relVel);
-  
-  // Get the plane normal force.
-  real_type normForce = computeNormalForce(compressLength, compressVel);
-  // The normal force cannot get negative here.
-  normForce = max(static_cast<real_type>(0), normForce);
-  
-  // Get the friction force.
-  Vector3 fricForce = computeFrictionForce(normForce, sVel, lp.getNormal(),
-                                           mGroundVal.friction);
-  
-  // The resulting force is the sum of both.
-  // The minus sign is because of the direction of the surface normal.
-  Vector3 force = fricForce - normForce*lp.getNormal();
-  
-  // We don't have an angular moment.
-  setForce(Vector6(Vector3::zeros(), force));
+  return new Context(this, environment, portValueList);
 }
 
 real_type
@@ -105,19 +112,4 @@
   return Vector3::zeros();
 }
 
-void
-Contact::setEnvironment(Environment* environment)
-{
-  mEnvironment = environment;
-}
-
-void
-Contact::getGround(real_type t)
-{
-  // Get the position of the contact in the reference system.
-  Vector3 pos = mMountFrame->getRefPosition();
-  // Query for the ground parameters at this point.
-  mGroundVal = mEnvironment->getGround()->getGroundPlane(t, pos);
-}
-
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.h	2009-01-03 13:09:28 UTC (rev 913)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.h	2009-01-03 14:06:38 UTC (rev 914)
@@ -5,24 +5,19 @@
 #ifndef OpenFDM_Contact_H
 #define OpenFDM_Contact_H
 
-#include "Assert.h"
-#include "Object.h"
-#include "Vector.h"
-#include "Frame.h"
-#include "Force.h"
-#include "Ground.h"
-#include "Environment.h"
+#include "SingleLinkInteract.h"
 
 namespace OpenFDM {
 
-class Contact : public ExternalForce {
-  OPENFDM_OBJECT(Contact, ExternalForce);
+class Contact : public SingleLinkInteract {
+  OPENFDM_OBJECT(Contact, SingleLinkInteract);
+  class Context;
 public:
   Contact(const std::string& name);
   virtual ~Contact(void);
 
-  virtual bool init(void);
-  virtual void output(const TaskInfo&);
+  virtual MechanicContext*
+  newMechanicContext(const Environment*, PortValueList&) const;
 
   // Compute the plane normal force.
   virtual real_type
@@ -32,15 +27,6 @@
   virtual Vector3
   computeFrictionForce(real_type normForce, const Vector3& vel,
                        const Vector3& groundNormal, real_type friction) const;
-
-protected:
-  virtual void setEnvironment(Environment* environment);
-
-private:
-  void getGround(real_type t);
-
-  GroundValues mGroundVal;
-  SharedPtr<const Environment> mEnvironment;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2009-01-03 13:09:28 UTC (rev 913)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2009-01-03 14:06:38 UTC (rev 914)
@@ -272,6 +272,7 @@
   UnitConversion.cpp
 
 OpenFDMMechanicSOURCES = \
+  Contact.cpp \
   DoubleLinkInteract.cpp \
   Joint.cpp \
   ExternalForce.cpp \
@@ -284,14 +285,13 @@
   RevoluteJoint.cpp \
   RotationalJoint.cpp \
   Sensor.cpp \
+  SimpleContact.cpp \
   SingleLinkInteract.cpp \
   UniversalJoint.cpp \
   WheelContact.cpp
 
 #   AeroForce.cpp \
-#   Contact.cpp \
 #   Force.cpp \
-#   SimpleContact.cpp \
 #   SimpleGear.cpp \
 #   Tank.cpp
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleContact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleContact.cpp	2009-01-03 13:09:28 UTC (rev 913)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleContact.cpp	2009-01-03 14:06:38 UTC (rev 914)
@@ -5,25 +5,19 @@
 #include "SimpleContact.h"
 
 #include "Assert.h"
-#include "Object.h"
-#include "Vector.h"
-#include "Frame.h"
-#include "Force.h"
-#include "Contact.h"
 
 namespace OpenFDM {
 
 BEGIN_OPENFDM_OBJECT_DEF(SimpleContact, Contact)
   DEF_OPENFDM_PROPERTY(Real, SpringConstant, Serialized)
-/// FIXME want to have similar names than with linearspringdamper
-  DEF_OPENFDM_PROPERTY(Real, SpringDamping, Serialized)
+  DEF_OPENFDM_PROPERTY(Real, DamperConstant, Serialized)
   DEF_OPENFDM_PROPERTY(Real, FrictionCoeficient, Serialized)
   END_OPENFDM_OBJECT_DEF
 
 SimpleContact::SimpleContact(const std::string& name) :
   Contact(name),
   mSpringConst(0),
-  mSpringDamp(0),
+  mDamperConstant(0),
   mFrictionCoef(0)
 {
 }
@@ -32,13 +26,48 @@
 {
 }
 
+const real_type&
+SimpleContact::getSpringConstant(void) const
+{
+  return mSpringConst;
+}
+
+void
+SimpleContact::setSpringConstant(const real_type& springConst)
+{
+  mSpringConst = springConst;
+}
+
+const real_type&
+SimpleContact::getDamperConstant(void) const
+{
+  return mDamperConstant;
+}
+
+void
+SimpleContact::setDamperConstant(const real_type& damperConstant)
+{
+  mDamperConstant = damperConstant;
+}
+
+const real_type&
+SimpleContact::getFrictionCoeficient(void) const
+{
+  return mFrictionCoef;
+}
+
+void
+SimpleContact::setFrictionCoeficient(const real_type& frictionCoef)
+{
+  mFrictionCoef = frictionCoef;
+}
+
 // Compute the plane normal force.
 real_type
 SimpleContact::computeNormalForce(real_type compressLen,
                                   real_type compressVel) const
 {
-  return compressLen*mSpringConst
-    - mSpringDamp*min(compressVel, static_cast<real_type>(0));
+  return compressLen*mSpringConst - mDamperConstant*compressVel;
 }
 
 // Compute the friction force.

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleContact.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleContact.h	2009-01-03 13:09:28 UTC (rev 913)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleContact.h	2009-01-03 14:06:38 UTC (rev 914)
@@ -5,11 +5,6 @@
 #ifndef OpenFDM_SimpleContact_H
 #define OpenFDM_SimpleContact_H
 
-#include "Assert.h"
-#include "Object.h"
-#include "Vector.h"
-#include "Frame.h"
-#include "Force.h"
 #include "Contact.h"
 
 namespace OpenFDM {
@@ -20,20 +15,14 @@
   SimpleContact(const std::string& name);
   virtual ~SimpleContact(void);
 
-  const real_type& getSpringConstant(void) const
-  { return mSpringConst; }
-  void setSpringConstant(const real_type& springConst)
-  { mSpringConst = springConst; }
+  const real_type& getSpringConstant(void) const;
+  void setSpringConstant(const real_type& springConst);
 
-  const real_type& getSpringDamping(void) const
-  { return mSpringDamp; }
-  void setSpringDamping(const real_type& springDamp)
-  { mSpringDamp = springDamp; }
+  const real_type& getDamperConstant(void) const;
+  void setDamperConstant(const real_type& damperConstant);
 
-  const real_type& getFrictionCoeficient(void) const
-  { return mFrictionCoef; }
-  void setFrictionCoeficient(const real_type& frictionCoef)
-  { mFrictionCoef = frictionCoef; }
+  const real_type& getFrictionCoeficient(void) const;
+  void setFrictionCoeficient(const real_type& frictionCoef);
 
   // Compute the plane normal force.
   virtual real_type
@@ -46,7 +35,7 @@
 
 private:
   real_type mSpringConst;
-  real_type mSpringDamp;
+  real_type mDamperConstant;
   real_type mFrictionCoef;
 };
 



From frohlich at mail.berlios.de  Sun Jan  4 10:59:44 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 4 Jan 2009 10:59:44 +0100
Subject: [OpenFDM-svn] r915 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200901040959.n049xiw2016851@sheep.berlios.de>

Author: frohlich
Date: 2009-01-04 10:59:43 +0100 (Sun, 04 Jan 2009)
New Revision: 915

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h
   branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
Log:
Introduce ParentLinkValue helpers.
Use it.

M    src/test/tiretestrig.cpp
M    src/OpenFDM/WheelContact.cpp
M    src/OpenFDM/InternalSensor.cpp
M    src/OpenFDM/Mass.cpp
M    src/OpenFDM/WheelContact.h
M    src/OpenFDM/MechanicLinkValue.h
M    src/OpenFDM/Contact.cpp
M    src/OpenFDM/SingleLinkInteract.h
M    src/OpenFDM/DoubleLinkInteract.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.cpp	2009-01-03 14:06:38 UTC (rev 914)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.cpp	2009-01-04 09:59:43 UTC (rev 915)
@@ -27,10 +27,8 @@
 
   virtual void articulation(const Task& task)
   {
-    const CoordinateSystem& cs = getLink().getCoordinateSystem();
-
-    // The coordinate system at the hub.
-    CoordinateSystem localCoordSys(cs.getRelative(getLinkRelPos()));
+    // The coordinate system at the body fixed contact point.
+    CoordinateSystem localCoordSys(getLink().getCoordinateSystem());
     
     // Get the ground values in the hub coordinate system.
     GroundValues groundValues =
@@ -49,7 +47,8 @@
     // The velocity of the ground patch in the current frame.
     Vector3 relVel = groundValues.vel.getLinear();
     // Now get the relative velocity of the ground wrt the contact point
-    relVel -= getLink().getReferenceVelocity(getLinkRelPos()).getLinear();
+    relVel -= getLink().getRefVel().getLinear();
+
     
     // The velocity perpandicular to the plane.
     // Positive when the contact spring is compressed,
@@ -75,7 +74,7 @@
     Vector3 force = fricForce - normForce*lp.getNormal();
     
     // We don't have an angular moment.
-    applyBodyForce(force);
+    getLink().applyBodyForce(force);
   }
 
 private:

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h	2009-01-03 14:06:38 UTC (rev 914)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/DoubleLinkInteract.h	2009-01-04 09:59:43 UTC (rev 915)
@@ -23,13 +23,10 @@
     Context(const DoubleLinkInteract* interact, const Environment* environment,
             PortValueList& portValueList) :
       MechanicContext(environment),
-      mPortValueList(portValueList)
-    {
-      mMechanicLinkValue0 = portValueList.getPortValue(*interact->mMechanicLinkInfo0);
-      OpenFDMAssert(mMechanicLinkValue0);
-      mMechanicLinkValue1 = portValueList.getPortValue(*interact->mMechanicLinkInfo1);
-      OpenFDMAssert(mMechanicLinkValue1);
-    }
+      mPortValueList(portValueList),
+      mLink0(portValueList.getPortValue(*interact->mMechanicLinkInfo0)),
+      mLink1(portValueList.getPortValue(*interact->mMechanicLinkInfo1))
+    { }
     virtual ~Context() {}
 
     virtual const DoubleLinkInteract& getNode() const = 0;
@@ -61,10 +58,10 @@
     virtual const PortValue* getPortValue(const PortInfo& portInfo) const
     {  return mPortValueList.getPortValue(portInfo); }
     
-    MechanicLinkValue& getLink0() const
-    { return *mMechanicLinkValue0; }
-    MechanicLinkValue& getLink1() const
-    { return *mMechanicLinkValue1; }
+    ParentLink& getLink0()
+    { return mLink0; }
+    ParentLink& getLink1()
+    { return mLink1; }
 
   protected:
     // PortValues
@@ -77,8 +74,8 @@
     DiscreteStateValueVector mDiscreteState;
     
   private:
-    SharedPtr<MechanicLinkValue> mMechanicLinkValue0;
-    SharedPtr<MechanicLinkValue> mMechanicLinkValue1;
+    ParentLink mLink0;
+    ParentLink mLink1;
   };
   
 protected:

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2009-01-03 14:06:38 UTC (rev 914)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalSensor.cpp	2009-01-04 09:59:43 UTC (rev 915)
@@ -24,9 +24,7 @@
   Context(const InternalSensor* internalSensor,
           const Environment* environment, PortValueList& portValueList) :
     DoubleLinkInteract::Context(internalSensor, environment, portValueList),
-    mInternalSensor(internalSensor),
-    mLinkRelPos0(Vector3::zeros()),
-    mLinkRelPos1(Vector3::zeros())
+    mInternalSensor(internalSensor)
   {
     mDistanceValue = portValueList.getPortValue(internalSensor->mDistancePort);
     mVelocityValue = portValueList.getPortValue(internalSensor->mVelocityPort);
@@ -39,16 +37,15 @@
 
   virtual void initDesignPosition()
   {
-    mLinkRelPos0 = mInternalSensor->getPosition0();
-    mLinkRelPos0 -= getLink0().getDesignPosition();
-    mLinkRelPos1 = mInternalSensor->getPosition1();
-    mLinkRelPos1 -= getLink1().getDesignPosition();
+    getLink0().setDesignPosition(mInternalSensor->getPosition0());
+    getLink1().setDesignPosition(mInternalSensor->getPosition1());
   }
   virtual void velocities(const Task&)
   {
     mRelCoordSys = getLink0().getRelativeCoordinateSystem(getLink1());
   
-    Vector3 relPos = mRelCoordSys.toReference(mLinkRelPos1) - mLinkRelPos0;
+    Vector3 relPos = mRelCoordSys.getPosition();
+
     real_type nrmRelPos = norm(relPos);
     if (nrmRelPos <= Limits<real_type>::min())
       mDirection = Vector3::zeros();
@@ -61,11 +58,9 @@
 
     if (mVelocityValue) {
       // The motion of link1 measured in link0
-      Vector6 relVel = mRelCoordSys.motionToReference(getLink1().getSpVel());
+      Vector6 relVel = mRelCoordSys.motionToReference(getLink1().getRefVel());
       // The relative motion of link1 wrt link0 measured in link0
-      relVel -= getLink0().getSpVel();
-      // Transform to the internal reference point
-      relVel = motionTo(mLinkRelPos0, relVel);
+      relVel -= getLink0().getRefVel();
       // The scalar product is what we need.
       // Here the additional cross product term cancels out
       mVelocityValue->getValue()(0, 0) = dot(mDirection, relVel.getLinear());
@@ -81,10 +76,10 @@
     // offset
     real_type force = mForceValue->getValue()(0, 0);
     Vector3 force0 = (-force)*mDirection;
-    getLink0().applyForce(mLinkRelPos0, force0);
+    getLink0().applyBodyForce(force0);
     
     Vector3 force1 = force*mRelCoordSys.rotToLocal(mDirection);
-    getLink1().applyForce(mLinkRelPos1, force1);
+    getLink1().applyBodyForce(force1);
   }
 
 private:
@@ -92,8 +87,6 @@
   SharedPtr<NumericPortValue> mDistanceValue;
   SharedPtr<NumericPortValue> mVelocityValue;
   SharedPtr<const NumericPortValue> mForceValue;
-  Vector3 mLinkRelPos0;
-  Vector3 mLinkRelPos1;
   CoordinateSystem mRelCoordSys;
   Vector3 mDirection;
 };

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2009-01-03 14:06:38 UTC (rev 914)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2009-01-04 09:59:43 UTC (rev 915)
@@ -30,29 +30,30 @@
   virtual void initDesignPosition()
   {
     SingleLinkInteract::Context::initDesignPosition();
+    Vector3 relPos = getLink().getLinkRelPos();
     mSpatialInertia = SpatialInertia(mMass->getInertia(), mMass->getMass());
-    mSpatialInertia = inertiaFrom(getLinkRelPos(), mSpatialInertia);
+    mSpatialInertia = inertiaFrom(relPos, mSpatialInertia);
   }
   virtual void articulation(const Task&)
   {
     // Contribute the inerita
-    getLink().addInertia(mSpatialInertia);
+    getLink().addInertiaAtLink(mSpatialInertia);
 
     // Each inertia has a contribution to the spatial bias force.
     // This part is handled here.
-    Vector6 v = getLink().getSpVel();
+    Vector6 v = getLink().getMechanicLinkValue().getSpVel();
     Vector6 Iv = mSpatialInertia*v;
     Vector6 vIv = Vector6(cross(v.getAngular(), Iv.getAngular()) +
                           cross(v.getLinear(), Iv.getLinear()),
                           cross(v.getAngular(), Iv.getLinear()));
-    getLink().addForce(vIv);
+    getLink().addForceAtLink(vIv);
 
     // Now the gravity part
-    Vector3 refPos = getLink().getCoordinateSystem().toReference(getLinkRelPos());
+    Vector3 refPos = getLink().getRefPos();
     Vector3 gravity = getEnvironment().getGravityAcceleration(refPos);
     gravity = getLink().getCoordinateSystem().rotToLocal(gravity);
     gravity *= mMass->getMass();
-    applyBodyForce(gravity);
+    getLink().applyBodyForce(gravity);
   }
 
 private:

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2009-01-03 14:06:38 UTC (rev 914)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2009-01-04 09:59:43 UTC (rev 915)
@@ -126,6 +126,145 @@
   Vector3 mDesignPosition;
 };
 
+class ChildLink {
+public:
+  ChildLink(MechanicLinkValue* mechanicLinkValue) :
+    mMechanicLinkValue(mechanicLinkValue)
+  { OpenFDMAssert(mMechanicLinkValue); }
+
+  const MechanicLinkValue& getMechanicLinkValue() const
+  { return *mMechanicLinkValue; }
+  MechanicLinkValue& getMechanicLinkValue()
+  { return *mMechanicLinkValue; }
+
+  void setDesignPosition(const Vector3& position)
+  { mMechanicLinkValue->setDesignPosition(position); }
+
+  void setPosAndVel(const MechanicLinkValue& link, const Vector3& position,
+                    const Quaternion& orientation, const Vector6& velocity)
+  { mMechanicLinkValue->setPosAndVel(link, position, orientation, velocity); }
+  void setAccel(const MechanicLinkValue& link, const Vector6& accel)
+  { mMechanicLinkValue->setAccel(link, accel); }
+ 
+private:
+  SharedPtr<MechanicLinkValue> mMechanicLinkValue;
+};
+
+class ParentLink {
+public:
+  ParentLink(MechanicLinkValue* mechanicLinkValue = 0) :
+    mMechanicLinkValue(mechanicLinkValue),
+    mLinkRelPos(Vector3::zeros())
+  { }
+
+  bool isConnected() const
+  { return mMechanicLinkValue; }
+
+  const Vector3& getLinkRelPos() const
+  {
+    OpenFDMAssert(isConnected());
+    return mLinkRelPos;
+  }
+
+  const MechanicLinkValue& getMechanicLinkValue() const
+  {
+    OpenFDMAssert(isConnected());
+    return *mMechanicLinkValue;
+  }
+  MechanicLinkValue& getMechanicLinkValue()
+  {
+    OpenFDMAssert(isConnected());
+    return *mMechanicLinkValue;
+  }
+
+  CoordinateSystem getCoordinateSystem() const
+  {
+    OpenFDMAssert(isConnected());
+    return mMechanicLinkValue->getCoordinateSystem().getRelative(mLinkRelPos);
+  }
+
+  CoordinateSystem getRelativeCoordinateSystem(const ParentLink& link) const
+  {
+    return getCoordinateSystem().toLocal(link.getCoordinateSystem());
+  }
+
+  Vector3 getRefPos() const
+  {
+    OpenFDMAssert(isConnected());
+    return mMechanicLinkValue->getCoordinateSystem().toReference(mLinkRelPos);
+  }
+
+  Vector6 getSpVelAtLink() const
+  {
+    OpenFDMAssert(isConnected());
+    return mMechanicLinkValue->getSpVel();
+  }
+  Vector6 getSpVel() const
+  {
+    OpenFDMAssert(isConnected());
+    return motionTo(mLinkRelPos, mMechanicLinkValue->getSpVel());
+  }
+  Vector6 getRefVel() const
+  {
+    OpenFDMAssert(isConnected());
+    return mMechanicLinkValue->getReferenceVelocity(mLinkRelPos);
+  }
+
+  void setDesignPosition(const Vector3& position)
+  {
+    OpenFDMAssert(isConnected());
+    mLinkRelPos = position - mMechanicLinkValue->getDesignPosition();
+  }
+
+  void applyBodyForce(const Vector6& force)
+  {
+    OpenFDMAssert(isConnected());
+    mMechanicLinkValue->applyForce(mLinkRelPos, force);
+  }
+  void applyBodyForce(const Vector3& bodyPosition, const Vector6& force)
+  {
+    OpenFDMAssert(isConnected());
+    mMechanicLinkValue->applyForce(bodyPosition + mLinkRelPos, force);
+  }
+  
+  void applyBodyForce(const Vector3& force)
+  {
+    OpenFDMAssert(isConnected());
+    mMechanicLinkValue->applyForce(mLinkRelPos, force);
+  }
+  void applyBodyForce(const Vector3& bodyPosition, const Vector3& force)
+  {
+    OpenFDMAssert(isConnected());
+    mMechanicLinkValue->applyForce(bodyPosition + mLinkRelPos, force);
+  }
+  
+  void applyBodyTorque(const Vector3& torque)
+  {
+    OpenFDMAssert(isConnected());
+    mMechanicLinkValue->applyTorque(torque);
+  }
+
+  void applyForceAtLink(const Vector6& force)
+  {
+    OpenFDMAssert(isConnected());
+    mMechanicLinkValue->applyForce(force);
+  }
+  void addForceAtLink(const Vector6& force)
+  {
+    OpenFDMAssert(isConnected());
+    mMechanicLinkValue->addForce(force);
+  }
+  void addInertiaAtLink(const SpatialInertia& inertia)
+  {
+    OpenFDMAssert(isConnected());
+    mMechanicLinkValue->addInertia(inertia);
+  }
+
+private:
+  SharedPtr<MechanicLinkValue> mMechanicLinkValue;
+  Vector3 mLinkRelPos;
+};
+
 } // namespace OpenFDM
 
 #endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2009-01-03 14:06:38 UTC (rev 914)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2009-01-04 09:59:43 UTC (rev 915)
@@ -31,17 +31,16 @@
             PortValueList& portValueList) :
       MechanicContext(environment),
       mPortValueList(portValueList),
-      mLinkRelPos(Vector3::zeros())
+      mLink(portValueList.getPortValue(interact->mMechanicLink))
     {
-      mMechanicLinkValue = portValueList.getPortValue(interact->mMechanicLink);
-      OpenFDMAssert(mMechanicLinkValue);
+      OpenFDMAssert(mLink.isConnected());
     }
     virtual ~Context() {}
     
     virtual const SingleLinkInteract& getNode() const = 0;
 
     virtual void initDesignPosition()
-    { mLinkRelPos = getNode().getPosition() - getLink().getDesignPosition(); }
+    { mLink.setDesignPosition(getNode().getPosition()); }
   
     bool alloc()
     {
@@ -70,31 +69,9 @@
     virtual const PortValue* getPortValue(const PortInfo& portInfo) const
     {  return mPortValueList.getPortValue(portInfo); }
     
-    MechanicLinkValue& getLink() const
-    { return *mMechanicLinkValue; }
+    ParentLink& getLink()
+    { return mLink; }
 
-    const Vector3& getLinkRelPos() const
-    { return mLinkRelPos; }
-
-    /// FIXME: Hmm, may be some kind of MechanicLinkHandle class that has a
-    /// link value and these methods???
-    void applyBodyForce(const Vector6& force)
-    { mMechanicLinkValue->applyForce(mLinkRelPos, force); }
-    void applyBodyForce(const Vector3& bodyPosition, const Vector6& force)
-    { mMechanicLinkValue->applyForce(bodyPosition + mLinkRelPos, force); }
-    void applyBodyForceAtLink(const Vector6& force)
-    { mMechanicLinkValue->applyForce(force); }
-
-    void applyBodyForce(const Vector3& force)
-    { mMechanicLinkValue->applyForce(mLinkRelPos, force); }
-    void applyBodyForce(const Vector3& bodyPosition, const Vector3& force)
-    { mMechanicLinkValue->applyForce(bodyPosition + mLinkRelPos, force); }
-    void applyBodyForceAtLink(const Vector3& force)
-    { mMechanicLinkValue->applyForce(force); }
-
-    void applyBodyTorque(const Vector3& torque)
-    { mMechanicLinkValue->applyTorque(torque); }
-
   protected:
     // PortValues
     PortValueList mPortValueList;
@@ -106,8 +83,7 @@
     DiscreteStateValueVector mDiscreteState;
     
   private:
-    SharedPtr<MechanicLinkValue> mMechanicLinkValue;
-    Vector3 mLinkRelPos;
+    ParentLink mLink;
   };
   
   /// Set the position of the sensor in design coordinates

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2009-01-03 14:06:38 UTC (rev 914)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2009-01-04 09:59:43 UTC (rev 915)
@@ -14,8 +14,7 @@
   DEF_OPENFDM_PROPERTY(Vector3, Axis, Serialized)
   DEF_OPENFDM_PROPERTY(Real, WheelRadius, Serialized)
   DEF_OPENFDM_PROPERTY(Real, SpringConstant, Serialized)
-/// FIXME want to have similar names than with linearspringdamper
-  DEF_OPENFDM_PROPERTY(Real, SpringDamping, Serialized)
+  DEF_OPENFDM_PROPERTY(Real, DampingConstant, Serialized)
   DEF_OPENFDM_PROPERTY(Real, FrictionCoeficient, Serialized)
   END_OPENFDM_OBJECT_DEF
 
@@ -33,11 +32,9 @@
 
   virtual void articulation(const Task& task)
   {
-    const CoordinateSystem& cs = getLink().getCoordinateSystem();
-
     // The coordinate system at the hub.
-    CoordinateSystem hubCoordinateSystem(cs.getRelative(getLinkRelPos()));
-    
+    CoordinateSystem hubCoordinateSystem(getLink().getCoordinateSystem());
+
     // Get the ground values in the hub coordinate system.
     GroundValues groundValues =
       getEnvironment().getGroundPlane(hubCoordinateSystem, task.getTime());
@@ -56,12 +53,9 @@
     
     Vector3 contactPoint = distHubGround*down;
     
-    // The velocity of the ground patch in the current frame.
-    Vector6 groundVel = groundValues.vel;
-    // Now get the relative velocity of the ground wrt the hub
-    Vector6 relVel = getLink().getReferenceVelocity(getLinkRelPos()) - groundVel;
+    // The relative velocity of the ground wrt the contact point
+    Vector6 relVel = getLink().getRefVel() - groundValues.vel;
     
-    
     // The velocity perpandicular to the plane.
     // Positive when the contact spring is compressed,
     // negative when decompressed.
@@ -83,7 +77,7 @@
     Vector3 rotVel = relVel.getAngular();
     real_type omegaR = dot(rotVel, mWheelContact->getAxis()) * distHubGround;
     
-    //   Log(Model,Error) << trans(groundVel) << " "
+    //   Log(Model,Error) << trans(groundValues.vel) << " "
     //                    << trans(wheelVel) << " "
     //                    << omegaR << " "
     //                    << compressLength << " "
@@ -105,7 +99,7 @@
     Vector3 force = fricForce(0)*forward + fricForce(1)*side - normForce*down;
     
     // We don't have an angular moment.
-    applyBodyForce(contactPoint, force);
+    getLink().applyBodyForce(contactPoint, force);
   }
 
 private:
@@ -118,7 +112,7 @@
 {
   mWheelRadius = 0.3;
   mSpringConstant = 0;
-  mSpringDamping = 0;
+  mDampingConstant = 0;
   mFrictionCoeficient = 0.8;
 }
 
@@ -136,8 +130,7 @@
 real_type
 WheelContact::computeNormalForce(real_type compressLen, real_type compressVel) const
 {
-  return compressLen*mSpringConstant
-    + mSpringDamping*min(compressVel, static_cast<real_type>(0));
+  return compressLen*mSpringConstant + mDampingConstant*compressVel;
 }
 
 Vector2

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h	2009-01-03 14:06:38 UTC (rev 914)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h	2009-01-04 09:59:43 UTC (rev 915)
@@ -47,10 +47,10 @@
   const real_type& getSpringConstant(void) const
   { return mSpringConstant; }
 
-  void setSpringDamping(const real_type& springDamping)
-  { mSpringDamping = springDamping; }
-  const real_type& getSpringDamping(void) const
-  { return mSpringDamping; }
+  void setDampingConstant(const real_type& dampingConstant)
+  { mDampingConstant = dampingConstant; }
+  const real_type& getDampingConstant(void) const
+  { return mDampingConstant; }
 
   void setFrictionCoeficient(const real_type& frictionCoeficient)
   { mFrictionCoeficient = frictionCoeficient; }
@@ -62,7 +62,7 @@
   real_type mWheelRadius;
 
   real_type mSpringConstant;
-  real_type mSpringDamping;
+  real_type mDampingConstant;
   real_type mFrictionCoeficient;
 };
 

Modified: branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2009-01-03 14:06:38 UTC (rev 914)
+++ branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2009-01-04 09:59:43 UTC (rev 915)
@@ -137,7 +137,7 @@
   WheelContact* wheelContact = new WheelContact("Wheel Contact");
   wheelContact->setWheelRadius(0.3);
   wheelContact->setSpringConstant(50000);
-  wheelContact->setSpringDamping(sqrt(wheelContact->getSpringConstant())/10);
+  wheelContact->setDampingConstant(sqrt(wheelContact->getSpringConstant())/10);
   group->addChild(wheelContact);
   rimAndTire->addLink("link2");
   group->connect(rimAndTire->getPort("link2"), wheelContact->getPort("link"));



From frohlich at mail.berlios.de  Sun Jan  4 12:12:28 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 4 Jan 2009 12:12:28 +0100
Subject: [OpenFDM-svn] r916 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901041112.n04BCS8Q021576@sheep.berlios.de>

Author: frohlich
Date: 2009-01-04 12:12:27 +0100 (Sun, 04 Jan 2009)
New Revision: 916

Removed:
   branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
Log:
Add ExternalForce functionality to the Sensor.
Remove the old ExternalForce model.

M    src/OpenFDM/Makefile.am
D    src/OpenFDM/ExternalForce.cpp
D    src/OpenFDM/ExternalForce.h
M    src/OpenFDM/Sensor.cpp
M    src/OpenFDM/Sensor.h


Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp	2009-01-04 09:59:43 UTC (rev 915)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.cpp	2009-01-04 11:12:27 UTC (rev 916)
@@ -1,59 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#include "ExternalForce.h"
-
-#include "MechanicLinkValue.h"
-#include "NumericPortValue.h"
-#include "PortValueList.h"
-#include "Task.h"
-
-namespace OpenFDM {
-
-BEGIN_OPENFDM_OBJECT_DEF(ExternalForce, Sensor)
-  DEF_OPENFDM_PROPERTY(Bool, LocalCoordinates, Serialized)
-  END_OPENFDM_OBJECT_DEF
-
-ExternalForce::ExternalForce(const std::string& name) :
-  Sensor(name),
-  mForcePort(this, "force", Size(6, 1), true),
-  mLocalCoordinates(true)
-{
-}
-
-ExternalForce::~ExternalForce(void)
-{
-}
-
-void
-ExternalForce::articulation(const Task&, const Environment&,
-                            const ContinousStateValueVector&,
-                            PortValueList& portValues) const
-{
-  // FIXME, for now relative position
-  Vector3 position = mPosition - portValues[mMechanicLink].getDesignPosition();
-  if (mLocalCoordinates) {
-    Vector6 force = portValues[mForcePort];
-    portValues[mMechanicLink].applyForce(position, force);
-  } else {
-    const Frame& frame = portValues[mMechanicLink].getFrame();
-    Vector6 force = portValues[mForcePort];
-    force = forceTo(Vector3::zeros(), frame.getRefOrientation(), force);
-    portValues[mMechanicLink].applyForce(position, force);
-  }
-}
-
-void
-ExternalForce::setLocalCoordinates(bool localCoordinates)
-{
-  mLocalCoordinates = localCoordinates;
-}
-
-bool
-ExternalForce::getLocalCoordinates() const
-{
-  return mLocalCoordinates;
-}
-
-} // namespace OpenFDM

Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.h	2009-01-04 09:59:43 UTC (rev 915)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalForce.h	2009-01-04 11:12:27 UTC (rev 916)
@@ -1,33 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#ifndef OpenFDM_ExternalForce_H
-#define OpenFDM_ExternalForce_H
-
-#include "Sensor.h"
-#include "MatrixInputPort.h"
-
-namespace OpenFDM {
-
-class ExternalForce : public Sensor {
-  OPENFDM_OBJECT(ExternalForce, Sensor);
-public:
-  ExternalForce(const std::string& name);
-  virtual ~ExternalForce(void);
-
-  virtual void articulation(const Task&, const Environment&,
-                            const ContinousStateValueVector&,
-                            PortValueList& portValues) const;
-
-  void setLocalCoordinates(bool localCoordinates);
-  bool getLocalCoordinates() const;
-
-private:
-  MatrixInputPort mForcePort;
-  bool mLocalCoordinates;
-};
-
-} // namespace OpenFDM
-
-#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2009-01-04 09:59:43 UTC (rev 915)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2009-01-04 11:12:27 UTC (rev 916)
@@ -206,7 +206,6 @@
   Delay.h \
   DiscBrake.h \
   DiscreteIntegrator.h \
-  ExternalForce.h \
   FixedRootJoint.h \
   Force.h \
   Gain.h \
@@ -275,7 +274,6 @@
   Contact.cpp \
   DoubleLinkInteract.cpp \
   Joint.cpp \
-  ExternalForce.cpp \
   FixedRootJoint.cpp \
   InternalSensor.cpp \
   Mass.cpp \

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2009-01-04 09:59:43 UTC (rev 915)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.cpp	2009-01-04 11:12:27 UTC (rev 916)
@@ -155,6 +155,33 @@
 }
 
 void
+Sensor::articulation(const Task&, const Environment&,
+                     const ContinousStateValueVector&,
+                     PortValueList& portValues) const
+{
+  const Frame& frame = portValues[mMechanicLink].getFrame();
+  // FIXME, for now relative position
+  Vector3 position = mPosition - portValues[mMechanicLink].getDesignPosition();
+  
+  if (getEnableBodyForce()) {
+    Vector3 force = portValues[mBodyForcePort];
+    portValues[mMechanicLink].applyForce(position, force);
+  }
+  if (getEnableBodyTorque()) {
+    Vector3 torque = portValues[mBodyTorquePort];
+    portValues[mMechanicLink].applyTorque(torque);
+  }
+  if (getEnableGlobalForce()) {
+    Vector3 force = portValues[mGlobalForcePort];
+    portValues[mMechanicLink].applyForce(position, frame.rotFromRef(force));
+  }
+  if (getEnableGlobalTorque()) {
+    Vector3 torque = portValues[mGlobalTorquePort];
+    portValues[mMechanicLink].applyTorque(frame.rotFromRef(torque));
+  }
+}
+
+void
 Sensor::acceleration(const Task&, const Environment& environment,
                      const ContinousStateValueVector&,
                      PortValueList& portValues) const
@@ -425,6 +452,74 @@
 }
 
 void
+Sensor::setEnableBodyForce(bool enable)
+{
+  if (enable == getEnableBodyForce())
+    return;
+  if (enable)
+    mBodyForcePort = MatrixInputPort(this, "bodyForce", Size(3, 1), true);
+  else
+    mBodyForcePort.clear();
+}
+
+bool
+Sensor::getEnableBodyForce() const
+{
+  return !mBodyForcePort.empty();
+}
+
+void
+Sensor::setEnableBodyTorque(bool enable)
+{
+  if (enable == getEnableBodyTorque())
+    return;
+  if (enable)
+    mBodyTorquePort = MatrixInputPort(this, "bodyTorque", Size(3, 1), true);
+  else
+    mBodyTorquePort.clear();
+}
+
+bool
+Sensor::getEnableBodyTorque() const
+{
+  return !mBodyTorquePort.empty();
+}
+
+void
+Sensor::setEnableGlobalForce(bool enable)
+{
+  if (enable == getEnableGlobalForce())
+    return;
+  if (enable)
+    mGlobalForcePort = MatrixInputPort(this, "globalForce", Size(3, 1), true);
+  else
+    mGlobalForcePort.clear();
+}
+
+bool
+Sensor::getEnableGlobalForce() const
+{
+  return !mGlobalForcePort.empty();
+}
+
+void
+Sensor::setEnableGlobalTorque(bool enable)
+{
+  if (enable == getEnableGlobalTorque())
+    return;
+  if (enable)
+    mGlobalTorquePort = MatrixInputPort(this, "globalTorque", Size(3, 1), true);
+  else
+    mGlobalTorquePort.clear();
+}
+
+bool
+Sensor::getEnableGlobalTorque() const
+{
+  return !mGlobalTorquePort.empty();
+}
+
+void
 Sensor::setEnableAllOutputs(bool enable)
 {
   setEnablePosition(enable);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2009-01-04 09:59:43 UTC (rev 915)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Sensor.h	2009-01-04 11:12:27 UTC (rev 916)
@@ -6,6 +6,7 @@
 #define OpenFDM_Sensor_H
 
 #include "SingleLinkInteract.h"
+#include "MatrixInputPort.h"
 #include "MatrixOutputPort.h"
 #include "MechanicLink.h"
 #include "RealOutputPort.h"
@@ -28,8 +29,7 @@
                         PortValueList&) const;
   virtual void articulation(const Task&, const Environment& environment,
                             const ContinousStateValueVector&,
-                            PortValueList&) const
-  { }
+                            PortValueList&) const;
   virtual void acceleration(const Task&, const Environment&,
                             const ContinousStateValueVector&,
                             PortValueList&) const;
@@ -108,6 +108,28 @@
   bool getEnableAboveGroundLevel() const;
 
 
+  /// Set availabilty of the body force input port
+  void setEnableBodyForce(bool enable);
+  /// Get availabilty of the body force input port
+  bool getEnableBodyForce() const;
+
+  /// Set availabilty of the body torque input port
+  void setEnableBodyTorque(bool enable);
+  /// Get availabilty of the body torque input port
+  bool getEnableBodyTorque() const;
+
+
+  /// Set availabilty of the global force input port
+  void setEnableGlobalForce(bool enable);
+  /// Get availabilty of the global force input port
+  bool getEnableGlobalForce() const;
+
+  /// Set availabilty of the global torque input port
+  void setEnableGlobalTorque(bool enable);
+  /// Get availabilty of the global torque input port
+  bool getEnableGlobalTorque() const;
+
+
   /// Set availabilty of all output ports
   /// This is mostly for convinience in testing
   void setEnableAllOutputs(bool enable);
@@ -132,6 +154,11 @@
 
   RealOutputPort mAltitudePort;
   RealOutputPort mAboveGroundLevelPort;
+
+  MatrixInputPort mBodyForcePort;
+  MatrixInputPort mBodyTorquePort;
+  MatrixInputPort mGlobalForcePort;
+  MatrixInputPort mGlobalTorquePort;
 };
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Sun Jan  4 12:29:23 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 4 Jan 2009 12:29:23 +0100
Subject: [OpenFDM-svn] r918 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901041129.n04BTNeY022502@sheep.berlios.de>

Author: frohlich
Date: 2009-01-04 12:29:22 +0100 (Sun, 04 Jan 2009)
New Revision: 918

Removed:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Force.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Force.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
Log:
Remove old Force model family.

D    OpenFDM/Force.cpp
M    OpenFDM/Makefile.am
D    OpenFDM/Force.h


Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/Force.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Force.cpp	2009-01-04 11:27:02 UTC (rev 917)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Force.cpp	2009-01-04 11:29:22 UTC (rev 918)
@@ -1,37 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#include "Force.h"
-
-namespace OpenFDM {
-
-BEGIN_OPENFDM_OBJECT_DEF(Force, Interact)
-  END_OPENFDM_OBJECT_DEF
-
-// FIXME
-BEGIN_OPENFDM_OBJECT_DEF(ExternalForce, Force)
-  DEF_OPENFDM_PROPERTY(Vector3, Position, Serialized)
-  DEF_OPENFDM_PROPERTY(Quaternion, Orientation, Serialized)
-  END_OPENFDM_OBJECT_DEF
-
-BEGIN_OPENFDM_OBJECT_DEF(InternalForce, Force)
-  DEF_OPENFDM_PROPERTY(Vector3, Position0, Serialized)
-  DEF_OPENFDM_PROPERTY(Quaternion, Orientation0, Serialized)
-  DEF_OPENFDM_PROPERTY(Vector3, Position1, Serialized)
-  DEF_OPENFDM_PROPERTY(Quaternion, Orientation1, Serialized)
-  END_OPENFDM_OBJECT_DEF
-
-BEGIN_OPENFDM_OBJECT_DEF(LineForce, InternalForce)
-  END_OPENFDM_OBJECT_DEF
-
-Force::Force(const std::string& name, unsigned numParents) :
-  Interact(name, numParents)
-{
-}
-
-Force::~Force(void)
-{
-}
-
-} // namespace OpenFDM

Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/Force.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Force.h	2009-01-04 11:27:02 UTC (rev 917)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Force.h	2009-01-04 11:29:22 UTC (rev 918)
@@ -1,174 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#ifndef OpenFDM_Force_H
-#define OpenFDM_Force_H
-
-#include "Assert.h"
-#include "Object.h"
-#include "Vector.h"
-#include "Frame.h"
-#include "RigidBody.h"
-#include "Interact.h"
-
-namespace OpenFDM {
-
-class Force : public Interact {
-  OPENFDM_OBJECT(Force, Interact);
-public:
-  Force(const std::string& name, unsigned numParents);
-  virtual ~Force(void);
-
-};
-
-class InternalForce : public Force {
-  OPENFDM_OBJECT(InternalForce, Force);
-public:
-  InternalForce(const std::string& name) :
-    Force(name, 2),
-    mForce(0, 0, 0, 0, 0, 0)
-  {
-    mMountFrame[0] = new FreeFrame(name  + "<0>");
-    mMountFrame[1] = new FreeFrame(name  + "<1>");
-  }
-  virtual ~InternalForce(void) {}
-
-  virtual void recheckTopology(void)
-  {
-    if (!getParentRigidBody(0) || !getParentRigidBody(1))
-      return;
-  
-    // check for the frames
-    Frame* frame0 = getParentRigidBody(0)->getFrame();
-    if (!frame0)
-      return;
-    if (!mMountFrame[0]->isDirectChildFrameOf(frame0))
-      frame0->addChildFrame(mMountFrame[0]);
-    Frame* frame1 = getParentRigidBody(1)->getFrame();
-    if (!frame1)
-      return;
-    if (!mMountFrame[1]->isDirectChildFrameOf(frame1))
-      frame1->addChildFrame(mMountFrame[1]);
-  }
-
-  virtual void interactWith(RigidBody* rigidBody)
-  {
-    // We assume that the given force is a positive force in the
-    // frame 0's coordinates
-    if (rigidBody->getFrame()->isDirectParentFrameOf(mMountFrame[0])) {
-      Vector6 parentForce = mMountFrame[0]->forceToParent(mForce);
-      rigidBody->applyForce(parentForce);
-    } else if (rigidBody->getFrame()->isDirectParentFrameOf(mMountFrame[1])) {
-      Rotation relOr = mMountFrame[0]->getRelOrientation(mMountFrame[1]);
-      Vector6 force2(relOr.transform(mForce.getAngular()),
-                     relOr.transform(mForce.getLinear()));
-      Vector6 parentForce = mMountFrame[1]->forceToParent(force2);
-      rigidBody->applyForce(-parentForce);
-    }
-  }
-
-  const Vector3& getPosition0(void) const
-  { return mMountFrame[0]->getPosition(); }
-  void setPosition0(const Vector3& pos)
-  { mMountFrame[0]->setPosition(pos); }
-
-  const Quaternion& getOrientation0(void) const
-  { return mMountFrame[0]->getOrientation(); }
-  void setOrientation0(const Quaternion& pos)
-  { mMountFrame[0]->setOrientation(pos); }
-
-  const Vector3& getPosition1(void) const
-  { return mMountFrame[1]->getPosition(); }
-  void setPosition1(const Vector3& pos)
-  { mMountFrame[1]->setPosition(pos); }
-
-  const Quaternion& getOrientation1(void) const
-  { return mMountFrame[1]->getOrientation(); }
-  void setOrientation1(const Quaternion& pos)
-  { mMountFrame[1]->setOrientation(pos); }
-
-protected:
-  SharedPtr<FreeFrame> mMountFrame[2];
-  Vector6 mForce;
-};
-
-class LineForce : public InternalForce {
-  OPENFDM_OBJECT(LineForce, InternalForce);
-public:
-  LineForce(const std::string& name) :
-    InternalForce(name)
-  {
-    addOutputPort("relPos", this, &LineForce::getRelPos);
-    addOutputPort("relVel", this, &LineForce::getRelVel);
-
-    setNumInputPorts(1);
-    setInputPortName(0, "force");
-  }
-  virtual ~LineForce(void) {}
-
-  virtual bool init(void)
-  {
-    mForcePort = getInputPort("force")->toRealPortHandle();
-    if (!mForcePort.isConnected()) {
-      Log(Model, Error) << "Initialization of LineForce model \"" << getName()
-                        << "\" failed: Input port \"" << getInputPortName(0)
-                        << "\" is not connected!" << endl;
-      return false;
-    }
-    return InternalForce::init();
-  }
-  virtual void output(const TaskInfo& taskInfo)
-  {
-    Vector3 dir;
-    // FIXME: this is costly, must do something aprioriate with
-    // models/ports
-    Vector3 relPos = mMountFrame[0]->getRelPosition(mMountFrame[1]);
-    // if we have really reached the zero position, we must have the full
-    // speed in exactly the relPos direction.
-    real_type nrmRelPos = norm(relPos);
-    if (nrmRelPos <= Limits<real_type>::min()) {
-      Vector6 relVel6 = mMountFrame[0]->getRelVel(mMountFrame[1]);
-      dir = normalize(relVel6.getLinear());
-    } else
-      dir = (1/nrmRelPos)*relPos;
-    // Since we assume positive input forces to push the two attached
-    // RigidBodies, we need that minus sign to negate the current position
-    // offset
-    mForce = Vector6(Vector3::zeros(), (-mForcePort.getRealValue())*dir);
-  }
-
-  const real_type& getRelPos(void) const
-  {
-    // FIXME: this is costly, must do something aprioriate with
-    // models/ports
-    mRelPos = norm(mMountFrame[0]->getRelPosition(mMountFrame[1]));
-    return mRelPos;
-  }
-  const real_type& getRelVel(void) const
-  {
-    // FIXME: this is costly, must do something aprioriate with
-    // models/ports
-    Vector3 relPos = mMountFrame[0]->getRelPosition(mMountFrame[1]);
-    Vector6 relVel6 = mMountFrame[0]->getRelVel(mMountFrame[1]);
-    // if we have really reached the zero position, we must have the full
-    // speed in exactly the relPos direction.
-    real_type nrmRelPos = norm(relPos);
-    if (nrmRelPos <= Limits<real_type>::min())
-      mRelVel = norm(relVel6.getLinear());
-    else
-      mRelVel = dot(relPos, relVel6.getLinear())/nrmRelPos;
-    return mRelVel;
-  }
-
-private:
-  mutable real_type mRelPos;
-  mutable real_type mRelVel;
-
-  /// The intput port which must provide the position
-  RealPortHandle mForcePort;
-};
-
-} // namespace OpenFDM
-
-#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2009-01-04 11:27:02 UTC (rev 917)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2009-01-04 11:29:22 UTC (rev 918)
@@ -208,7 +208,6 @@
   DiscreteIntegrator.h \
   ExternalInteract.h \
   FixedRootJoint.h \
-  Force.h \
   Gain.h \
   Input.h \
   Integrator.h \
@@ -289,7 +288,6 @@
   WheelContact.cpp
 
 #   AeroForce.cpp \
-#   Force.cpp \
 #   SimpleGear.cpp \
 #   Tank.cpp
 



From frohlich at mail.berlios.de  Sun Jan  4 13:04:11 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 4 Jan 2009 13:04:11 +0100
Subject: [OpenFDM-svn] r919 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901041204.n04C4BOF021118@sheep.berlios.de>

Author: frohlich
Date: 2009-01-04 13:04:10 +0100 (Sun, 04 Jan 2009)
New Revision: 919

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
Log:
Sepearate out Mechanic model headers.

M    src/OpenFDM/Makefile.am


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2009-01-04 11:29:22 UTC (rev 918)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2009-01-04 12:04:10 UTC (rev 919)
@@ -193,53 +193,33 @@
 
 
 OpenFDMModelsHEADERS = \
-  AeroForce.h \
   AirSpring.h \
   AtmosphereSTD1976.h \
   Bias.h \
   BinaryFunction.h \
   BreakPointLookup.h \
-  CartesianJoint.h \
   ConstModel.h \
-  Contact.h \
   DeadBand.h \
   Delay.h \
   DiscBrake.h \
   DiscreteIntegrator.h \
-  ExternalInteract.h \
-  FixedRootJoint.h \
   Gain.h \
   Input.h \
   Integrator.h \
-  InternalInteract.h \
-  Joint.h \
-  Launchbar.h \
   LinearSpringDamper.h \
-  Mass.h \
   MaxModel.h \
   MinModel.h \
-  MobileRootJoint.h \
   Output.h \
   Product.h \
-  PrismaticJoint.h \
-  RevoluteActuator.h \
-  RevoluteJoint.h \
-  RotationalJoint.h \
   Saturation.h \
-  SimpleContact.h \
   SimpleDirectModel.h \
-  SimpleGear.h \
   SimulationTime.h \
   Summer.h \
   Table.h \
-  Tailhook.h \
-  Tank.h \
   TimeDerivative.h \
   TransferFunction.h \
   UnaryFunction.h \
-  UnitConversion.h \
-  UniversalJoint.h \
-  WheelContact.h
+  UnitConversion.h
 
 OpenFDMModelsSOURCES = \
   AirSpring.cpp \
@@ -269,6 +249,26 @@
   UnaryFunction.cpp \
   UnitConversion.cpp
 
+OpenFDMMechanicHEADERS = \
+  AeroForce.h \
+  CartesianJoint.h \
+  Contact.h \
+  ExternalInteract.h \
+  FixedRootJoint.h \
+  InternalInteract.h \
+  Joint.h \
+  Mass.h \
+  MobileRootJoint.h \
+  PrismaticJoint.h \
+  RevoluteActuator.h \
+  RevoluteJoint.h \
+  RotationalJoint.h \
+  SimpleContact.h \
+  SimpleGear.h \
+  Tank.h \
+  UniversalJoint.h \
+  WheelContact.h
+
 OpenFDMMechanicSOURCES = \
   Contact.cpp \
   DoubleLinkInteract.cpp \
@@ -295,5 +295,11 @@
 #   Tailhook.cpp \
 #
 
-nobase_OpenFDMinclude_HEADERS = $(OpenFDMCoreHEADERS) $(OpenFDMModelsHEADERS)
-libOpenFDM_la_SOURCES = $(OpenFDMCoreSOURCES) $(OpenFDMModelsSOURCES) $(OpenFDMMechanicSOURCES)
+nobase_OpenFDMinclude_HEADERS = \
+  $(OpenFDMCoreHEADERS) \
+  $(OpenFDMModelsHEADERS) \
+  $(OpenFDMMechanicHEADERS)
+libOpenFDM_la_SOURCES = \
+  $(OpenFDMCoreSOURCES) \
+  $(OpenFDMModelsSOURCES) \
+  $(OpenFDMMechanicSOURCES)



From frohlich at mail.berlios.de  Sun Jan  4 15:03:37 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 4 Jan 2009 15:03:37 +0100
Subject: [OpenFDM-svn] r920 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901041403.n04E3bi7026256@sheep.berlios.de>

Author: frohlich
Date: 2009-01-04 15:03:31 +0100 (Sun, 04 Jan 2009)
New Revision: 920

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h
Log:
Improove ExternalInteract sensing.

M    src/OpenFDM/Frame.h
M    src/OpenFDM/ExternalInteract.h
M    src/OpenFDM/ExternalInteract.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.cpp	2009-01-04 12:04:10 UTC (rev 919)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.cpp	2009-01-04 14:03:31 UTC (rev 920)
@@ -15,10 +15,14 @@
   DEF_OPENFDM_PROPERTY(Bool, EnablePosition, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnableOrientation, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnableEulerAngles, Serialized)
-  DEF_OPENFDM_PROPERTY(Bool, EnableLinearVelocity, Serialized)
-  DEF_OPENFDM_PROPERTY(Bool, EnableAngularVelocity, Serialized)
-  DEF_OPENFDM_PROPERTY(Bool, EnableCentrifugalAcceleration, Serialized)
-  DEF_OPENFDM_PROPERTY(Bool, EnableWindVelocity, Serialized)
+  DEF_OPENFDM_PROPERTY(Bool, EnableBodyLinearVelocity, Serialized)
+  DEF_OPENFDM_PROPERTY(Bool, EnableBodyAngularVelocity, Serialized)
+  DEF_OPENFDM_PROPERTY(Bool, EnableGlobalLinearVelocity, Serialized)
+  DEF_OPENFDM_PROPERTY(Bool, EnableGlobalAngularVelocity, Serialized)
+  DEF_OPENFDM_PROPERTY(Bool, EnableBodyCentrifugalAcceleration, Serialized)
+  DEF_OPENFDM_PROPERTY(Bool, EnableBodyLoad, Serialized)
+  DEF_OPENFDM_PROPERTY(Bool, EnableBodyWindVelocity, Serialized)
+  DEF_OPENFDM_PROPERTY(Bool, EnableGlobalWindVelocity, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnableTemperature, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnablePressure, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, EnableDensity, Serialized)
@@ -99,22 +103,38 @@
     portValues[mEulerAnglesPort] = frame.getRefOrientation().getEuler();
 
   // Velocity related sensing
-  bool enableAngularVelocity = getEnableAngularVelocity();
-  bool enableLinearVelocity = getEnableLinearVelocity();
-  bool enableWindVelocity = getEnableWindVelocity();
-  if (enableAngularVelocity || enableLinearVelocity || enableWindVelocity) {
-    Vector6 refVelocity = frame.getRefVelAt(position);
-    if (enableAngularVelocity)
-      portValues[mAngularVelocityPort] = refVelocity.getAngular();
+  bool enableBodyAngularVelocity = getEnableBodyAngularVelocity();
+  bool enableGlobalAngularVelocity = getEnableGlobalAngularVelocity();
+  bool enableBodyLinearVelocity = getEnableBodyLinearVelocity();
+  bool enableGlobalLinearVelocity = getEnableGlobalLinearVelocity();
+  bool enableBodyWindVelocity = getEnableBodyWindVelocity();
+  bool enableGlobalWindVelocity = getEnableGlobalWindVelocity();
+  if (enableBodyAngularVelocity || enableBodyLinearVelocity
+      || enableGlobalAngularVelocity || enableGlobalLinearVelocity
+      || enableBodyWindVelocity || enableGlobalWindVelocity) {
+    Vector6 refVelocity = motionTo(position, frame.getRefVel());
+    if (enableBodyAngularVelocity)
+      portValues[mBodyAngularVelocityPort] = refVelocity.getAngular();
+    if (enableGlobalAngularVelocity)
+      portValues[mGlobalAngularVelocityPort]
+        = frame.rotToRef(refVelocity.getAngular());
     
-    if (enableLinearVelocity)
-      portValues[mLinearVelocityPort] = refVelocity.getLinear();
+    if (enableBodyLinearVelocity)
+      portValues[mBodyLinearVelocityPort] = refVelocity.getLinear();
+    if (enableGlobalLinearVelocity)
+      portValues[mGlobalLinearVelocityPort]
+        = frame.rotToRef(refVelocity.getLinear());
 
     // Wind sensing
-    if (enableWindVelocity) {
+    if (enableBodyWindVelocity || enableGlobalWindVelocity) {
       Vector6 wind = environment.getWindVelocity(task.getTime(), position);
+      wind = Vector6(frame.rotFromRef(wind.getAngular()),
+                     frame.rotFromRef(wind.getLinear()));
       wind -= refVelocity;
-      portValues[mWindVelocityPort] = frame.rotFromRef(wind.getLinear());
+      if (enableBodyWindVelocity)
+        portValues[mBodyWindVelocityPort] = wind.getLinear();
+      if (enableGlobalWindVelocity)
+        portValues[mGlobalWindVelocityPort] = frame.rotToRef(wind.getLinear());
     }
   }
 
@@ -191,22 +211,22 @@
   // FIXME, for now relative position
   Vector3 position = mPosition - portValues[mMechanicLink].getDesignPosition();
 
-  bool enableCentrifugalAcceleration = getEnableCentrifugalAcceleration();
-  bool enableLoad = getEnableLoad();
-  if (enableCentrifugalAcceleration || enableLoad) {
+  bool enableBodyCentrifugalAcceleration=getEnableBodyCentrifugalAcceleration();
+  bool enableBodyLoad = getEnableBodyLoad();
+  if (enableBodyCentrifugalAcceleration || enableBodyLoad) {
     Vector6 spatialVel = motionTo(position, frame.getSpVel());
     Vector6 spatialAccel = motionTo(position, frame.getSpAccel());
     Vector3 centrifugalAccel = spatialAccel.getLinear();
     centrifugalAccel += cross(spatialVel.getAngular(), spatialVel.getLinear());
 
-    if (enableCentrifugalAcceleration)
-      portValues[mCentrifugalAccelerationPort] = centrifugalAccel;
-    if (enableLoad) {
+    if (enableBodyCentrifugalAcceleration)
+      portValues[mBodyCentrifugalAccelerationPort] = centrifugalAccel;
+    if (enableBodyLoad) {
       // May be cache that from the velocity step??
       Vector3 refPosition = frame.posToRef(position);
       Vector3 gravity = environment.getGravityAcceleration(refPosition);
       gravity = frame.rotFromRef(gravity);
-      portValues[mLoadPort] = centrifugalAccel - gravity;
+      portValues[mBodyLoadPort] = centrifugalAccel - gravity;
     }
   }
 }
@@ -263,93 +283,149 @@
 }
 
 void
-ExternalInteract::setEnableLinearVelocity(bool enable)
+ExternalInteract::setEnableBodyLinearVelocity(bool enable)
 {
-  if (enable == getEnableLinearVelocity())
+  if (enable == getEnableBodyLinearVelocity())
     return;
   if (enable)
-    mLinearVelocityPort = MatrixOutputPort(this, "linearVelocity", Size(3, 1));
+    mBodyLinearVelocityPort
+      = MatrixOutputPort(this, "bodyLinearVelocity", Size(3, 1));
   else
-    mLinearVelocityPort.clear();
+    mBodyLinearVelocityPort.clear();
 }
 
 bool
-ExternalInteract::getEnableLinearVelocity() const
+ExternalInteract::getEnableBodyLinearVelocity() const
 {
-  return !mLinearVelocityPort.empty();
+  return !mBodyLinearVelocityPort.empty();
 }
 
 void
-ExternalInteract::setEnableAngularVelocity(bool enable)
+ExternalInteract::setEnableBodyAngularVelocity(bool enable)
 {
-  if (enable == getEnableAngularVelocity())
+  if (enable == getEnableBodyAngularVelocity())
     return;
   if (enable)
-    mAngularVelocityPort
-      = MatrixOutputPort(this, "angularVelocity", Size(3, 1));
+    mBodyAngularVelocityPort
+      = MatrixOutputPort(this, "bodyAngularVelocity", Size(3, 1));
   else
-    mAngularVelocityPort.clear();
+    mBodyAngularVelocityPort.clear();
 }
 
 bool
-ExternalInteract::getEnableAngularVelocity() const
+ExternalInteract::getEnableBodyAngularVelocity() const
 {
-  return !mAngularVelocityPort.empty();
+  return !mBodyAngularVelocityPort.empty();
 }
 
 void
-ExternalInteract::setEnableCentrifugalAcceleration(bool enable)
+ExternalInteract::setEnableGlobalLinearVelocity(bool enable)
 {
-  if (enable == getEnableCentrifugalAcceleration())
+  if (enable == getEnableGlobalLinearVelocity())
     return;
   if (enable)
-    mCentrifugalAccelerationPort
-      = MatrixOutputPort(this, "centrifugalAcceleration", Size(3, 1), true);
+    mGlobalLinearVelocityPort
+      = MatrixOutputPort(this, "globalLinearVelocity", Size(3, 1));
   else
-    mCentrifugalAccelerationPort.clear();
+    mGlobalLinearVelocityPort.clear();
 }
 
 bool
-ExternalInteract::getEnableCentrifugalAcceleration() const
+ExternalInteract::getEnableGlobalLinearVelocity() const
 {
-  return !mCentrifugalAccelerationPort.empty();
+  return !mGlobalLinearVelocityPort.empty();
 }
 
 void
-ExternalInteract::setEnableLoad(bool enable)
+ExternalInteract::setEnableGlobalAngularVelocity(bool enable)
 {
-  if (enable == getEnableLoad())
+  if (enable == getEnableGlobalAngularVelocity())
     return;
   if (enable)
-    mLoadPort = MatrixOutputPort(this, "load", Size(3, 1), true);
+    mGlobalAngularVelocityPort
+      = MatrixOutputPort(this, "globalAngularVelocity", Size(3, 1));
   else
-    mLoadPort.clear();
+    mGlobalAngularVelocityPort.clear();
 }
 
 bool
-ExternalInteract::getEnableLoad() const
+ExternalInteract::getEnableGlobalAngularVelocity() const
 {
-  return !mLoadPort.empty();
+  return !mGlobalAngularVelocityPort.empty();
 }
 
 void
-ExternalInteract::setEnableWindVelocity(bool enable)
+ExternalInteract::setEnableBodyCentrifugalAcceleration(bool enable)
 {
-  if (enable == getEnableWindVelocity())
+  if (enable == getEnableBodyCentrifugalAcceleration())
     return;
   if (enable)
-    mWindVelocityPort = MatrixOutputPort(this, "windVelocity", Size(3, 1));
+    mBodyCentrifugalAccelerationPort
+      = MatrixOutputPort(this, "bodyCentrifugalAcceleration", Size(3, 1), true);
   else
-    mWindVelocityPort.clear();
+    mBodyCentrifugalAccelerationPort.clear();
 }
 
 bool
-ExternalInteract::getEnableWindVelocity() const
+ExternalInteract::getEnableBodyCentrifugalAcceleration() const
 {
-  return !mWindVelocityPort.empty();
+  return !mBodyCentrifugalAccelerationPort.empty();
 }
 
 void
+ExternalInteract::setEnableBodyLoad(bool enable)
+{
+  if (enable == getEnableBodyLoad())
+    return;
+  if (enable)
+    mBodyLoadPort = MatrixOutputPort(this, "bodyLoad", Size(3, 1), true);
+  else
+    mBodyLoadPort.clear();
+}
+
+bool
+ExternalInteract::getEnableBodyLoad() const
+{
+  return !mBodyLoadPort.empty();
+}
+
+void
+ExternalInteract::setEnableBodyWindVelocity(bool enable)
+{
+  if (enable == getEnableBodyWindVelocity())
+    return;
+  if (enable)
+    mBodyWindVelocityPort
+      = MatrixOutputPort(this, "bodyWindVelocity", Size(3, 1));
+  else
+    mBodyWindVelocityPort.clear();
+}
+
+bool
+ExternalInteract::getEnableBodyWindVelocity() const
+{
+  return !mBodyWindVelocityPort.empty();
+}
+
+void
+ExternalInteract::setEnableGlobalWindVelocity(bool enable)
+{
+  if (enable == getEnableGlobalWindVelocity())
+    return;
+  if (enable)
+    mGlobalWindVelocityPort
+      = MatrixOutputPort(this, "globalWindVelocity", Size(3, 1));
+  else
+    mGlobalWindVelocityPort.clear();
+}
+
+bool
+ExternalInteract::getEnableGlobalWindVelocity() const
+{
+  return !mGlobalWindVelocityPort.empty();
+}
+
+void
 ExternalInteract::setEnableTemperature(bool enable)
 {
   if (enable == getEnableTemperature())
@@ -525,11 +601,14 @@
   setEnablePosition(enable);
   setEnableOrientation(enable);
   setEnableEulerAngles(enable);
-  setEnableLinearVelocity(enable);
-  setEnableAngularVelocity(enable);
-  setEnableCentrifugalAcceleration(enable);
-  setEnableLoad(enable);
-  setEnableWindVelocity(enable);
+  setEnableBodyLinearVelocity(enable);
+  setEnableBodyAngularVelocity(enable);
+  setEnableGlobalLinearVelocity(enable);
+  setEnableGlobalAngularVelocity(enable);
+  setEnableBodyCentrifugalAcceleration(enable);
+  setEnableBodyLoad(enable);
+  setEnableBodyWindVelocity(enable);
+  setEnableGlobalWindVelocity(enable);
   setEnableTemperature(enable);
   setEnablePressure(enable);
   setEnableDensity(enable);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.h	2009-01-04 12:04:10 UTC (rev 919)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.h	2009-01-04 14:03:31 UTC (rev 920)
@@ -49,33 +49,58 @@
   /// Get availabilty of the euler angles output port
   bool getEnableEulerAngles() const;
 
+
   /// Set availabilty of the linear velocity output port
-  void setEnableLinearVelocity(bool enable);
+  /// The output vector is measured in body coordinates
+  void setEnableBodyLinearVelocity(bool enable);
   /// Get availabilty of the linear velocity output port
-  bool getEnableLinearVelocity() const;
+  bool getEnableBodyLinearVelocity() const;
 
   /// Set availabilty of the angular velocity output port
-  void setEnableAngularVelocity(bool enable);
+  /// The output vector is measured in body coordinates
+  void setEnableBodyAngularVelocity(bool enable);
   /// Get availabilty of the angular velocity output port
-  bool getEnableAngularVelocity() const;
+  bool getEnableBodyAngularVelocity() const;
 
+  /// Set availabilty of the linear velocity output port
+  /// The output vector is measured in global coordinates
+  void setEnableGlobalLinearVelocity(bool enable);
+  /// Get availabilty of the linear velocity output port
+  bool getEnableGlobalLinearVelocity() const;
+
+  /// Set availabilty of the angular velocity output port
+  /// The output vector is measured in global coordinates
+  void setEnableGlobalAngularVelocity(bool enable);
+  /// Get availabilty of the angular velocity output port
+  bool getEnableGlobalAngularVelocity() const;
+
+
   /// Set availabilty of the linear acceleration output port
-  void setEnableCentrifugalAcceleration(bool enable);
+  /// The output vector is measured in body coordinates
+  void setEnableBodyCentrifugalAcceleration(bool enable);
   /// Get availabilty of the linear acceleration output port
-  bool getEnableCentrifugalAcceleration() const;
+  bool getEnableBodyCentrifugalAcceleration() const;
 
   /// Set availabilty of the load output port
-  void setEnableLoad(bool enable);
+  /// The output vector is measured in body coordinates
+  void setEnableBodyLoad(bool enable);
   /// Get availabilty of the load output port
-  bool getEnableLoad() const;
+  bool getEnableBodyLoad() const;
 
 
   /// Set availabilty of the wind velocity output port
-  void setEnableWindVelocity(bool enable);
+  /// The output vector is measured in body coordinates
+  void setEnableBodyWindVelocity(bool enable);
   /// Get availabilty of the wind velocity output port
-  bool getEnableWindVelocity() const;
+  bool getEnableBodyWindVelocity() const;
 
+  /// Set availabilty of the wind velocity output port
+  /// The output vector is measured in global coordinates
+  void setEnableGlobalWindVelocity(bool enable);
+  /// Get availabilty of the wind velocity output port
+  bool getEnableGlobalWindVelocity() const;
 
+
   /// Set availabilty of the temperature output port
   void setEnableTemperature(bool enable);
   /// Get availabilty of the temperature output port
@@ -135,17 +160,22 @@
   void setEnableAllOutputs(bool enable);
 
 protected:
+  /// Positional state sensing
   MatrixOutputPort mPositionPort;
   MatrixOutputPort mOrientationPort;
   MatrixOutputPort mEulerAnglesPort;
 
-  MatrixOutputPort mLinearVelocityPort;
-  MatrixOutputPort mAngularVelocityPort;
+  /// Velocity state sensing
+  MatrixOutputPort mBodyLinearVelocityPort;
+  MatrixOutputPort mBodyAngularVelocityPort;
+  MatrixOutputPort mGlobalLinearVelocityPort;
+  MatrixOutputPort mGlobalAngularVelocityPort;
 
-  MatrixOutputPort mCentrifugalAccelerationPort;
-  MatrixOutputPort mLoadPort;
+  MatrixOutputPort mBodyCentrifugalAccelerationPort;
+  MatrixOutputPort mBodyLoadPort;
 
-  MatrixOutputPort mWindVelocityPort;
+  MatrixOutputPort mBodyWindVelocityPort;
+  MatrixOutputPort mGlobalWindVelocityPort;
 
   RealOutputPort mTemperaturePort;
   RealOutputPort mPressurePort;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h	2009-01-04 12:04:10 UTC (rev 919)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h	2009-01-04 14:03:31 UTC (rev 920)
@@ -106,22 +106,6 @@
     mRelVelDot = spatialAcceleration - mParentSpAccel - getHdot();
   }
 
-
-  // FIXME: they do not yet update the dependent values inside ...
-//   void setRefOrientation(const Frame& parent, const Quaternion& o)
-//   { setOrientation(inverse(parent.getRefOrientation())*o); }
-//   void setRefPosition(const Frame& parent, const Vector3& p)
-//   { setPosition(parent.posFromRef(p)); }
-//   void setRefVel(const Frame& parent, const Vector6& vel)
-//   { setRelVel(vel - motionFromParent(parent.getRefVel())); }
-
-//   void setPosition(const Vector3& p)
-//   { mPosition = p; }
-//   void setOrientation(const Quaternion& o)
-//   { mOrientation = o; }
-//   void setRelVel(const Vector6& vel)
-//   { mRelVel = vel; }
-
   /** Position of the current frame.
       @return The position vector of the current frame with repsect to the
       parent frame. It is the only vector which is in the parent frames
@@ -409,18 +393,6 @@
   const Vector3& getRefPosition(void) const
   { return mRefPos; }
 
-  Quaternion getRelOrientation(const Frame& frame) const
-  { return inverse(getRefOrientation())*frame.getRefOrientation(); }
-  Vector3 getRelPosition(const Frame& frame) const
-  { return posFromRef(frame.getRefPosition()); }
-  Vector6 getRelVel(const Frame& frame) const
-  { return motionFromRef(frame.motionToRef(frame.getRefVel())) - getRefVel(); }
-
-  // FIXME, docunment, and improove
-  Vector6 getRefVelAt(const Vector3& p) const
-  { return motionFrom(posToRef(p), getRefOrientation(), motionTo(p, getRefVel())); }
-
-
 private:
   // The offset of this frames origin wrt the parent frame measured in
   // the parent frames coordinates.



From frohlich at mail.berlios.de  Sun Jan  4 15:44:00 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 4 Jan 2009 15:44:00 +0100
Subject: [OpenFDM-svn] r921 -
	branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg
Message-ID: <200901041444.n04Ei0UE030184@sheep.berlios.de>

Author: frohlich
Date: 2009-01-04 15:43:59 +0100 (Sun, 04 Jan 2009)
New Revision: 921

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Container.h
Log:
Avoid temporary Matrix allocations for direct assignments.

M    Container.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Container.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Container.h	2009-01-04 14:03:31 UTC (rev 920)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Container.h	2009-01-04 14:43:59 UTC (rev 921)
@@ -139,6 +139,10 @@
   OpenFDM_FORCE_INLINE
   Matrix& operator=(const Matrix& mtrx)
   { assign(mtrx); return *this; }
+  template<typename Impl2, size_type m2, size_type n2>
+  OpenFDM_FORCE_INLINE
+  Matrix& operator=(const MatrixRValue<Impl2,m2,n2>& mtrx)
+  { assign(mtrx); return *this; }
 
   OpenFDM_FORCE_INLINE
   Matrix& operator*=(value_type scalar)



From frohlich at mail.berlios.de  Sun Jan  4 15:46:51 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 4 Jan 2009 15:46:51 +0100
Subject: [OpenFDM-svn] r922 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901041446.n04Ekpig030435@sheep.berlios.de>

Author: frohlich
Date: 2009-01-04 15:46:50 +0100 (Sun, 04 Jan 2009)
New Revision: 922

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalInteract.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h
Log:
Add PortHandles.
Use them.

M    src/OpenFDM/InternalInteract.cpp
M    src/OpenFDM/NumericPortValue.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalInteract.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalInteract.cpp	2009-01-04 14:43:59 UTC (rev 921)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalInteract.cpp	2009-01-04 14:46:50 UTC (rev 922)
@@ -24,12 +24,11 @@
   Context(const InternalInteract* internalInteract,
           const Environment* environment, PortValueList& portValueList) :
     DoubleLinkInteract::Context(internalInteract, environment, portValueList),
-    mInternalSensor(internalInteract)
-  {
-    mDistanceValue = portValueList.getPortValue(internalInteract->mDistancePort);
-    mVelocityValue = portValueList.getPortValue(internalInteract->mVelocityPort);
-    mForceValue = portValueList.getPortValue(internalInteract->mForcePort);
-  }
+    mInternalSensor(internalInteract),
+    mDistanceValue(portValueList.getPortValue(internalInteract->mDistancePort)),
+    mVelocityValue(portValueList.getPortValue(internalInteract->mVelocityPort)),
+    mForceValue(portValueList.getPortValue(internalInteract->mForcePort))
+  { }
   virtual ~Context() {}
     
   virtual const InternalInteract& getNode() const
@@ -53,28 +52,28 @@
       mDirection = (1/nrmRelPos)*relPos;
 
     // The relative distance of these two points
-    if (mDistanceValue)
-      mDistanceValue->getValue()(0, 0) = nrmRelPos;
+    if (mDistanceValue.isConnected())
+      mDistanceValue = nrmRelPos;
 
-    if (mVelocityValue) {
+    if (mVelocityValue.isConnected()) {
       // The motion of link1 measured in link0
       Vector6 relVel = mRelCoordSys.motionToReference(getLink1().getRefVel());
       // The relative motion of link1 wrt link0 measured in link0
       relVel -= getLink0().getRefVel();
       // The scalar product is what we need.
       // Here the additional cross product term cancels out
-      mVelocityValue->getValue()(0, 0) = dot(mDirection, relVel.getLinear());
+      mVelocityValue = dot(mDirection, relVel.getLinear());
     }
   }
   virtual void articulation(const Task&)
   {
-    if (!mForceValue)
+    if (!mForceValue.isConnected())
       return;
 
     // Since we assume positive input forces to push the two attached
     // RigidBodies, we need that minus sign to negate the current position
     // offset
-    real_type force = mForceValue->getValue()(0, 0);
+    real_type force = mForceValue;
     Vector3 force0 = (-force)*mDirection;
     getLink0().applyBodyForce(force0);
     
@@ -84,9 +83,9 @@
 
 private:
   SharedPtr<const InternalInteract> mInternalSensor;
-  SharedPtr<NumericPortValue> mDistanceValue;
-  SharedPtr<NumericPortValue> mVelocityValue;
-  SharedPtr<const NumericPortValue> mForceValue;
+  RealOutputPortHandle mDistanceValue;
+  RealOutputPortHandle mVelocityValue;
+  RealInputPortHandle mForceValue;
   CoordinateSystem mRelCoordSys;
   Vector3 mDirection;
 };

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h	2009-01-04 14:43:59 UTC (rev 921)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h	2009-01-04 14:46:50 UTC (rev 922)
@@ -32,6 +32,110 @@
   Matrix mMatrix;
 };
 
+class RealInputPortHandle {
+public:
+  RealInputPortHandle(const NumericPortValue* numericPortValue = 0) :
+    mNumericPortValue(numericPortValue)
+  { }
+
+  bool isConnected() const
+  { return mNumericPortValue; }
+
+  operator const real_type&() const
+  {
+    OpenFDMAssert(mNumericPortValue);
+    OpenFDMAssert(size(mNumericPortValue->getValue()) == Size(1, 1));
+    return mNumericPortValue->getValue()(0, 0);
+  }
+
+private: 
+  SharedPtr<const NumericPortValue> mNumericPortValue;
+};
+
+class RealOutputPortHandle {
+public:
+  RealOutputPortHandle(NumericPortValue* numericPortValue = 0) :
+    mNumericPortValue(numericPortValue)
+  { }
+
+  bool isConnected() const
+  { return mNumericPortValue; }
+
+  operator const real_type&() const
+  {
+    OpenFDMAssert(mNumericPortValue);
+    OpenFDMAssert(size(mNumericPortValue->getValue()) == Size(1, 1));
+    return mNumericPortValue->getValue()(0, 0);
+  }
+  operator real_type&()
+  {
+    OpenFDMAssert(mNumericPortValue);
+    OpenFDMAssert(size(mNumericPortValue->getValue()) == Size(1, 1));
+    return mNumericPortValue->getValue()(0, 0);
+  }
+  RealOutputPortHandle& operator=(const real_type& value)
+  {
+    OpenFDMAssert(mNumericPortValue);
+    OpenFDMAssert(size(mNumericPortValue->getValue()) == Size(1, 1));
+    mNumericPortValue->getValue()(0, 0) = value;
+    return *this;
+  }
+
+private: 
+  SharedPtr<NumericPortValue> mNumericPortValue;
+};
+
+class MatrixInputPortHandle {
+public:
+  MatrixInputPortHandle(const NumericPortValue* numericPortValue = 0) :
+    mNumericPortValue(numericPortValue)
+  { }
+
+  bool isConnected() const
+  { return mNumericPortValue; }
+
+  operator const Matrix&() const
+  {
+    OpenFDMAssert(mNumericPortValue);
+    return mNumericPortValue->getValue();
+  }
+
+private: 
+  SharedPtr<const NumericPortValue> mNumericPortValue;
+};
+
+class MatrixOutputPortHandle {
+public:
+  MatrixOutputPortHandle(NumericPortValue* numericPortValue = 0) :
+    mNumericPortValue(numericPortValue)
+  { }
+
+  bool isConnected() const
+  { return mNumericPortValue; }
+
+  operator const Matrix&() const
+  {
+    OpenFDMAssert(mNumericPortValue);
+    return mNumericPortValue->getValue();
+  }
+  operator Matrix&()
+  {
+    OpenFDMAssert(mNumericPortValue);
+    return mNumericPortValue->getValue();
+  }
+  template<typename Impl, LinAlg::size_type m, LinAlg::size_type n>
+  MatrixOutputPortHandle& operator=(const LinAlg::MatrixRValue<Impl,m,n>& value)
+  {
+    OpenFDMAssert(mNumericPortValue);
+    OpenFDMAssert(size(mNumericPortValue->getValue()) == Size(value));
+    mNumericPortValue->getValue() = value;
+    return *this;
+  }
+
+private: 
+  SharedPtr<NumericPortValue> mNumericPortValue;
+};
+
 } // namespace OpenFDM
 
 #endif



From frohlich at mail.berlios.de  Wed Jan  7 09:25:03 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 7 Jan 2009 09:25:03 +0100
Subject: [OpenFDM-svn] r923 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901070825.n078P3nI001140@sheep.berlios.de>

Author: frohlich
Date: 2009-01-07 09:25:02 +0100 (Wed, 07 Jan 2009)
New Revision: 923

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h
Log:
Use CoordinateSystem PortHandles and Special Context for the
ExternalInteract implementation.

M    src/OpenFDM/MechanicLinkValue.h
M    src/OpenFDM/NumericPortValue.h
M    src/OpenFDM/ExternalInteract.h
M    src/OpenFDM/ExternalInteract.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.cpp	2009-01-04 14:46:50 UTC (rev 922)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.cpp	2009-01-07 08:25:02 UTC (rev 923)
@@ -36,7 +36,28 @@
   Context(const ExternalInteract* externalInteract,
           const Environment* environment, PortValueList& portValueList) :
     SingleLinkInteract::Context(externalInteract, environment, portValueList),
-    mExternalInteract(externalInteract)
+    mExternalInteract(externalInteract),
+    mPosition(portValueList.getPortValue(externalInteract->mPositionPort)),
+    mOrientation(portValueList.getPortValue(externalInteract->mOrientationPort)),
+    mEulerAngles(portValueList.getPortValue(externalInteract->mEulerAnglesPort)),
+    mBodyLinearVelocity(portValueList.getPortValue(externalInteract->mBodyLinearVelocityPort)),
+    mBodyAngularVelocity(portValueList.getPortValue(externalInteract->mBodyAngularVelocityPort)),
+    mGlobalLinearVelocity(portValueList.getPortValue(externalInteract->mGlobalLinearVelocityPort)),
+    mGlobalAngularVelocity(portValueList.getPortValue(externalInteract->mGlobalAngularVelocityPort)),
+    mBodyCentrifugalAcceleration(portValueList.getPortValue(externalInteract->mBodyCentrifugalAccelerationPort)),
+    mBodyLoad(portValueList.getPortValue(externalInteract->mBodyLoadPort)),
+    mBodyWindVelocity(portValueList.getPortValue(externalInteract->mBodyWindVelocityPort)),
+    mGlobalWindVelocity(portValueList.getPortValue(externalInteract->mGlobalWindVelocityPort)),
+    mTemperature(portValueList.getPortValue(externalInteract->mTemperaturePort)),
+    mPressure(portValueList.getPortValue(externalInteract->mPressurePort)),
+    mDensity(portValueList.getPortValue(externalInteract->mDensityPort)),
+    mSoundSpeed(portValueList.getPortValue(externalInteract->mSoundSpeedPort)),
+    mAltitude(portValueList.getPortValue(externalInteract->mAltitudePort)),
+    mAboveGroundLevel(portValueList.getPortValue(externalInteract->mAboveGroundLevelPort)),
+    mBodyForce(portValueList.getPortValue(externalInteract->mBodyForcePort)),
+    mBodyTorque(portValueList.getPortValue(externalInteract->mBodyTorquePort)),
+    mGlobalForce(portValueList.getPortValue(externalInteract->mGlobalForcePort)),
+    mGlobalTorque(portValueList.getPortValue(externalInteract->mGlobalTorquePort))
   { }
   virtual ~Context() {}
     
@@ -45,19 +66,156 @@
   
   virtual void velocities(const Task& task)
   {
-    mExternalInteract->velocity(task, getEnvironment(), mContinousState, mPortValueList);
+    const CoordinateSystem& cs = getLink().getCoordinateSystem();
+
+    // The global coordinates position
+    Vector3 refPosition = getLink().getRefPos();
+    if (mPosition.isConnected())
+      mPosition = refPosition;
+    
+    if (mOrientation.isConnected())
+      mOrientation = getLink().getRefOr();
+    
+    if (mEulerAngles.isConnected())
+      mEulerAngles = getLink().getRefOr().getEuler();
+    
+    // Velocity related sensing
+    bool enableBodyAngularVelocity = mBodyAngularVelocity.isConnected();
+    bool enableGlobalAngularVelocity = mGlobalAngularVelocity.isConnected();
+    bool enableBodyLinearVelocity = mBodyLinearVelocity.isConnected();
+    bool enableGlobalLinearVelocity = mGlobalLinearVelocity.isConnected();
+    bool enableBodyWindVelocity = mBodyWindVelocity.isConnected();
+    bool enableGlobalWindVelocity = mGlobalWindVelocity.isConnected();
+    if (enableBodyAngularVelocity || enableBodyLinearVelocity
+        || enableGlobalAngularVelocity || enableGlobalLinearVelocity
+        || enableBodyWindVelocity || enableGlobalWindVelocity) {
+      Vector6 refVelocity = getLink().getRefVel();
+      if (enableBodyAngularVelocity)
+        mBodyAngularVelocity = refVelocity.getAngular();
+      if (enableGlobalAngularVelocity)
+        mGlobalAngularVelocity = cs.rotToReference(refVelocity.getAngular());
+      
+      if (enableBodyLinearVelocity)
+        mBodyLinearVelocity = refVelocity.getLinear();
+      if (enableGlobalLinearVelocity)
+        mGlobalLinearVelocity = cs.rotToReference(refVelocity.getLinear());
+      
+      // Wind sensing
+      if (enableBodyWindVelocity || enableGlobalWindVelocity) {
+        Vector6 wind = getEnvironment().getWindVelocity(task.getTime(),
+                                                        refPosition);
+        wind = Vector6(cs.rotToLocal(wind.getAngular()),
+                       cs.rotToLocal(wind.getLinear()));
+        wind -= refVelocity;
+        if (enableBodyWindVelocity)
+          mBodyWindVelocity = wind.getLinear();
+        if (enableGlobalWindVelocity)
+          mGlobalWindVelocity = cs.rotToReference(wind.getLinear());
+      }
+    }
+    
+    // Atmosphere related sensing
+    bool enableAltitude = mAltitude.isConnected();
+    
+    bool enableTemperature = mTemperature.isConnected();
+    bool enablePressure = mPressure.isConnected();
+    bool enableDensity = mDensity.isConnected();
+    bool enableSoundSpeed = mSoundSpeed.isConnected();
+    bool enableAtmosphere = (enableTemperature || enablePressure ||
+                             enableDensity || enableSoundSpeed);
+    if (enableAltitude || enableAtmosphere) {
+      real_type altitude = getEnvironment().getAltitude(refPosition);
+      if (enableAltitude)
+        mAltitude = altitude;
+      
+      if (enableAtmosphere) {
+        const AbstractAtmosphere* atmosphere = getEnvironment().getAtmosphere();
+        AtmosphereData data = atmosphere->getData(task.getTime(), altitude);
+        if (enableTemperature)
+          mTemperature = data.temperature;
+        if (enablePressure)
+          mPressure = data.pressure;
+        if (enableDensity)
+          mDensity = data.density;
+        if (enableSoundSpeed)
+          mSoundSpeed = atmosphere->getSoundSpeed(data.temperature);
+      }
+    }
+    
+    if (mAboveGroundLevel.isConnected()) {
+      real_type agl;
+      agl = getEnvironment().getAboveGroundLevel(task.getTime(), refPosition);
+      mAboveGroundLevel = agl;
+    }
   }
   virtual void articulation(const Task& task)
   {
-    mExternalInteract->articulation(task, getEnvironment(), mContinousState, mPortValueList);
+    // Apply all the forces ...
+    if (mBodyForce.isConnected())
+      getLink().applyBodyForce(Vector3(mBodyForce.getValue()));
+
+    if (mBodyTorque.isConnected())
+      getLink().applyBodyTorque(Vector3(mBodyTorque.getValue()));
+
+    if (mGlobalForce.isConnected())
+      getLink().applyGlobalForce(Vector3(mGlobalForce.getValue()));
+
+    if (mGlobalTorque.isConnected())
+      getLink().applyGlobalTorque(Vector3(mGlobalTorque.getValue()));
   }
   virtual void accelerations(const Task& task)
   {
-    mExternalInteract->acceleration(task, getEnvironment(), mContinousState, mPortValueList);
+    bool enableBodyCentrifugalAcceleration
+      = mBodyCentrifugalAcceleration.isConnected();
+    bool enableBodyLoad = mBodyLoad.isConnected();
+    if (enableBodyCentrifugalAcceleration || enableBodyLoad) {
+      Vector6 spatialVel = getLink().getSpVel();
+      Vector6 spatialAccel = getLink().getSpAccel();
+      Vector3 centrifugalAccel = spatialAccel.getLinear();
+      centrifugalAccel += cross(spatialVel.getAngular(),spatialVel.getLinear());
+
+      if (enableBodyCentrifugalAcceleration)
+        mBodyCentrifugalAcceleration = centrifugalAccel;
+      if (enableBodyLoad) {
+        // May be cache that from the velocity step??
+        Vector3 refPosition = getLink().getRefPos();
+        Vector3 gravity = getEnvironment().getGravityAcceleration(refPosition);
+        gravity = getLink().getCoordinateSystem().rotToLocal(gravity);
+        mBodyLoad = centrifugalAccel - gravity;
+      }
+    }
   }
   
 private:
   SharedPtr<const ExternalInteract> mExternalInteract;
+
+  MatrixOutputPortHandle mPosition;
+  MatrixOutputPortHandle mOrientation;
+  MatrixOutputPortHandle mEulerAngles;
+
+  MatrixOutputPortHandle mBodyLinearVelocity;
+  MatrixOutputPortHandle mBodyAngularVelocity;
+  MatrixOutputPortHandle mGlobalLinearVelocity;
+  MatrixOutputPortHandle mGlobalAngularVelocity;
+
+  MatrixOutputPortHandle mBodyCentrifugalAcceleration;
+  MatrixOutputPortHandle mBodyLoad;
+
+  MatrixOutputPortHandle mBodyWindVelocity;
+  MatrixOutputPortHandle mGlobalWindVelocity;
+
+  RealOutputPortHandle mTemperature;
+  RealOutputPortHandle mPressure;
+  RealOutputPortHandle mDensity;
+  RealOutputPortHandle mSoundSpeed;
+
+  RealOutputPortHandle mAltitude;
+  RealOutputPortHandle mAboveGroundLevel;
+
+  MatrixInputPortHandle mBodyForce;
+  MatrixInputPortHandle mBodyTorque;
+  MatrixInputPortHandle mGlobalForce;
+  MatrixInputPortHandle mGlobalTorque;
 };
 
 ExternalInteract::ExternalInteract(const std::string& name) :
@@ -71,7 +229,7 @@
 
 MechanicContext*
 ExternalInteract::newMechanicContext(const Environment* environment,
-                           PortValueList& portValueList) const
+                                     PortValueList& portValueList) const
 {
   SharedPtr<Context> context = new Context(this, environment, portValueList);
   if (!context->alloc()) {
@@ -83,155 +241,6 @@
 }
 
 void
-ExternalInteract::velocity(const Task& task, const Environment& environment,
-                 const ContinousStateValueVector&,
-                 PortValueList& portValues) const
-{
-  const Frame& frame = portValues[mMechanicLink].getFrame();
-
-  // FIXME, for now relative position
-  Vector3 position = mPosition - portValues[mMechanicLink].getDesignPosition();
-  Vector3 refPosition = frame.posToRef(position);
-
-  if (getEnablePosition())
-    portValues[mPositionPort] = refPosition;
-
-  if (getEnableOrientation())
-    portValues[mOrientationPort] = frame.getRefOrientation();
-
-  if (getEnableEulerAngles())
-    portValues[mEulerAnglesPort] = frame.getRefOrientation().getEuler();
-
-  // Velocity related sensing
-  bool enableBodyAngularVelocity = getEnableBodyAngularVelocity();
-  bool enableGlobalAngularVelocity = getEnableGlobalAngularVelocity();
-  bool enableBodyLinearVelocity = getEnableBodyLinearVelocity();
-  bool enableGlobalLinearVelocity = getEnableGlobalLinearVelocity();
-  bool enableBodyWindVelocity = getEnableBodyWindVelocity();
-  bool enableGlobalWindVelocity = getEnableGlobalWindVelocity();
-  if (enableBodyAngularVelocity || enableBodyLinearVelocity
-      || enableGlobalAngularVelocity || enableGlobalLinearVelocity
-      || enableBodyWindVelocity || enableGlobalWindVelocity) {
-    Vector6 refVelocity = motionTo(position, frame.getRefVel());
-    if (enableBodyAngularVelocity)
-      portValues[mBodyAngularVelocityPort] = refVelocity.getAngular();
-    if (enableGlobalAngularVelocity)
-      portValues[mGlobalAngularVelocityPort]
-        = frame.rotToRef(refVelocity.getAngular());
-    
-    if (enableBodyLinearVelocity)
-      portValues[mBodyLinearVelocityPort] = refVelocity.getLinear();
-    if (enableGlobalLinearVelocity)
-      portValues[mGlobalLinearVelocityPort]
-        = frame.rotToRef(refVelocity.getLinear());
-
-    // Wind sensing
-    if (enableBodyWindVelocity || enableGlobalWindVelocity) {
-      Vector6 wind = environment.getWindVelocity(task.getTime(), position);
-      wind = Vector6(frame.rotFromRef(wind.getAngular()),
-                     frame.rotFromRef(wind.getLinear()));
-      wind -= refVelocity;
-      if (enableBodyWindVelocity)
-        portValues[mBodyWindVelocityPort] = wind.getLinear();
-      if (enableGlobalWindVelocity)
-        portValues[mGlobalWindVelocityPort] = frame.rotToRef(wind.getLinear());
-    }
-  }
-
-  // Atmosphere related sensing
-  bool enableAltitude = getEnableAltitude();
-  
-  bool enableTemperature = getEnableTemperature();
-  bool enablePressure = getEnablePressure();
-  bool enableDensity = getEnableDensity();
-  bool enableSoundSpeed = getEnableSoundSpeed();
-  bool enableAtmosphere = (enableTemperature || enablePressure ||
-                           enableDensity || enableSoundSpeed);
-  if (enableAltitude || enableAtmosphere) {
-    real_type altitude = environment.getAltitude(refPosition);
-    if (enableAltitude)
-      portValues[mAltitudePort] = altitude;
-
-    if (enableAtmosphere) {
-      const AbstractAtmosphere* atmosphere = environment.getAtmosphere();
-      AtmosphereData data = atmosphere->getData(task.getTime(), altitude);
-      if (enableTemperature)
-        portValues[mTemperaturePort] = data.temperature;
-      if (enablePressure)
-        portValues[mPressurePort] = data.pressure;
-      if (enableDensity)
-        portValues[mDensityPort] = data.density;
-      if (enableSoundSpeed)
-        portValues[mSoundSpeedPort]
-          = atmosphere->getSoundSpeed(data.temperature);
-    }
-  }
-
-  if (getEnableAboveGroundLevel()) {
-    real_type agl;
-    agl = environment.getAboveGroundLevel(task.getTime(), refPosition);
-    portValues[mAboveGroundLevelPort] = agl;
-  }
-}
-
-void
-ExternalInteract::articulation(const Task&, const Environment&,
-                     const ContinousStateValueVector&,
-                     PortValueList& portValues) const
-{
-  const Frame& frame = portValues[mMechanicLink].getFrame();
-  // FIXME, for now relative position
-  Vector3 position = mPosition - portValues[mMechanicLink].getDesignPosition();
-  
-  if (getEnableBodyForce()) {
-    Vector3 force = portValues[mBodyForcePort];
-    portValues[mMechanicLink].applyForce(position, force);
-  }
-  if (getEnableBodyTorque()) {
-    Vector3 torque = portValues[mBodyTorquePort];
-    portValues[mMechanicLink].applyTorque(torque);
-  }
-  if (getEnableGlobalForce()) {
-    Vector3 force = portValues[mGlobalForcePort];
-    portValues[mMechanicLink].applyForce(position, frame.rotFromRef(force));
-  }
-  if (getEnableGlobalTorque()) {
-    Vector3 torque = portValues[mGlobalTorquePort];
-    portValues[mMechanicLink].applyTorque(frame.rotFromRef(torque));
-  }
-}
-
-void
-ExternalInteract::acceleration(const Task&, const Environment& environment,
-                     const ContinousStateValueVector&,
-                     PortValueList& portValues) const
-{
-  const Frame& frame = portValues[mMechanicLink].getFrame();
-
-  // FIXME, for now relative position
-  Vector3 position = mPosition - portValues[mMechanicLink].getDesignPosition();
-
-  bool enableBodyCentrifugalAcceleration=getEnableBodyCentrifugalAcceleration();
-  bool enableBodyLoad = getEnableBodyLoad();
-  if (enableBodyCentrifugalAcceleration || enableBodyLoad) {
-    Vector6 spatialVel = motionTo(position, frame.getSpVel());
-    Vector6 spatialAccel = motionTo(position, frame.getSpAccel());
-    Vector3 centrifugalAccel = spatialAccel.getLinear();
-    centrifugalAccel += cross(spatialVel.getAngular(), spatialVel.getLinear());
-
-    if (enableBodyCentrifugalAcceleration)
-      portValues[mBodyCentrifugalAccelerationPort] = centrifugalAccel;
-    if (enableBodyLoad) {
-      // May be cache that from the velocity step??
-      Vector3 refPosition = frame.posToRef(position);
-      Vector3 gravity = environment.getGravityAcceleration(refPosition);
-      gravity = frame.rotFromRef(gravity);
-      portValues[mBodyLoadPort] = centrifugalAccel - gravity;
-    }
-  }
-}
-
-void
 ExternalInteract::setEnablePosition(bool enable)
 {
   if (enable == getEnablePosition())

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.h	2009-01-04 14:46:50 UTC (rev 922)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.h	2009-01-07 08:25:02 UTC (rev 923)
@@ -24,16 +24,6 @@
   virtual MechanicContext*
   newMechanicContext(const Environment*, PortValueList&) const;
 
-  virtual void velocity(const Task&, const Environment&,
-                        const ContinousStateValueVector&,
-                        PortValueList&) const;
-  virtual void articulation(const Task&, const Environment& environment,
-                            const ContinousStateValueVector&,
-                            PortValueList&) const;
-  virtual void acceleration(const Task&, const Environment&,
-                            const ContinousStateValueVector&,
-                            PortValueList&) const;
-
   /// Set availabilty of the position output port
   void setEnablePosition(bool enable);
   /// Get availabilty of the position output port

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2009-01-04 14:46:50 UTC (rev 922)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2009-01-07 08:25:02 UTC (rev 923)
@@ -193,12 +193,22 @@
     OpenFDMAssert(isConnected());
     return mMechanicLinkValue->getCoordinateSystem().toReference(mLinkRelPos);
   }
+  const Rotation& getRefOr() const
+  {
+    OpenFDMAssert(isConnected());
+    return mMechanicLinkValue->getCoordinateSystem().getOrientation();
+  }
 
   Vector6 getSpVelAtLink() const
   {
     OpenFDMAssert(isConnected());
     return mMechanicLinkValue->getSpVel();
   }
+  Vector6 getSpAccelAtLink() const
+  {
+    OpenFDMAssert(isConnected());
+    return mMechanicLinkValue->getSpAccel();
+  }
   Vector6 getSpVel() const
   {
     OpenFDMAssert(isConnected());
@@ -209,6 +219,11 @@
     OpenFDMAssert(isConnected());
     return mMechanicLinkValue->getReferenceVelocity(mLinkRelPos);
   }
+  Vector6 getSpAccel() const
+  {
+    OpenFDMAssert(isConnected());
+    return motionTo(mLinkRelPos, mMechanicLinkValue->getSpAccel());
+  }
 
   void setDesignPosition(const Vector3& position)
   {
@@ -244,6 +259,30 @@
     mMechanicLinkValue->applyTorque(torque);
   }
 
+
+  void applyGlobalForce(const Vector3& force)
+  {
+    OpenFDMAssert(isConnected());
+    const CoordinateSystem& cs = mMechanicLinkValue->getCoordinateSystem();
+    Vector3 bodyForce = cs.rotToLocal(force);
+    mMechanicLinkValue->applyForce(mLinkRelPos, bodyForce);
+  }
+  void applyGlobalForce(const Vector3& bodyPosition, const Vector3& force)
+  {
+    OpenFDMAssert(isConnected());
+    const CoordinateSystem& cs = mMechanicLinkValue->getCoordinateSystem();
+    Vector3 bodyForce = cs.rotToLocal(force);
+    mMechanicLinkValue->applyForce(bodyPosition + mLinkRelPos, bodyForce);
+  }
+
+  void applyGlobalTorque(const Vector3& torque)
+  {
+    OpenFDMAssert(isConnected());
+    const CoordinateSystem& cs = mMechanicLinkValue->getCoordinateSystem();
+    mMechanicLinkValue->applyTorque(cs.rotToLocal(torque));
+  }
+
+
   void applyForceAtLink(const Vector6& force)
   {
     OpenFDMAssert(isConnected());

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h	2009-01-04 14:46:50 UTC (rev 922)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h	2009-01-07 08:25:02 UTC (rev 923)
@@ -41,13 +41,16 @@
   bool isConnected() const
   { return mNumericPortValue; }
 
-  operator const real_type&() const
+  const real_type& getValue() const
   {
     OpenFDMAssert(mNumericPortValue);
     OpenFDMAssert(size(mNumericPortValue->getValue()) == Size(1, 1));
     return mNumericPortValue->getValue()(0, 0);
   }
 
+  operator const real_type&() const
+  { return getValue(); }
+
 private: 
   SharedPtr<const NumericPortValue> mNumericPortValue;
 };
@@ -61,18 +64,23 @@
   bool isConnected() const
   { return mNumericPortValue; }
 
-  operator const real_type&() const
+  const real_type& getValue() const
   {
     OpenFDMAssert(mNumericPortValue);
     OpenFDMAssert(size(mNumericPortValue->getValue()) == Size(1, 1));
     return mNumericPortValue->getValue()(0, 0);
   }
-  operator real_type&()
+  real_type& getValue()
   {
     OpenFDMAssert(mNumericPortValue);
     OpenFDMAssert(size(mNumericPortValue->getValue()) == Size(1, 1));
     return mNumericPortValue->getValue()(0, 0);
   }
+
+  operator const real_type&() const
+  { return getValue(); }
+  operator real_type&()
+  { return getValue(); }
   RealOutputPortHandle& operator=(const real_type& value)
   {
     OpenFDMAssert(mNumericPortValue);
@@ -94,12 +102,15 @@
   bool isConnected() const
   { return mNumericPortValue; }
 
-  operator const Matrix&() const
+  const Matrix& getValue() const
   {
     OpenFDMAssert(mNumericPortValue);
     return mNumericPortValue->getValue();
   }
 
+  operator const Matrix&() const
+  { return getValue(); }
+
 private: 
   SharedPtr<const NumericPortValue> mNumericPortValue;
 };
@@ -113,16 +124,22 @@
   bool isConnected() const
   { return mNumericPortValue; }
 
-  operator const Matrix&() const
+  const Matrix& getValue() const
   {
     OpenFDMAssert(mNumericPortValue);
     return mNumericPortValue->getValue();
   }
-  operator Matrix&()
+  Matrix& getValue()
   {
     OpenFDMAssert(mNumericPortValue);
     return mNumericPortValue->getValue();
   }
+
+
+  operator const Matrix&() const
+  { return getValue(); }
+  operator Matrix&()
+  { return getValue(); }
   template<typename Impl, LinAlg::size_type m, LinAlg::size_type n>
   MatrixOutputPortHandle& operator=(const LinAlg::MatrixRValue<Impl,m,n>& value)
   {



From frohlich at mail.berlios.de  Thu Jan  8 09:22:46 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 8 Jan 2009 09:22:46 +0100
Subject: [OpenFDM-svn] r924 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901080822.n088MkC9029860@sheep.berlios.de>

Author: frohlich
Date: 2009-01-08 09:22:45 +0100 (Thu, 08 Jan 2009)
New Revision: 924

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h
Log:
Correct typo Size->size.

M    NumericPortValue.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h	2009-01-07 08:25:02 UTC (rev 923)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h	2009-01-08 08:22:45 UTC (rev 924)
@@ -144,7 +144,7 @@
   MatrixOutputPortHandle& operator=(const LinAlg::MatrixRValue<Impl,m,n>& value)
   {
     OpenFDMAssert(mNumericPortValue);
-    OpenFDMAssert(size(mNumericPortValue->getValue()) == Size(value));
+    OpenFDMAssert(size(mNumericPortValue->getValue()) == size(value));
     mNumericPortValue->getValue() = value;
     return *this;
   }



From frohlich at mail.berlios.de  Thu Jan  8 09:26:29 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 8 Jan 2009 09:26:29 +0100
Subject: [OpenFDM-svn] r925 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200901080826.n088QTSt031702@sheep.berlios.de>

Author: frohlich
Date: 2009-01-08 09:26:28 +0100 (Thu, 08 Jan 2009)
New Revision: 925

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
   branches/OpenFDM-StateSeparation/src/test/inertianav.cpp
Log:
Use MechanicLinkInfo directly.

M    src/test/inertianav.cpp
M    src/OpenFDM/SingleLinkInteract.cpp
M    src/OpenFDM/SingleLinkInteract.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.cpp	2009-01-08 08:22:45 UTC (rev 924)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.cpp	2009-01-08 08:26:28 UTC (rev 925)
@@ -12,7 +12,7 @@
 
 SingleLinkInteract::SingleLinkInteract(const std::string& name) :
   Interact(name),
-  mMechanicLink(this, "link"),
+  mMechanicLink(new MechanicLinkInfo(this, "link")),
   mPosition(0, 0, 0)
 {
 }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2009-01-08 08:22:45 UTC (rev 924)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SingleLinkInteract.h	2009-01-08 08:26:28 UTC (rev 925)
@@ -31,7 +31,7 @@
             PortValueList& portValueList) :
       MechanicContext(environment),
       mPortValueList(portValueList),
-      mLink(portValueList.getPortValue(interact->mMechanicLink))
+      mLink(portValueList.getPortValue(*interact->mMechanicLink))
     {
       OpenFDMAssert(mLink.isConnected());
     }
@@ -92,8 +92,7 @@
   const Vector3& getPosition() const;
 
 protected:
-  MechanicLink mMechanicLink;
-
+  SharedPtr<MechanicLinkInfo> mMechanicLink;
   Vector3 mPosition;
 };
 

Modified: branches/OpenFDM-StateSeparation/src/test/inertianav.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/inertianav.cpp	2009-01-08 08:22:45 UTC (rev 924)
+++ branches/OpenFDM-StateSeparation/src/test/inertianav.cpp	2009-01-08 08:26:28 UTC (rev 925)
@@ -22,94 +22,55 @@
     mAccelerationPort(this, "acceleration", Size(6, 1), true)
   { }
 
-class Context : public SingleLinkInteract::Context {
-public:
-  Context(const AccelerationTracking* accelerationTracking,
-          const Environment* environment, PortValueList& portValueList) :
-    SingleLinkInteract::Context(accelerationTracking, environment, portValueList),
-    mAccelerationTracking(accelerationTracking)
-  { }
-  virtual ~Context() {}
+  class Context : public SingleLinkInteract::Context {
+  public:
+    Context(const AccelerationTracking* accelerationTracking,
+            const Environment* environment, PortValueList& portValueList) :
+      SingleLinkInteract::Context(accelerationTracking, environment, portValueList),
+      mAccelerationTracking(accelerationTracking)
+    { }
+    virtual ~Context() {}
     
-  virtual const AccelerationTracking& getNode() const
-  { return *mAccelerationTracking; }
-  
-  virtual void velocities(const Task& task)
-  {
-    mAccelerationTracking->velocity(task, getEnvironment(), mContinousState, mPortValueList);
-  }
-  virtual void articulation(const Task& task)
-  {
-//     mAccelerationTracking->articulation(task, getEnvironment(), mContinousState, mPortValueList);
-  }
-  virtual void accelerations(const Task& task)
-  {
-    mAccelerationTracking->acceleration(task, getEnvironment(), mContinousState, mPortValueList);
-  }
-  
-private:
-  SharedPtr<const AccelerationTracking> mAccelerationTracking;
-};
-
-  virtual MechanicContext* newMechanicContext(const Environment* environment,
-                                              PortValueList& portValueList) const
-  {
-    SharedPtr<Context> context = new Context(this, environment, portValueList);
-    if (!context->alloc()) {
-      Log(Model, Warning) << "Could not alloc for model \""
-                          << getName() << "\"" << endl;
-      return 0;
-    }
-    return context.release();
-  }
-  
-  virtual void initDesignPosition(PortValueList&) const
-  {
-  }
-  virtual void velocity(const Task& task, const Environment& environment,
-                        const ContinousStateValueVector&,
-                        PortValueList&) const
-  {
-  }
-  virtual void acceleration(const Task&, const Environment& environment,
-                            const ContinousStateValueVector&,
-                            PortValueList& portValues) const
-  {
-    Vector3 p1(0, 1, 0);
-    Vector3 p2(0, -1, 0);
-
-    const Frame& frame = portValues[mMechanicLink].getFrame();
-
-    CoordinateSystem csys0 = portValues[mMechanicLink].getCoordinateSystem();
-
-    CoordinateSystem csys1 = csys0.getRelative(p1);
-    CoordinateSystem csys2 = csys0.getRelative(p2);
-
-    Frame frame1;
-    frame1.setPosAndVel(frame, p1, Quaternion::unit(), Vector6::zeros());
-    frame1.setAccel(frame, Vector6::zeros());
-    Frame frame2;
-    frame2.setPosAndVel(frame, p2, Quaternion::unit(), Vector6::zeros());
-    frame2.setAccel(frame, Vector6::zeros());
-
-    Vector3 refPosition = csys0.getPosition();
-    Vector3 gravity = environment.getGravityAcceleration(refPosition);
-    gravity = frame.rotFromRef(gravity);
-
-    Vector3 a1 = frame1.getClassicAccel().getLinear() - gravity;
-    Vector3 a2 = frame2.getClassicAccel().getLinear() - gravity;
-   
-    /// Here we have constructed the synthetic example
-//     std::cout << trans(a1) << " " << trans(a2) << std::endl;
-
-    Vector6 v = frame.getSpVel();
-    Vector6 aExact = frame.getSpAccel();
-
-    Vector3 dp = p2 - p1;
+    virtual const AccelerationTracking& getNode() const
+    { return *mAccelerationTracking; }
     
-    Vector3 omega0 = v.getAngular();
-    Vector3 v0 = v.getLinear();
-    
+    virtual void accelerations(const Task& task)
+    {
+      Vector3 p1(0, 1, 0);
+      Vector3 p2(0, -1, 0);
+      
+      const Frame& frame = getLink().getMechanicLinkValue().getFrame();
+      
+      CoordinateSystem csys0 = getLink().getCoordinateSystem();
+      
+      CoordinateSystem csys1 = csys0.getRelative(p1);
+      CoordinateSystem csys2 = csys0.getRelative(p2);
+      
+      Frame frame1;
+      frame1.setPosAndVel(frame, p1, Quaternion::unit(), Vector6::zeros());
+      frame1.setAccel(frame, Vector6::zeros());
+      Frame frame2;
+      frame2.setPosAndVel(frame, p2, Quaternion::unit(), Vector6::zeros());
+      frame2.setAccel(frame, Vector6::zeros());
+      
+      Vector3 refPosition = csys0.getPosition();
+      Vector3 gravity = getEnvironment().getGravityAcceleration(refPosition);
+      gravity = frame.rotFromRef(gravity);
+      
+      Vector3 a1 = frame1.getClassicAccel().getLinear() - gravity;
+      Vector3 a2 = frame2.getClassicAccel().getLinear() - gravity;
+      
+      /// Here we have constructed the synthetic example
+      //     std::cout << trans(a1) << " " << trans(a2) << std::endl;
+      
+      Vector6 v = frame.getSpVel();
+      Vector6 aExact = frame.getSpAccel();
+      
+      Vector3 dp = p2 - p1;
+      
+      Vector3 omega0 = v.getAngular();
+      Vector3 v0 = v.getLinear();
+      
 //   Vector6 getClassicAccel(void) const
 //   {
 //     Vector6 iv = getSpVel();
@@ -146,25 +107,41 @@
 //       - cross(omega0, cross(p2, omega0)) + cross(omega0, v0) - gravity;
 //     std::cout << trans(a1) << " " << trans(a1_) << std::endl;
 
-    Vector3 dpOmega = -(a2 - a1 + cross(omega0, cross(dp, omega0)));
+      Vector3 dpOmega = -(a2 - a1 + cross(omega0, cross(dp, omega0)));
 
 //     Vector3 dpOmegaExact = cross(dp, aExact.getAngular());
 //     std::cout << trans(dpOmega) << " " << trans(dpOmegaExact) << std::endl;
 
 
-    Vector3 omegaDot = crossKern(dp, dpOmega);
+      Vector3 omegaDot = crossKern(dp, dpOmega);
 
 //     std::cout << trans(dpOmega) << " " << trans(cross(dp, omegaDot)) << " " << std::endl;
 //     std::cout << trans(omegaDot) << " " << trans(aExact.getAngular()) << std::endl;
+      
+      Vector3 vDot1 = a1 + cross(p1, omegaDot) + cross(omega0, cross(p1, omega0)) - cross(omega0, v0) + gravity;
+      Vector3 vDot2 = a2 + cross(p2, omegaDot) + cross(omega0, cross(p2, omega0)) - cross(omega0, v0) + gravity;
+      
+      Vector6 a(omegaDot, vDot1);
+      
+      std::cout << trans(a) << " " << trans(frame.getSpAccel()) << std::endl;
+      
+      mPortValueList[mAccelerationTracking->mAccelerationPort] = a;
+    }
     
-    Vector3 vDot1 = a1 + cross(p1, omegaDot) + cross(omega0, cross(p1, omega0)) - cross(omega0, v0) + gravity;
-    Vector3 vDot2 = a2 + cross(p2, omegaDot) + cross(omega0, cross(p2, omega0)) - cross(omega0, v0) + gravity;
-
-    Vector6 a(omegaDot, vDot1);
-
-    std::cout << trans(a) << " " << trans(frame.getSpAccel()) << std::endl;
-
-    portValues[mAccelerationPort] = a;
+  private:
+    SharedPtr<const AccelerationTracking> mAccelerationTracking;
+  };
+  
+  virtual MechanicContext* newMechanicContext(const Environment* environment,
+                                              PortValueList& portValueList) const
+  {
+    SharedPtr<Context> context = new Context(this, environment, portValueList);
+    if (!context->alloc()) {
+      Log(Model, Warning) << "Could not alloc for model \""
+                          << getName() << "\"" << endl;
+      return 0;
+    }
+    return context.release();
   }
 
 protected:



From frohlich at mail.berlios.de  Thu Jan  8 22:10:42 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 8 Jan 2009 22:10:42 +0100
Subject: [OpenFDM-svn] r926 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901082110.n08LAgtA024804@sheep.berlios.de>

Author: frohlich
Date: 2009-01-08 22:10:41 +0100 (Thu, 08 Jan 2009)
New Revision: 926

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
Log:
Remove some Frame class dependent stuff.

M    HDF5SystemOutput.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2009-01-08 08:26:28 UTC (rev 925)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2009-01-08 21:10:41 UTC (rev 926)
@@ -349,11 +349,8 @@
       mMechanicLinkValue(mechanicLinkValue),
       _group(parent, name),
       _position(_group, "position", Size(3, 1)),
-      _refPosition(_group, "refPosition", Size(3, 1)),
       _orientation(_group, "orientation", Size(4, 1)),
       _eulerAngle(_group, "eulerAngles", Size(3, 1)),
-      _refOrientation(_group, "refOrientation", Size(4, 1)),
-      _refEulerAngle(_group, "refEulerAngles", Size(3, 1)),
       _velocity(_group, "velocity", Size(6, 1)),
       _refVelocity(_group, "refVelocity", Size(6, 1)),
       _acceleration(_group, "acceleration", Size(6, 1)),
@@ -362,12 +359,10 @@
     { }
     virtual void append()
     {
-      _position.append(mMechanicLinkValue->getFrame().getPosition());
-      _refPosition.append(mMechanicLinkValue->getCoordinateSystem().getPosition());
-      _orientation.append(mMechanicLinkValue->getFrame().getOrientation());
-      _eulerAngle.append(mMechanicLinkValue->getFrame().getOrientation().getEuler());
-      _refOrientation.append(mMechanicLinkValue->getCoordinateSystem().getOrientation());
-      _refEulerAngle.append(mMechanicLinkValue->getCoordinateSystem().getOrientation().getEuler());
+      const CoordinateSystem& cs = mMechanicLinkValue->getCoordinateSystem();
+      _position.append(cs.getPosition());
+      _orientation.append(cs.getOrientation());
+      _eulerAngle.append(cs.getOrientation().getEuler());
       _velocity.append(mMechanicLinkValue->getFrame().getSpVel());
       _refVelocity.append(mMechanicLinkValue->getFrame().getRefVel());
       _acceleration.append(mMechanicLinkValue->getFrame().getSpAccel());
@@ -380,11 +375,8 @@
     SharedPtr<const MechanicLinkValue> mMechanicLinkValue;
     HDF5Group _group;
     HDFMatrixStream _position;
-    HDFMatrixStream _refPosition;
     HDFMatrixStream _orientation;
     HDFMatrixStream _eulerAngle;
-    HDFMatrixStream _refOrientation;
-    HDFMatrixStream _refEulerAngle;
     HDFMatrixStream _velocity;
     HDFMatrixStream _refVelocity;
     HDFMatrixStream _acceleration;



From frohlich at mail.berlios.de  Thu Jan  8 22:11:23 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 8 Jan 2009 22:11:23 +0100
Subject: [OpenFDM-svn] r927 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901082111.n08LBNpF024883@sheep.berlios.de>

Author: frohlich
Date: 2009-01-08 22:11:23 +0100 (Thu, 08 Jan 2009)
New Revision: 927

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/JointContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
Log:
Remove MechanicLink usage in the CartesianJoint

M    src/OpenFDM/CartesianJoint.h
M    src/OpenFDM/MechanicLinkValue.h
M    src/OpenFDM/JointContext.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2009-01-08 21:10:41 UTC (rev 926)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2009-01-08 21:11:23 UTC (rev 927)
@@ -58,8 +58,8 @@
 protected:
   CartesianJoint(const std::string& name) :
     Joint(name),
-    mParentLink(newMechanicLink("link0")),
-    mChildLink(newMechanicLink("link1"))
+    mParentLink(new MechanicLinkInfo(this, "link0")),
+    mChildLink(new MechanicLinkInfo(this, "link1"))
   { }
   virtual ~CartesianJoint(void)
   { }
@@ -99,10 +99,8 @@
     
     virtual void initDesignPosition()
     {
-      Vector3 jointPosition = mCartesianJoint->getPosition();
-      mRelativeDesignPosition = jointPosition-mParentLink->getDesignPosition();
-      mChildLink->setDesignPosition(jointPosition);
-
+      mParentLink.setDesignPosition(mCartesianJoint->getPosition());
+      mChildLink.setDesignPosition(mCartesianJoint->getPosition());
       mJointMatrix = mCartesianJoint->getJointMatrix();
     }
 
@@ -137,14 +135,15 @@
                       const VectorN& velocity)
     {
       // Set up the local coordinate system of the joint
-      mRelativeCoordinateSystem.setPosition(mRelativeDesignPosition + position);
+      mRelativeCoordinateSystem.setPosition(mParentLink.getLinkRelPos() + position);
       mRelativeCoordinateSystem.setOrientation(orientation);
 
       // Propagate the reference coordinate system to the parent.
-      mChildLink->setCoordinateSystem(mParentLink->getCoordinateSystem().toReference(mRelativeCoordinateSystem));
+      mChildLink.setCoordinateSystem(mParentLink.getCoordinateSystem().toReference(mRelativeCoordinateSystem));
 
-      mChildLink->setPosAndVel(*mParentLink, mRelativeDesignPosition + position,
-                               orientation, mJointMatrix*velocity);
+      mChildLink.setPosAndVel(mParentLink.getMechanicLinkValue(),
+                              mParentLink.getLinkRelPos() + position,
+                              orientation, mJointMatrix*velocity);
     }
 
     /** Compute the articulation step for a given joint force.
@@ -158,7 +157,7 @@
     
       // Store the outboard values since we will need them later in velocity
       // derivative computations
-      SpatialInertia I = mChildLink->getInertia();
+      SpatialInertia I = mChildLink.getInertia();
       
       // Compute the projection to the joint coordinate space
       Matrix6N Ih = I*mJointMatrix;
@@ -166,7 +165,7 @@
 
       // Note that the momentum of the local mass is already included in the
       // child links force due the the mass model ...
-      pAlpha = mChildLink->getForce() + I*mChildLink->getFrame().getHdot();
+      pAlpha = mChildLink.getForce() + I*getHdot();
       
       if (hIh.singular()) {
         Log(ArtBody,Error) << "Detected singular mass matrix for "
@@ -183,8 +182,8 @@
       // Transform to parent link's coordinates and apply to the parent link
       force = mRelativeCoordinateSystem.forceToReference(force);
       I = mRelativeCoordinateSystem.inertiaToReference(I);
-      mParentLink->addForce(force);
-      mParentLink->addInertia(I);
+      mParentLink.addForceAtLink(force);
+      mParentLink.addInertiaAtLink(I);
     }
 
     /** Compute the acceleration step for a given joint force.
@@ -192,12 +191,16 @@
      */
     void accelerateDueToForce()
     {
-      Vector6 parentSpAccel = mParentLink->getFrame().getSpAccel();
+      if (hIh.singular())
+        return;
+
+      Vector6 parentSpAccel = mParentLink.getSpAccelAtLink();
       parentSpAccel = mRelativeCoordinateSystem.motionToLocal(parentSpAccel);
 
-      Vector6 f = mChildLink->getInertia()*parentSpAccel + pAlpha;
+      Vector6 f = mChildLink.getInertia()*parentSpAccel + pAlpha;
       velDot = hIh.solve(mJointForce - trans(mJointMatrix)*f);
-      mChildLink->setAccel(*mParentLink, mJointMatrix*velDot);
+      mChildLink.setAccel(mParentLink.getMechanicLinkValue(),
+                          mJointMatrix*velDot);
     }
   
     /** Compute the articulation step for a given velocity derivative.
@@ -212,15 +215,15 @@
       // Compute the articulated force and inertia.
       // This Since there is no projection step with the joint axis, it is clear
       // that this is just a rigid connection ...
-      SpatialInertia I = mChildLink->getInertia();
-      Vector6 force = mChildLink->getForce();
-      force += I*(mChildLink->getFrame().getHdot() + mJointMatrix*velDot);
+      SpatialInertia I = mChildLink.getInertia();
+      Vector6 force = mChildLink.getForce();
+      force += I*(getHdot() + mJointMatrix*velDot);
       
       // Transform to parent link's coordinates and apply to the parent link
       force = mRelativeCoordinateSystem.forceToReference(force);
       I = mRelativeCoordinateSystem.inertiaToReference(I);
-      mParentLink->addForce(force);
-      mParentLink->addInertia(I);
+      mParentLink.addForceAtLink(force);
+      mParentLink.addInertiaAtLink(I);
     }
     
     /** Compute the acceleration step for a given velocity derivative.
@@ -228,12 +231,13 @@
      */
     void accelerateDueToVelDot()
     {
-      mChildLink->setAccel(*mParentLink, mJointMatrix*velDot);
+      mChildLink.setAccel(mParentLink.getMechanicLinkValue(),
+                          mJointMatrix*velDot);
     }
 
     const VectorN& getVelDot() const
     { return velDot; }
-    
+
   private:
     // Stores some values persistent accross velocity/articulation/acceleration
     MatrixFactorsNN hIh;
@@ -241,7 +245,6 @@
     VectorN velDot;
     VectorN mJointForce;
 
-    Vector3 mRelativeDesignPosition;
     CoordinateSystem mRelativeCoordinateSystem;
 
     Matrix6N mJointMatrix;
@@ -250,8 +253,8 @@
   };
   
 private:
-  MechanicLink mParentLink;
-  MechanicLink mChildLink;
+  SharedPtr<MechanicLinkInfo> mParentLink;
+  SharedPtr<MechanicLinkInfo> mChildLink;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/JointContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/JointContext.h	2009-01-08 21:10:41 UTC (rev 926)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/JointContext.h	2009-01-08 21:11:23 UTC (rev 927)
@@ -52,6 +52,14 @@
   virtual const PortValue* getPortValue(const PortInfo& portInfo) const
   {  return mPortValueList.getPortValue(portInfo); }
     
+  ParentLink& getParentLink()
+  { return mParentLink; }
+  ChildLink& getChildLink()
+  { return mChildLink; }
+
+  Vector6 getHdot() const
+  { return mChildLink.getMechanicLinkValue().getFrame().getHdot(); }
+    
 protected:
   // PortValues
   PortValueList mPortValueList;
@@ -62,8 +70,8 @@
   // Discrete States
   DiscreteStateValueVector mDiscreteState;
 
-  SharedPtr<MechanicLinkValue> mParentLink;
-  SharedPtr<MechanicLinkValue> mChildLink;
+  ParentLink mParentLink;
+  ChildLink mChildLink;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2009-01-08 21:10:41 UTC (rev 926)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2009-01-08 21:11:23 UTC (rev 927)
@@ -145,6 +145,28 @@
   { mMechanicLinkValue->setPosAndVel(link, position, orientation, velocity); }
   void setAccel(const MechanicLinkValue& link, const Vector6& accel)
   { mMechanicLinkValue->setAccel(link, accel); }
+
+  void setCoordinateSystem(const CoordinateSystem& coordinateSystem)
+  {
+    OpenFDMAssert(isConnected());
+    return mMechanicLinkValue->setCoordinateSystem(coordinateSystem);
+  }
+  const CoordinateSystem& getCoordinateSystem() const
+  {
+    OpenFDMAssert(isConnected());
+    return mMechanicLinkValue->getCoordinateSystem();
+  }
+
+  const Vector6& getForce() const
+  {
+    OpenFDMAssert(isConnected());
+    return mMechanicLinkValue->getForce();
+  }
+  const SpatialInertia& getInertia() const
+  {
+    OpenFDMAssert(isConnected());
+    return mMechanicLinkValue->getInertia();
+  }
  
 private:
   SharedPtr<MechanicLinkValue> mMechanicLinkValue;



From frohlich at mail.berlios.de  Fri Jan  9 14:45:11 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 9 Jan 2009 14:45:11 +0100
Subject: [OpenFDM-svn] r929 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901091345.n09DjBoU007434@sheep.berlios.de>

Author: frohlich
Date: 2009-01-09 14:45:10 +0100 (Fri, 09 Jan 2009)
New Revision: 929

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
Log:
Make it compile also in the DEBUG case.

M    src/OpenFDM/MechanicLinkValue.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2009-01-08 21:19:00 UTC (rev 928)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2009-01-09 13:45:10 UTC (rev 929)
@@ -148,23 +148,23 @@
 
   void setCoordinateSystem(const CoordinateSystem& coordinateSystem)
   {
-    OpenFDMAssert(isConnected());
+    OpenFDMAssert(mMechanicLinkValue);
     return mMechanicLinkValue->setCoordinateSystem(coordinateSystem);
   }
   const CoordinateSystem& getCoordinateSystem() const
   {
-    OpenFDMAssert(isConnected());
+    OpenFDMAssert(mMechanicLinkValue);
     return mMechanicLinkValue->getCoordinateSystem();
   }
 
   const Vector6& getForce() const
   {
-    OpenFDMAssert(isConnected());
+    OpenFDMAssert(mMechanicLinkValue);
     return mMechanicLinkValue->getForce();
   }
   const SpatialInertia& getInertia() const
   {
-    OpenFDMAssert(isConnected());
+    OpenFDMAssert(mMechanicLinkValue);
     return mMechanicLinkValue->getInertia();
   }
  



From frohlich at mail.berlios.de  Fri Jan  9 15:19:24 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 9 Jan 2009 15:19:24 +0100
Subject: [OpenFDM-svn] r930 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901091419.n09EJOav010435@sheep.berlios.de>

Author: frohlich
Date: 2009-01-09 15:19:24 +0100 (Fri, 09 Jan 2009)
New Revision: 930

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h
Log:
Use MechanicLinkInfo directly.

M    RigidBody.h
M    RigidBody.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2009-01-09 13:45:10 UTC (rev 929)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2009-01-09 14:19:24 UTC (rev 930)
@@ -37,22 +37,20 @@
   visitor.handleNodePathAndApply(this);
 }
 
-const PortInfo*
+const MechanicLinkInfo*
 RigidBody::addLink(const std::string& name)
 {
-  // FIXME: simplify
-  MechanicLink mechanicLink = newMechanicLink(name);
-  mMechanicLinks.push_back(mechanicLink);
-  return getPort(mechanicLink.getPortIndex());
+  MechanicLinkInfo* mechanicLinkInfo = new MechanicLinkInfo(this, name);
+  mMechanicLinks.push_back(mechanicLinkInfo);
+  return mechanicLinkInfo;
 }
 
 void
-RigidBody::removeLink(const PortInfo* portInfo)
+RigidBody::removeLink(const MechanicLinkInfo* mechanicLinkInfo)
 {
-  // FIXME: simplify
-  MechanicLinkVector::iterator i = mMechanicLinks.begin();
+  MechanicLinkInfoVector::iterator i = mMechanicLinks.begin();
   while (i != mMechanicLinks.end()) {
-    if (getPort(i->getPortIndex()) == portInfo) {
+    if (i->get() == mechanicLinkInfo) {
       i->clear();
       i = mMechanicLinks.erase(i);
     } else

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h	2009-01-09 13:45:10 UTC (rev 929)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h	2009-01-09 14:19:24 UTC (rev 930)
@@ -19,12 +19,12 @@
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
 
-  const PortInfo* addLink(const std::string& name);
-  void removeLink(const PortInfo* portInfo);
+  const MechanicLinkInfo* addLink(const std::string& name);
+  void removeLink(const MechanicLinkInfo* mechanicLinkInfo);
 
 private:
-  typedef std::vector<MechanicLink> MechanicLinkVector;
-  MechanicLinkVector mMechanicLinks;
+  typedef std::vector<SharedPtr<MechanicLinkInfo> > MechanicLinkInfoVector;
+  MechanicLinkInfoVector mMechanicLinks;
 };
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Fri Jan  9 18:45:07 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 9 Jan 2009 18:45:07 +0100
Subject: [OpenFDM-svn] r931 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901091745.n09Hj7Se007972@sheep.berlios.de>

Author: frohlich
Date: 2009-01-09 18:45:06 +0100 (Fri, 09 Jan 2009)
New Revision: 931

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
Log:
Formatting changes.

M    src/OpenFDM/CartesianJoint.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2009-01-09 14:19:24 UTC (rev 930)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2009-01-09 17:45:06 UTC (rev 931)
@@ -135,15 +135,15 @@
                       const VectorN& velocity)
     {
       // Set up the local coordinate system of the joint
-      mRelativeCoordinateSystem.setPosition(mParentLink.getLinkRelPos() + position);
+      Vector3 relPosition = mParentLink.getLinkRelPos() + position;
+      mRelativeCoordinateSystem.setPosition(relPosition);
       mRelativeCoordinateSystem.setOrientation(orientation);
 
       // Propagate the reference coordinate system to the parent.
       mChildLink.setCoordinateSystem(mParentLink.getCoordinateSystem().toReference(mRelativeCoordinateSystem));
 
       mChildLink.setPosAndVel(mParentLink.getMechanicLinkValue(),
-                              mParentLink.getLinkRelPos() + position,
-                              orientation, mJointMatrix*velocity);
+                              relPosition, orientation, mJointMatrix*velocity);
     }
 
     /** Compute the articulation step for a given joint force.
@@ -198,26 +198,26 @@
       parentSpAccel = mRelativeCoordinateSystem.motionToLocal(parentSpAccel);
 
       Vector6 f = mChildLink.getInertia()*parentSpAccel + pAlpha;
-      velDot = hIh.solve(mJointForce - trans(mJointMatrix)*f);
+      mVelDot = hIh.solve(mJointForce - trans(mJointMatrix)*f);
       mChildLink.setAccel(mParentLink.getMechanicLinkValue(),
-                          mJointMatrix*velDot);
+                          mJointMatrix*mVelDot);
     }
   
     /** Compute the articulation step for a given velocity derivative.
      *  Use this for actuators.
      */
-    void applyActuatorForce(const VectorN& _velDot)
+    void applyActuatorForce(const VectorN& velDot)
     {
       // The formulas conform to Roy Featherstones book eqn (7.36), (7.37)
       
-      velDot = _velDot;
+      mVelDot = velDot;
       
       // Compute the articulated force and inertia.
       // This Since there is no projection step with the joint axis, it is clear
       // that this is just a rigid connection ...
       SpatialInertia I = mChildLink.getInertia();
       Vector6 force = mChildLink.getForce();
-      force += I*(getHdot() + mJointMatrix*velDot);
+      force += I*(getHdot() + mJointMatrix*mVelDot);
       
       // Transform to parent link's coordinates and apply to the parent link
       force = mRelativeCoordinateSystem.forceToReference(force);
@@ -232,17 +232,17 @@
     void accelerateDueToVelDot()
     {
       mChildLink.setAccel(mParentLink.getMechanicLinkValue(),
-                          mJointMatrix*velDot);
+                          mJointMatrix*mVelDot);
     }
 
     const VectorN& getVelDot() const
-    { return velDot; }
+    { return mVelDot; }
 
   private:
     // Stores some values persistent accross velocity/articulation/acceleration
     MatrixFactorsNN hIh;
     Vector6 pAlpha;
-    VectorN velDot;
+    VectorN mVelDot;
     VectorN mJointForce;
 
     CoordinateSystem mRelativeCoordinateSystem;



From frohlich at mail.berlios.de  Fri Jan  9 19:31:27 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 9 Jan 2009 19:31:27 +0100
Subject: [OpenFDM-svn] r932 - branches/OpenFDM-StateSeparation
Message-ID: <200901091831.n09IVRh2031616@sheep.berlios.de>

Author: frohlich
Date: 2009-01-09 19:31:26 +0100 (Fri, 09 Jan 2009)
New Revision: 932

Modified:
   branches/OpenFDM-StateSeparation/TODO
Log:
Remove what is already done.

M    TODO


Modified: branches/OpenFDM-StateSeparation/TODO
===================================================================
--- branches/OpenFDM-StateSeparation/TODO	2009-01-09 17:45:06 UTC (rev 931)
+++ branches/OpenFDM-StateSeparation/TODO	2009-01-09 18:31:26 UTC (rev 932)
@@ -26,9 +26,7 @@
   - May be an extra argument to the mechanical system functions?
   - May be have a 'RootLink' pointer/id in each MechanicLinkValue, and have
     an environment cache for each RootLink (std::map<RootLinkId, Cache>)??
-* Single link MechanicContext has a local coordinate system
 * Optimize inertia transforms.
-* Give Mass an own Context with a pretransformed Inertia
 
 * Check why harmonic is so bad ...
 * Clean up SampleTime/Fraction



From frohlich at mail.berlios.de  Fri Jan  9 20:59:01 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 9 Jan 2009 20:59:01 +0100
Subject: [OpenFDM-svn] r933 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200901091959.n09Jx1Cb022698@sheep.berlios.de>

Author: frohlich
Date: 2009-01-09 20:59:00 +0100 (Fri, 09 Jan 2009)
New Revision: 933

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteActuator.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteActuator.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.h
   branches/OpenFDM-StateSeparation/src/test/foucault.cpp
Log:
Implement initial positions and velocities for
RotationalJoint, PrismaticJoint, RevoluteActuator and
RevoluteJoint.

M    src/test/foucault.cpp
M    src/OpenFDM/RotationalJoint.cpp
M    src/OpenFDM/PrismaticJoint.cpp
M    src/OpenFDM/RevoluteActuator.cpp
M    src/OpenFDM/RevoluteJoint.cpp
M    src/OpenFDM/RotationalJoint.h
M    src/OpenFDM/PrismaticJoint.h
M    src/OpenFDM/RevoluteActuator.h
M    src/OpenFDM/RevoluteJoint.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticJoint.cpp	2009-01-09 18:31:26 UTC (rev 932)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticJoint.cpp	2009-01-09 19:59:00 UTC (rev 933)
@@ -19,6 +19,8 @@
 
 BEGIN_OPENFDM_OBJECT_DEF(PrismaticJoint, Joint)
   DEF_OPENFDM_PROPERTY(Vector3, Axis, Serialized)
+  DEF_OPENFDM_PROPERTY(Real, InitialPosition, Serialized)
+  DEF_OPENFDM_PROPERTY(Real, InitialVelocity, Serialized)
   END_OPENFDM_OBJECT_DEF
 
 PrismaticJoint::PrismaticJoint(const std::string& name) :
@@ -27,7 +29,9 @@
   mVelocityPort(this, "velocity", Size(1, 1)),
   mPositionStateInfo(new Vector1StateInfo),
   mVelocityStateInfo(new Vector1StateInfo),
-  mAxis(Vector3(1, 0, 0))
+  mAxis(Vector3(1, 0, 0)),
+  mInitialPosition(0),
+  mInitialVelocity(0)
 {
   addContinousStateInfo(mPositionStateInfo);
   addContinousStateInfo(mVelocityStateInfo);
@@ -57,7 +61,31 @@
   mAxis = (1/nrm)*axis;
 }
 
+const real_type&
+PrismaticJoint::getInitialPosition() const
+{
+  return mInitialPosition;
+}
+
 void
+PrismaticJoint::setInitialPosition(const real_type& initialPosition)
+{
+  mInitialPosition = initialPosition;
+}
+
+const real_type&
+PrismaticJoint::getInitialVelocity() const
+{
+  return mInitialVelocity;
+}
+
+void
+PrismaticJoint::setInitialVelocity(const real_type& initialVelocity)
+{
+  mInitialVelocity = initialVelocity;
+}
+
+void
 PrismaticJoint::setEnableExternalForce(bool enable)
 {
   if (enable == getEnableExternalForce())
@@ -79,8 +107,8 @@
                     ContinousStateValueVector& continousState,
                     const PortValueList&) const
 {
-  continousState[*mPositionStateInfo] = 0;
-  continousState[*mVelocityStateInfo] = 0;
+  continousState[*mPositionStateInfo] = mInitialPosition;
+  continousState[*mVelocityStateInfo] = mInitialVelocity;
 }
 
 PrismaticJoint::Matrix6N

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticJoint.h	2009-01-09 18:31:26 UTC (rev 932)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticJoint.h	2009-01-09 19:59:00 UTC (rev 933)
@@ -33,6 +33,12 @@
   const Vector3& getAxis() const;
   void setAxis(const Vector3& axis);
 
+  const real_type& getInitialPosition() const;
+  void setInitialPosition(const real_type& initialPosition);
+
+  const real_type& getInitialVelocity() const;
+  void setInitialVelocity(const real_type& initialVelocity);
+
   void setEnableExternalForce(bool enable);
   bool getEnableExternalForce() const;
 
@@ -65,6 +71,8 @@
   SharedPtr<Vector1StateInfo> mVelocityStateInfo;
 
   Vector3 mAxis;
+  real_type mInitialPosition;
+  real_type mInitialVelocity;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteActuator.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteActuator.cpp	2009-01-09 18:31:26 UTC (rev 932)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteActuator.cpp	2009-01-09 19:59:00 UTC (rev 933)
@@ -19,6 +19,8 @@
 
 BEGIN_OPENFDM_OBJECT_DEF(RevoluteActuator, Joint)
   DEF_OPENFDM_PROPERTY(Vector3, Axis, Serialized)
+  DEF_OPENFDM_PROPERTY(Real, InitialPosition, Serialized)
+  DEF_OPENFDM_PROPERTY(Real, InitialVelocity, Serialized)
   DEF_OPENFDM_PROPERTY(Bool, VelocityControl, Serialized)
   DEF_OPENFDM_PROPERTY(Real, MaxVel, Serialized)
   DEF_OPENFDM_PROPERTY(Real, VelGain, Serialized)
@@ -33,6 +35,8 @@
   mPositionStateInfo(new Vector1StateInfo),
   mVelocityStateInfo(new Vector1StateInfo),
   mAxis(Vector3(1, 0, 0)),
+  mInitialPosition(0),
+  mInitialVelocity(0),
   mVelocityControl(false),
   mVelGain(1),
   mVelDotGain(1),
@@ -66,13 +70,85 @@
   mAxis = (1/nrm)*axis;
 }
 
+const real_type&
+RevoluteActuator::getInitialPosition() const
+{
+  return mInitialPosition;
+}
+
 void
+RevoluteActuator::setInitialPosition(const real_type& initialPosition)
+{
+  mInitialPosition = initialPosition;
+}
+
+const real_type&
+RevoluteActuator::getInitialVelocity() const
+{
+  return mInitialVelocity;
+}
+
+void
+RevoluteActuator::setInitialVelocity(const real_type& initialVelocity)
+{
+  mInitialVelocity = initialVelocity;
+}
+
+const bool&
+RevoluteActuator::getVelocityControl(void) const
+{
+  return mVelocityControl;
+}
+
+void
+RevoluteActuator::setVelocityControl(const bool& velocityControl)
+{
+  mVelocityControl = velocityControl;
+}
+
+const real_type&
+RevoluteActuator::getMaxVel(void) const
+{
+  return mMaxVel;
+}
+
+void
+RevoluteActuator::setMaxVel(const real_type& maxVel)
+{
+  mMaxVel = maxVel;
+}
+
+const real_type&
+RevoluteActuator::getVelGain(void) const
+{
+  return mVelGain;
+}
+
+void
+RevoluteActuator::setVelGain(const real_type& velGain)
+{
+  mVelGain = velGain;
+}
+
+const real_type&
+RevoluteActuator::getVelDotGain(void) const
+{
+  return mVelDotGain;
+}
+
+void
+RevoluteActuator::setVelDotGain(const real_type& velDotGain)
+{
+  mVelDotGain = velDotGain;
+}
+
+void
 RevoluteActuator::init(const Task&, DiscreteStateValueVector&,
                        ContinousStateValueVector& continousState,
                        const PortValueList&) const
 {
-  continousState[*mPositionStateInfo] = 0;
-  continousState[*mVelocityStateInfo] = 0;
+  continousState[*mPositionStateInfo] = mInitialPosition;
+  continousState[*mVelocityStateInfo] = mInitialVelocity;
 }
 
 RevoluteActuator::Matrix6N

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteActuator.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteActuator.h	2009-01-09 18:31:26 UTC (rev 932)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteActuator.h	2009-01-09 19:59:00 UTC (rev 933)
@@ -33,26 +33,24 @@
   const Vector3& getAxis() const;
   void setAxis(const Vector3& axis);
 
-  const bool& getVelocityControl(void) const
-  { return mVelocityControl; }
-  void setVelocityControl(const bool& velocityControl)
-  { mVelocityControl = velocityControl; }
+  const real_type& getInitialPosition() const;
+  void setInitialPosition(const real_type& initialPosition);
 
-  const real_type& getMaxVel(void) const
-  { return mMaxVel; }
-  void setMaxVel(const real_type& maxVel)
-  { mMaxVel = maxVel; }
+  const real_type& getInitialVelocity() const;
+  void setInitialVelocity(const real_type& initialVelocity);
 
-  const real_type& getVelGain(void) const
-  { return mVelGain; }
-  void setVelGain(const real_type& velGain)
-  { mVelGain = velGain; }
+  const bool& getVelocityControl(void) const;
+  void setVelocityControl(const bool& velocityControl);
 
-  const real_type& getVelDotGain(void) const
-  { return mVelDotGain; }
-  void setVelDotGain(const real_type& velDotGain)
-  { mVelDotGain = velDotGain; }
+  const real_type& getMaxVel(void) const;
+  void setMaxVel(const real_type& maxVel);
 
+  const real_type& getVelGain(void) const;
+  void setVelGain(const real_type& velGain);
+
+  const real_type& getVelDotGain(void) const;
+  void setVelDotGain(const real_type& velDotGain);
+
 protected:
 
   virtual void init(const Task&, DiscreteStateValueVector&,
@@ -83,6 +81,8 @@
   SharedPtr<Vector1StateInfo> mVelocityStateInfo;
 
   Vector3 mAxis;
+  real_type mInitialPosition;
+  real_type mInitialVelocity;
   bool mVelocityControl;
   real_type mVelGain;
   real_type mVelDotGain;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.cpp	2009-01-09 18:31:26 UTC (rev 932)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.cpp	2009-01-09 19:59:00 UTC (rev 933)
@@ -19,6 +19,8 @@
 
 BEGIN_OPENFDM_OBJECT_DEF(RevoluteJoint, Joint)
   DEF_OPENFDM_PROPERTY(Vector3, Axis, Serialized)
+  DEF_OPENFDM_PROPERTY(Real, InitialPosition, Serialized)
+  DEF_OPENFDM_PROPERTY(Real, InitialVelocity, Serialized)
   END_OPENFDM_OBJECT_DEF
 
 RevoluteJoint::RevoluteJoint(const std::string& name) :
@@ -27,7 +29,9 @@
   mVelocityPort(this, "velocity", Size(1, 1)),
   mPositionStateInfo(new Vector1StateInfo),
   mVelocityStateInfo(new Vector1StateInfo),
-  mAxis(Vector3(1, 0, 0))
+  mAxis(Vector3(1, 0, 0)),
+  mInitialPosition(0),
+  mInitialVelocity(0)
 {
   addContinousStateInfo(mPositionStateInfo);
   addContinousStateInfo(mVelocityStateInfo);
@@ -54,7 +58,31 @@
   mAxis = (1/nrm)*axis;
 }
 
+const real_type&
+RevoluteJoint::getInitialPosition() const
+{
+  return mInitialPosition;
+}
+
 void
+RevoluteJoint::setInitialPosition(const real_type& initialPosition)
+{
+  mInitialPosition = initialPosition;
+}
+
+const real_type&
+RevoluteJoint::getInitialVelocity() const
+{
+  return mInitialVelocity;
+}
+
+void
+RevoluteJoint::setInitialVelocity(const real_type& initialVelocity)
+{
+  mInitialVelocity = initialVelocity;
+}
+
+void
 RevoluteJoint::setEnableExternalForce(bool enable)
 {
   if (enable == getEnableExternalForce())
@@ -76,8 +104,8 @@
                     ContinousStateValueVector& continousState,
                     const PortValueList&) const
 {
-  continousState[*mPositionStateInfo] = 0;
-  continousState[*mVelocityStateInfo] = 0;
+  continousState[*mPositionStateInfo] = mInitialPosition;
+  continousState[*mVelocityStateInfo] = mInitialVelocity;
 }
 
 RevoluteJoint::Matrix6N

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.h	2009-01-09 18:31:26 UTC (rev 932)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.h	2009-01-09 19:59:00 UTC (rev 933)
@@ -33,6 +33,12 @@
   const Vector3& getAxis() const;
   void setAxis(const Vector3& axis);
 
+  const real_type& getInitialPosition() const;
+  void setInitialPosition(const real_type& initialPosition);
+
+  const real_type& getInitialVelocity() const;
+  void setInitialVelocity(const real_type& initialVelocity);
+
   void setEnableExternalForce(bool enable);
   bool getEnableExternalForce() const;
 
@@ -66,6 +72,8 @@
   SharedPtr<Vector1StateInfo> mVelocityStateInfo;
 
   Vector3 mAxis;
+  real_type mInitialPosition;
+  real_type mInitialVelocity;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.cpp	2009-01-09 18:31:26 UTC (rev 932)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.cpp	2009-01-09 19:59:00 UTC (rev 933)
@@ -18,6 +18,8 @@
 namespace OpenFDM {
 
 BEGIN_OPENFDM_OBJECT_DEF(RotationalJoint, Joint)
+  DEF_OPENFDM_PROPERTY(Quaternion, InitialOrientation, Serialized)
+  DEF_OPENFDM_PROPERTY(Vector3, InitialVelocity, Serialized)
   END_OPENFDM_OBJECT_DEF
 
 RotationalJoint::RotationalJoint(const std::string& name) :
@@ -25,7 +27,9 @@
   mOrientationPort(this, "orientation", Size(4, 1)),
   mVelocityPort(this, "velocity", Size(3, 1)),
   mPositionStateInfo(new Vector4StateInfo),
-  mVelocityStateInfo(new Vector3StateInfo)
+  mVelocityStateInfo(new Vector3StateInfo),
+  mInitialOrientation(Quaternion::unit()),
+  mInitialVelocity(Vector3::zeros())
 {
   addContinousStateInfo(mPositionStateInfo);
   addContinousStateInfo(mVelocityStateInfo);
@@ -35,7 +39,31 @@
 {
 }
 
+const Quaternion&
+RotationalJoint::getInitialOrientation() const
+{
+  return mInitialOrientation;
+}
+
 void
+RotationalJoint::setInitialOrientation(const Quaternion& initialOrientation)
+{
+  mInitialOrientation = initialOrientation;
+}
+
+const Vector3&
+RotationalJoint::getInitialVelocity() const
+{
+  return mInitialVelocity;
+}
+
+void
+RotationalJoint::setInitialVelocity(const Vector3& initialVelocity)
+{
+  mInitialVelocity = initialVelocity;
+}
+
+void
 RotationalJoint::setEnableExternalForce(bool enable)
 {
   if (enable == getEnableExternalForce())
@@ -57,8 +85,8 @@
                       ContinousStateValueVector& continousState,
                       const PortValueList&) const
 {
-  continousState[*mPositionStateInfo] = Quaternion::unit();
-  continousState[*mVelocityStateInfo] = Vector3::zeros();
+  continousState[*mPositionStateInfo] = mInitialOrientation;
+  continousState[*mVelocityStateInfo] = mInitialVelocity;
 }
 
 RotationalJoint::Matrix6N

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.h	2009-01-09 18:31:26 UTC (rev 932)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RotationalJoint.h	2009-01-09 19:59:00 UTC (rev 933)
@@ -28,6 +28,12 @@
   RotationalJoint(const std::string& name);
   virtual ~RotationalJoint(void);
 
+  const Quaternion& getInitialOrientation() const;
+  void setInitialOrientation(const Quaternion& initialOrientation);
+
+  const Vector3& getInitialVelocity() const;
+  void setInitialVelocity(const Vector3& initialVelocity);
+
   void setEnableExternalForce(bool enable);
   bool getEnableExternalForce() const;
 
@@ -59,6 +65,9 @@
 
   SharedPtr<Vector4StateInfo> mPositionStateInfo;
   SharedPtr<Vector3StateInfo> mVelocityStateInfo;
+
+  Quaternion mInitialOrientation;
+  Vector3 mInitialVelocity;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/test/foucault.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2009-01-09 18:31:26 UTC (rev 932)
+++ branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2009-01-09 19:59:00 UTC (rev 933)
@@ -25,20 +25,21 @@
   Geodetic geodetic(rad2deg*(48 + 50.781/60), rad2deg*(2 + 20.709/60), 0);
   // Test the direction of the velocity vector projected to the ground plane
 
-  // FIXME, need usable environment stuff like gravity first ...
   SharedPtr<Group> group = new Group("Foucault");
   FixedRootJoint* fixedRootJoint = new FixedRootJoint("Root");
   fixedRootJoint->setRootPosition(planet->toCart(geodetic));
   fixedRootJoint->setRootOrientation(planet->getGeodHLOrientation(geodetic));
   group->addChild(fixedRootJoint);
   RotationalJoint* rotationalJoint1 = new RotationalJoint("Rotational Joint 1");
+  Quaternion orientation = Quaternion::fromAngleAxisDeg(90, Vector3(0, 1, 0));
+  rotationalJoint1->setInitialOrientation(orientation);
   group->addChild(rotationalJoint1);
   RigidBody* rigidBody1 = new RigidBody("Rigid Body 1");
   rigidBody1->addLink("externalInteractLink");
   group->addChild(rigidBody1);
 
-  Mass* mass = new Mass("Mass", 28, InertiaMatrix(1, 0, 0, 1, 0, 1));
-  mass->setPosition(Vector3(3, 0, 67));
+  Mass* mass = new Mass("Mass", 28, InertiaMatrix(1e-2, 0, 0, 1e-2, 0, 1e-2));
+  mass->setPosition(Vector3(0, 0, 67));
   group->addChild(mass);
 
   ExternalInteract* externalInteract = new ExternalInteract("ExternalInteract");



From frohlich at mail.berlios.de  Sat Jan 10 10:15:14 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 10 Jan 2009 10:15:14 +0100
Subject: [OpenFDM-svn] r934 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901100915.n0A9FE4a010561@sheep.berlios.de>

Author: frohlich
Date: 2009-01-10 10:15:13 +0100 (Sat, 10 Jan 2009)
New Revision: 934

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleContact.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleContact.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleGear.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleGear.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h
Log:
Enable arbitrary port access in contact models.
Sigh, need better solution for that port/state stuff ...

M    src/OpenFDM/WheelContact.cpp
M    src/OpenFDM/SimpleGear.h
M    src/OpenFDM/Makefile.am
M    src/OpenFDM/WheelContact.h
M    src/OpenFDM/Contact.h
M    src/OpenFDM/Contact.cpp
M    src/OpenFDM/SimpleContact.h
M    src/OpenFDM/SimpleGear.cpp
M    src/OpenFDM/SimpleContact.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.cpp	2009-01-09 19:59:00 UTC (rev 933)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.cpp	2009-01-10 09:15:13 UTC (rev 934)
@@ -60,14 +60,16 @@
     
     // Get the plane normal force.
     real_type normForce = mContact->computeNormalForce(compressLength,
-                                                       compressVel);
+                                                       compressVel,
+                                                       mPortValueList);
     // The normal force cannot get negative here.
     normForce = max(static_cast<real_type>(0), normForce);
     
     // Get the friction force.
     Vector3 fricForce = mContact->computeFrictionForce(normForce, sVel,
                                                        lp.getNormal(),
-                                                       groundValues.friction);
+                                                       groundValues.friction,
+                                                       mPortValueList);
     
     // The resulting force is the sum of both.
     // The minus sign is because of the direction of the surface normal.
@@ -98,15 +100,14 @@
 }
 
 real_type
-Contact::computeNormalForce(real_type compressLen, real_type compressVel) const
+Contact::computeNormalForce(real_type, real_type, PortValueList&) const
 {
   return 0;
 }
 
 Vector3
-Contact::computeFrictionForce(real_type normForce, const Vector3& vel,
-                              const Vector3& groundNormal,
-                              real_type friction) const
+Contact::computeFrictionForce(real_type, const Vector3&, const Vector3&,
+                              real_type, PortValueList&) const
 {
   return Vector3::zeros();
 }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.h	2009-01-09 19:59:00 UTC (rev 933)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Contact.h	2009-01-10 09:15:13 UTC (rev 934)
@@ -21,12 +21,14 @@
 
   // Compute the plane normal force.
   virtual real_type
-  computeNormalForce(real_type compressLen, real_type compressVel) const;
+  computeNormalForce(real_type compressLen, real_type compressVel,
+                     PortValueList&) const;
 
   // Compute the friction force.
   virtual Vector3
   computeFrictionForce(real_type normForce, const Vector3& vel,
-                       const Vector3& groundNormal, real_type friction) const;
+                       const Vector3& groundNormal, real_type friction,
+                       PortValueList&) const;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2009-01-09 19:59:00 UTC (rev 933)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2009-01-10 09:15:13 UTC (rev 934)
@@ -283,12 +283,12 @@
   RevoluteJoint.cpp \
   RotationalJoint.cpp \
   SimpleContact.cpp \
+  SimpleGear.cpp \
   SingleLinkInteract.cpp \
   UniversalJoint.cpp \
   WheelContact.cpp
 
 #   AeroForce.cpp \
-#   SimpleGear.cpp \
 #   Tank.cpp
 
 #   Launchbar.cpp \

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleContact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleContact.cpp	2009-01-09 19:59:00 UTC (rev 933)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleContact.cpp	2009-01-10 09:15:13 UTC (rev 934)
@@ -65,7 +65,8 @@
 // Compute the plane normal force.
 real_type
 SimpleContact::computeNormalForce(real_type compressLen,
-                                  real_type compressVel) const
+                                  real_type compressVel,
+                                  PortValueList&) const
 {
   return compressLen*mSpringConst - mDamperConstant*compressVel;
 }
@@ -73,7 +74,8 @@
 // Compute the friction force.
 Vector3
 SimpleContact::computeFrictionForce(real_type normForce, const Vector3& vel,
-                                    const Vector3&, real_type friction) const
+                                    const Vector3&, real_type friction,
+                                    PortValueList&) const
 {
   real_type nVel = norm(vel);
   if (1 < nVel)

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleContact.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleContact.h	2009-01-09 19:59:00 UTC (rev 933)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleContact.h	2009-01-10 09:15:13 UTC (rev 934)
@@ -26,12 +26,14 @@
 
   // Compute the plane normal force.
   virtual real_type
-  computeNormalForce(real_type compressLen, real_type compressVel) const;
+  computeNormalForce(real_type compressLen, real_type compressVel,
+                     PortValueList&) const;
 
   // Compute the friction force.
   virtual Vector3
   computeFrictionForce(real_type normForce, const Vector3& vel,
-                       const Vector3&, real_type friction) const;
+                       const Vector3&, real_type friction,
+                       PortValueList&) const;
 
 private:
   real_type mSpringConst;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleGear.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleGear.cpp	2009-01-09 19:59:00 UTC (rev 933)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleGear.cpp	2009-01-10 09:15:13 UTC (rev 934)
@@ -9,102 +9,64 @@
 #include "Unit.h"
 #include "Object.h"
 #include "Vector.h"
-#include "Frame.h"
-#include "Force.h"
 #include "Contact.h"
 
 namespace OpenFDM {
 
 BEGIN_OPENFDM_OBJECT_DEF(SimpleGear, Contact)
+  DEF_OPENFDM_PROPERTY(Bool, EnableSteeringAngle, Serialized)
+  DEF_OPENFDM_PROPERTY(Bool, EnableBrakeCommand, Serialized)
   DEF_OPENFDM_PROPERTY(Real, SpringConstant, Serialized)
-/// FIXME want to have similar names than with linearspringdamper
-  DEF_OPENFDM_PROPERTY(Real, SpringDamping, Serialized)
+  DEF_OPENFDM_PROPERTY(Real, DamperConstant, Serialized)
   DEF_OPENFDM_PROPERTY(Real, FrictionCoeficient, Serialized)
-
-  DEF_OPENFDM_PROPERTY(Real, SteeringAngle, NotSerialized)
-/// FIXME think about that name 
-  DEF_OPENFDM_PROPERTY(Real, Brake, NotSerialized)
   END_OPENFDM_OBJECT_DEF
 
-SimpleGear::SimpleGear(const std::string& name)
-  : Contact(name)
+SimpleGear::SimpleGear(const std::string& name) :
+  Contact(name),
+  mSpringConst(0),
+  mDamperConst(0),
+  mFrictionCoef(0)
 {
-  mSteeringAngle = 0;
-  mBrake = 0;
-  mSpringConst = 0;
-  mSpringDamp = 0;
-  mFrictionCoef = 0;
-
-  /// FIXME
-  unsigned inputPortBase = getNumInputPorts();
-  setNumInputPorts(inputPortBase + 2);
-  setInputPortName(inputPortBase + 0, "brakeCommand");
-  setInputPortName(inputPortBase + 1, "steeringAngle");
 }
 
 SimpleGear::~SimpleGear(void)
 {
 }
 
-bool
-SimpleGear::init(void)
+void
+SimpleGear::setEnableSteeringAngle(bool enable)
 {
-  NumericPortAcceptor* port = getInputPort("brakeCommand");
-  if (port)
-    mBrakeCommandHandle = port->toRealPortHandle();
+  if (enable == getEnableSteeringAngle())
+    return;
+  if (enable)
+    mSteeringAnglePort = RealInputPort(this, "steeringAngle", true);
   else
-    mBrakeCommandHandle = RealPortHandle(0);
-
-  port = getInputPort("steeringAngle");
-  if (port)
-    mSteeringAngleHandle = port->toRealPortHandle();
-  else
-    mSteeringAngleHandle = RealPortHandle(0);
-
-  mBrake = 0;
-  mSteeringAngle = 0;
-
-  return Contact::init();
+    mSteeringAnglePort.clear();
 }
 
-void
-SimpleGear::output(const TaskInfo& taskInfo)
+bool
+SimpleGear::getEnableSteeringAngle() const
 {
-  if (nonZeroIntersection(taskInfo.getSampleTimeSet(),
-                          SampleTime::PerTimestep)) {
-    if (mBrakeCommandHandle.isConnected())
-      mBrake = mBrakeCommandHandle.getRealValue();
-    if (mSteeringAngleHandle.isConnected())
-      mSteeringAngle = mSteeringAngleHandle.getRealValue();
-  }
-
-  Contact::output(taskInfo);
+  return !mSteeringAnglePort.empty();
 }
 
-real_type
-SimpleGear::getSteeringAngle(void) const
-{
-  return mSteeringAngle;
-}
-
 void
-SimpleGear::setSteeringAngle(real_type steeringAngle)
+SimpleGear::setEnableBrakeCommand(bool enable)
 {
-  mSteeringAngle = steeringAngle;
+  if (enable == getEnableBrakeCommand())
+    return;
+  if (enable)
+    mBrakeCommandPort = RealInputPort(this, "brakeCommand", true);
+  else
+    mBrakeCommandPort.clear();
 }
 
-real_type
-SimpleGear::getBrake(void) const
+bool
+SimpleGear::getEnableBrakeCommand() const
 {
-  return mBrake;
+  return !mBrakeCommandPort.empty();
 }
 
-void
-SimpleGear::setBrake(real_type brake)
-{
-  mBrake = brake;
-}
-
 real_type
 SimpleGear::getSpringConstant(void) const
 {
@@ -118,15 +80,15 @@
 }
 
 real_type
-SimpleGear::getSpringDamping(void) const
+SimpleGear::getDamperConstant(void) const
 {
-  return mSpringDamp;
+  return mDamperConst;
 }
 
 void
-SimpleGear::setSpringDamping(real_type springDamp)
+SimpleGear::setDamperConstant(real_type damperConst)
 {
-  mSpringDamp = springDamp;
+  mDamperConst = damperConst;
 }
 
 real_type
@@ -144,24 +106,33 @@
 // Compute the plane normal force.
 real_type
 SimpleGear::computeNormalForce(real_type compressLen,
-                               real_type compressVel) const
+                               real_type compressVel,
+                               PortValueList& portValueList) const
 {
-  return compressLen*mSpringConst
-    - mSpringDamp*min(compressVel, static_cast<real_type>(0));
+  return compressLen*mSpringConst - mDamperConst*compressVel;
 }
 
 // Compute the friction force.
 Vector3
 SimpleGear::computeFrictionForce(real_type normForce, const Vector3& vel,
                                  const Vector3& groundNormal,
-                                 real_type friction) const
+                                 real_type friction,
+                                 PortValueList& portValueList) const
 {
+  // Get the relevant inputs or their defaults.
+  real_type steeringAngle = 0;
+  if (getEnableSteeringAngle())
+    steeringAngle = portValueList[mSteeringAnglePort];
+  real_type brakeCommand = 0;
+  if (getEnableBrakeCommand())
+    brakeCommand = portValueList[mBrakeCommandPort];
+
   // Get a transform from the current frames coordinates into
   // wheel coordinates.
   // The wheel coordinates x asxis is defined by the forward orientation
   // of the wheel, the z axis points perpandicular to the ground
   // plane downwards.
-  Vector3 forward(cos(mSteeringAngle), sin(mSteeringAngle), 0);
+  Vector3 forward(cos(steeringAngle), sin(steeringAngle), 0);
   Vector3 side = cross(groundNormal, forward);
   forward = normalize(cross(side, groundNormal));
   side = normalize(side);
@@ -176,7 +147,7 @@
   // The wheel spin speed is not known in this simple model.
   // We just set that to 0.99999 times the x-velocity in the 
   // rolling case and to 1 in the brakeing case.
-  real_type wheelSlip = interpolate(mBrake,
+  real_type wheelSlip = interpolate(brakeCommand,
                                     (real_type)0, 1e-5*wheelVel(0),
                                     (real_type)1, wheelVel(0));
   

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleGear.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleGear.h	2009-01-09 19:59:00 UTC (rev 933)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SimpleGear.h	2009-01-10 09:15:13 UTC (rev 934)
@@ -9,8 +9,6 @@
 #include "Unit.h"
 #include "Object.h"
 #include "Vector.h"
-#include "Frame.h"
-#include "Force.h"
 #include "Contact.h"
 
 namespace OpenFDM {
@@ -21,43 +19,43 @@
   SimpleGear(const std::string& name);
   virtual ~SimpleGear(void);
 
-  virtual bool init(void);
-  virtual void output(const TaskInfo&);
+  /// Set availabilty of the steering angle input port
+  void setEnableSteeringAngle(bool enable);
+  /// Get availabilty of the steering angle input port
+  bool getEnableSteeringAngle() const;
 
-  real_type getSteeringAngle(void) const;
-  void setSteeringAngle(real_type steeringAngle);
+  /// Set availabilty of the brake command input port
+  void setEnableBrakeCommand(bool enable);
+  /// Get availabilty of the brake command input port
+  bool getEnableBrakeCommand() const;
 
-  real_type getBrake(void) const;
-  void setBrake(real_type brake);
-
   real_type getSpringConstant(void) const;
   void setSpringConstant(real_type springConst);
 
-  real_type getSpringDamping(void) const;
-  void setSpringDamping(real_type springDamp);
+  real_type getDamperConstant(void) const;
+  void setDamperConstant(real_type damperConstant);
 
   real_type getFrictionCoeficient(void) const;
   void setFrictionCoeficient(real_type frictionCoef);
 
   // Compute the plane normal force.
   virtual real_type
-  computeNormalForce(real_type compressLen, real_type compressVel) const;
+  computeNormalForce(real_type compressLen, real_type compressVel,
+                     PortValueList&) const;
 
   // Compute the friction force.
   virtual Vector3
   computeFrictionForce(real_type normForce, const Vector3& vel,
-                       const Vector3& groundNormal, real_type friction) const;
+                       const Vector3& groundNormal, real_type friction,
+                       PortValueList&) const;
 
 private:
-  real_type mSteeringAngle;
-  real_type mBrake;
+  RealInputPort mSteeringAnglePort;
+  RealInputPort mBrakeCommandPort;
 
   real_type mSpringConst;
-  real_type mSpringDamp;
+  real_type mDamperConst;
   real_type mFrictionCoef;
-
-  RealPortHandle mBrakeCommandHandle;
-  RealPortHandle mSteeringAngleHandle;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2009-01-09 19:59:00 UTC (rev 933)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.cpp	2009-01-10 09:15:13 UTC (rev 934)
@@ -86,13 +86,14 @@
     
     // Get the plane normal force.
     real_type normForce = mWheelContact->computeNormalForce(compressLength,
-                                                            compressVel);
+                                                            compressVel,
+                                                            mPortValueList);
     // The normal force cannot get negative here.
     normForce = max(static_cast<real_type>(0), normForce);
     
     // Get the friction force.
     Vector2 fricForce = mWheelContact->computeFrictionForce(normForce, wheelVel,
-                                             omegaR, groundValues.friction);
+                                 omegaR, groundValues.friction, mPortValueList);
     
     // The resulting force is the sum of both.
     // The minus sign is because of the direction of the surface normal.
@@ -128,14 +129,17 @@
 }
 
 real_type
-WheelContact::computeNormalForce(real_type compressLen, real_type compressVel) const
+WheelContact::computeNormalForce(real_type compressLen,
+                                 real_type compressVel,
+                                 PortValueList&) const
 {
   return compressLen*mSpringConstant + mDampingConstant*compressVel;
 }
 
 Vector2
 WheelContact::computeFrictionForce(real_type normForce, const Vector2& vel,
-                                   real_type omegaR, real_type friction) const
+                                   real_type omegaR, real_type friction,
+                                   PortValueList&) const
 {
   // We just get the wheel slip directly here
   real_type wheelSlip = vel(0)+omegaR;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h	2009-01-09 19:59:00 UTC (rev 933)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/WheelContact.h	2009-01-10 09:15:13 UTC (rev 934)
@@ -21,12 +21,14 @@
 
   // Compute the plane normal force.
   virtual real_type
-  computeNormalForce(real_type compressLen, real_type compressVel) const;
+  computeNormalForce(real_type compressLen, real_type compressVel,
+                     PortValueList&) const;
 
   // Compute the friction force.
   virtual Vector2
   computeFrictionForce(real_type normForce, const Vector2& vel,
-                       real_type omegaR, real_type friction) const;
+                       real_type omegaR, real_type friction,
+                       PortValueList&) const;
 
   /** Set wheel axis direction.
    */



From frohlich at mail.berlios.de  Sat Jan 10 10:29:15 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 10 Jan 2009 10:29:15 +0100
Subject: [OpenFDM-svn] r935 - branches/OpenFDM-StateSeparation
Message-ID: <200901100929.n0A9TFgp011717@sheep.berlios.de>

Author: frohlich
Date: 2009-01-10 10:29:15 +0100 (Sat, 10 Jan 2009)
New Revision: 935

Modified:
   branches/OpenFDM-StateSeparation/TODO
Log:
More TODO ...

M    TODO


Modified: branches/OpenFDM-StateSeparation/TODO
===================================================================
--- branches/OpenFDM-StateSeparation/TODO	2009-01-10 09:15:13 UTC (rev 934)
+++ branches/OpenFDM-StateSeparation/TODO	2009-01-10 09:29:15 UTC (rev 935)
@@ -16,6 +16,15 @@
  |- RigidBodyContext (has a unique parent and may be a list of links with
          different local coordinate systems, see above)
 
+* The RevoluteActuator should not have a built in acceleration logic.
+  Make that external to be more flexible.
+* Rework the UniversalJoint.
+* Joint limits.
+
+* Build up a factory infrastructure returning groups for composite models.
+
+* Direct HLA Access??? Is there a possible way to do that??
+
 * More init time checking for SimpleDirectModels
 * Template Contexts for SimpleDirectModels
 * Sensor



From frohlich at mail.berlios.de  Sat Jan 10 12:13:34 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 10 Jan 2009 12:13:34 +0100
Subject: [OpenFDM-svn] r936 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901101113.n0ABDYJW017522@sheep.berlios.de>

Author: frohlich
Date: 2009-01-10 12:13:34 +0100 (Sat, 10 Jan 2009)
New Revision: 936

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/JointContext.h
Log:
Hdot belongs more into the cartesian joint than
into a generic JointContext.

M    src/OpenFDM/CartesianJoint.h
M    src/OpenFDM/JointContext.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2009-01-10 09:29:15 UTC (rev 935)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2009-01-10 11:13:34 UTC (rev 936)
@@ -146,6 +146,11 @@
                               relPosition, orientation, mJointMatrix*velocity);
     }
 
+    Vector6 getHdot()
+    {
+      return getChildLink().getMechanicLinkValue().getFrame().getHdot();
+    }
+    
     /** Compute the articulation step for a given joint force.
      *  Use this for usual joints.
      */

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/JointContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/JointContext.h	2009-01-10 09:29:15 UTC (rev 935)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/JointContext.h	2009-01-10 11:13:34 UTC (rev 936)
@@ -57,9 +57,6 @@
   ChildLink& getChildLink()
   { return mChildLink; }
 
-  Vector6 getHdot() const
-  { return mChildLink.getMechanicLinkValue().getFrame().getHdot(); }
-    
 protected:
   // PortValues
   PortValueList mPortValueList;



From frohlich at mail.berlios.de  Sat Jan 10 12:38:18 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 10 Jan 2009 12:38:18 +0100
Subject: [OpenFDM-svn] r937 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901101138.n0ABcIxB027739@sheep.berlios.de>

Author: frohlich
Date: 2009-01-10 12:38:16 +0100 (Sat, 10 Jan 2009)
New Revision: 937

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
Log:
Get spatial velocity directly from the parent link
class instead of getting the mechanic link value.

M    Mass.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2009-01-10 11:13:34 UTC (rev 936)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2009-01-10 11:38:16 UTC (rev 937)
@@ -41,7 +41,7 @@
 
     // Each inertia has a contribution to the spatial bias force.
     // This part is handled here.
-    Vector6 v = getLink().getMechanicLinkValue().getSpVel();
+    Vector6 v = getLink().getSpVelAtLink();
     Vector6 Iv = mSpatialInertia*v;
     Vector6 vIv = Vector6(cross(v.getAngular(), Iv.getAngular()) +
                           cross(v.getLinear(), Iv.getLinear()),



From frohlich at mail.berlios.de  Sat Jan 10 13:09:22 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 10 Jan 2009 13:09:22 +0100
Subject: [OpenFDM-svn] r938 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200901101209.n0AC9MhR031719@sheep.berlios.de>

Author: frohlich
Date: 2009-01-10 13:09:21 +0100 (Sat, 10 Jan 2009)
New Revision: 938

Modified:
   branches/OpenFDM-StateSeparation/src/test/foucault.cpp
Log:
Start with less than 90 degrees ...

M    foucault.cpp


Modified: branches/OpenFDM-StateSeparation/src/test/foucault.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2009-01-10 11:38:16 UTC (rev 937)
+++ branches/OpenFDM-StateSeparation/src/test/foucault.cpp	2009-01-10 12:09:21 UTC (rev 938)
@@ -31,7 +31,7 @@
   fixedRootJoint->setRootOrientation(planet->getGeodHLOrientation(geodetic));
   group->addChild(fixedRootJoint);
   RotationalJoint* rotationalJoint1 = new RotationalJoint("Rotational Joint 1");
-  Quaternion orientation = Quaternion::fromAngleAxisDeg(90, Vector3(0, 1, 0));
+  Quaternion orientation = Quaternion::fromAngleAxisDeg(10, Vector3(0, 1, 0));
   rotationalJoint1->setInitialOrientation(orientation);
   group->addChild(rotationalJoint1);
   RigidBody* rigidBody1 = new RigidBody("Rigid Body 1");



From frohlich at mail.berlios.de  Sat Jan 10 23:55:07 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 10 Jan 2009 23:55:07 +0100
Subject: [OpenFDM-svn] r939 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901102255.n0AMt73A023243@sheep.berlios.de>

Author: frohlich
Date: 2009-01-10 23:55:07 +0100 (Sat, 10 Jan 2009)
New Revision: 939

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Math.h
Log:
Add sqr function.

M    Math.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Math.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Math.h	2009-01-10 12:09:21 UTC (rev 938)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Math.h	2009-01-10 22:55:07 UTC (rev 939)
@@ -59,6 +59,13 @@
 };
 
 template<typename T>
+inline T
+sqr(const T& val)
+{
+  return val*val;
+}
+
+template<typename T>
 inline int
 sign(const T& val)
 {



From frohlich at mail.berlios.de  Sat Jan 17 14:10:52 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 17 Jan 2009 14:10:52 +0100
Subject: [OpenFDM-svn] r941 -
	branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg
Message-ID: <200901171310.n0HDAqIn028907@sheep.berlios.de>

Author: frohlich
Date: 2009-01-17 14:10:52 +0100 (Sat, 17 Jan 2009)
New Revision: 941

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Container.h
Log:
Add Convenience constructor.

M    Container.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Container.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Container.h	2009-01-15 19:59:52 UTC (rev 940)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Container.h	2009-01-17 13:10:52 UTC (rev 941)
@@ -21,6 +21,9 @@
   Matrix(void)
   { }
   OpenFDM_FORCE_INLINE
+  explicit Matrix(const T& scalarValue)
+  { resize(1, 1); *data_.find(0, 0) = scalarValue; }
+  OpenFDM_FORCE_INLINE
   Matrix(size_type i, size_type j)
   { resize(i, j); }
   OpenFDM_FORCE_INLINE



From frohlich at mail.berlios.de  Sat Jan 17 14:12:31 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 17 Jan 2009 14:12:31 +0100
Subject: [OpenFDM-svn] r942 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901171312.n0HDCVv3029127@sheep.berlios.de>

Author: frohlich
Date: 2009-01-17 14:12:31 +0100 (Sat, 17 Jan 2009)
New Revision: 942

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Variant.h
Log:
Make property setters work with matrices.

M    Variant.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Variant.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Variant.h	2009-01-17 13:10:52 UTC (rev 941)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Variant.h	2009-01-17 13:12:31 UTC (rev 942)
@@ -7,6 +7,7 @@
 
 #include <string>
 
+#include "Assert.h"
 #include "Types.h"
 #include "Referenced.h"
 #include "SharedPtr.h"
@@ -267,7 +268,7 @@
 template<typename T>
 inline void
 variant_copy(const Variant& variant, T& value)
-{}
+{ OpenFDMAssert(false); }
 
 template<>
 inline void
@@ -289,10 +290,30 @@
 variant_copy(const Variant& variant, unsigned& value)
 { value = variant.toUnsigned(); }
 
-template<typename Impl, LinAlg::size_type m, LinAlg::size_type n> 
+template<typename T>
 inline void
-variant_copy(const Variant& variant, LinAlg::MatrixLValue<Impl,m,n>& value)
+variant_copy(const Variant& variant, LinAlg::Vector2<T>& value)
 { value = variant.toMatrix(); }
+template<typename T>
+inline void
+variant_copy(const Variant& variant, LinAlg::Vector3<T>& value)
+{ value = variant.toMatrix(); }
+template<typename T>
+inline void
+variant_copy(const Variant& variant, LinAlg::Vector4<T>& value)
+{ value = variant.toMatrix(); }
+template<typename T>
+inline void
+variant_copy(const Variant& variant, LinAlg::Vector6<T>& value)
+{ value = variant.toMatrix(); }
+template<typename T>
+inline void
+variant_copy(const Variant& variant, LinAlg::Vector<T>& value)
+{ value = variant.toMatrix(); }
+template<typename T>
+inline void
+variant_copy(const Variant& variant, LinAlg::Matrix<T>& value)
+{ value = variant.toMatrix(); }
 
 template<> 
 inline void



From frohlich at mail.berlios.de  Sat Jan 17 15:06:20 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 17 Jan 2009 15:06:20 +0100
Subject: [OpenFDM-svn] r943 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901171406.n0HE6Ktm001693@sheep.berlios.de>

Author: frohlich
Date: 2009-01-17 15:06:19 +0100 (Sat, 17 Jan 2009)
New Revision: 943

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.h
Log:
Add accessor to nodes by string path.

M    System.cpp
M    System.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-17 13:12:31 UTC (rev 942)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-17 14:06:19 UTC (rev 943)
@@ -1512,4 +1512,46 @@
   }
 }
 
+class System::NodeFinder : public NodeVisitor {
+public:
+  NodeFinder(const std::string& path) : mPath(path), mNode(0)
+  { }
+  virtual void apply(Group& group)
+  {
+    std::string path = Node::toNodePathName(getNodePath());
+    if (0 != mPath.compare(0, path.size(), path))
+      return;
+    group.traverse(*this);
+  }
+  virtual void apply(Node& node)
+  {
+    if (mPath != Node::toNodePathName(getNodePath()))
+      return;
+    mNode = &node;
+  }
+
+  std::string mPath;
+  Node* mNode;
+};
+
+Node*
+System::getNode(const std::string& nodePathString)
+{
+  if (!mNode)
+    return 0;
+  NodeFinder nodeFinder(nodePathString);
+  mNode->accept(nodeFinder);
+  return nodeFinder.mNode;
+}
+
+const Node*
+System::getNode(const std::string& nodePathString) const
+{
+  if (!mNode)
+    return 0;
+  NodeFinder nodeFinder(nodePathString);
+  mNode->accept(nodeFinder);
+  return nodeFinder.mNode;
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.h	2009-01-17 13:12:31 UTC (rev 942)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.h	2009-01-17 14:06:19 UTC (rev 943)
@@ -60,8 +60,13 @@
   void attach(SystemOutput* systemOutput);
   void detach(SystemOutput* systemOutput);
 
+  /// Return the node that is at this particular path.
+  Node* getNode(const std::string& nodePath);
+  const Node* getNode(const std::string& nodePath) const;
+
 private:
   class NodeInstanceCollector;
+  class NodeFinder;
 
   SharedPtr<Node> mNode;
   SampleTime mSampleTime;



From frohlich at mail.berlios.de  Sat Jan 17 15:08:11 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 17 Jan 2009 15:08:11 +0100
Subject: [OpenFDM-svn] r944 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901171408.n0HE8BtR001811@sheep.berlios.de>

Author: frohlich
Date: 2009-01-17 15:08:11 +0100 (Sat, 17 Jan 2009)
New Revision: 944

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PacejkaTire.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/PacejkaTire.h
Log:
Add turnslip and clean up magic formula implementations.

M    OpenFDM/Pacejka89.h
M    OpenFDM/PacejkaTire.cpp
M    OpenFDM/PacejkaTire.h
M    OpenFDM/Pacejka89.cpp
M    OpenFDM/Pacejka94.h
M    OpenFDM/Pacejka94.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.cpp	2009-01-17 14:06:19 UTC (rev 943)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.cpp	2009-01-17 14:08:11 UTC (rev 944)
@@ -68,7 +68,7 @@
 
   mB0(2),
   mB1(0), mB2(1000),
-  mB3(0), mB4(100), mB5(0),
+  mB3(0), mB4(50), mB5(0),
   mB6(0), mB7(0), mB8(0.5),
   mB9(0), mB10(0),
 
@@ -112,7 +112,7 @@
 Vector6
 Pacejka89::getForce(const real_type& rho, const real_type& rhoDot,
                     const real_type& alpha, const real_type& kappa,
-                    const real_type& gamma) const
+                    const real_type& gamma, const real_type& phi) const
 {
   // Pacejka suggests this correction to avoid singularities at zero speed
   const real_type e_v = 1e-2;
@@ -128,9 +128,9 @@
   // Shape factor
   real_type Cx = mB0;
   // Peak factor
-  real_type Dx = mB1*sqr(Fz) + mB2*Fz;
+  real_type Dx = (mB1*Fz + mB2)*Fz;
   // BCD
-  real_type BCDx = (mB3*sqr(Fz) + mB4*Fz)*exp(-mB5*Fz);
+  real_type BCDx = (mB3*Fz + mB4)*Fz*exp(-mB5*Fz);
   // Stiffness factor
   real_type Bx = BCDx/(Cx*Dx + e_v);
   // Horizonal shift
@@ -142,7 +142,7 @@
 //   real_type kappax = kappa + SHx;
   real_type kappax = 100*kappa + SHx;
   // Curvature factor
-  real_type Ex = (mB6*sqr(Fz) + mB7*Fz + mB8);
+  real_type Ex = (mB6*Fz + mB7)*Fz + mB8;
   // See P175 Note on Fig 4.10: Clamp E <= 1 to avoid unrealistic behaviour
   Ex = min(Ex, real_type(1));
   // The resulting longitudinal force
@@ -180,19 +180,19 @@
   // Shape factor
   real_type Cz = mC0;
   // Peak factor
-  real_type Dz = mC1*sqr(Fz) + mC2*Fz;
+  real_type Dz = (mC1*Fz + mC2)*Fz;
   // BCD
-  real_type BCDz = (mC3*sqr(Fz) + mC4*Fz)*(1 - mC6*fabs(gamma))*exp(-mC5*Fz);
+  real_type BCDz = (mC3*Fz + mC4)*Fz*(1 - mC6*fabs(gamma))*exp(-mC5*Fz);
   // Stiffness factor
   real_type Bz = BCDz/(Cz*Dz + e_v);
   // Horizonal shift
   real_type SHz = mC11*gamma + mC12*Fz + mC13;
   // Vertical shift
-  real_type SVz = (mC14*sqr(Fz) + mC15*Fz)*gamma + mC16*Fz + mC17;
+  real_type SVz = (mC14*Fz + mC15)*Fz*gamma + mC16*Fz + mC17;
   // Shifted lateral slip
   real_type alphaz = rad2deg*alpha + SHz;
   // Curvature factor
-  real_type Ez = (mC7*sqr(Fz) + mC8*Fz + mC9)*(1 - mC10*fabs(gamma));
+  real_type Ez = ((mC7*Fz + mC8)*Fz + mC9)*(1 - mC10*fabs(gamma));
   // See P175 Note on Fig 4.10: Clamp E <= 1 to avoid unrealistic behaviour
   Ez = min(Ez, real_type(1));
   // The resulting lateral force

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.h	2009-01-17 14:06:19 UTC (rev 943)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.h	2009-01-17 14:08:11 UTC (rev 944)
@@ -26,7 +26,7 @@
   // Helper function to compute the resulting force
   virtual Vector6 getForce(const real_type& rho, const real_type& rhoDot,
                            const real_type& alpha, const real_type& kappa,
-                           const real_type& gamma) const;
+                           const real_type& gamma, const real_type& phi) const;
 
   const real_type& getA0() const { return mA0; }
   void setA0(const real_type& value) { mA0 = value; }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.cpp	2009-01-17 14:06:19 UTC (rev 943)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.cpp	2009-01-17 14:08:11 UTC (rev 944)
@@ -83,7 +83,7 @@
 
   mB0(2),
   mB1(0), mB2(1000),
-  mB3(0), mB4(100), mB5(0),
+  mB3(0), mB4(50), mB5(0),
   mB6(0), mB7(0), mB8(0.5), mB13(0),
   mB9(0), mB10(0),
   mB11(0), mB12(0),
@@ -129,7 +129,7 @@
 Vector6
 Pacejka94::getForce(const real_type& rho, const real_type& rhoDot,
                     const real_type& alpha, const real_type& kappa,
-                    const real_type& gamma) const
+                    const real_type& gamma, const real_type& phi) const
 {
   // Pacejka suggests this correction to avoid singularities at zero speed
   const real_type e_v = 1e-2;
@@ -145,9 +145,9 @@
   // Shape factor
   real_type Cx = mB0;
   // Peak factor
-  real_type Dx = (mB1*sqr(Fz) + mB2*Fz)*mDLON;
+  real_type Dx = (mB1*Fz + mB2)*Fz*mDLON;
   // BCD
-  real_type BCDx = (mB3*sqr(Fz) + mB4*Fz)*exp(-mB5*Fz)*mBCDLON;
+  real_type BCDx = (mB3*Fz + mB4)*Fz*exp(-mB5*Fz)*mBCDLON;
   // Stiffness factor
   real_type Bx = BCDx/(Cx*Dx + e_v);
   // Horizonal shift
@@ -156,7 +156,7 @@
   real_type SVx = (mB11*Fz + mB12);
   // Shifted longitudinal slip
   // FIXME is this really in % ??? Also the other old model!!!
-  real_type kappax = kappa + SHx;
+  real_type kappax = 100*kappa + SHx;
   // Curvature factor
   real_type Ex = ((mB6*Fz + mB7)*Fz + mB8)*(1 - mB13*copysign(1, kappax));
   // See P175 Note on Fig 4.10: Clamp E <= 1 to avoid unrealistic behaviour
@@ -196,9 +196,9 @@
   // Shape factor
   real_type Cz = mC0;
   // Peak factor
-  real_type Dz = (mC1*sqr(Fz) + mC2*Fz)*(1 - mC18*sqr(gamma));
+  real_type Dz = (mC1*Fz + mC2)*Fz*(1 - mC18*sqr(gamma));
   // BCD
-  real_type BCDz = (mC3*sqr(Fz) + mC4*Fz)*(1 - mC6*fabs(gamma))*exp(-mC5*Fz);
+  real_type BCDz = (mC3*Fz + mC4)*Fz*(1 - mC6*fabs(gamma))*exp(-mC5*Fz);
   // Stiffness factor
   real_type Bz = BCDz/(Cz*Dz + e_v);
   // Horizonal shift
@@ -208,7 +208,7 @@
   // Shifted lateral slip
   real_type alphaz = rad2deg*alpha + SHz;
   // Curvature factor
-  real_type Ez = (mC7*sqr(Fz) + mC8*Fz + mC9)
+  real_type Ez = ((mC7*Fz + mC8)*Fz + mC9)
     *(1 - (mC19*gamma + mC20)*copysign(1, alphaz))/(1 - mC10*fabs(gamma));
   // See P175 Note on Fig 4.10: Clamp E <= 1 to avoid unrealistic behaviour
   Ez = min(Ez, real_type(1));

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.h	2009-01-17 14:06:19 UTC (rev 943)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.h	2009-01-17 14:08:11 UTC (rev 944)
@@ -26,7 +26,7 @@
   // Helper function to compute the resulting force
   virtual Vector6 getForce(const real_type& rho, const real_type& rhoDot,
                            const real_type& alpha, const real_type& kappa,
-                           const real_type& gamma) const;
+                           const real_type& gamma, const real_type& phi) const;
 
   const real_type& getA0() const { return mA0; }
   void setA0(const real_type& value) { mA0 = value; }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PacejkaTire.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PacejkaTire.cpp	2009-01-17 14:06:19 UTC (rev 943)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PacejkaTire.cpp	2009-01-17 14:08:11 UTC (rev 944)
@@ -116,15 +116,21 @@
 //     Vector3 V_cS = relVel.getLinear(); // + r_dot; ???
     Vector3 V_s = relVel2.getLinear();
 
+    // The wheels velocity wrt ground
+    Vector3 rotVel = relVel.getAngular();
+
+    // The wheel revolution speed
+    real_type omega = dot(rotVel, s);
+
+    // The rotational velocity of the hub system wrt ground
+    Vector3 rotVelHub = relVel.getAngular() - omega*s;
+ 
     // FIXME ????
     real_type V_cx = dot(V_c, l);
     real_type V_cx_eps = fabs(V_cx) + e_v;
     real_type V_cy = dot(V_c, t);
     real_type V_sx = dot(V_s, l);
 
-    // Note that internally computations are done using derived parameters,
-    // thus compute different values for the output ports
-
     // The sideslip angle (4.E3)
     real_type alpha = atan2(-V_cy, V_cx_eps);
     if (mSideSlipPort.isConnected())
@@ -140,8 +146,13 @@
     if (mLongitudinalSlipPort.isConnected())
       mLongitudinalSlipPort = kappa;
 
-    Vector6 f = mPacejkaTire->getForce(rho, rhoDot, alpha, kappa, gamma);
+    // The turnslip
+    // FIXME: make sure this really is: That is create a testcase where
+    // we check the  = -1/R claim in (2.18) Pacejka
+    real_type phi = dot(n, rotVelHub)/V_cx_eps;
 
+    Vector6 f = mPacejkaTire->getForce(rho, rhoDot, alpha, kappa, gamma, phi);
+
     if (mLongitudinalForcePort.isConnected())
       mLongitudinalForcePort = f.getLinear()(0);
     if (mLateralForcePort.isConnected())

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PacejkaTire.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PacejkaTire.h	2009-01-17 14:06:19 UTC (rev 943)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PacejkaTire.h	2009-01-17 14:08:11 UTC (rev 944)
@@ -32,7 +32,7 @@
   // Model function to compute the resulting force
   virtual Vector6 getForce(const real_type& rho, const real_type& rhoDot,
                            const real_type& alpha, const real_type& kappa,
-                           const real_type& gamma) const = 0;
+                           const real_type& gamma, const real_type& phi) const = 0;
 
 private:
   RealOutputPort mSideSlipPort;



From frohlich at mail.berlios.de  Sat Jan 17 20:28:32 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 17 Jan 2009 20:28:32 +0100
Subject: [OpenFDM-svn] r945 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901171928.n0HJSWp7016864@sheep.berlios.de>

Author: frohlich
Date: 2009-01-17 20:28:32 +0100 (Sat, 17 Jan 2009)
New Revision: 945

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.h
Log:
Add access to the external port names.

M    GroupInterfaceNode.h
M    GroupInterfaceNode.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.cpp	2009-01-17 14:08:11 UTC (rev 944)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.cpp	2009-01-17 19:28:32 UTC (rev 945)
@@ -39,6 +39,18 @@
   return mExternalPortInfo->getIndex();
 }
 
+void
+GroupInterfaceNode::setExternalPortName(const std::string& portName)
+{
+  mExternalPortInfo->setName(portName);
+}
+
+const std::string&
+GroupInterfaceNode::getExternalPortName() const
+{
+  return mExternalPortInfo->getName();
+}
+
 bool
 GroupInterfaceNode::addParent(Node* parent)
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.h	2009-01-17 14:08:11 UTC (rev 944)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.h	2009-01-17 19:28:32 UTC (rev 945)
@@ -28,6 +28,9 @@
 
   unsigned getExternalPortIndex() const;
 
+  void setExternalPortName(const std::string& portName);
+  const std::string& getExternalPortName() const;
+
 protected:
   virtual bool addParent(Node* parent);
   virtual void removeParent(Node* parent);



From frohlich at mail.berlios.de  Sat Jan 17 22:33:28 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 17 Jan 2009 22:33:28 +0100
Subject: [OpenFDM-svn] r946 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200901172133.n0HLXSSx026442@sheep.berlios.de>

Author: frohlich
Date: 2009-01-17 22:33:28 +0100 (Sat, 17 Jan 2009)
New Revision: 946

Modified:
   branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
Log:
Updates to the testrig.

M    tiretestrig.cpp


Modified: branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2009-01-17 19:28:32 UTC (rev 945)
+++ branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2009-01-17 21:33:28 UTC (rev 946)
@@ -3,13 +3,15 @@
  */
 
 #include <OpenFDM/ConstModel.h>
-#include <OpenFDM/DoPri5.h>
 #include <OpenFDM/FixedRootJoint.h>
 #include <OpenFDM/Gain.h>
 #include <OpenFDM/Integrator.h>
 #include <OpenFDM/LinearSpringDamper.h>
 #include <OpenFDM/Mass.h>
 #include <OpenFDM/Group.h>
+#include <OpenFDM/GroupInput.h>
+#include <OpenFDM/GroupMechanicLink.h>
+#include <OpenFDM/GroupOutput.h>
 #include <OpenFDM/Output.h>
 #include <OpenFDM/PrismaticJoint.h>
 #include <OpenFDM/RevoluteActuator.h>
@@ -40,20 +42,49 @@
   Vector3 mVelocity;
 };
 
-int
-main(int argc, char *argv[])
+// Build up a wheel to put on the testrig.
+// When we have proper serialization, load that from a file.
+Node*
+createWheel()
 {
-  // Simulate a simple side sweep with
-  //   sweep speed alphaSpeed
-  //   sweep range alphaRange
-  //   at camber Angle
-  //   and velocity
-  real_type camberAngle = deg2rad*0;
-  real_type alphaRange = deg2rad*20;
-  real_type alphaSpeed = deg2rad*10;
-  real_type velocity = 10;
+  SharedPtr<Group> group = new Group("Wheel");
 
+  GroupMechanicLink* hubLink = new GroupMechanicLink("Hub Link");
+  group->addChild(hubLink);
 
+  RigidBody* rimAndTire = new RigidBody("Rim And Tire");
+  group->addChild(rimAndTire);
+  group->connect(hubLink->getPort("link"), rimAndTire->getPort("link0"));
+
+  Mass* tireAndRimMass = new Mass("Rim And Tire Mass");
+  tireAndRimMass->setMass(9);
+  // Realistic ...
+//   tireAndRimMass->setInertia(InertiaMatrix(0.4, 0, 0, 1, 0, 0.4));
+  // For pac 2002
+//   tireAndRimMass->setInertia(InertiaMatrix(0.5, 0, 0, 2, 0, 0.5));
+  // For pac 89
+  tireAndRimMass->setInertia(InertiaMatrix(0.4, 0, 0, 1, 0, 0.4));
+  group->addChild(tireAndRimMass);
+  group->connect(rimAndTire->getPort("link1"), tireAndRimMass->getPort("link"));
+  
+//   Pacejka89* pacejkaTire = new Pacejka89("PacejkaTire");
+  Pacejka94* pacejkaTire = new Pacejka94("PacejkaTire");
+//   Pacejka2002* pacejkaTire = new Pacejka2002("PacejkaTire");
+  pacejkaTire->setWheelRadius(0.313);
+  pacejkaTire->setSpringConstant(2e5);
+  pacejkaTire->setDampingConstant(sqrt(pacejkaTire->getSpringConstant()));
+  group->addChild(pacejkaTire);
+  rimAndTire->addLink("link2");
+  group->connect(rimAndTire->getPort("link2"), pacejkaTire->getPort("link"));
+
+  return group.release();
+}
+
+// Build up the tiretestrig system.
+// When we have proper serialization, load that from a file.
+Node*
+createTireTestrig(Node* wheel)
+{
   SharedPtr<Group> group = new Group("Tire Testrig");
 
   // First build up the mechanical system
@@ -78,15 +109,14 @@
   group->connect(prismaticJoint->getPort("force"),
                  normalForceSum->getPort("output"));
 
-  ConstModel* normalForce = new ConstModel("Normal force");
-  normalForce->setScalarValue(4000);
+  ConstModel* normalForce = new ConstModel("Normal Force");
   group->addChild(normalForce);
   group->connect(normalForceSum->getPort("input0"),
                  normalForce->getPort("output"));
  
   LinearSpringDamper* strutDamper = new LinearSpringDamper("Strut Damper");
   strutDamper->setSpringConstant(0);
-  strutDamper->setDamperConstant(30);
+  strutDamper->setDamperConstant(1000);
   group->addChild(strutDamper);
   group->connect(normalForceSum->getPort("input1"),
                  strutDamper->getPort("force"));
@@ -102,11 +132,9 @@
 
   RevoluteActuator* camberActuator = new RevoluteActuator("Camber Actuator");
   camberActuator->setAxis(Vector3(1, 0, 0));
-  camberActuator->setInitialPosition(camberAngle);
   group->addChild(camberActuator);
 
   ConstModel* camberAngleModel = new ConstModel("Camber Angle");
-  camberAngleModel->setScalarValue(camberAngle);
   group->addChild(camberAngleModel);
   group->connect(camberActuator->getPort("input"),
                  camberAngleModel->getPort("output"));
@@ -121,14 +149,11 @@
  
   RevoluteActuator* sideActuator = new RevoluteActuator("Sideslip Actuator");
   sideActuator->setAxis(Vector3(0, 0, 1));
-  sideActuator->setInitialPosition(0);
-  sideActuator->setMaxVel(alphaSpeed);
   sideActuator->setVelGain(100);
   sideActuator->setVelDotGain(100);
   group->addChild(sideActuator);
 
   ConstModel* sideslipAngle = new ConstModel("Sideslip Angle");
-  sideslipAngle->setScalarValue(0);
   group->addChild(sideslipAngle);
   group->connect(sideActuator->getPort("input"),
                  sideslipAngle->getPort("output"));
@@ -149,49 +174,64 @@
   group->connect(hubStrut->getPort("link0"), sideActuator->getPort("link1"));
   group->connect(hubStrut->getPort("link1"), hubJoint->getPort("link0"));
 
-  RigidBody* rimAndTire = new RigidBody("Rim And Tire");
-  group->addChild(rimAndTire);
-  group->connect(hubJoint->getPort("link1"), rimAndTire->getPort("link0"));
+  group->addChild(wheel);
+  group->connect(hubJoint->getPort("link1"), wheel->getPort("link"));
 
-  Mass* tireAndRimMass = new Mass("Rim And Tire Mass");
-  tireAndRimMass->setMass(9);
-  // Realistic ...
-//   tireAndRimMass->setInertia(InertiaMatrix(0.4, 0, 0, 1, 0, 0.4));
-  // For pac 2002
-//   tireAndRimMass->setInertia(InertiaMatrix(0.5, 0, 0, 2, 0, 0.5));
-  // For pac 89
-  tireAndRimMass->setInertia(InertiaMatrix(0.5, 0, 0, 8, 0, 0.5));
-  group->addChild(tireAndRimMass);
-  group->connect(rimAndTire->getPort("link1"), tireAndRimMass->getPort("link"));
-  
-//   Pacejka89* pacejkaTire = new Pacejka89("PacejkaTire");
-  Pacejka94* pacejkaTire = new Pacejka94("PacejkaTire");
-//   Pacejka2002* pacejkaTire = new Pacejka2002("PacejkaTire");
-  pacejkaTire->setWheelRadius(0.313);
-  pacejkaTire->setSpringConstant(2e5);
-  pacejkaTire->setDampingConstant(sqrt(pacejkaTire->getSpringConstant()));
-  group->addChild(pacejkaTire);
-  rimAndTire->addLink("link2");
-  group->connect(rimAndTire->getPort("link2"), pacejkaTire->getPort("link"));
+  return group.release();
+}
 
-  prismaticJoint->setInitialPosition(1 - pacejkaTire->getWheelRadius());
+int
+main(int argc, char *argv[])
+{
+  // Simulate a simple side sweep with
+  //   sweep speed alphaSpeed
+  //   sweep range alphaRange
+  //   at camber Angle
+  //   and velocity
+  real_type camberAngle = deg2rad*0;
+  real_type alphaRange = deg2rad*20;
+  real_type alphaSpeed = deg2rad*10;
+  real_type velocity = 10;
+  real_type normalForce = 4000;
 
-  SharedPtr<System> system = new System("Tire Testrig", group);
+  SharedPtr<Node> wheel = createWheel();
+  SharedPtr<Node> testrig = createTireTestrig(wheel);
+  SharedPtr<System> system = new System("Tire Testrig", testrig);
 
   // set the moving ground
-  system->getEnvironment()->setGround(new MovingGround(Vector3(velocity, 0, 0)));
+  MovingGround* movingGround = new MovingGround(Vector3(velocity, 0, 0));
+  system->getEnvironment()->setGround(movingGround);
 
+  // Get the model nodes that are important to drive the testrig
+  SharedPtr<Node> sideslipNode;
+  sideslipNode = system->getNode("Tire Testrig/Sideslip Angle");
+  SharedPtr<Node> sideslipActuator;
+  sideslipActuator = system->getNode("Tire Testrig/Sideslip Actuator");
+  SharedPtr<Node> camberNode;
+  camberNode = system->getNode("Tire Testrig/Camber Angle");
+  SharedPtr<Node> normalForceNode;
+  normalForceNode = system->getNode("Tire Testrig/Normal Force");
+
+  // Set parametrs for the measurment
+  sideslipActuator->setPropertyValue("MaxVel", Variant(real_type(alphaSpeed)));
+  camberNode->setPropertyValue("Value", Variant(Matrix(camberAngle)));
+  normalForceNode->setPropertyValue("Value", Variant(Matrix(normalForce)));
+  sideslipNode->setPropertyValue("Value", Variant(Matrix(0)));
+
   if (!system->init())
     return EXIT_FAILURE;
 
   system->simulate(2);
   system->attach(SystemOutput::newDefaultSystemOutput("tiretestrig"));
-  sideslipAngle->setScalarValue(alphaRange);
+  
+  sideslipNode->setPropertyValue("Value", Variant(Matrix(alphaRange)));
   system->simulate(system->getTime() + alphaRange/alphaSpeed);
-  sideslipAngle->setScalarValue(-alphaRange);
+  
+  sideslipNode->setPropertyValue("Value", Variant(Matrix(-alphaRange)));
   system->simulate(system->getTime() + 2*alphaRange/alphaSpeed);
-  sideslipAngle->setScalarValue(0);
+  
+  sideslipNode->setPropertyValue("Value", Variant(Matrix(0)));
   system->simulate(system->getTime() + alphaRange/alphaSpeed);
-  
+
   return EXIT_SUCCESS;
 }



From frohlich at mail.berlios.de  Sat Jan 17 22:34:45 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 17 Jan 2009 22:34:45 +0100
Subject: [OpenFDM-svn] r947 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901172134.n0HLYjDc026670@sheep.berlios.de>

Author: frohlich
Date: 2009-01-17 22:34:44 +0100 (Sat, 17 Jan 2009)
New Revision: 947

Added:
   branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticActuator.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticActuator.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
Log:
Add a prismatic actuator model.

AM   PrismaticActuator.cpp
AM   PrismaticActuator.h
M    Makefile.am


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2009-01-17 21:33:28 UTC (rev 946)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2009-01-17 21:34:44 UTC (rev 947)
@@ -262,6 +262,7 @@
   Pacejka89.h \
   Pacejka94.h \
   PacejkaTire.h \
+  PrismaticActuator.h \
   PrismaticJoint.h \
   RevoluteActuator.h \
   RevoluteJoint.h \
@@ -284,6 +285,7 @@
   Pacejka89.cpp \
   Pacejka94.cpp \
   PacejkaTire.cpp \
+  PrismaticActuator.cpp \
   PrismaticJoint.cpp \
   RevoluteActuator.cpp \
   RevoluteJoint.cpp \

Added: branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticActuator.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticActuator.cpp	2009-01-17 21:33:28 UTC (rev 946)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticActuator.cpp	2009-01-17 21:34:44 UTC (rev 947)
@@ -0,0 +1,228 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2004-2009 Mathias Froehlich 
+ *
+ */
+
+#include "PrismaticActuator.h"
+#include "Assert.h"
+#include "LogStream.h"
+#include "Limits.h"
+#include "Object.h"
+#include "Vector.h"
+#include "Matrix.h"
+#include "Quaternion.h"
+#include "Inertia.h"
+#include "PortValueList.h"
+#include "ContinousStateValueVector.h"
+#include "MechanicContext.h"
+
+namespace OpenFDM {
+
+BEGIN_OPENFDM_OBJECT_DEF(PrismaticActuator, Joint)
+  DEF_OPENFDM_PROPERTY(Vector3, Axis, Serialized)
+  DEF_OPENFDM_PROPERTY(Real, InitialPosition, Serialized)
+  DEF_OPENFDM_PROPERTY(Real, InitialVelocity, Serialized)
+  DEF_OPENFDM_PROPERTY(Bool, VelocityControl, Serialized)
+  DEF_OPENFDM_PROPERTY(Real, MaxVel, Serialized)
+  DEF_OPENFDM_PROPERTY(Real, VelGain, Serialized)
+  DEF_OPENFDM_PROPERTY(Real, VelDotGain, Serialized)
+  END_OPENFDM_OBJECT_DEF
+
+PrismaticActuator::PrismaticActuator(const std::string& name) :
+  CartesianJoint<1>(name),
+  mInputPort(this, "input", Size(1, 1), true),
+  mPositionPort(this, "position", Size(1, 1)),
+  mVelocityPort(this, "velocity", Size(1, 1)),
+  mPositionStateInfo(new Vector1StateInfo),
+  mVelocityStateInfo(new Vector1StateInfo),
+  mAxis(Vector3(1, 0, 0)),
+  mInitialPosition(0),
+  mInitialVelocity(0),
+  mVelocityControl(false),
+  mVelGain(1),
+  mVelDotGain(1),
+  mMaxVel(1)
+{
+  addContinousStateInfo(mPositionStateInfo);
+  addContinousStateInfo(mVelocityStateInfo);
+
+  // FIXME
+  setAxis(mAxis);
+}
+
+PrismaticActuator::~PrismaticActuator(void)
+{
+}
+
+const Vector3&
+PrismaticActuator::getAxis() const
+{
+  return mAxis;
+}
+
+void
+PrismaticActuator::setAxis(const Vector3& axis)
+{
+  real_type nrm = norm(axis);
+  if (nrm <= Limits<real_type>::min()) {
+    Log(Initialization, Error) << "JointAxis is zero ..." << endl;
+    return;
+  }
+  mAxis = (1/nrm)*axis;
+}
+
+const real_type&
+PrismaticActuator::getInitialPosition() const
+{
+  return mInitialPosition;
+}
+
+void
+PrismaticActuator::setInitialPosition(const real_type& initialPosition)
+{
+  mInitialPosition = initialPosition;
+}
+
+const real_type&
+PrismaticActuator::getInitialVelocity() const
+{
+  return mInitialVelocity;
+}
+
+void
+PrismaticActuator::setInitialVelocity(const real_type& initialVelocity)
+{
+  mInitialVelocity = initialVelocity;
+}
+
+const bool&
+PrismaticActuator::getVelocityControl(void) const
+{
+  return mVelocityControl;
+}
+
+void
+PrismaticActuator::setVelocityControl(const bool& velocityControl)
+{
+  mVelocityControl = velocityControl;
+}
+
+const real_type&
+PrismaticActuator::getMaxVel(void) const
+{
+  return mMaxVel;
+}
+
+void
+PrismaticActuator::setMaxVel(const real_type& maxVel)
+{
+  mMaxVel = maxVel;
+}
+
+const real_type&
+PrismaticActuator::getVelGain(void) const
+{
+  return mVelGain;
+}
+
+void
+PrismaticActuator::setVelGain(const real_type& velGain)
+{
+  mVelGain = velGain;
+}
+
+const real_type&
+PrismaticActuator::getVelDotGain(void) const
+{
+  return mVelDotGain;
+}
+
+void
+PrismaticActuator::setVelDotGain(const real_type& velDotGain)
+{
+  mVelDotGain = velDotGain;
+}
+
+void
+PrismaticActuator::init(const Task&, DiscreteStateValueVector&,
+                       ContinousStateValueVector& continousState,
+                       const PortValueList&) const
+{
+  continousState[*mPositionStateInfo] = mInitialPosition;
+  continousState[*mVelocityStateInfo] = mInitialVelocity;
+}
+
+PrismaticActuator::Matrix6N
+PrismaticActuator::getJointMatrix() const
+{
+  return Vector6(Vector3::zeros(), mAxis);
+}
+
+void
+PrismaticActuator::velocity(const Task&, Context& context,
+                        const ContinousStateValueVector& states,
+                        PortValueList& portValues) const
+{
+  VectorN jointPos = states[*mPositionStateInfo];
+  if (!mPositionPort.empty())
+    portValues[mPositionPort] = jointPos;
+  
+  VectorN jointVel = states[*mVelocityStateInfo];
+  if (!mVelocityPort.empty())
+    portValues[mVelocityPort] = jointVel;
+  
+  context.setPosAndVel(mAxis*jointPos, Quaternion::unit(), jointVel);
+}
+
+void
+PrismaticActuator::articulation(const Task&, Context& context,
+                            const ContinousStateValueVector& states,
+                            PortValueList& portValues) const
+{
+  // This is a simple second order system with velocity limits.
+  // the joints accelerations, velocities and positions must fit together
+  // otherwise the articulated body dynamics get fooled ...
+
+  VectorN velDot;
+  if (!mVelocityControl) {
+    // The desired position input
+    VectorN desiredPos = portValues[mInputPort];
+    // Compute the error ...
+    VectorN posErr = desiredPos - states[*mPositionStateInfo];
+    // ... and compute a desired velocity within the given limits from that.
+    VectorN desiredVel;
+    desiredVel(0) = smoothSaturate(mVelGain*posErr(0), mMaxVel);
+    // The usual control loops: there we get a velocity error
+    VectorN velErr = desiredVel - states[*mVelocityStateInfo];
+    // and accelerate that proportional to that error ...
+    velDot = mVelDotGain*velErr;
+  } else {
+    // The desired velocity input
+    VectorN desiredVel = portValues[mInputPort];
+    // The usual control loops: there we get a velocity error
+    VectorN velErr = desiredVel - states[*mVelocityStateInfo];
+    // and accelerate that proportional to that error ...
+    velDot = mVelDotGain*velErr;
+  }
+
+  context.applyActuatorForce(velDot);
+}
+
+void
+PrismaticActuator::acceleration(const Task&, Context& context,
+                            const ContinousStateValueVector&,
+                            PortValueList&) const
+{
+  context.accelerateDueToVelDot();
+}
+
+void
+PrismaticActuator::derivative(const Task&, Context& context,
+                          const ContinousStateValueVector& states,
+                          const PortValueList&,
+                          ContinousStateValueVector& derivative) const
+{
+  derivative[*mPositionStateInfo] = states[*mVelocityStateInfo];
+  derivative[*mVelocityStateInfo] = context.getVelDot();
+}
+
+} // namespace OpenFDM


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticActuator.cpp
___________________________________________________________________
Name: svn:eol-style
   + native

Added: branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticActuator.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticActuator.h	2009-01-17 21:33:28 UTC (rev 946)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticActuator.h	2009-01-17 21:34:44 UTC (rev 947)
@@ -0,0 +1,94 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2004-2009 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_PrismaticActuator_H
+#define OpenFDM_PrismaticActuator_H
+
+#include "Assert.h"
+#include "Object.h"
+#include "Vector.h"
+#include "Matrix.h"
+#include "MatrixStateInfo.h"
+#include "Quaternion.h"
+#include "Inertia.h"
+#include "Joint.h"
+#include "MatrixInputPort.h"
+#include "MatrixOutputPort.h"
+#include "ContinousStateValueVector.h"
+#include "PortValueList.h"
+#include "MechanicContext.h"
+#include "CartesianJoint.h"
+
+namespace OpenFDM {
+
+class PrismaticActuator : public CartesianJoint<1> {
+  OPENFDM_OBJECT(PrismaticActuator, Joint);
+public:
+  PrismaticActuator(const std::string& name);
+  virtual ~PrismaticActuator(void);
+
+  /** Sets the joint axis where this joint is allowed to rotate around.
+   */
+  const Vector3& getAxis() const;
+  void setAxis(const Vector3& axis);
+
+  const real_type& getInitialPosition() const;
+  void setInitialPosition(const real_type& initialPosition);
+
+  const real_type& getInitialVelocity() const;
+  void setInitialVelocity(const real_type& initialVelocity);
+
+  const bool& getVelocityControl(void) const;
+  void setVelocityControl(const bool& velocityControl);
+
+  const real_type& getMaxVel(void) const;
+  void setMaxVel(const real_type& maxVel);
+
+  const real_type& getVelGain(void) const;
+  void setVelGain(const real_type& velGain);
+
+  const real_type& getVelDotGain(void) const;
+  void setVelDotGain(const real_type& velDotGain);
+
+protected:
+
+  virtual void init(const Task&, DiscreteStateValueVector&,
+                    ContinousStateValueVector& continousState,
+                    const PortValueList&) const;
+  virtual Matrix6N getJointMatrix() const;
+
+  virtual void velocity(const Task& task, Context& context,
+                        const ContinousStateValueVector& states,
+                        PortValueList& portValues) const;
+  virtual void articulation(const Task& task, Context& context,
+                            const ContinousStateValueVector& states,
+                            PortValueList& portValues) const;
+  virtual void acceleration(const Task& task, Context& context,
+                            const ContinousStateValueVector& states,
+                            PortValueList& portValues) const;
+  virtual void derivative(const Task& task, Context& context,
+                          const ContinousStateValueVector&,
+                          const PortValueList& portValues,
+                          ContinousStateValueVector&) const;
+
+private:
+  MatrixInputPort mInputPort;
+  MatrixOutputPort mPositionPort;
+  MatrixOutputPort mVelocityPort;
+
+  SharedPtr<Vector1StateInfo> mPositionStateInfo;
+  SharedPtr<Vector1StateInfo> mVelocityStateInfo;
+
+  Vector3 mAxis;
+  real_type mInitialPosition;
+  real_type mInitialVelocity;
+  bool mVelocityControl;
+  real_type mVelGain;
+  real_type mVelDotGain;
+  real_type mMaxVel;
+};
+
+} // namespace OpenFDM
+
+#endif


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/PrismaticActuator.h
___________________________________________________________________
Name: svn:eol-style
   + native



From frohlich at mail.berlios.de  Mon Jan 19 18:45:14 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 19 Jan 2009 18:45:14 +0100
Subject: [OpenFDM-svn] r948 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901191745.n0JHjEOp030380@sheep.berlios.de>

Author: frohlich
Date: 2009-01-19 18:45:13 +0100 (Mon, 19 Jan 2009)
New Revision: 948

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PacejkaTire.cpp
Log:
Reorder methods.
Handle low normal force cases.

M    src/OpenFDM/Pacejka89.h
M    src/OpenFDM/PacejkaTire.cpp
M    src/OpenFDM/Pacejka89.cpp
M    src/OpenFDM/Pacejka94.h
M    src/OpenFDM/Pacejka94.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.cpp	2009-01-17 21:34:44 UTC (rev 947)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.cpp	2009-01-19 17:45:13 UTC (rev 948)
@@ -9,6 +9,7 @@
 BEGIN_OPENFDM_OBJECT_DEF(Pacejka89, PacejkaTire)
   DEF_OPENFDM_PROPERTY(Real, SpringConstant, Serialized)
   DEF_OPENFDM_PROPERTY(Real, DampingConstant, Serialized)
+  DEF_OPENFDM_PROPERTY(Real, FzMin, Serialized)
   DEF_OPENFDM_PROPERTY(Real, A0, Serialized)
   DEF_OPENFDM_PROPERTY(Real, A1, Serialized)
   DEF_OPENFDM_PROPERTY(Real, A2, Serialized)
@@ -59,6 +60,8 @@
   mSpringConstant(0),
   mDampingConstant(0),
 
+  mFzMin(0),
+
   mA0(2),
   mA1(0), mA2(1000),
   mA3(1000), mA4(10), mA5(0),
@@ -85,30 +88,6 @@
 {
 }
 
-void
-Pacejka89::setSpringConstant(const real_type& springConstant)
-{
-  mSpringConstant = springConstant;
-}
-
-const real_type&
-Pacejka89::getSpringConstant(void) const
-{
-  return mSpringConstant;
-}
-
-void
-Pacejka89::setDampingConstant(const real_type& dampingConstant)
-{
-  mDampingConstant = dampingConstant;
-}
-
-const real_type&
-Pacejka89::getDampingConstant(void) const
-{
-  return mDampingConstant;
-}
-
 Vector6
 Pacejka89::getForce(const real_type& rho, const real_type& rhoDot,
                     const real_type& alpha, const real_type& kappa,
@@ -120,8 +99,21 @@
   // The normal force
   real_type Fz = rho*mSpringConstant + mDampingConstant*rhoDot;
   // The normal force cannot get negative here.
-  Fz = 1e-3*max(real_type(0), Fz);
+  Fz = max(real_type(0), Fz);
 
+  // Pacejka's equations tend to provide infinitesimal stiff tires at low
+  // normal forces. Limit the input to the magic formula to a minimal
+  // normal load and rescale the output force according to the original
+  // load.
+  real_type FzRatio = 1;
+  if (Fz < mFzMin) {
+    FzRatio = Fz/mFzMin;
+    Fz = mFzMin;
+  }
+
+  // The normal force is mean to be in kN
+  Fz *= 1e-3;
+
   //
   // Longitudinal force (Pure longitudinal slip)
   //
@@ -199,7 +191,31 @@
   real_type Bza = Bz*alphaz;
   real_type Mz = Dz*sin(Cz*atan(Bza - Ez*(Bza - atan(Bza)))) + SVz;
 
-  return Vector6(Vector3(0, 0, Mz), Vector3(Fx, Fy, 1e3*Fz));
+  return FzRatio*Vector6(Vector3(0, 0, Mz), Vector3(Fx, Fy, 1e3*Fz));
 }
 
+void
+Pacejka89::setSpringConstant(const real_type& springConstant)
+{
+  mSpringConstant = springConstant;
+}
+
+const real_type&
+Pacejka89::getSpringConstant(void) const
+{
+  return mSpringConstant;
+}
+
+void
+Pacejka89::setDampingConstant(const real_type& dampingConstant)
+{
+  mDampingConstant = dampingConstant;
+}
+
+const real_type&
+Pacejka89::getDampingConstant(void) const
+{
+  return mDampingConstant;
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.h	2009-01-17 21:34:44 UTC (rev 947)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.h	2009-01-19 17:45:13 UTC (rev 948)
@@ -15,18 +15,19 @@
   Pacejka89(const std::string& name);
   virtual ~Pacejka89(void);
 
-  /** Stuff that should move into the tire force implementation.
-   */
+  // Helper function to compute the resulting force
+  virtual Vector6 getForce(const real_type& rho, const real_type& rhoDot,
+                           const real_type& alpha, const real_type& kappa,
+                           const real_type& gamma, const real_type& phi) const;
+
   void setSpringConstant(const real_type& springConstant);
   const real_type& getSpringConstant(void) const;
 
   void setDampingConstant(const real_type& dampingConstant);
   const real_type& getDampingConstant(void) const;
 
-  // Helper function to compute the resulting force
-  virtual Vector6 getForce(const real_type& rho, const real_type& rhoDot,
-                           const real_type& alpha, const real_type& kappa,
-                           const real_type& gamma, const real_type& phi) const;
+  const real_type& getFzMin() const { return mFzMin; }
+  void setFzMin(const real_type& value) { mFzMin = value; }
 
   const real_type& getA0() const { return mA0; }
   void setA0(const real_type& value) { mA0 = value; }
@@ -163,6 +164,8 @@
   real_type mSpringConstant;
   real_type mDampingConstant;
 
+  real_type mFzMin;
+
   real_type mA0;
   real_type mA1, mA2;
   real_type mA3, mA4, mA5;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.cpp	2009-01-17 21:34:44 UTC (rev 947)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.cpp	2009-01-19 17:45:13 UTC (rev 948)
@@ -9,6 +9,7 @@
 BEGIN_OPENFDM_OBJECT_DEF(Pacejka94, PacejkaTire)
   DEF_OPENFDM_PROPERTY(Real, SpringConstant, Serialized)
   DEF_OPENFDM_PROPERTY(Real, DampingConstant, Serialized)
+  DEF_OPENFDM_PROPERTY(Real, FzMin, Serialized)
   DEF_OPENFDM_PROPERTY(Real, A0, Serialized)
   DEF_OPENFDM_PROPERTY(Real, A1, Serialized)
   DEF_OPENFDM_PROPERTY(Real, A2, Serialized)
@@ -73,6 +74,8 @@
   mSpringConstant(0),
   mDampingConstant(0),
 
+  mFzMin(0),
+
   mA0(2),
   mA1(0), mA2(1000), mA15(0),
   mA3(1000), mA4(10), mA5(0),
@@ -102,30 +105,6 @@
 {
 }
 
-void
-Pacejka94::setSpringConstant(const real_type& springConstant)
-{
-  mSpringConstant = springConstant;
-}
-
-const real_type&
-Pacejka94::getSpringConstant(void) const
-{
-  return mSpringConstant;
-}
-
-void
-Pacejka94::setDampingConstant(const real_type& dampingConstant)
-{
-  mDampingConstant = dampingConstant;
-}
-
-const real_type&
-Pacejka94::getDampingConstant(void) const
-{
-  return mDampingConstant;
-}
-
 Vector6
 Pacejka94::getForce(const real_type& rho, const real_type& rhoDot,
                     const real_type& alpha, const real_type& kappa,
@@ -137,8 +116,21 @@
   // The normal force
   real_type Fz = rho*mSpringConstant + mDampingConstant*rhoDot;
   // The normal force cannot get negative here.
-  Fz = 1e-3*max(real_type(0), Fz);
+  Fz = max(real_type(0), Fz);
 
+  // Pacejka's equations tend to provide infinitesimal stiff tires at low
+  // normal forces. Limit the input to the magic formula to a minimal
+  // normal load and rescale the output force according to the original
+  // load.
+  real_type FzRatio = 1;
+  if (Fz < mFzMin) {
+    FzRatio = Fz/mFzMin;
+    Fz = mFzMin;
+  }
+
+  // The normal force is mean to be in kN
+  Fz *= 1e-3;
+
   //
   // Longitudinal force (Pure longitudinal slip)
   //
@@ -216,7 +208,31 @@
   real_type Bza = Bz*alphaz;
   real_type Mz = Dz*sin(Cz*atan(Bza - Ez*(Bza - atan(Bza)))) + SVz;
 
-  return Vector6(Vector3(0, 0, Mz), Vector3(Fx, Fy, 1e3*Fz));
+  return FzRatio*Vector6(Vector3(0, 0, Mz), Vector3(Fx, Fy, 1e3*Fz));
 }
 
+void
+Pacejka94::setSpringConstant(const real_type& springConstant)
+{
+  mSpringConstant = springConstant;
+}
+
+const real_type&
+Pacejka94::getSpringConstant(void) const
+{
+  return mSpringConstant;
+}
+
+void
+Pacejka94::setDampingConstant(const real_type& dampingConstant)
+{
+  mDampingConstant = dampingConstant;
+}
+
+const real_type&
+Pacejka94::getDampingConstant(void) const
+{
+  return mDampingConstant;
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.h	2009-01-17 21:34:44 UTC (rev 947)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.h	2009-01-19 17:45:13 UTC (rev 948)
@@ -15,6 +15,11 @@
   Pacejka94(const std::string& name);
   virtual ~Pacejka94(void);
 
+  // Helper function to compute the resulting force
+  virtual Vector6 getForce(const real_type& rho, const real_type& rhoDot,
+                           const real_type& alpha, const real_type& kappa,
+                           const real_type& gamma, const real_type& phi) const;
+
   /** Stuff that should move into the tire force implementation.
    */
   void setSpringConstant(const real_type& springConstant);
@@ -23,10 +28,8 @@
   void setDampingConstant(const real_type& dampingConstant);
   const real_type& getDampingConstant(void) const;
 
-  // Helper function to compute the resulting force
-  virtual Vector6 getForce(const real_type& rho, const real_type& rhoDot,
-                           const real_type& alpha, const real_type& kappa,
-                           const real_type& gamma, const real_type& phi) const;
+  const real_type& getFzMin() const { return mFzMin; }
+  void setFzMin(const real_type& value) { mFzMin = value; }
 
   const real_type& getA0() const { return mA0; }
   void setA0(const real_type& value) { mA0 = value; }
@@ -205,6 +208,8 @@
   real_type mSpringConstant;
   real_type mDampingConstant;
 
+  real_type mFzMin;
+
   real_type mA0;
   real_type mA1, mA2, mA15;
   real_type mA3, mA4, mA5;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PacejkaTire.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PacejkaTire.cpp	2009-01-17 21:34:44 UTC (rev 947)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PacejkaTire.cpp	2009-01-19 17:45:13 UTC (rev 948)
@@ -122,7 +122,9 @@
     // The wheel revolution speed
     real_type omega = dot(rotVel, s);
 
-    // The rotational velocity of the hub system wrt ground
+    // The rotational velocity of the hub system wrt ground,
+    // Note that this does *not* include the wheels own spin
+    // rate around the wheel axis.
     Vector3 rotVelHub = relVel.getAngular() - omega*s;
  
     // FIXME ????



From frohlich at mail.berlios.de  Mon Jan 19 19:54:15 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 19 Jan 2009 19:54:15 +0100
Subject: [OpenFDM-svn] r949 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200901191854.n0JIsFC2009240@sheep.berlios.de>

Author: frohlich
Date: 2009-01-19 19:54:15 +0100 (Mon, 19 Jan 2009)
New Revision: 949

Modified:
   branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
Log:
Improove normal force control.

M    tiretestrig.cpp


Modified: branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2009-01-19 17:45:13 UTC (rev 948)
+++ branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2009-01-19 18:54:15 UTC (rev 949)
@@ -13,6 +13,7 @@
 #include <OpenFDM/GroupMechanicLink.h>
 #include <OpenFDM/GroupOutput.h>
 #include <OpenFDM/Output.h>
+#include <OpenFDM/PrismaticActuator.h>
 #include <OpenFDM/PrismaticJoint.h>
 #include <OpenFDM/RevoluteActuator.h>
 #include <OpenFDM/RevoluteJoint.h>
@@ -77,9 +78,74 @@
   rimAndTire->addLink("link2");
   group->connect(rimAndTire->getPort("link2"), pacejkaTire->getPort("link"));
 
+  GroupOutput* normalForceOutput = new GroupOutput("Normal Force Output");
+  group->addChild(normalForceOutput);
+  normalForceOutput->setExternalPortName("normalForce");
+  group->connect(pacejkaTire->getPort("normalForce"),
+                 normalForceOutput->getPort("input"));
+
   return group.release();
 }
 
+Node*
+createController(const real_type& p, const real_type& i, const real_type& d)
+{
+  SharedPtr<Group> group = new Group("Controller");
+
+  GroupInput* input = new GroupInput("Input");
+  group->addChild(input);
+  input->setExternalPortName("input");
+
+  GroupInput* desiredInput = new GroupInput("Desired Input");
+  group->addChild(desiredInput);
+  desiredInput->setExternalPortName("desiredInput");
+
+  Summer* summer = new Summer("Error");
+  summer->setNumSummands(2);
+  summer->setInputSign(0, Summer::Minus);
+  summer->setInputSign(1, Summer::Plus);
+  group->addChild(summer);
+  group->connect(input->getPort(0), summer->getPort("input0"));
+  group->connect(desiredInput->getPort(0), summer->getPort("input1"));
+  
+  // the proportional thing
+  Gain* proportionalGain = new Gain("Proportional Gain");
+  proportionalGain->setGain(p);
+  group->addChild(proportionalGain);
+  group->connect(summer->getPort("output"), proportionalGain->getPort("input"));
+
+
+  // the integral thing
+  Integrator* integrator = new Integrator("Integrator");
+  group->addChild(integrator);
+  group->connect(summer->getPort("output"), integrator->getPort("input"));
+
+  Gain* integralGain = new Gain("Integral Gain");
+  integralGain->setGain(i);
+  group->addChild(integralGain);
+  group->connect(integrator->getPort("output"), integralGain->getPort("input"));
+
+
+  // the derivative thing
+//   TimeDerivative* timeDerivative = new Integrator("Integrator");
+
+  // The output sum
+  Summer* outputSum = new Summer("Output Sum");
+  outputSum->setNumSummands(2);
+  group->addChild(outputSum);
+  group->connect(proportionalGain->getPort("output"),
+                 outputSum->getPort("input0"));
+  group->connect(integralGain->getPort("output"),
+                 outputSum->getPort("input1"));
+  
+  GroupOutput* output = new GroupOutput("Output");
+  group->addChild(output);
+  output->setExternalPortName("output");
+  group->connect(outputSum->getPort("output"), output->getPort("input"));
+
+  return group.release();
+}
+
 // Build up the tiretestrig system.
 // When we have proper serialization, load that from a file.
 Node*
@@ -87,48 +153,38 @@
 {
   SharedPtr<Group> group = new Group("Tire Testrig");
 
+  group->addChild(wheel);
+
   // First build up the mechanical system
   FixedRootJoint* fixedRootJoint = new FixedRootJoint("Fixed Root Joint");
   group->addChild(fixedRootJoint);
-  fixedRootJoint->setRootPosition(Vector3(0, 0, -1));
+  fixedRootJoint->setRootPosition(Vector3(0, 0, -0.5));
 
-//   PrismaticActuator* prismaticActuator
-//     = new PrismaticActuator("Normal Force Actuator");
-//   prismaticActuator->setAxis(Vector3::unit(2));
-//   prismaticActuator->setMaxVel(Vector3::unit(2));
-//   group->addChild(prismaticActuator);
+  PrismaticActuator* prismaticActuator
+    = new PrismaticActuator("Normal Force Actuator");
+  prismaticActuator->setAxis(Vector3::unit(2));
+  prismaticActuator->setVelDotGain(100);
+  prismaticActuator->setVelocityControl(true);
+  group->addChild(prismaticActuator);
 
-  PrismaticJoint* prismaticJoint = new PrismaticJoint("Normal Force joint");
-  prismaticJoint->setAxis(Vector3::unit(2));
-  prismaticJoint->setEnableExternalForce(true);
-  group->addChild(prismaticJoint);
-
-  Summer* normalForceSum = new Summer("Normal Force Sum");
-  normalForceSum->setNumSummands(2);
-  group->addChild(normalForceSum);
-  group->connect(prismaticJoint->getPort("force"),
-                 normalForceSum->getPort("output"));
-
   ConstModel* normalForce = new ConstModel("Normal Force");
   group->addChild(normalForce);
-  group->connect(normalForceSum->getPort("input0"),
-                 normalForce->getPort("output"));
- 
-  LinearSpringDamper* strutDamper = new LinearSpringDamper("Strut Damper");
-  strutDamper->setSpringConstant(0);
-  strutDamper->setDamperConstant(1000);
-  group->addChild(strutDamper);
-  group->connect(normalForceSum->getPort("input1"),
-                 strutDamper->getPort("force"));
-  group->connect(strutDamper->getPort("velocity"),
-                 prismaticJoint->getPort("velocity"));
-  group->connect(strutDamper->getPort("position"),
-                 prismaticJoint->getPort("position"));
 
+  Node* normalForceController = createController(1e-4, 0, 0);
+  normalForceController->setName("Normal Force Controller");
+  group->addChild(normalForceController);
+  group->connect(normalForce->getPort("output"),
+                 normalForceController->getPort("desiredInput"));
+  group->connect(wheel->getPort("normalForce"),
+                 normalForceController->getPort("input"));
+  group->connect(normalForceController->getPort("output"),
+                 prismaticActuator->getPort("input"));
+
   RigidBody* rootMount = new RigidBody("Root Mount");
   group->addChild(rootMount);
   group->connect(rootMount->getPort("link0"), fixedRootJoint->getPort("link"));
-  group->connect(rootMount->getPort("link1"), prismaticJoint->getPort("link0"));
+  group->connect(rootMount->getPort("link1"),
+                 prismaticActuator->getPort("link0"));
 
   RevoluteActuator* camberActuator = new RevoluteActuator("Camber Actuator");
   camberActuator->setAxis(Vector3(1, 0, 0));
@@ -142,7 +198,7 @@
   RigidBody* normalForceStrut = new RigidBody("Normal Force Strut");
   group->addChild(normalForceStrut);
   group->connect(normalForceStrut->getPort("link0"),
-                 prismaticJoint->getPort("link1"));
+                 prismaticActuator->getPort("link1"));
   group->connect(normalForceStrut->getPort("link1"),
                  camberActuator->getPort("link0"));
 
@@ -174,7 +230,6 @@
   group->connect(hubStrut->getPort("link0"), sideActuator->getPort("link1"));
   group->connect(hubStrut->getPort("link1"), hubJoint->getPort("link0"));
 
-  group->addChild(wheel);
   group->connect(hubJoint->getPort("link1"), wheel->getPort("link"));
 
   return group.release();



From frohlich at mail.berlios.de  Mon Jan 19 20:36:47 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 19 Jan 2009 20:36:47 +0100
Subject: [OpenFDM-svn] r950 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901191936.n0JJaluE018256@sheep.berlios.de>

Author: frohlich
Date: 2009-01-19 20:36:46 +0100 (Mon, 19 Jan 2009)
New Revision: 950

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/BinaryFunction.cpp
Log:
Add missing member initialization.

M    BinaryFunction.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/BinaryFunction.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/BinaryFunction.cpp	2009-01-19 18:54:15 UTC (rev 949)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/BinaryFunction.cpp	2009-01-19 19:36:46 UTC (rev 950)
@@ -13,7 +13,8 @@
   END_OPENFDM_OBJECT_DEF
 
 BinaryFunction::BinaryFunction(const std::string& name, Type type) :
-  SimpleDirectModel(name)
+  SimpleDirectModel(name),
+  mType(type)
 {
   setNumInputPorts(2);
 }



From frohlich at mail.berlios.de  Mon Jan 19 21:45:09 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 19 Jan 2009 21:45:09 +0100
Subject: [OpenFDM-svn] r951 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200901192045.n0JKj9nq004072@sheep.berlios.de>

Author: frohlich
Date: 2009-01-19 21:45:09 +0100 (Mon, 19 Jan 2009)
New Revision: 951

Modified:
   branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
Log:
Improove normal force controller.

M    tiretestrig.cpp


Modified: branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2009-01-19 19:36:46 UTC (rev 950)
+++ branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2009-01-19 20:45:09 UTC (rev 951)
@@ -2,6 +2,8 @@
  *
  */
 
+#include <OpenFDM/Bias.h>
+#include <OpenFDM/BinaryFunction.h>
 #include <OpenFDM/ConstModel.h>
 #include <OpenFDM/FixedRootJoint.h>
 #include <OpenFDM/Gain.h>
@@ -18,6 +20,7 @@
 #include <OpenFDM/RevoluteActuator.h>
 #include <OpenFDM/RevoluteJoint.h>
 #include <OpenFDM/RigidBody.h>
+#include <OpenFDM/Saturation.h>
 #include <OpenFDM/SimulationTime.h>
 #include <OpenFDM/Summer.h>
 #include <OpenFDM/System.h>
@@ -88,10 +91,11 @@
 }
 
 Node*
-createController(const real_type& p, const real_type& i, const real_type& d)
+createController()
 {
   SharedPtr<Group> group = new Group("Controller");
 
+  // The inputs from the outside
   GroupInput* input = new GroupInput("Input");
   group->addChild(input);
   input->setExternalPortName("input");
@@ -100,6 +104,29 @@
   group->addChild(desiredInput);
   desiredInput->setExternalPortName("desiredInput");
 
+
+  // As long as we have not reached 1% of the load, go with a speed of 1m/s
+  BinaryFunction* div = new BinaryFunction("Normalized Input",
+                                           BinaryFunction::Div);
+  group->addChild(div);
+  group->connect(input->getPort("output"), div->getPort("input0"));
+  group->connect(desiredInput->getPort("output"), div->getPort("input1"));
+
+  Bias* bias = new Bias("Relative Input Bias", -0.01);
+  group->addChild(bias);
+  group->connect(div->getPort("output"), bias->getPort("input"));
+
+  Saturation* saturation = new Saturation("Relative Saturation");
+  saturation->setMaxSaturation(Matrix(real_type(0)));
+  group->addChild(saturation);
+  group->connect(bias->getPort("output"), saturation->getPort("input"));
+
+  Gain* approachGain = new Gain("Approach Gain", -100);
+  group->addChild(approachGain);
+  group->connect(saturation->getPort("output"), approachGain->getPort("input"));
+
+
+  // The usual proportional controller
   Summer* summer = new Summer("Error");
   summer->setNumSummands(2);
   summer->setInputSign(0, Summer::Minus);
@@ -107,35 +134,21 @@
   group->addChild(summer);
   group->connect(input->getPort(0), summer->getPort("input0"));
   group->connect(desiredInput->getPort(0), summer->getPort("input1"));
-  
+
   // the proportional thing
   Gain* proportionalGain = new Gain("Proportional Gain");
-  proportionalGain->setGain(p);
+  proportionalGain->setGain(1e-4);
   group->addChild(proportionalGain);
   group->connect(summer->getPort("output"), proportionalGain->getPort("input"));
 
 
-  // the integral thing
-  Integrator* integrator = new Integrator("Integrator");
-  group->addChild(integrator);
-  group->connect(summer->getPort("output"), integrator->getPort("input"));
-
-  Gain* integralGain = new Gain("Integral Gain");
-  integralGain->setGain(i);
-  group->addChild(integralGain);
-  group->connect(integrator->getPort("output"), integralGain->getPort("input"));
-
-
-  // the derivative thing
-//   TimeDerivative* timeDerivative = new Integrator("Integrator");
-
   // The output sum
   Summer* outputSum = new Summer("Output Sum");
   outputSum->setNumSummands(2);
   group->addChild(outputSum);
   group->connect(proportionalGain->getPort("output"),
                  outputSum->getPort("input0"));
-  group->connect(integralGain->getPort("output"),
+  group->connect(approachGain->getPort("output"),
                  outputSum->getPort("input1"));
   
   GroupOutput* output = new GroupOutput("Output");
@@ -170,7 +183,7 @@
   ConstModel* normalForce = new ConstModel("Normal Force");
   group->addChild(normalForce);
 
-  Node* normalForceController = createController(1e-4, 0, 0);
+  Node* normalForceController = createController();
   normalForceController->setName("Normal Force Controller");
   group->addChild(normalForceController);
   group->connect(normalForce->getPort("output"),



From frohlich at mail.berlios.de  Mon Jan 19 21:47:04 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 19 Jan 2009 21:47:04 +0100
Subject: [OpenFDM-svn] r952 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901192047.n0JKl4aT004224@sheep.berlios.de>

Author: frohlich
Date: 2009-01-19 21:47:04 +0100 (Mon, 19 Jan 2009)
New Revision: 952

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.cpp
Log:
Less stiff braking force for the default dataset.

M    Pacejka89.cpp
M    Pacejka94.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.cpp	2009-01-19 20:45:09 UTC (rev 951)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka89.cpp	2009-01-19 20:47:04 UTC (rev 952)
@@ -71,7 +71,7 @@
 
   mB0(2),
   mB1(0), mB2(1000),
-  mB3(0), mB4(50), mB5(0),
+  mB3(0), mB4(10), mB5(0),
   mB6(0), mB7(0), mB8(0.5),
   mB9(0), mB10(0),
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.cpp	2009-01-19 20:45:09 UTC (rev 951)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Pacejka94.cpp	2009-01-19 20:47:04 UTC (rev 952)
@@ -86,7 +86,7 @@
 
   mB0(2),
   mB1(0), mB2(1000),
-  mB3(0), mB4(50), mB5(0),
+  mB3(0), mB4(10), mB5(0),
   mB6(0), mB7(0), mB8(0.5), mB13(0),
   mB9(0), mB10(0),
   mB11(0), mB12(0),



From frohlich at mail.berlios.de  Mon Jan 19 22:58:30 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 19 Jan 2009 22:58:30 +0100
Subject: [OpenFDM-svn] r953 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200901192158.n0JLwUiD013046@sheep.berlios.de>

Author: frohlich
Date: 2009-01-19 22:58:29 +0100 (Mon, 19 Jan 2009)
New Revision: 953

Modified:
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Use standard defines for returning from main.

M    structure.cpp


Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2009-01-19 20:47:04 UTC (rev 952)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2009-01-19 21:58:29 UTC (rev 953)
@@ -164,7 +164,7 @@
 
   std::cout << "PASSED" << std::endl;
 
-  return 0;
+  return EXIT_SUCCESS;
 }
 
 // Kabelbaum <-> PortBundle ??? Original Kabelbaum == Cabel Bundle



From frohlich at mail.berlios.de  Wed Jan 21 19:39:12 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 21 Jan 2009 19:39:12 +0100
Subject: [OpenFDM-svn] r954 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901211839.n0LIdC55024912@sheep.berlios.de>

Author: frohlich
Date: 2009-01-21 19:39:11 +0100 (Wed, 21 Jan 2009)
New Revision: 954

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
Log:
Compute the joint matrix derivative only once.

M    src/OpenFDM/CartesianJoint.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2009-01-19 21:58:29 UTC (rev 953)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJoint.h	2009-01-21 18:39:11 UTC (rev 954)
@@ -142,14 +142,31 @@
       // Propagate the reference coordinate system to the parent.
       mChildLink.setCoordinateSystem(mParentLink.getCoordinateSystem().toReference(mRelativeCoordinateSystem));
 
+      Vector6 relVel = mJointMatrix*velocity;
       mChildLink.setPosAndVel(mParentLink.getMechanicLinkValue(),
-                              relPosition, orientation, mJointMatrix*velocity);
+                              relPosition, orientation, relVel);
+
+      /**
+         This is the cross product of the inertial spatial velocity
+         vector with the relative spatial velocity vector (motion type
+         cross product). Since the inertial velocity is the transformed
+         inertial velocity of the parent frame plus the relative
+         velocity of the current frame, all the relative velocity
+         components cancel out in this expression. What remains is the
+         transformed spatial velocity of the parent frame cross the
+         relative velocity.
+      */
+      Vector6 pivel = mParentLink.getSpVelAtLink();
+      pivel = mRelativeCoordinateSystem.motionToLocal(pivel);
+      mHdot = Vector6(cross(pivel.getAngular(), relVel.getAngular()),
+                      cross(pivel.getAngular(), relVel.getLinear()) + 
+                      cross(pivel.getLinear(), relVel.getAngular()));
     }
 
-    Vector6 getHdot()
-    {
-      return getChildLink().getMechanicLinkValue().getFrame().getHdot();
-    }
+    /** This is the derivative of the joint matrix times the joint velocity
+     */
+    const Vector6& getHdot() const
+    { return mHdot; }
     
     /** Compute the articulation step for a given joint force.
      *  Use this for usual joints.
@@ -246,6 +263,7 @@
   private:
     // Stores some values persistent accross velocity/articulation/acceleration
     MatrixFactorsNN hIh;
+    Vector6 mHdot;
     Vector6 pAlpha;
     VectorN mVelDot;
     VectorN mJointForce;



From frohlich at mail.berlios.de  Thu Jan 22 19:01:35 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 22 Jan 2009 19:01:35 +0100
Subject: [OpenFDM-svn] r955 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901221801.n0MI1ZUA007580@sheep.berlios.de>

Author: frohlich
Date: 2009-01-22 19:01:34 +0100 (Thu, 22 Jan 2009)
New Revision: 955

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/PacejkaTire.cpp
Log:
Cleanup slip computations.

M    PacejkaTire.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PacejkaTire.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PacejkaTire.cpp	2009-01-21 18:39:11 UTC (rev 954)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PacejkaTire.cpp	2009-01-22 18:01:34 UTC (rev 955)
@@ -49,7 +49,7 @@
       mLongitudinalForcePort = 0;
 
     // Pacejka suggests this correction to avoid singularities at zero speed
-    const real_type e_v = 1e-2;
+    const real_type e_v = 1e-1;
 
     // The coordinate system at the hub.
     CoordinateSystem hubCoordinateSystem(getLink().getCoordinateSystem());
@@ -70,64 +70,51 @@
     // Wheel forward vector as defined in (2.23), Pacejka [1]
     Vector3 l = normalize(cross(n, s));
 
-//     // The side direction in the ground plane
-//     Vector3 t = normalize(cross(l, n));
-
-//     // The transform 
-//     Matrix33 T(l(0), l(1), l(2),
-//                t(0), t(1), t(2),
-//                s(0), s(1), s(2));
-    
     // Compute the contact point of the wheel with the ground plane
     Vector3 c;
     if (!lp.intersectLine(Vector3::zeros(), cross(l, s), c))
       return;
 
-    // Since we live in our local coordinate system, this is just to be clear
-    Vector3 r = c - Vector3::zeros();
+    // The rolling radius - e do not fiddle here with the effective rolling
+    // radius here (Yet!).
+    real_type r = norm(c);
     
     // Get the tire deflection.
-    real_type rho = mPacejkaTire->getWheelRadius() - norm(r);
+    real_type rho = mPacejkaTire->getWheelRadius() - r;
 
     // Don't bother if we do not intersect the ground.
     if (rho < 0)
       return;
 
-    // The relative velocity of the hub wrt the contact point
-    // measured in the hubs coordinate system
+    // The relative velocity of the wheel wrt the contact surface
+    // measured in the hubs coordinate system.
+    // This includes the wheels revolution speed.
     Vector6 relVel = getLink().getRefVel() - groundValues.vel;
 
-    Vector6 relVel2 = motionTo(r, relVel);
-
-//     std::cout << trans(r) << std::endl;
-//     std::cout << trans(relVel.getLinear()) << " " << 
-//       trans(relVel2.getLinear()) << std::endl;
-    
     // The compression velocity.
     // Positive when the contact spring is compressed,
     // negative when decompressed.
-    real_type rhoDot = dot(relVel.getLinear(), normalize(r));
+    real_type rhoDot = dot(relVel.getLinear(), normalize(c));
 
+    // The scalar wheel revolution speed.
+    real_type omega = dot(relVel.getAngular(), s);
+
+    // The rotational velocity of the hub system wrt ground.
+    // This does *not* include the wheels revolution speed.
+    Vector3 rotVelHub = relVel.getAngular() - omega*s;
+
+    // The relative velocity of the rim fixed contact point wrt the ground
+    Vector6 relVelS = motionTo(c, relVel);
+
     // The side direction in the ground plane
     Vector3 t = normalize(cross(l, n));
 
     // The speed at the contact center
-    Vector3 V_c = relVel.getLinear(); // + r_dot; ???
-//     Vector3 V_cS = relVel.getLinear(); // + r_dot; ???
-    Vector3 V_s = relVel2.getLinear();
+    Vector3 V_c = relVel.getLinear();
+    Vector3 V_s = relVelS.getLinear();
 
-    // The wheels velocity wrt ground
-    Vector3 rotVel = relVel.getAngular();
-
-    // The wheel revolution speed
-    real_type omega = dot(rotVel, s);
-
-    // The rotational velocity of the hub system wrt ground,
-    // Note that this does *not* include the wheels own spin
-    // rate around the wheel axis.
-    Vector3 rotVelHub = relVel.getAngular() - omega*s;
- 
-    // FIXME ????
+    // The speed values we need to define the various slips,
+    // See Pacejka's book for an explanation and the simplification used here
     real_type V_cx = dot(V_c, l);
     real_type V_cx_eps = fabs(V_cx) + e_v;
     real_type V_cy = dot(V_c, t);
@@ -153,20 +140,19 @@
     // we check the  = -1/R claim in (2.18) Pacejka
     real_type phi = dot(n, rotVelHub)/V_cx_eps;
 
+    // Call the magic formula evaluation
     Vector6 f = mPacejkaTire->getForce(rho, rhoDot, alpha, kappa, gamma, phi);
 
     if (mLongitudinalForcePort.isConnected())
-      mLongitudinalForcePort = f.getLinear()(0);
+      mLongitudinalForcePort = f(3);
     if (mLateralForcePort.isConnected())
-      mLateralForcePort = f.getLinear()(1);
+      mLateralForcePort = f(4);
     if (mNormalForcePort.isConnected())
-      mNormalForcePort = f.getLinear()(2);
+      mNormalForcePort = f(5);
 
-    // For now just pure side force and slip
-    Vector3 force = f.getLinear()(0)*l + f.getLinear()(1)*t
-      + f.getLinear()(2)*n;
-    Vector3 contactPoint = c;
-    getLink().applyBodyForce(contactPoint, force);
+    // Apply the force and torque values rotated to the body frame to the wheel
+    getLink().applyBodyForce(c, Vector3(f(3)*l + f(4)*t + f(5)*n));
+    getLink().applyBodyTorque(Vector3(f(0)*l + f(1)*t + f(2)*n));
   }
 
 private:



From frohlich at mail.berlios.de  Thu Jan 22 22:18:23 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 22 Jan 2009 22:18:23 +0100
Subject: [OpenFDM-svn] r956 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901222118.n0MLIN5o011577@sheep.berlios.de>

Author: frohlich
Date: 2009-01-22 22:18:23 +0100 (Thu, 22 Jan 2009)
New Revision: 956

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
Log:
Remove unused variable.

M    HDF5SystemOutput.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2009-01-22 18:01:34 UTC (rev 955)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2009-01-22 21:18:23 UTC (rev 956)
@@ -199,8 +199,7 @@
 class HDFMatrixStream : public HDF5Object {
 public:
   HDFMatrixStream(const HDF5Object& parent, const std::string& name,
-                  const Size& size) :
-    _timeIndex(0)
+                  const Size& size)
   {
     hsize_t _chunklen(100);
     herr_t status;
@@ -232,7 +231,6 @@
     if (!_dataspace.valid())
       return;
 
-    _timeIndex = 0;
     _dims[0] = 0;
 
     hsize_t chunk_dims[3] = { _chunklen, _dims[1], _dims[2] };
@@ -282,7 +280,6 @@
 
 private:
   hsize_t _dims[3];
-  unsigned _timeIndex;
   HDF5Object _dataspace;
 };
 



From frohlich at mail.berlios.de  Thu Jan 22 22:25:21 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 22 Jan 2009 22:25:21 +0100
Subject: [OpenFDM-svn] r957 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901222125.n0MLPLCr012169@sheep.berlios.de>

Author: frohlich
Date: 2009-01-22 22:25:21 +0100 (Thu, 22 Jan 2009)
New Revision: 957

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/ConstModel.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ConstModel.h
Log:
Make sure the output size matches.

M    ConstModel.h
M    ConstModel.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ConstModel.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ConstModel.cpp	2009-01-22 21:18:23 UTC (rev 956)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ConstModel.cpp	2009-01-22 21:25:21 UTC (rev 957)
@@ -30,6 +30,21 @@
 {
 }
 
+bool
+ConstModel::alloc(ModelContext& context) const
+{
+  Size sz = size(mValue);
+  Log(Initialization, Debug)
+    << "Size for ConstModel is detemined by the value "
+    << "with size: " << trans(sz) << std::endl;
+  if (!context.getPortValueList().setOrCheckPortSize(mOutputPort, sz)) {
+    Log(Initialization, Error)
+      << "Size for output port does not match!" << std::endl;
+    return false;
+  }
+  return true;
+}
+
 void
 ConstModel::output(const Task& ,const DiscreteStateValueVector&,
                    const ContinousStateValueVector&,

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ConstModel.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ConstModel.h	2009-01-22 21:18:23 UTC (rev 956)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ConstModel.h	2009-01-22 21:25:21 UTC (rev 957)
@@ -17,6 +17,7 @@
   ConstModel(const std::string& name, const real_type& value = real_type(0));
   virtual ~ConstModel(void);
 
+  virtual bool alloc(ModelContext& context) const;
   virtual void output(const Task&,const DiscreteStateValueVector&,
                       const ContinousStateValueVector& continousState,
                       PortValueList& portValues) const;



From frohlich at mail.berlios.de  Fri Jan 23 07:02:30 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 23 Jan 2009 07:02:30 +0100
Subject: [OpenFDM-svn] r958 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901230602.n0N62U4f014565@sheep.berlios.de>

Author: frohlich
Date: 2009-01-23 07:02:27 +0100 (Fri, 23 Jan 2009)
New Revision: 958

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Pull port values from a connect struct instead of pusshing them.

M    OpenFDM/System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-22 21:25:21 UTC (rev 957)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-23 06:02:27 UTC (rev 958)
@@ -262,15 +262,17 @@
   struct PortConnectSet : public Referenced {
     bool setPortValue(PortValue* portValue)
     {
-      while (!mParentPortData.empty()) {
-        SharedPtr<PortData> portData = mParentPortData.back().lock();
-        mParentPortData.pop_back();
-        if (!portData->setPortValue(portValue))
-          return false;
-      }
+      if (!portValue)
+        return false;
+      mPortValue = portValue;
       return true;
     }
+    PortValue* getPortValue()
+    {
+      return mPortValue;
+    }
     std::vector<WeakPtr<PortData> > mParentPortData;
+    SharedPtr<PortValue> mPortValue;
   };
 
   struct PortData : public WeakReferenced {
@@ -376,11 +378,7 @@
     {
       if (!mPortValueCreator)
         return true;
-      SharedPtr<InstanceData> instanceData = mInstanceData.lock();
-      if (!instanceData)
-        return false;
-      // FIXME
-      if (instanceData->getPortValue(*getPortInfo()))
+      if (getPortValue())
         return true;
       SharedPtr<PortValue> portValue = getPortInfo()->newValue();
       if (!portValue)
@@ -390,6 +388,11 @@
       return true;
     }
 
+    PortValue* getPortValue()
+    {
+      return mPortConnectSet->getPortValue();
+    }
+
   private:
     WeakPtr<InstanceData> mInstanceData;
     SharedPtr<const PortInfo> mPortInfo;
@@ -466,15 +469,15 @@
     std::string getNodeNamePath() const
     { return Node::toNodePathName(mNodePath); }
 
-    bool allocPortValues()
+    bool createPortValues()
     {
       for (unsigned i = 0; i < mPortDataVector.size(); ++i) {
-        Log(Schedule, Debug3) << "Try to to allocate port value \""
+        Log(Schedule, Debug3) << "Try to create port value \""
                               << mPortDataVector[i]->getPortInfo()->getName()
                               << "\" of \"" << getNodeNamePath()
                               << "\"" << endl;
         if (!mPortDataVector[i]->createPortValue()) {
-          Log(Schedule, Warning) << "Failed to allocate port value \""
+          Log(Schedule, Warning) << "Failed to create port value \""
                                  << mPortDataVector[i]->getPortInfo()->getName()
                                  << "\" of \"" << getNodeNamePath()
                                  << "\".\nAborting!" << endl;
@@ -485,6 +488,27 @@
       return true;
     }
 
+    bool fetchPortValues()
+    {
+      for (unsigned i = 0; i < mPortDataVector.size(); ++i) {
+        Log(Schedule, Debug3) << "Try to fetch port value \""
+                              << mPortDataVector[i]->getPortInfo()->getName()
+                              << "\" of \"" << getNodeNamePath()
+                              << "\"" << endl;
+        PortValue* portValue = mPortDataVector[i]->getPortValue();
+        if (!portValue) {
+          Log(Schedule, Warning) << "Failed to fetch port value \""
+                                 << mPortDataVector[i]->getPortInfo()->getName()
+                                 << "\" of \"" << getNodeNamePath()
+                                 << "\".\nAborting!" << endl;
+
+          return false;
+        }
+        mPortValueList.setPortValue(i, portValue);
+      }
+      return true;
+    }
+
     const SampleTime& getSampleTime() const
     { return mSampleTime; }
 
@@ -1298,23 +1322,14 @@
     // alloc port values
     InstanceDataMap::const_iterator i;
     for (i = mInstanceDataMap.begin(); i != mInstanceDataMap.end(); ++i) {
-      if (!i->second->allocPortValues())
+      if (!i->second->createPortValues())
         return false;
     }
 
-    // check port values and report unconnected mandatory values.
+    // check port values and report unconnected values.
     for (i = mInstanceDataMap.begin(); i != mInstanceDataMap.end(); ++i) {
-      const Node* node = i->second->getNode();
-      for (unsigned k = 0; k < node->getNumPorts(); ++k) {
-        SharedPtr<const PortInfo> portInfo = node->getPort(k);
-        if (!i->second->getPortValue(*portInfo)) {
-          Log(Schedule, Warning) << "Mandatory port value for port \""
-                                 << portInfo->getName() << "\" for model \""
-                                 << i->second->getNodeNamePath()
-                                 << "\" is not connected!" << endl;
-          return false;
-        }
-      }
+      if (!i->second->fetchPortValues())
+        return false;
     }
 
     // Create the contexts



From frohlich at mail.berlios.de  Fri Jan 23 07:29:30 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 23 Jan 2009 07:29:30 +0100
Subject: [OpenFDM-svn] r959 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901230629.n0N6TU3Y006483@sheep.berlios.de>

Author: frohlich
Date: 2009-01-23 07:29:29 +0100 (Fri, 23 Jan 2009)
New Revision: 959

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Connect group interface ondes top down.

M    src/OpenFDM/System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-23 06:02:27 UTC (rev 958)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-23 06:29:29 UTC (rev 959)
@@ -363,11 +363,6 @@
       return true;
     }
 
-    void disablePortValueCreation()
-    {
-      mPortValueCreator = false;
-    }
-
     void setProxyPortData(PortData* proxyPortData)
     {
       mPortValueCreator = false;
@@ -732,8 +727,17 @@
     OpenFDMAssert(node.getPort(0));
     PortData* portData = instanceData->getPortData(0);
     OpenFDMAssert(portData);
-    portData->disablePortValueCreation();
-    mGroupInterfacePortDataMap[node.getExternalPortIndex()] = portData;
+
+    PortData* parentPortData;
+    parentPortData = mGroupInterfacePortDataMap[node.getExternalPortIndex()];
+    if (!parentPortData) {
+      Log(Schedule, Error) << "Internal Error: Cannot find external port "
+        "data for group external port!" << std::endl;
+      return;
+    }
+
+    parentPortData->setProxyPortData(portData);
+    portData->setProxyPortData(parentPortData);
   }
 
   virtual void apply(const RootJoint& node)
@@ -767,10 +771,8 @@
         continue;
       if (portData) {
         instanceData->getPortData(i)->setProxyPortData(portData);
-        instanceData->getPortData(i)->disablePortValueCreation();
       } else {
         portData = instanceData->getPortData(i);
-        portData->disablePortValueCreation();
       }
     }
   }
@@ -805,6 +807,9 @@
     GroupInterfacePortDataMap parentGroupInterfacePortDataMap;
     mGroupInterfacePortDataMap.swap(parentGroupInterfacePortDataMap);
     mGroupInterfacePortDataMap.resize(group.getNumPorts());
+    // Alloc PortData structs of each group port
+    for (unsigned i = 0; i < mGroupInterfacePortDataMap.size(); ++i)
+      mGroupInterfacePortDataMap[i] = instanceData->getPortData(i);
 
     // End pushing external connection data
 
@@ -904,25 +909,6 @@
           " appeared to be compatible before." << std::endl;
     }
 
-    // add group connect routings
-    // merge child list into the global list of instances
-    OpenFDMAssert(mGroupInterfacePortDataMap.size() == group.getNumPorts());
-    for (unsigned i = 0; i < group.getNumPorts(); ++i) {
-      PortData* portData = mGroupInterfacePortDataMap[i];
-      if (!portData) {
-        Log(Schedule, Error) << "Internal Error: Cannot find internal port "
-          "data for group external port!" << std::endl;
-        continue;
-      }
-
-      // Allocate a new port data struct in the parent.
-      PortData* parentPortData = instanceData->getPortData(i);
-      parentPortData->setProxyPortData(portData);
-      portData->setProxyPortData(parentPortData);
-      parentPortData->disablePortValueCreation();
-      portData->disablePortValueCreation();
-    }
-
     // We must have gained exactly this amount of instances while traversing
     // this group, so make sure it is like that ...
     OpenFDMAssert(mInstanceDataVector.size() == group.getNumChildren());



From frohlich at mail.berlios.de  Fri Jan 23 19:49:06 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 23 Jan 2009 19:49:06 +0100
Subject: [OpenFDM-svn] r960 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901231849.n0NIn6V5029557@sheep.berlios.de>

Author: frohlich
Date: 2009-01-23 19:49:06 +0100 (Fri, 23 Jan 2009)
New Revision: 960

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Remove the instance data backreference in the portdata struct.

M    src/OpenFDM/System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-23 06:29:29 UTC (rev 959)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-23 18:49:06 UTC (rev 960)
@@ -277,9 +277,7 @@
 
   struct PortData : public WeakReferenced {
   public:
-    PortData(InstanceData* instanceData, const PortInfo* portInfo,
-             bool valueCreator = true) :
-      mInstanceData(instanceData),
+    PortData(const PortInfo* portInfo, bool valueCreator = true) :
       mPortInfo(portInfo),
       mPortValueCreator(valueCreator)
     {
@@ -346,23 +344,6 @@
     const SharedPtr<const PortInfo>& getPortInfo() const
     { return mPortInfo; }
 
-    bool setPortValue(PortValue* portValue)
-    {
-      if (!getPortInfo())
-        return false;
-      SharedPtr<InstanceData> instanceData = mInstanceData.lock();
-      if (!instanceData)
-        return false;
-      Log(Schedule, Debug3)
-        << "setPortValue for port \"" << getPortInfo()->getName()
-        << "\" is at: " << portValue << endl;
-      // FIXME: move the set port value and accept port value into one call
-      if (!getPortInfo()->acceptPortValue(portValue))
-        return false;
-      instanceData->setPortValue(*getPortInfo(), portValue);
-      return true;
-    }
-
     void setProxyPortData(PortData* proxyPortData)
     {
       mPortValueCreator = false;
@@ -389,7 +370,6 @@
     }
 
   private:
-    WeakPtr<InstanceData> mInstanceData;
     SharedPtr<const PortInfo> mPortInfo;
     std::vector<WeakPtr<PortData> > mConnectedPorts;
     SharedPtr<PortConnectSet> mPortConnectSet;
@@ -405,7 +385,7 @@
       unsigned numPorts = node.getNumPorts();
       mPortDataVector.reserve(numPorts);
       for (unsigned i = 0; i < numPorts; ++i)
-        mPortDataVector.push_back(new PortData(this, node.getPort(i)));
+        mPortDataVector.push_back(new PortData(node.getPort(i)));
     }
     virtual ~InstanceData()
     { }
@@ -496,9 +476,16 @@
                                  << mPortDataVector[i]->getPortInfo()->getName()
                                  << "\" of \"" << getNodeNamePath()
                                  << "\".\nAborting!" << endl;
-
           return false;
         }
+        if (!mPortDataVector[i]->getPortInfo()->acceptPortValue(portValue)) {
+          Log(Schedule, Warning) << "Failed to fetch port value \""
+                                 << mPortDataVector[i]->getPortInfo()->getName()
+                                 << "\" of \"" << getNodeNamePath()
+                                 << "\".\nAborting!" << endl;
+          return false;
+        }
+
         mPortValueList.setPortValue(i, portValue);
       }
       return true;



From frohlich at mail.berlios.de  Sat Jan 24 08:35:22 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 24 Jan 2009 08:35:22 +0100
Subject: [OpenFDM-svn] r961 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901240735.n0O7ZMoS016176@sheep.berlios.de>

Author: frohlich
Date: 2009-01-24 08:35:22 +0100 (Sat, 24 Jan 2009)
New Revision: 961

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Use an unsigned for the number of connected ports instead of
the size of a else unused vector.

M    System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-23 18:49:06 UTC (rev 960)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-24 07:35:22 UTC (rev 961)
@@ -279,6 +279,7 @@
   public:
     PortData(const PortInfo* portInfo, bool valueCreator = true) :
       mPortInfo(portInfo),
+      mNumConnectedPorts(0),
       mPortValueCreator(valueCreator)
     {
       getOrCreatePortConnectSet();
@@ -318,9 +319,9 @@
 
     bool addPortData(PortData* portData)
     {
-      if (getPortInfo()->getMaxConnects() <= mConnectedPorts.size())
+      if (getPortInfo()->getMaxConnects() <= mNumConnectedPorts)
         return false;
-      mConnectedPorts.push_back(portData);
+      mNumConnectedPorts += 1;
       setPortConnectSet(portData->getOrCreatePortConnectSet());
       return true;
     }
@@ -332,11 +333,11 @@
 
     bool connect(PortData* portData)
     {
-      if (getPortInfo()->getMaxConnects() <= mConnectedPorts.size())
+      if (getPortInfo()->getMaxConnects() <= mNumConnectedPorts)
         return false;
       if (!portData->addPortData(this))
         return false;
-      mConnectedPorts.push_back(portData);
+      mNumConnectedPorts += 1;
       setPortConnectSet(portData->getOrCreatePortConnectSet());
       return true;
     }
@@ -371,8 +372,12 @@
 
   private:
     SharedPtr<const PortInfo> mPortInfo;
-    std::vector<WeakPtr<PortData> > mConnectedPorts;
+    // The number of *directly* connected ports. That is those direct
+    // connections within the current Group. Is used to ensure 1:* port connects
+    // if required by the PortInfo.
+    unsigned mNumConnectedPorts;
     SharedPtr<PortConnectSet> mPortConnectSet;
+    // Hmm, should this go into PortInfo??
     bool mPortValueCreator;
   };
 



From frohlich at mail.berlios.de  Sat Jan 24 08:54:16 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 24 Jan 2009 08:54:16 +0100
Subject: [OpenFDM-svn] r962 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200901240754.n0O7sGjc017157@sheep.berlios.de>

Author: frohlich
Date: 2009-01-24 08:54:16 +0100 (Sat, 24 Jan 2009)
New Revision: 962

Modified:
   branches/OpenFDM-StateSeparation/src/test/Makefile.am
Log:
List structure also in the set of test programs.

M    Makefile.am


Modified: branches/OpenFDM-StateSeparation/src/test/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/Makefile.am	2009-01-24 07:35:22 UTC (rev 961)
+++ branches/OpenFDM-StateSeparation/src/test/Makefile.am	2009-01-24 07:54:16 UTC (rev 962)
@@ -4,7 +4,8 @@
 bin_PROGRAMS = foucault inertianav mechanic structure tiretestrig coordsys
 
 # define some unit tests
-check_PROGRAMS = constintegral harmonic limit linalg quattest simulationtime unitstest
+check_PROGRAMS = constintegral harmonic limit linalg quattest \
+                 simulationtime structure unitstest
 TESTS          = $(check_PROGRAMS)
 
 tiretestrig_SOURCES = tiretestrig.cpp



From frohlich at mail.berlios.de  Sat Jan 24 08:54:27 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 24 Jan 2009 08:54:27 +0100
Subject: [OpenFDM-svn] r963 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901240754.n0O7sRLI017214@sheep.berlios.de>

Author: frohlich
Date: 2009-01-24 08:54:27 +0100 (Sat, 24 Jan 2009)
New Revision: 963

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Remove unused function.

M    System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-24 07:54:16 UTC (rev 962)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-24 07:54:27 UTC (rev 963)
@@ -404,15 +404,6 @@
       return mPortDataVector[i];
     }
 
-    void setPortValue(const PortInfo& portInfo, PortValue* portValue)
-    {
-      mPortValueList.setPortValue(portInfo.getIndex(), portValue);
-    }
-    const PortValue* getPortValue(const PortInfo& portInfo)
-    {
-      return mPortValueList.getPortValue(portInfo);
-    }
-
     bool
     dependsOn(const InstanceData& instance, bool acceleration = false) const
     {



From frohlich at mail.berlios.de  Mon Jan 26 07:30:36 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 26 Jan 2009 07:30:36 +0100
Subject: [OpenFDM-svn] r964 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901260630.n0Q6Ua5G017916@sheep.berlios.de>

Author: frohlich
Date: 2009-01-26 07:30:34 +0100 (Mon, 26 Jan 2009)
New Revision: 964

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Improove sample time handling.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-24 07:54:27 UTC (rev 963)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-26 06:30:34 UTC (rev 964)
@@ -702,8 +702,9 @@
 
   virtual void apply(const GroupInterfaceNode& node)
   {
+    SampleTime sampleTime = mergeSampleTime(mSampleTime, node.getSampleTime());
     SharedPtr<NodeInstanceData> instanceData;
-    instanceData = new NodeInstanceData(node, getNodePath(), mSampleTime);
+    instanceData = new NodeInstanceData(node, getNodePath(), sampleTime);
     addInstanceData(instanceData);
     mNodeInstanceDataList.push_back(instanceData);
 
@@ -727,22 +728,25 @@
   {
     // Need to store the root nodes to build up the spanning tree for the
     // mechanical system here.
+    SampleTime sampleTime = mergeSampleTime(mSampleTime, node.getSampleTime());
     SharedPtr<JointInstanceData> instanceData;
-    instanceData = new JointInstanceData(node, getNodePath(), mSampleTime);
+    instanceData = new JointInstanceData(node, getNodePath(), sampleTime);
     addInstanceData(instanceData);
     mRootJointInstanceDataList.push_back(instanceData);
   }
   virtual void apply(const Interact& node)
   {
+    SampleTime sampleTime = mergeSampleTime(mSampleTime, node.getSampleTime());
     SharedPtr<InteractInstanceData> instanceData;
-    instanceData = new InteractInstanceData(node, getNodePath(), mSampleTime);
+    instanceData = new InteractInstanceData(node, getNodePath(), sampleTime);
     addInstanceData(instanceData);
     mInteractInstanceDataList.push_back(instanceData);
   }
   virtual void apply(const RigidBody& node)
   {
+    SampleTime sampleTime = mergeSampleTime(mSampleTime, node.getSampleTime());
     SharedPtr<NodeInstanceData> instanceData;
-    instanceData = new NodeInstanceData(node, getNodePath(), mSampleTime);
+    instanceData = new NodeInstanceData(node, getNodePath(), sampleTime);
     addInstanceData(instanceData);
     mNodeInstanceDataList.push_back(instanceData);
 
@@ -761,21 +765,27 @@
   }
   virtual void apply(const Joint& node)
   {
+    SampleTime sampleTime = mergeSampleTime(mSampleTime, node.getSampleTime());
     SharedPtr<JointInstanceData> instanceData;
-    instanceData = new JointInstanceData(node, getNodePath(), mSampleTime);
+    instanceData = new JointInstanceData(node, getNodePath(), sampleTime);
     addInstanceData(instanceData);
     mJointInstanceDataList.push_back(instanceData);
   }
   virtual void apply(const AbstractModel& node)
   {
+    SampleTime sampleTime = mergeSampleTime(mSampleTime, node.getSampleTime());
     SharedPtr<ModelInstanceData> instanceData;
-    instanceData = new ModelInstanceData(node, getNodePath(), mSampleTime);
+    instanceData = new ModelInstanceData(node, getNodePath(), sampleTime);
     addInstanceData(instanceData);
     mModelInstanceDataList.push_back(instanceData);
   }
 
   virtual void apply(const Group& group)
   {
+    // push the sample time
+    SampleTime parentSampleTime = mSampleTime;
+    mSampleTime = mergeSampleTime(parentSampleTime, group.getSampleTime());
+
     SharedPtr<NodeInstanceData> instanceData;
     instanceData = new NodeInstanceData(group, getNodePath(), mSampleTime);
     addInstanceData(instanceData);
@@ -798,32 +808,12 @@
 
     // Now walk the children
     for (unsigned i = 0; i < group.getNumChildren(); ++i) {
-      // push the sample time
-      SampleTime sampleTime = mSampleTime;
 
       // our next node to traverse
       SharedPtr<const Node> node = group.getChild(i);
 
-      // check what to do with sample times
-      mSampleTime = node->getSampleTime();
-      if (mSampleTime.isInherited())
-        mSampleTime = sampleTime;
-      else if (mSampleTime.isDiscrete()) {
-        if (!mBasicSampleTime.isDiscrete())
-          mBasicSampleTime = mSampleTime;
-        else {
-          Fraction a = mBasicSampleTime.getSampleTime();
-          Fraction b = mSampleTime.getSampleTime();
-          mBasicSampleTime = SampleTime(greatestCommonDivisor(a, b));
-          OpenFDMAssert(mBasicSampleTime.isDiscrete());
-        }
-      }
-
       // now traverse the child ...
       node->accept(*this);
-
-      // restore old group sample time
-      mSampleTime = sampleTime;
     }
 
     // Apply the group internal connections to the instances
@@ -899,6 +889,9 @@
     // Pop the per group port connect info
     parentGroupInterfacePortDataMap.swap(mGroupInterfacePortDataMap);
     parentInstanceDataVector.swap(mInstanceDataVector);
+
+    // restore old group sample time
+    mSampleTime = parentSampleTime;
   }
 
   ////////////////////////////////////////////////////////////////////////////
@@ -1002,6 +995,28 @@
   }
 
 protected:
+
+
+  SampleTime mergeSampleTime(const SampleTime& parentSampleTime,
+                             const SampleTime& nodeSampleTime)
+  {
+    if (nodeSampleTime.isInherited())
+      return parentSampleTime;
+
+    SampleTime sampleTime = nodeSampleTime;
+    if (sampleTime.isDiscrete()) {
+      if (!mBasicSampleTime.isDiscrete())
+        mBasicSampleTime = sampleTime;
+      else {
+        Fraction a = mBasicSampleTime.getSampleTime();
+        Fraction b = sampleTime.getSampleTime();
+        mBasicSampleTime = SampleTime(greatestCommonDivisor(a, b));
+        OpenFDMAssert(mBasicSampleTime.isDiscrete());
+      }
+    }
+    return sampleTime;
+  }
+
   // method to sort the leafs according to their dependency
   bool sortMechanicList()
   {



From frohlich at mail.berlios.de  Mon Jan 26 07:34:28 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 26 Jan 2009 07:34:28 +0100
Subject: [OpenFDM-svn] r965 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901260634.n0Q6YS6R019765@sheep.berlios.de>

Author: frohlich
Date: 2009-01-26 07:34:20 +0100 (Mon, 26 Jan 2009)
New Revision: 965

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Make use of the system's given sample time for the basic sample time computation.

M    System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-26 06:30:34 UTC (rev 964)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-26 06:34:20 UTC (rev 965)
@@ -252,7 +252,7 @@
   NodeInstanceCollector(const SampleTime& sampleTime,
                         Environment* environment) :
     mSampleTime(sampleTime),
-    mBasicSampleTime(SampleTime::getContinous()),
+    mBasicSampleTime(sampleTime),
     mEnvironment(environment)
   { }
 



From frohlich at mail.berlios.de  Mon Jan 26 07:35:12 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 26 Jan 2009 07:35:12 +0100
Subject: [OpenFDM-svn] r966 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200901260635.n0Q6ZCGU020536@sheep.berlios.de>

Author: frohlich
Date: 2009-01-26 07:35:10 +0100 (Mon, 26 Jan 2009)
New Revision: 966

Modified:
   branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
Log:
Use 0.002 s for the tires for now.

M    tiretestrig.cpp


Modified: branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2009-01-26 06:34:20 UTC (rev 965)
+++ branches/OpenFDM-StateSeparation/src/test/tiretestrig.cpp	2009-01-26 06:35:10 UTC (rev 966)
@@ -265,6 +265,7 @@
   SharedPtr<Node> wheel = createWheel();
   SharedPtr<Node> testrig = createTireTestrig(wheel);
   SharedPtr<System> system = new System("Tire Testrig", testrig);
+  system->setSampleTime(SampleTime(Fraction(1, 500)));
 
   // set the moving ground
   MovingGround* movingGround = new MovingGround(Vector3(velocity, 0, 0));



From frohlich at mail.berlios.de  Tue Jan 27 20:17:02 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 27 Jan 2009 20:17:02 +0100
Subject: [OpenFDM-svn] r968 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901271917.n0RJH2QR006603@sheep.berlios.de>

Author: frohlich
Date: 2009-01-27 20:17:01 +0100 (Tue, 27 Jan 2009)
New Revision: 968

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h
Log:
Add initial values.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2009-01-27 18:49:45 UTC (rev 967)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2009-01-27 19:17:01 UTC (rev 968)
@@ -15,14 +15,22 @@
 namespace OpenFDM {
 
 BEGIN_OPENFDM_OBJECT_DEF(MobileRootJoint, RootJoint)
+  DEF_OPENFDM_PROPERTY(Vector3, InitialPosition, Serialized)
+  DEF_OPENFDM_PROPERTY(Quaternion, InitialOrientation, Serialized)
+  DEF_OPENFDM_PROPERTY(Vector3, InitialLinearVelocity, Serialized)
+  DEF_OPENFDM_PROPERTY(Vector3, InitialAngularVelocity, Serialized)
   END_OPENFDM_OBJECT_DEF
 
 MobileRootJoint::MobileRootJoint(const std::string& name) :
   RootJoint(name),
-  mMechanicLink(newMechanicLink("link")),
+  mMechanicLink(new MechanicLink(this, "link")),
   mPositionStateInfo(new Vector3StateInfo),
   mOrientationStateInfo(new Vector4StateInfo),
-  mVelocityStateInfo(new Vector6StateInfo)
+  mVelocityStateInfo(new Vector6StateInfo),
+  mInitialPosition(Vector3::zeros()),
+  mInitialOrientation(Quaternion::unit()),
+  mInitialLinearVelocity(Vector3::zeros()),
+  mInitialAngularVelocity(Vector3::zeros())
 {
   addContinousStateInfo(mPositionStateInfo);
   addContinousStateInfo(mOrientationStateInfo);
@@ -33,20 +41,70 @@
 {
 }
 
+const Vector3&
+MobileRootJoint::getInitialPosition() const
+{
+  return mInitialPosition;
+}
+
 void
+MobileRootJoint::setInitialPosition(const Vector3& initialPosition)
+{
+  mInitialPosition = initialPosition;
+}
+
+const Quaternion&
+MobileRootJoint::getInitialOrientation() const
+{
+  return mInitialOrientation;
+}
+
+void
+MobileRootJoint::setInitialOrientation(const Quaternion& initialOrientation)
+{
+  mInitialOrientation = initialOrientation;
+}
+
+const Vector3&
+MobileRootJoint::getInitialLinearVelocity() const
+{
+  return mInitialLinearVelocity;
+}
+
+void
+MobileRootJoint::setInitialLinearVelocity(const Vector3& initialVelocity)
+{
+  mInitialLinearVelocity = initialVelocity;
+}
+
+const Vector3&
+MobileRootJoint::getInitialAngularVelocity() const
+{
+  return mInitialAngularVelocity;
+}
+
+void
+MobileRootJoint::setInitialAngularVelocity(const Vector3& initialVelocity)
+{
+  mInitialAngularVelocity = initialVelocity;
+}
+
+
+void
 MobileRootJoint::init(const Task&, DiscreteStateValueVector&,
                       ContinousStateValueVector& continousState,
                       const PortValueList& portValues) const
 {
-  continousState[*mPositionStateInfo] = Vector3::zeros();
-  continousState[*mOrientationStateInfo] = Quaternion::unit();
-  continousState[*mVelocityStateInfo] = Vector6::zeros();
+  continousState[*mPositionStateInfo] = mInitialPosition;
+  continousState[*mOrientationStateInfo] = mInitialOrientation;
+  Vector6 initialVelocity(mInitialAngularVelocity, mInitialLinearVelocity);
+  continousState[*mVelocityStateInfo] = initialVelocity;
 }
 
 void
 MobileRootJoint::initDesignPosition(PortValueList& portValues) const
 {
-  portValues[mMechanicLink].setDesignPosition(getPosition());
+  portValues[*mMechanicLink].setDesignPosition(getPosition());
 }
 
 void
@@ -60,10 +118,10 @@
   Quaternion orientation = continousState[*mOrientationStateInfo];
   Vector6 velocity = continousState[*mVelocityStateInfo];
 
-  portValues[mMechanicLink].setCoordinateSystem(CoordinateSystem(position,
-                                                                 orientation));
-  portValues[mMechanicLink].setPosAndVel(angularBaseVelocity,
-                                         position, orientation, velocity);
+  portValues[*mMechanicLink].setCoordinateSystem(CoordinateSystem(position,
+                                                                  orientation));
+  portValues[*mMechanicLink].setPosAndVel(angularBaseVelocity,
+                                          position, orientation, velocity);
 }
 
 void
@@ -81,11 +139,11 @@
 {
   Vector6 spatialAcceleration = environment.getAcceleration(task.getTime());
 
-  SpatialInertia inertia = portValues[mMechanicLink].getInertia();
-  Vector6 force = portValues[mMechanicLink].getForce();
+  SpatialInertia inertia = portValues[*mMechanicLink].getInertia();
+  Vector6 force = portValues[*mMechanicLink].getForce();
 
   spatialAcceleration -= solve(inertia, force);
-  portValues[mMechanicLink].getFrame().setSpAccel(spatialAcceleration);
+  portValues[*mMechanicLink].getFrame().setSpAccel(spatialAcceleration);
 }
 
 void
@@ -108,7 +166,7 @@
   Vector3 angVel = velocity.getAngular();
   Vector4 qderiv = LinAlg::derivative(q, angVel) + 1e1*(normalize(q) - q);
 
-  Vector6 velDeriv = portValues[mMechanicLink].getFrame().getRelVelDot();
+  Vector6 velDeriv = portValues[*mMechanicLink].getFrame().getRelVelDot();
 
   derivatives[*mPositionStateInfo] = pDot;
   derivatives[*mOrientationStateInfo] = qderiv;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h	2009-01-27 18:49:45 UTC (rev 967)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h	2009-01-27 19:17:01 UTC (rev 968)
@@ -22,6 +22,18 @@
   MobileRootJoint(const std::string& name);
   virtual ~MobileRootJoint();
 
+  const Vector3& getInitialPosition() const;
+  void setInitialPosition(const Vector3& initialPosition);
+
+  const Quaternion& getInitialOrientation() const;
+  void setInitialOrientation(const Quaternion& initialOrientation);
+
+  const Vector3& getInitialLinearVelocity() const;
+  void setInitialLinearVelocity(const Vector3& initialLinearVelocity);
+
+  const Vector3& getInitialAngularVelocity() const;
+  void setInitialAngularVelocity(const Vector3& initialAngularVelocity);
+
   virtual void init(const Task&, DiscreteStateValueVector&,
                     ContinousStateValueVector&,
                     const PortValueList&) const;
@@ -41,11 +53,16 @@
                           const PortValueList& portValues,
                           ContinousStateValueVector&) const;
 private:
-  MechanicLink_ mMechanicLink;
+  SharedPtr<MechanicLink> mMechanicLink;
 
   SharedPtr<Vector3StateInfo> mPositionStateInfo;
   SharedPtr<Vector4StateInfo> mOrientationStateInfo;
   SharedPtr<Vector6StateInfo> mVelocityStateInfo;
+
+  Vector3 mInitialPosition;
+  Quaternion mInitialOrientation;
+  Vector3 mInitialLinearVelocity;
+  Vector3 mInitialAngularVelocity;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h	2009-01-27 18:49:45 UTC (rev 967)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h	2009-01-27 19:17:01 UTC (rev 968)
@@ -44,6 +44,10 @@
   // FIXME Implement access control for the port value
   MechanicLinkValue& operator[](const MechanicLink_& port) const
   { return *port.getPortValue(mPortValueVector); }
+  const MechanicLinkValue& operator[](const MechanicLink& port) const
+  { return *getPortValue(port); }
+  MechanicLinkValue& operator[](const MechanicLink& port)
+  { return *getPortValue(port); }
 
   const NumericPortValue* getPortValue(const RealInputPort& port)
   {



From frohlich at mail.berlios.de  Tue Jan 27 20:18:25 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 27 Jan 2009 20:18:25 +0100
Subject: [OpenFDM-svn] r969 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901271918.n0RJIPfa006729@sheep.berlios.de>

Author: frohlich
Date: 2009-01-27 20:18:25 +0100 (Tue, 27 Jan 2009)
New Revision: 969

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h
Log:
Replace MechanicLink_ with MechanicLink.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp	2009-01-27 19:17:01 UTC (rev 968)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp	2009-01-27 19:18:25 UTC (rev 969)
@@ -23,7 +23,7 @@
 
 FixedRootJoint::FixedRootJoint(const std::string& name) :
   RootJoint(name),
-  mMechanicLink(newMechanicLink("link")),
+  mMechanicLink(new MechanicLink(this, "link")),
   mRootPosition(0, 0, 0),
   mRootOrientation(Quaternion::unit())
 {
@@ -67,7 +67,7 @@
 void
 FixedRootJoint::initDesignPosition(PortValueList& portValues) const
 {
-  portValues[mMechanicLink].setDesignPosition(getPosition());
+  portValues[*mMechanicLink].setDesignPosition(getPosition());
 }
 
 void
@@ -76,9 +76,9 @@
                          PortValueList& portValues) const
 {
   Vector3 angularBaseVelocity = environment.getAngularVelocity(task.getTime());
-  portValues[mMechanicLink].setCoordinateSystem(CoordinateSystem(mRootPosition,
-                                                                 mRootOrientation));
-  portValues[mMechanicLink].setPosAndVel(angularBaseVelocity, mRootPosition,
+  portValues[*mMechanicLink].setCoordinateSystem(CoordinateSystem(mRootPosition,
+                                         mRootOrientation));
+  portValues[*mMechanicLink].setPosAndVel(angularBaseVelocity, mRootPosition,
                                          mRootOrientation, Vector6::zeros());
 }
 
@@ -96,7 +96,7 @@
                              PortValueList& portValues) const
 {
   Vector6 spatialAcceleration = environment.getAcceleration(task.getTime());
-  portValues[mMechanicLink].getFrame().setSpAccel(spatialAcceleration);
+  portValues[*mMechanicLink].getFrame().setSpAccel(spatialAcceleration);
 }
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h	2009-01-27 19:17:01 UTC (rev 968)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h	2009-01-27 19:18:25 UTC (rev 969)
@@ -44,7 +44,7 @@
                             const ContinousStateValueVector&,
                             PortValueList& portValues) const;
 private:
-  MechanicLink_ mMechanicLink;
+  SharedPtr<MechanicLink> mMechanicLink;
 
   Vector3 mRootPosition;
   Quaternion mRootOrientation;



From frohlich at mail.berlios.de  Tue Jan 27 20:32:42 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 27 Jan 2009 20:32:42 +0100
Subject: [OpenFDM-svn] r970 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901271932.n0RJWg8d007768@sheep.berlios.de>

Author: frohlich
Date: 2009-01-27 20:32:41 +0100 (Tue, 27 Jan 2009)
New Revision: 970

Added:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.cpp
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/GroupMechanicLink.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Port.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Port.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h
Log:
Move MechanicLink into its own implementation.

M    src/OpenFDM/GroupMechanicLink.h
M    src/OpenFDM/Makefile.am
M    src/OpenFDM/MechanicLink.h
M    src/OpenFDM/Port.h
M    src/OpenFDM/PortValueList.h
M    src/OpenFDM/Node.cpp
M    src/OpenFDM/GroupInterfaceNode.cpp
M    src/OpenFDM/Port.cpp
AM   src/OpenFDM/MechanicLink.cpp
M    src/OpenFDM/MechanicNode.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.cpp	2009-01-27 19:18:25 UTC (rev 969)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/GroupInterfaceNode.cpp	2009-01-27 19:32:41 UTC (rev 970)
@@ -5,6 +5,8 @@
 #include "GroupInterfaceNode.h"
 
 #include "ConstNodeVisitor.h"
+#include "LogStream.h"
+#include "Model.h"
 #include "NodeVisitor.h"
 
 namespace OpenFDM {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/GroupMechanicLink.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/GroupMechanicLink.h	2009-01-27 19:18:25 UTC (rev 969)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/GroupMechanicLink.h	2009-01-27 19:32:41 UTC (rev 970)
@@ -7,6 +7,7 @@
 
 #include <string>
 #include "GroupInterfaceNode.h"
+#include "MechanicLink.h"
 #include "Port.h"
 #include "SharedPtr.h"
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2009-01-27 19:18:25 UTC (rev 969)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2009-01-27 19:32:41 UTC (rev 970)
@@ -163,6 +163,7 @@
   LibraryNode.cpp \
   Logger.cpp \
   MechanicContext.cpp \
+  MechanicLink.cpp \
   MechanicLinkValue.cpp \
   MechanicNode.cpp \
   MidpointRule.cpp \

Added: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.cpp	2009-01-27 19:18:25 UTC (rev 969)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.cpp	2009-01-27 19:32:41 UTC (rev 970)
@@ -0,0 +1,39 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2007-2009 Mathias Froehlich 
+ *
+ */
+
+#include "MechanicLink.h"
+
+#include "ConstNodeVisitor.h"
+#include "NodeVisitor.h"
+
+namespace OpenFDM {
+
+MechanicLink::MechanicLink(Node* node, const std::string& name) :
+  Port(node, name)
+{
+}
+
+MechanicLink::~MechanicLink()
+{
+}
+
+void
+MechanicLink::accept(NodeVisitor& visitor) const
+{
+  visitor.apply(*this);
+}
+
+void
+MechanicLink::accept(ConstNodeVisitor& visitor) const
+{
+  visitor.apply(*this);
+}
+
+const MechanicLink*
+MechanicLink::toMechanicLink() const
+{
+  return this;
+}
+
+} // namespace OpenFDM


Property changes on: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.cpp
___________________________________________________________________
Name: svn:eol-style
   + native

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h	2009-01-27 19:18:25 UTC (rev 969)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h	2009-01-27 19:32:41 UTC (rev 970)
@@ -11,26 +11,28 @@
 
 namespace OpenFDM {
 
-class MechanicLink_ {
+class MechanicLink : public Port {
 public:
-  MechanicLink_(Node* node, const std::string& name) :
-    mPort(new MechanicLink(node, name))
-  {}
-  MechanicLinkValue* getPortValue(const PortValueVector& portValueVector) const
-  {
-    PortValue* portValue = mPort->getPortValue(portValueVector);
-    OpenFDMAssert(portValue);
-    OpenFDMAssert(portValue->toMechanicLinkValue());
-    return static_cast<MechanicLinkValue*>(portValue);
-  }
-  bool empty() const
-  { return !mPort; }
-  void clear()
-  { if (!mPort) return; mPort->clear(); mPort = 0; }
-  unsigned getPortIndex() const
-  { OpenFDMAssert(mPort); return mPort->getIndex(); }
-private:
-  SharedPtr<MechanicLink> mPort;
+  MechanicLink(Node* node, const std::string& name);
+  virtual ~MechanicLink();
+
+  virtual void accept(NodeVisitor& visitor) const;
+  virtual void accept(ConstNodeVisitor& visitor) const;
+
+  virtual const MechanicLink* toMechanicLink() const;
+
+  virtual unsigned getMaxConnects() const
+  { return 1; }
+
+  virtual bool canConnect(const Port& portInfo) const
+  { return portInfo.toMechanicLink(); }
+
+  virtual bool acceptPortValue(PortValue* portValue) const
+  { return portValue->toMechanicLinkValue(); }
+
+protected:
+  virtual MechanicLinkValue* newValueImplementation() const
+  { return new MechanicLinkValue; }
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h	2009-01-27 19:18:25 UTC (rev 969)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h	2009-01-27 19:32:41 UTC (rev 970)
@@ -49,10 +49,6 @@
 
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
-
-protected:
-  MechanicLink_ newMechanicLink(const std::string& name)
-  { return MechanicLink_(this, name); }
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2009-01-27 19:18:25 UTC (rev 969)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2009-01-27 19:32:41 UTC (rev 970)
@@ -6,6 +6,7 @@
 
 #include "ConstNodeVisitor.h"
 #include "Group.h"
+#include "LogStream.h"
 #include "NodeVisitor.h"
 
 namespace OpenFDM {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Port.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Port.cpp	2009-01-27 19:18:25 UTC (rev 969)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Port.cpp	2009-01-27 19:32:41 UTC (rev 970)
@@ -65,16 +65,4 @@
   visitor.apply(*this);
 }
 
-void
-MechanicLink::accept(NodeVisitor& visitor) const
-{
-  visitor.apply(*this);
-}
-
-void
-MechanicLink::accept(ConstNodeVisitor& visitor) const
-{
-  visitor.apply(*this);
-}
-
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Port.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Port.h	2009-01-27 19:18:25 UTC (rev 969)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Port.h	2009-01-27 19:32:41 UTC (rev 970)
@@ -11,7 +11,6 @@
 #include "WeakPtr.h"
 #include "WeakReferenced.h"
 
-#include "MechanicLinkValue.h"
 #include "NumericPortValue.h"
 
 namespace OpenFDM {
@@ -189,35 +188,6 @@
   bool mAccelerationOutput;
 };
 
-class MechanicLink : public Port {
-public:
-  // FIXME: mechanic links are special. Just allow them in MechanicNodes ...
-  MechanicLink(/*Mechanic*/Node* node, const std::string& name) :
-    Port(node, name)
-  { }
-  virtual ~MechanicLink()
-  { }
-
-  virtual void accept(NodeVisitor& visitor) const;
-  virtual void accept(ConstNodeVisitor& visitor) const;
-
-  virtual const MechanicLink* toMechanicLink() const
-  { return this; }
-
-  virtual unsigned getMaxConnects() const
-  { return 1; }
-
-  virtual bool canConnect(const Port& portInfo) const
-  { return portInfo.toMechanicLink(); }
-
-  virtual bool acceptPortValue(PortValue* portValue) const
-  { return portValue->toMechanicLinkValue(); }
-
-protected:
-  virtual MechanicLinkValue* newValueImplementation() const
-  { return new MechanicLinkValue; }
-};
-
 } // namespace OpenFDM
 
 #endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h	2009-01-27 19:18:25 UTC (rev 969)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h	2009-01-27 19:32:41 UTC (rev 970)
@@ -42,8 +42,6 @@
 
   // Accessors for matrix valued ports
   // FIXME Implement access control for the port value
-  MechanicLinkValue& operator[](const MechanicLink_& port) const
-  { return *port.getPortValue(mPortValueVector); }
   const MechanicLinkValue& operator[](const MechanicLink& port) const
   { return *getPortValue(port); }
   MechanicLinkValue& operator[](const MechanicLink& port)
@@ -73,12 +71,6 @@
       return 0;
     return port.getPortValue(mPortValueVector);
   }
-  MechanicLinkValue* getPortValue(const MechanicLink_& port)
-  {
-    if (port.empty())
-      return 0;
-    return port.getPortValue(mPortValueVector);
-  }
 
   // FIXME, avoid this method here. With this method the output stage of a model
   // can change the port values, this should not be available in a model.



From frohlich at mail.berlios.de  Wed Jan 28 18:24:44 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 28 Jan 2009 18:24:44 +0100
Subject: [OpenFDM-svn] r971 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901281724.n0SHOiZp004273@sheep.berlios.de>

Author: frohlich
Date: 2009-01-28 18:24:44 +0100 (Wed, 28 Jan 2009)
New Revision: 971

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Rename portInfo->port also for variables.

M    System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-27 19:32:41 UTC (rev 970)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-28 17:24:44 UTC (rev 971)
@@ -277,8 +277,8 @@
 
   struct PortData : public WeakReferenced {
   public:
-    PortData(const Port* portInfo, bool valueCreator = true) :
-      mPort(portInfo),
+    PortData(const Port* port, bool valueCreator = true) :
+      mPort(port),
       mNumConnectedPorts(0),
       mPortValueCreator(valueCreator)
     {
@@ -828,22 +828,22 @@
         continue;
       }
 
-      SharedPtr<const Port> portInfo0 = connect->getPort0();
-      if (!portInfo0) {
+      SharedPtr<const Port> port0 = connect->getPort0();
+      if (!port0) {
         Log(Schedule, Warning) << "Incomplete connect #" << i << " for Group \""
                                << Node::toNodePathName(getNodePath())
                                << "\"" << std::endl;
         continue;
       }
-      SharedPtr<const Port> portInfo1 = connect->getPort1();
-      if (!portInfo1) {
+      SharedPtr<const Port> port1 = connect->getPort1();
+      if (!port1) {
         Log(Schedule, Warning) << "Incomplete connect #" << i << " for Group \""
                                << Node::toNodePathName(getNodePath())
                                << "\"" << std::endl;
         continue;
       }
 
-      SharedPtr<const Node> node0 = portInfo0->getNode();
+      SharedPtr<const Node> node0 = port0->getNode();
       if (!node0) {
         Log(Schedule, Warning) << "Dangling port #0 connected in connect #" << i
                                << " for Group \""
@@ -851,7 +851,7 @@
                                << "\"" << std::endl;
         continue;
       }
-      SharedPtr<const Node> node1 = portInfo1->getNode();
+      SharedPtr<const Node> node1 = port1->getNode();
       if (!node1) {
         Log(Schedule, Warning) << "Dangling port #1 connected in connect #" << i
                                << " for Group \""
@@ -874,10 +874,10 @@
         continue;
       }
 
-      unsigned portInfoIndex0 = portInfo0->getIndex();
-      unsigned portInfoIndex1 = portInfo1->getIndex();
-      if (!mInstanceDataVector[nodeIndex1]->getPortData(portInfoIndex1)->
-          connect(mInstanceDataVector[nodeIndex0]->getPortData(portInfoIndex0)))
+      unsigned portIndex0 = port0->getIndex();
+      unsigned portIndex1 = port1->getIndex();
+      if (!mInstanceDataVector[nodeIndex1]->getPortData(portIndex1)->
+          connect(mInstanceDataVector[nodeIndex0]->getPortData(portIndex0)))
         Log(Schedule, Error) << "Internal Error: Cannot connect ports that"
           " appeared to be compatible before." << std::endl;
     }



From frohlich at mail.berlios.de  Thu Jan 29 19:34:02 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 29 Jan 2009 19:34:02 +0100
Subject: [OpenFDM-svn] r972 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901291834.n0TIY2IK030791@sheep.berlios.de>

Author: frohlich
Date: 2009-01-29 19:34:02 +0100 (Thu, 29 Jan 2009)
New Revision: 972

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
PortInfo renames.

M    System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-28 17:24:44 UTC (rev 971)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2009-01-29 18:34:02 UTC (rev 972)
@@ -611,18 +611,18 @@
     {
       unsigned numPorts = getNode()->getNumPorts();
       for (unsigned i = 0; i < numPorts; ++i) {
-        const MechanicLink* linkInfo;
-        linkInfo = getNode()->getPort(i)->toMechanicLink();
-        if (!linkInfo)
+        const MechanicLink* mechanicLink;
+        mechanicLink = getNode()->getPort(i)->toMechanicLink();
+        if (!mechanicLink)
           continue;
         OpenFDMAssert(i < mPortDataVector.size());
 
         const Node* otherNode = instance.getNode();
         unsigned otherNumPorts = otherNode->getNumPorts();
         for (unsigned j = 0; j < otherNumPorts; ++j) {
-          const MechanicLink* otherLink;
-          otherLink = otherNode->getPort(j)->toMechanicLink();
-          if (!otherLink)
+          const MechanicLink* otherMechanicLink;
+          otherMechanicLink = otherNode->getPort(j)->toMechanicLink();
+          if (!otherMechanicLink)
             continue;
 
           OpenFDMAssert(j < instance.mPortDataVector.size());
@@ -630,8 +630,8 @@
           if (!mPortDataVector[i]->isConnected(*instance.mPortDataVector[j]))
             continue;
 
-          mChildLink = linkInfo;
-          instance.mParentLink = otherLink;
+          mChildLink = mechanicLink;
+          instance.mParentLink = otherMechanicLink;
           return true;
         }
       }
@@ -643,13 +643,13 @@
     {
       unsigned numPorts = getNode()->getNumPorts();
       for (unsigned i = 0; i < numPorts; ++i) {
-        const MechanicLink* linkInfo;
-        linkInfo = getNode()->getPort(i)->toMechanicLink();
-        if (!linkInfo)
+        const MechanicLink* mechanicLink;
+        mechanicLink = getNode()->getPort(i)->toMechanicLink();
+        if (!mechanicLink)
           continue;
-        if (linkInfo == mParentLink)
+        if (mechanicLink == mParentLink)
           continue;
-        mChildLink = linkInfo;
+        mChildLink = mechanicLink;
       }
       return true;
     }



From frohlich at mail.berlios.de  Thu Jan 29 19:53:18 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 29 Jan 2009 19:53:18 +0100
Subject: [OpenFDM-svn] r973 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901291853.n0TIrIDG022703@sheep.berlios.de>

Author: frohlich
Date: 2009-01-29 19:53:17 +0100 (Thu, 29 Jan 2009)
New Revision: 973

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
Log:
Interface and parent node consistencies.

M    OpenFDM/Group.cpp
M    OpenFDM/Node.h
M    OpenFDM/Node.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2009-01-29 18:34:02 UTC (rev 972)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2009-01-29 18:53:17 UTC (rev 973)
@@ -18,6 +18,9 @@
 
 Group::~Group()
 {
+  ChildList::const_iterator i;
+  for (i = mChildList.begin(); i != mChildList.end(); ++i)
+    (*i)->removeParent(this);
 }
 
 void
@@ -64,6 +67,7 @@
   i = std::find(mChildList.begin(), mChildList.end(), node);
   if (i == mChildList.end())
     return;
+  (*i)->removeParent(this);
   mChildList.erase(i);
 }
 
@@ -74,6 +78,7 @@
     return;
   ChildList::iterator i = mChildList.begin();
   std::advance(i, index);
+  (*i)->removeParent(this);
   mChildList.erase(i);
 }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2009-01-29 18:34:02 UTC (rev 972)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2009-01-29 18:53:17 UTC (rev 973)
@@ -93,12 +93,14 @@
 }
 
 bool
-Node::isChildOf(const Group* group) const
+Node::isChildOf(const Node* node) const
 {
+  if (!node)
+    return false;
   ParentList::const_iterator i;
   for (i = mParentList.begin(); i != mParentList.end(); ++i) {
-    SharedPtr<const Node> node = i->lock();
-    if (node == group)
+    SharedPtr<const Node> parentNode = i->lock();
+    if (node == parentNode)
       return true;
   }
   return false;
@@ -130,22 +132,22 @@
 }
 
 unsigned
-Node::getPortIndex(const Port* portInfo) const
+Node::getPortIndex(const Port* port) const
 {
   PortList::const_iterator i;
   for (i = mPortList.begin(); i != mPortList.end(); ++i) {
-    if (portInfo == i->get())
+    if (port == i->get())
       return std::distance(mPortList.begin(), i);
   }
   return ~0u;
 }
 
 bool
-Node::checkPort(const Port* portInfo) const
+Node::checkPort(const Port* port) const
 {
   PortList::const_iterator i;
   for (i = mPortList.begin(); i != mPortList.end(); ++i) {
-    if (portInfo == i->get())
+    if (port == i->get())
       return true;
   }
   return false;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2009-01-29 18:34:02 UTC (rev 972)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2009-01-29 18:53:17 UTC (rev 973)
@@ -40,13 +40,13 @@
   { return mParentList.size(); }
   WeakPtr<const Node> getParent(unsigned i) const;
   WeakPtr<Node> getParent(unsigned i);
-  bool isChildOf(const Group* group) const;
+  bool isChildOf(const Node* node) const;
 
   unsigned getNumPorts() const;
   SharedPtr<const Port> getPort(unsigned index) const;
   SharedPtr<const Port> getPort(const std::string& name) const;
-  unsigned getPortIndex(const Port* portInfo) const;
-  bool checkPort(const Port* portInfo) const;
+  unsigned getPortIndex(const Port* port) const;
+  bool checkPort(const Port* port) const;
 
   const SampleTime& getSampleTime() const
   { return mSampleTime; }



From frohlich at mail.berlios.de  Sat Jan 31 13:22:33 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 31 Jan 2009 13:22:33 +0100
Subject: [OpenFDM-svn] r974 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901311222.n0VCMXpQ016461@sheep.berlios.de>

Author: frohlich
Date: 2009-01-31 13:22:33 +0100 (Sat, 31 Jan 2009)
New Revision: 974

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalInteract.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/InternalInteract.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
Log:
Remove some redundant includes.

M    OpenFDM/InternalInteract.h
M    OpenFDM/RootJoint.cpp
M    OpenFDM/InternalInteract.cpp
M    OpenFDM/ExternalInteract.h
M    OpenFDM/ExternalInteract.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.cpp	2009-01-29 18:53:17 UTC (rev 973)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.cpp	2009-01-31 12:22:33 UTC (rev 974)
@@ -4,7 +4,6 @@
 
 #include "ExternalInteract.h"
 
-#include "MechanicLinkValue.h"
 #include "NumericPortValue.h"
 #include "PortValueList.h"
 #include "Task.h"

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.h	2009-01-29 18:53:17 UTC (rev 973)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ExternalInteract.h	2009-01-31 12:22:33 UTC (rev 974)
@@ -8,7 +8,6 @@
 #include "SingleLinkInteract.h"
 #include "MatrixInputPort.h"
 #include "MatrixOutputPort.h"
-#include "MechanicLink.h"
 #include "RealOutputPort.h"
 #include "Vector.h"
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalInteract.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalInteract.cpp	2009-01-29 18:53:17 UTC (rev 973)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalInteract.cpp	2009-01-31 12:22:33 UTC (rev 974)
@@ -4,7 +4,6 @@
 
 #include "InternalInteract.h"
 
-#include "MechanicLinkValue.h"
 #include "NumericPortValue.h"
 #include "PortValueList.h"
 #include "Task.h"

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/InternalInteract.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/InternalInteract.h	2009-01-29 18:53:17 UTC (rev 973)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/InternalInteract.h	2009-01-31 12:22:33 UTC (rev 974)
@@ -6,7 +6,6 @@
 #define OpenFDM_InternalInteract_H
 
 #include "DoubleLinkInteract.h"
-#include "MechanicLink.h"
 #include "RealInputPort.h"
 #include "RealOutputPort.h"
 #include "Vector.h"

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp	2009-01-29 18:53:17 UTC (rev 973)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp	2009-01-31 12:22:33 UTC (rev 974)
@@ -6,7 +6,6 @@
 
 #include "ConstNodeVisitor.h"
 #include "JointContext.h"
-#include "MechanicLinkValue.h"
 #include "NodeVisitor.h"
 
 namespace OpenFDM {



From frohlich at mail.berlios.de  Sat Jan 31 15:34:38 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 31 Jan 2009 15:34:38 +0100
Subject: [OpenFDM-svn] r975 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200901311434.n0VEYcco032456@sheep.berlios.de>

Author: frohlich
Date: 2009-01-31 15:34:37 +0100 (Sat, 31 Jan 2009)
New Revision: 975

Modified:
   branches/OpenFDM-StateSeparation/src/test/inertianav.cpp
Log:
Disable code that references Frames.


Modified: branches/OpenFDM-StateSeparation/src/test/inertianav.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/inertianav.cpp	2009-01-31 12:22:33 UTC (rev 974)
+++ branches/OpenFDM-StateSeparation/src/test/inertianav.cpp	2009-01-31 14:34:37 UTC (rev 975)
@@ -38,9 +38,10 @@
     {
       Vector3 p1(0, 1, 0);
       Vector3 p2(0, -1, 0);
+
+#if 0      
+      const Frame frame = getLink().getMechanicLinkValue().getFrame();
       
-      const Frame& frame = getLink().getMechanicLinkValue().getFrame();
-      
       CoordinateSystem csys0 = getLink().getCoordinateSystem();
       
       CoordinateSystem csys1 = csys0.getRelative(p1);
@@ -126,6 +127,7 @@
       std::cout << trans(a) << " " << trans(frame.getSpAccel()) << std::endl;
       
       mPortValueList[mAccelerationTracking->mAccelerationPort] = a;
+#endif
     }
     
   private:



From frohlich at mail.berlios.de  Sat Jan 31 15:39:17 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 31 Jan 2009 15:39:17 +0100
Subject: [OpenFDM-svn] r976 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901311439.n0VEdHfh000015@sheep.berlios.de>

Author: frohlich
Date: 2009-01-31 15:39:16 +0100 (Sat, 31 Jan 2009)
New Revision: 976

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
Log:
Remove direct references to Frame

M    OpenFDM/MobileRootJoint.cpp
M    OpenFDM/MechanicLinkValue.h
M    OpenFDM/FixedRootJoint.cpp
M    OpenFDM/HDF5SystemOutput.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp	2009-01-31 14:34:37 UTC (rev 975)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp	2009-01-31 14:39:16 UTC (rev 976)
@@ -96,7 +96,7 @@
                              PortValueList& portValues) const
 {
   Vector6 spatialAcceleration = environment.getAcceleration(task.getTime());
-  portValues[*mMechanicLink].getFrame().setSpAccel(spatialAcceleration);
+  portValues[*mMechanicLink].setSpAccel(spatialAcceleration);
 }
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2009-01-31 14:34:37 UTC (rev 975)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2009-01-31 14:39:16 UTC (rev 976)
@@ -360,9 +360,9 @@
       _position.append(cs.getPosition());
       _orientation.append(cs.getOrientation());
       _eulerAngle.append(cs.getOrientation().getEuler());
-      _velocity.append(mMechanicLinkValue->getFrame().getSpVel());
-      _refVelocity.append(mMechanicLinkValue->getFrame().getRefVel());
-      _acceleration.append(mMechanicLinkValue->getFrame().getSpAccel());
+      _velocity.append(mMechanicLinkValue->getSpVel());
+      _refVelocity.append(mMechanicLinkValue->getReferenceVelocity());
+      _acceleration.append(mMechanicLinkValue->getSpAccel());
       _force.append(mMechanicLinkValue->getForce());
       _inertia.append(mMechanicLinkValue->getInertia());
     }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2009-01-31 14:34:37 UTC (rev 975)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2009-01-31 14:39:16 UTC (rev 976)
@@ -20,11 +20,6 @@
   virtual MechanicLinkValue* toMechanicLinkValue() { return this; }
   virtual const MechanicLinkValue* toMechanicLinkValue() const { return this; }
 
-  const Frame& getFrame() const
-  { return mFrame; }
-  Frame& getFrame()
-  { return mFrame; }
-
   /// Currently duplicate information from the Frame.
   /// This is an attempt to seperate the coordinate system stuff away from
   /// the reference frame handling.
@@ -92,10 +87,10 @@
   {
     mArticulatedInertia = SpatialInertia::zeros();
     mArticulatedForce = Vector6::zeros();
-    mFrame.setPosAndVel(linkValue.getFrame(), position, orientation, velocity);
+    mFrame.setPosAndVel(linkValue.mFrame, position, orientation, velocity);
   }
   void setAccel(const MechanicLinkValue& linkValue, const Vector6& accel)
-  { mFrame.setAccel(linkValue.getFrame(), accel); }
+  { mFrame.setAccel(linkValue.mFrame, accel); }
   void setPosAndVel(const Vector3& parentAngularVel, const Vector3& position,
                     const Quaternion& orientation, const Vector6& velocity)
   {
@@ -103,7 +98,12 @@
     mArticulatedForce = Vector6::zeros();
     mFrame.setPosAndVel(parentAngularVel, position, orientation, velocity);
   }
+  void setSpAccel(const Vector6& accel)
+  { mFrame.setSpAccel(accel); }
 
+  Vector6 getRelVelDot() const
+  { return mFrame.getRelVelDot(); }
+
   const Vector3& getDesignPosition() const
   { return mDesignPosition; }
   void setDesignPosition(const Vector3& designPosition)

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2009-01-31 14:34:37 UTC (rev 975)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2009-01-31 14:39:16 UTC (rev 976)
@@ -143,7 +143,7 @@
   Vector6 force = portValues[*mMechanicLink].getForce();
 
   spatialAcceleration -= solve(inertia, force);
-  portValues[*mMechanicLink].getFrame().setSpAccel(spatialAcceleration);
+  portValues[*mMechanicLink].setSpAccel(spatialAcceleration);
 }
 
 void
@@ -166,7 +166,7 @@
   Vector3 angVel = velocity.getAngular();
   Vector4 qderiv = LinAlg::derivative(q, angVel) + 1e1*(normalize(q) - q);
 
-  Vector6 velDeriv = portValues[*mMechanicLink].getFrame().getRelVelDot();
+  Vector6 velDeriv = portValues[*mMechanicLink].getRelVelDot();
 
   derivatives[*mPositionStateInfo] = pDot;
   derivatives[*mOrientationStateInfo] = qderiv;



From frohlich at mail.berlios.de  Sat Jan 31 18:00:03 2009
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 31 Jan 2009 18:00:03 +0100
Subject: [OpenFDM-svn] r977 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200901311700.n0VH03kx014527@sheep.berlios.de>

Author: frohlich
Date: 2009-01-31 18:00:02 +0100 (Sat, 31 Jan 2009)
New Revision: 977

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h
Log:
Implement the root joints with their own contexts.

M    OpenFDM/MobileRootJoint.cpp
M    OpenFDM/FixedRootJoint.h
M    OpenFDM/RootJoint.cpp
M    OpenFDM/MobileRootJoint.h
M    OpenFDM/RootJoint.h
M    OpenFDM/FixedRootJoint.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp	2009-01-31 14:39:16 UTC (rev 976)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.cpp	2009-01-31 17:00:02 UTC (rev 977)
@@ -5,6 +5,7 @@
 #include "FixedRootJoint.h"
 
 #include "Assert.h"
+#include "JointContext.h"
 #include "LogStream.h"
 #include "Object.h"
 #include "Vector.h"
@@ -16,6 +17,44 @@
 
 namespace OpenFDM {
 
+class FixedRootJoint::Context : public JointContext {
+public:
+  Context(const FixedRootJoint* rootJoint, const Environment* environment,
+          MechanicLinkValue* parentLinkValue, MechanicLinkValue* childLinkValue,
+          PortValueList& portValueList) :
+    JointContext(environment, parentLinkValue, childLinkValue, portValueList),
+    mFixedRootJoint(rootJoint)
+  {}
+  virtual ~Context() {}
+  
+  virtual const FixedRootJoint& getNode() const
+  { return *mFixedRootJoint; }
+  
+  virtual void initDesignPosition()
+  {
+    mChildLink.setDesignPosition(mFixedRootJoint->getPosition());
+  }
+
+  virtual void velocities(const Task& task)
+  {
+    Vector3 angularVel = getEnvironment().getAngularVelocity(task.getTime());
+    mChildLink.getMechanicLinkValue().
+      setCoordinateSystem(CoordinateSystem(mFixedRootJoint->mRootPosition,
+                                           mFixedRootJoint->mRootOrientation));
+    mChildLink.getMechanicLinkValue().
+      setPosAndVel(angularVel, mFixedRootJoint->mRootPosition,
+                   mFixedRootJoint->mRootOrientation, Vector6::zeros());
+  }
+  virtual void accelerations(const Task& task)
+  {
+    mChildLink.getMechanicLinkValue().
+      setSpAccel(getEnvironment().getAcceleration(task.getTime()));
+  }
+  
+private:
+  SharedPtr<const FixedRootJoint> mFixedRootJoint;
+};
+
 BEGIN_OPENFDM_OBJECT_DEF(FixedRootJoint, RootJoint)
   DEF_OPENFDM_PROPERTY(Vector3, RootPosition, Serialized)
   DEF_OPENFDM_PROPERTY(Quaternion, RootOrientation, Serialized)
@@ -33,6 +72,22 @@
 {
 }
 
+JointContext*
+FixedRootJoint::newJointContext(const Environment* environment,
+                                MechanicLinkValue* parentLinkValue,
+                                MechanicLinkValue* childLinkValue,
+                                PortValueList& portValueList) const
+{
+  SharedPtr<Context> context = new Context(this, environment, parentLinkValue,
+                                           childLinkValue, portValueList);
+  if (!context->allocStates()) {
+    Log(Model, Warning) << "Could not alloc for model \""
+                        << getName() << "\"" << endl;
+    return false;
+  }
+  return context.release();
+}
+
 const Vector3&
 FixedRootJoint::getRootPosition() const
 {
@@ -57,46 +112,4 @@
   mRootOrientation = rootOrientation;
 }
 
-void
-FixedRootJoint::init(const Task&, DiscreteStateValueVector&,
-                      ContinousStateValueVector& continousState,
-                      const PortValueList& portValues) const
-{
-}
-
-void
-FixedRootJoint::initDesignPosition(PortValueList& portValues) const
-{
-  portValues[*mMechanicLink].setDesignPosition(getPosition());
-}
-
-void
-FixedRootJoint::velocity(const Task& task, const Environment& environment,
-                         const ContinousStateValueVector& continousState,
-                         PortValueList& portValues) const
-{
-  Vector3 angularBaseVelocity = environment.getAngularVelocity(task.getTime());
-  portValues[*mMechanicLink].setCoordinateSystem(CoordinateSystem(mRootPosition,
-                                         mRootOrientation));
-  portValues[*mMechanicLink].setPosAndVel(angularBaseVelocity, mRootPosition,
-                                         mRootOrientation, Vector6::zeros());
-}
-
-void
-FixedRootJoint::articulation(const Task&, const Environment& environment,
-                             const ContinousStateValueVector&,
-                             PortValueList&) const
-{
-  /// In this case a noop.
-}
-
-void
-FixedRootJoint::acceleration(const Task& task, const Environment& environment,
-                             const ContinousStateValueVector&,
-                             PortValueList& portValues) const
-{
-  Vector6 spatialAcceleration = environment.getAcceleration(task.getTime());
-  portValues[*mMechanicLink].setSpAccel(spatialAcceleration);
-}
-
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h	2009-01-31 14:39:16 UTC (rev 976)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/FixedRootJoint.h	2009-01-31 17:00:02 UTC (rev 977)
@@ -22,6 +22,12 @@
   FixedRootJoint(const std::string& name);
   virtual ~FixedRootJoint();
 
+  virtual JointContext*
+  newJointContext(const Environment* environment,
+                  MechanicLinkValue* parentLink,
+                  MechanicLinkValue* childLink,
+                  PortValueList& portValueList) const;
+
   /// The position is global coordinates
   const Vector3& getRootPosition() const;
   void setRootPosition(const Vector3& rootRosition);
@@ -30,20 +36,9 @@
   const Quaternion& getRootOrientation() const;
   void setRootOrientation(const Quaternion& rootOrientation);
 
-  virtual void init(const Task&, DiscreteStateValueVector&,
-                    ContinousStateValueVector&,
-                    const PortValueList&) const;
-  virtual void initDesignPosition(PortValueList&) const;
-  virtual void velocity(const Task&, const Environment& environment,
-                        const ContinousStateValueVector& states,
-                        PortValueList& portValues) const;
-  virtual void articulation(const Task&, const Environment& environment,
-                            const ContinousStateValueVector&,
-                            PortValueList& portValues) const;
-  virtual void acceleration(const Task&, const Environment& environment,
-                            const ContinousStateValueVector&,
-                            PortValueList& portValues) const;
 private:
+  class Context;
+
   SharedPtr<MechanicLink> mMechanicLink;
 
   Vector3 mRootPosition;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2009-01-31 14:39:16 UTC (rev 976)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2009-01-31 17:00:02 UTC (rev 977)
@@ -5,6 +5,7 @@
 #include "MobileRootJoint.h"
 
 #include "Assert.h"
+#include "JointContext.h"
 #include "LogStream.h"
 #include "Vector.h"
 #include "Matrix.h"
@@ -14,6 +15,52 @@
 
 namespace OpenFDM {
 
+class MobileRootJoint::Context : public JointContext {
+public:
+  Context(const MobileRootJoint* rootJoint, const Environment* environment,
+          MechanicLinkValue* parentLinkValue, MechanicLinkValue* childLinkValue,
+          PortValueList& portValueList) :
+    JointContext(environment, parentLinkValue, childLinkValue, portValueList),
+    mMobileRootJoint(rootJoint)
+  {}
+  virtual ~Context() {}
+  
+  virtual const MobileRootJoint& getNode() const
+  { return *mMobileRootJoint; }
+  
+  virtual void initDesignPosition()
+  {
+    mMobileRootJoint->initDesignPosition(mPortValueList);
+  }
+
+  virtual void init(const /*Init*/Task& task)
+  {
+    mMobileRootJoint->init(task, mDiscreteState, mContinousState, mPortValueList);
+  }
+  
+  virtual void velocities(const Task& task)
+  {
+    mMobileRootJoint->velocity(task, getEnvironment(), mContinousState, mPortValueList);
+  }
+  virtual void articulation(const Task& task)
+  {
+    mMobileRootJoint->articulation(task, getEnvironment(), mContinousState, mPortValueList);
+  }
+  virtual void accelerations(const Task& task)
+  {
+    mMobileRootJoint->acceleration(task, getEnvironment(), mContinousState, mPortValueList);
+  }
+  
+  virtual void derivative(const Task&)
+  {
+    mMobileRootJoint->derivative(getEnvironment(), mDiscreteState, mContinousState, mPortValueList,
+                           mContinousStateDerivative);
+  }
+  
+private:
+  SharedPtr<const MobileRootJoint> mMobileRootJoint;
+};
+
 BEGIN_OPENFDM_OBJECT_DEF(MobileRootJoint, RootJoint)
   DEF_OPENFDM_PROPERTY(Vector3, InitialPosition, Serialized)
   DEF_OPENFDM_PROPERTY(Quaternion, InitialOrientation, Serialized)
@@ -41,6 +88,22 @@
 {
 }
 
+JointContext*
+MobileRootJoint::newJointContext(const Environment* environment,
+                                 MechanicLinkValue* parentLinkValue,
+                                 MechanicLinkValue* childLinkValue,
+                                 PortValueList& portValueList) const
+{
+  SharedPtr<Context> context = new Context(this, environment, parentLinkValue,
+                                           childLinkValue, portValueList);
+  if (!context->allocStates()) {
+    Log(Model, Warning) << "Could not alloc for model \""
+                        << getName() << "\"" << endl;
+    return false;
+  }
+  return context.release();
+}
+
 const Vector3&
 MobileRootJoint::getInitialPosition() const
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h	2009-01-31 14:39:16 UTC (rev 976)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h	2009-01-31 17:00:02 UTC (rev 977)
@@ -22,6 +22,12 @@
   MobileRootJoint(const std::string& name);
   virtual ~MobileRootJoint();
 
+  virtual JointContext*
+  newJointContext(const Environment* environment,
+                  MechanicLinkValue* parentLink,
+                  MechanicLinkValue* childLink,
+                  PortValueList& portValueList) const;
+
   const Vector3& getInitialPosition() const;
   void setInitialPosition(const Vector3& initialPosition);
 
@@ -34,25 +40,27 @@
   const Vector3& getInitialAngularVelocity() const;
   void setInitialAngularVelocity(const Vector3& initialAngularVelocity);
 
-  virtual void init(const Task&, DiscreteStateValueVector&,
-                    ContinousStateValueVector&,
-                    const PortValueList&) const;
-  virtual void initDesignPosition(PortValueList&) const;
-  virtual void velocity(const Task&, const Environment& environment,
-                        const ContinousStateValueVector& states,
-                        PortValueList& portValues) const;
-  virtual void articulation(const Task&, const Environment& environment,
-                            const ContinousStateValueVector&,
-                            PortValueList& portValues) const;
-  virtual void acceleration(const Task&, const Environment& environment,
-                            const ContinousStateValueVector&,
-                            PortValueList& portValues) const;
-  virtual void derivative(const Environment& environment,
-                          const DiscreteStateValueVector&,
-                          const ContinousStateValueVector&,
-                          const PortValueList& portValues,
-                          ContinousStateValueVector&) const;
+  void init(const Task&, DiscreteStateValueVector&,
+            ContinousStateValueVector&,
+            const PortValueList&) const;
+  void initDesignPosition(PortValueList&) const;
+  void velocity(const Task&, const Environment& environment,
+                const ContinousStateValueVector& states,
+                PortValueList& portValues) const;
+  void articulation(const Task&, const Environment& environment,
+                    const ContinousStateValueVector&,
+                    PortValueList& portValues) const;
+  void acceleration(const Task&, const Environment& environment,
+                    const ContinousStateValueVector&,
+                    PortValueList& portValues) const;
+  void derivative(const Environment& environment,
+                  const DiscreteStateValueVector&,
+                  const ContinousStateValueVector&,
+                  const PortValueList& portValues,
+                  ContinousStateValueVector&) const;
 private:
+  class Context;
+
   SharedPtr<MechanicLink> mMechanicLink;
 
   SharedPtr<Vector3StateInfo> mPositionStateInfo;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp	2009-01-31 14:39:16 UTC (rev 976)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp	2009-01-31 17:00:02 UTC (rev 977)
@@ -5,57 +5,10 @@
 #include "RootJoint.h"
 
 #include "ConstNodeVisitor.h"
-#include "JointContext.h"
 #include "NodeVisitor.h"
 
 namespace OpenFDM {
 
-class RootJoint::Context : public JointContext {
-public:
-  Context(const RootJoint* rootJoint, const Environment* environment,
-          MechanicLinkValue* parentLinkValue, MechanicLinkValue* childLinkValue,
-          PortValueList& portValueList) :
-    JointContext(environment, parentLinkValue, childLinkValue, portValueList),
-    mRootJoint(rootJoint)
-  {}
-  virtual ~Context() {}
-  
-  virtual const RootJoint& getNode() const
-  { return *mRootJoint; }
-  
-  virtual void initDesignPosition()
-  {
-    mRootJoint->initDesignPosition(mPortValueList);
-  }
-
-  virtual void init(const /*Init*/Task& task)
-  {
-    mRootJoint->init(task, mDiscreteState, mContinousState, mPortValueList);
-  }
-  
-  virtual void velocities(const Task& task)
-  {
-    mRootJoint->velocity(task, getEnvironment(), mContinousState, mPortValueList);
-  }
-  virtual void articulation(const Task& task)
-  {
-    mRootJoint->articulation(task, getEnvironment(), mContinousState, mPortValueList);
-  }
-  virtual void accelerations(const Task& task)
-  {
-    mRootJoint->acceleration(task, getEnvironment(), mContinousState, mPortValueList);
-  }
-  
-  virtual void derivative(const Task&)
-  {
-    mRootJoint->derivative(getEnvironment(), mDiscreteState, mContinousState, mPortValueList,
-                           mContinousStateDerivative);
-  }
-  
-private:
-  SharedPtr<const RootJoint> mRootJoint;
-};
-  
 BEGIN_OPENFDM_OBJECT_DEF(RootJoint, Joint)
   END_OPENFDM_OBJECT_DEF
 
@@ -80,20 +33,4 @@
   visitor.handleNodePathAndApply(this);
 }
 
-JointContext*
-RootJoint::newJointContext(const Environment* environment,
-                           MechanicLinkValue* parentLinkValue,
-                           MechanicLinkValue* childLinkValue,
-                           PortValueList& portValueList) const
-{
-  SharedPtr<Context> context = new Context(this, environment, parentLinkValue,
-                                           childLinkValue, portValueList);
-  if (!context->allocStates()) {
-    Log(Model, Warning) << "Could not alloc for model \""
-                        << getName() << "\"" << endl;
-    return false;
-  }
-  return context.release();
-}
-
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h	2009-01-31 14:39:16 UTC (rev 976)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h	2009-01-31 17:00:02 UTC (rev 977)
@@ -18,34 +18,6 @@
 
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
-
-  virtual JointContext*
-  newJointContext(const Environment* environment,
-                  MechanicLinkValue* parentLink,
-                  MechanicLinkValue* childLink,
-                  PortValueList& portValueList) const;
-
-  virtual void init(const Task&,DiscreteStateValueVector&,
-                    ContinousStateValueVector&, const PortValueList&) const = 0;
-  virtual void initDesignPosition(PortValueList&) const = 0;
-
-  virtual void velocity(const Task&, const Environment& environment,
-                        const ContinousStateValueVector&,
-                        PortValueList&) const = 0;
-  virtual void articulation(const Task&, const Environment& environment,
-                            const ContinousStateValueVector&,
-                            PortValueList&) const = 0;
-  virtual void acceleration(const Task&, const Environment& environment,
-                            const ContinousStateValueVector&,
-                            PortValueList&) const = 0;
-  virtual void derivative(const Environment& environment,
-                          const DiscreteStateValueVector&,
-                          const ContinousStateValueVector&,
-                          const PortValueList& portValues,
-                          ContinousStateValueVector&) const
-  {}
-private:
-  class Context;
 };
 
 } // namespace OpenFDM



