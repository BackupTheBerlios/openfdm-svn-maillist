From frohlich at mail.berlios.de  Sun Jul 13 22:00:15 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 13 Jul 2008 22:00:15 +0200
Subject: [OpenFDM-svn] r408 - trunk/OpenFDM/src/OpenFDM
Message-ID: <200807132000.m6DK0FnG032083@sheep.berlios.de>

Author: frohlich
Date: 2008-07-13 22:00:14 +0200 (Sun, 13 Jul 2008)
New Revision: 408

Modified:
   trunk/OpenFDM/src/OpenFDM/PhysicalDimension.h
   trunk/OpenFDM/src/OpenFDM/Unit.h
Log:
Adjustments to unit names.


Modified: trunk/OpenFDM/src/OpenFDM/PhysicalDimension.h
===================================================================
--- trunk/OpenFDM/src/OpenFDM/PhysicalDimension.h	2008-06-23 17:27:48 UTC (rev 407)
+++ trunk/OpenFDM/src/OpenFDM/PhysicalDimension.h	2008-07-13 20:00:14 UTC (rev 408)
@@ -23,25 +23,34 @@
 class PhysicalDimension {
 public:
   PhysicalDimension(signed char length = 0, signed char mass = 0,
-                    signed char time = 0, signed char temperature = 0,
-                    signed char current = 0, signed char amountSubstance = 0,
-                    signed char lumIntensity = 0) :
+                    signed char time = 0,
+                    signed char thermodynamicTemperature = 0,
+                    signed char electricCurrent = 0,
+                    signed char amountOfSubstance = 0,
+                    signed char luminousIntensity = 0) :
     mLength(length),
     mMass(mass),
     mTime(time),
-    mTemperature(temperature),
-    mCurrent(current),
-    mAmountSubstance(amountSubstance),
-    mLumIntensity(lumIntensity)
+    mThermodynamicTemperature(thermodynamicTemperature),
+    mElectricCurrent(electricCurrent),
+    mAmountOfSubstance(amountOfSubstance),
+    mLuminousIntensity(luminousIntensity)
   { }
 
-  signed char getLength(void) const { return mLength; }
-  signed char getMass(void) const { return mMass; }
-  signed char getTime(void) const { return mTime; }
-  signed char getTemperature(void) const { return mTemperature; }
-  signed char getCurrent(void) const { return mCurrent; }
-  signed char getAmountSubstance(void) const { return mAmountSubstance; }
-  signed char getLumIntensity(void) const { return mLumIntensity; }
+  signed char getLength(void) const
+  { return mLength; }
+  signed char getMass(void) const
+  { return mMass; }
+  signed char getTime(void) const
+  { return mTime; }
+  signed char getThermodynamicTemperature(void) const
+  { return mThermodynamicTemperature; }
+  signed char getElectricCurrent(void) const
+  { return mElectricCurrent; }
+  signed char getAmountOfSubstance(void) const
+  { return mAmountOfSubstance; }
+  signed char getLuminousIntensity(void) const
+  { return mLuminousIntensity; }
 
   static PhysicalDimension length(void)
   { return PhysicalDimension(1, 0, 0, 0, 0, 0, 0); }
@@ -49,14 +58,23 @@
   { return PhysicalDimension(0, 1, 0, 0, 0, 0, 0); }
   static PhysicalDimension time(void)
   { return PhysicalDimension(0, 0, 1, 0, 0, 0, 0); }
-  static PhysicalDimension temperature(void)
+  static PhysicalDimension thermodynamicTemperature(void)
   { return PhysicalDimension(0, 0, 0, 1, 0, 0, 0); }
-  static PhysicalDimension current(void)
+  static PhysicalDimension electricCurrent(void)
   { return PhysicalDimension(0, 0, 0, 0, 1, 0, 0); }
-  static PhysicalDimension amountSubstance(void)
+  static PhysicalDimension amountOfSubstance(void)
   { return PhysicalDimension(0, 0, 0, 0, 0, 1, 0); }
-  static PhysicalDimension lumIntensity(void)
+  static PhysicalDimension luminousIntensity(void)
   { return PhysicalDimension(0, 0, 0, 0, 0, 0, 1); }
+
+  static PhysicalDimension planeAngle(void)
+  { return length()/length(); }
+  static PhysicalDimension solidAngle(void)
+  { return area()/area(); }
+
+  static PhysicalDimension frequency(void)
+  { return PhysicalDimension()/time(); }
+
   static PhysicalDimension area(void)
   { return PhysicalDimension(2, 0, 0, 0, 0, 0, 0); }
   static PhysicalDimension volume(void)
@@ -80,6 +98,9 @@
   static PhysicalDimension inertia(void)
   { return mass()*area(); }
 
+  static PhysicalDimension electricCharge(void)
+  { return electricCurrent()*time(); }
+
   PhysicalDimension& operator*=(const PhysicalDimension& physicalDimension)
   { *this = *this * physicalDimension; return *this; }
   PhysicalDimension& operator/=(const PhysicalDimension& physicalDimension)
@@ -89,10 +110,10 @@
   signed char mLength;
   signed char mMass;
   signed char mTime;
-  signed char mTemperature;
-  signed char mCurrent;
-  signed char mAmountSubstance;
-  signed char mLumIntensity;
+  signed char mThermodynamicTemperature;
+  signed char mElectricCurrent;
+  signed char mAmountOfSubstance;
+  signed char mLuminousIntensity;
 };
 
 inline
@@ -102,10 +123,11 @@
   return PhysicalDimension(d1.getLength()+d2.getLength(),
                            d1.getMass()+d2.getMass(),
                            d1.getTime()+d2.getTime(),
-                           d1.getTemperature()+d2.getTemperature(),
-                           d1.getCurrent()+d2.getCurrent(),
-                           d1.getAmountSubstance()+d2.getAmountSubstance(),
-                           d1.getLumIntensity()+d2.getLumIntensity());
+                           d1.getThermodynamicTemperature()
+                           +d2.getThermodynamicTemperature(),
+                           d1.getElectricCurrent()+d2.getElectricCurrent(),
+                           d1.getAmountOfSubstance()+d2.getAmountOfSubstance(),
+                           d1.getLuminousIntensity()+d2.getLuminousIntensity());
 }
 
 inline
@@ -115,10 +137,11 @@
   return PhysicalDimension(d1.getLength()-d2.getLength(),
                            d1.getMass()-d2.getMass(),
                            d1.getTime()-d2.getTime(),
-                           d1.getTemperature()-d2.getTemperature(),
-                           d1.getCurrent()-d2.getCurrent(),
-                           d1.getAmountSubstance()-d2.getAmountSubstance(),
-                           d1.getLumIntensity()-d2.getLumIntensity());
+                           d1.getThermodynamicTemperature()
+                           -d2.getThermodynamicTemperature(),
+                           d1.getElectricCurrent()-d2.getElectricCurrent(),
+                           d1.getAmountOfSubstance()-d2.getAmountOfSubstance(),
+                           d1.getLuminousIntensity()-d2.getLuminousIntensity());
 }
 
 inline
@@ -128,10 +151,10 @@
   return d1.getLength() == d2.getLength() &&
     d1.getMass() == d2.getMass() &&
     d1.getTime() == d2.getTime() &&
-    d1.getTemperature() == d2.getTemperature() &&
-    d1.getCurrent() == d2.getCurrent() &&
-    d1.getAmountSubstance() == d2.getAmountSubstance() &&
-    d1.getLumIntensity() == d2.getLumIntensity();
+    d1.getThermodynamicTemperature() == d2.getThermodynamicTemperature() &&
+    d1.getElectricCurrent() == d2.getElectricCurrent() &&
+    d1.getAmountOfSubstance() == d2.getAmountOfSubstance() &&
+    d1.getLuminousIntensity() == d2.getLuminousIntensity();
 }
 
 inline
@@ -141,24 +164,24 @@
   return d1.getLength() != d2.getLength() ||
     d1.getMass() != d2.getMass() ||
     d1.getTime() != d2.getTime() ||
-    d1.getTemperature() != d2.getTemperature() ||
-    d1.getCurrent() != d2.getCurrent() ||
-    d1.getAmountSubstance() != d2.getAmountSubstance() ||
-    d1.getLumIntensity() != d2.getLumIntensity();
+    d1.getThermodynamicTemperature() != d2.getThermodynamicTemperature() ||
+    d1.getElectricCurrent() != d2.getElectricCurrent() ||
+    d1.getAmountOfSubstance() != d2.getAmountOfSubstance() ||
+    d1.getLuminousIntensity() != d2.getLuminousIntensity();
 }
 
 inline
 PhysicalDimension
-exp(const PhysicalDimension& d, signed char exponent)
+pow(const PhysicalDimension& d, signed char exponent)
 {
   if (exponent == 0)
     return PhysicalDimension();
   else if (exponent == 1)
     return d;
   else if (1 < exponent)
-    return d*exp(d, exponent-1);
+    return d*pow(d, exponent-1);
   else if (exponent < 0)
-    return PhysicalDimension()/exp(d, -exponent);
+    return PhysicalDimension()/pow(d, -exponent);
 }
 
 } // namespace OpenFDM

Modified: trunk/OpenFDM/src/OpenFDM/Unit.h
===================================================================
--- trunk/OpenFDM/src/OpenFDM/Unit.h	2008-06-23 17:27:48 UTC (rev 407)
+++ trunk/OpenFDM/src/OpenFDM/Unit.h	2008-07-13 20:00:14 UTC (rev 408)
@@ -148,7 +148,7 @@
 
 inline Unit operator*(const Unit& u1, const Unit& u2);
 inline Unit operator/(const Unit& u1, const Unit& u2);
-inline Unit exp(const Unit& u, signed char exponent);
+inline Unit pow(const Unit& u, signed char exponent);
 
 class Unit {
 public:
@@ -187,10 +187,15 @@
   { return Unit(); }
 
   static Unit radian()
-  { return Unit(); }
+  { return length()/length(); }
   static Unit degree()
   { return Unit(deg2rad); }
+  static Unit steradian()
+  { return area()/area(); }
 
+  static Unit hertz(void)
+  { return Unit()/time(); }
+
   static Unit second()
   { return time(); }
   static Unit minute()
@@ -227,19 +232,19 @@
   { return nauticalMile()/hour(); }
 
   static Unit meterPerSecond2()
-  { return meter()/exp(second(), 2); }
+  { return meter()/pow(second(), 2); }
   static Unit footPerSecond2()
-  { return foot()/exp(second(), 2); }
+  { return foot()/pow(second(), 2); }
 
   static Unit squareMeter()
-  { return exp(meter(), 2); }
+  { return pow(meter(), 2); }
   static Unit squareFoot()
-  { return exp(foot(), 2); }
+  { return pow(foot(), 2); }
 
   static Unit qubicMeter()
-  { return exp(meter(), 3); }
+  { return pow(meter(), 3); }
   static Unit qubicFoot()
-  { return exp(foot(), 3); }
+  { return pow(foot(), 3); }
 
   static Unit kilogramm()
   { return mass(); }
@@ -279,31 +284,53 @@
   { return lbf()/squareFoot(); }
 
   static Unit kelvin()
-  { return temperature(); }
+  { return thermodynamicTemperature(); }
   static Unit degreeCelsius()
-  { return temperature(1, real_type(273.15)); }
+  { return thermodynamicTemperature(1, real_type(273.15)); }
   static Unit rankine()
-  { return temperature(real_type(5)/real_type(9)); }
+  { return thermodynamicTemperature(real_type(5)/real_type(9)); }
   static Unit degreeFarenheit()
   {
-    return temperature(real_type(5)/real_type(9),
-                       real_type(273.15) - real_type(32*5)/real_type(9));
+    return thermodynamicTemperature(real_type(5)/real_type(9),
+                                    real_type(273.15)
+                                    - real_type(32*5)/real_type(9));
   }
 
+  static Unit ampere()
+  { return electricCurrent(); }
+
+  static Unit mol()
+  { return amountOfSubstance(); }
+
+  static Unit candela()
+  { return luminousIntensity(); }
+
   static Unit length(real_type factor = 1)
   { return Unit(PhysicalDimension::length(), factor); }
   static Unit mass(real_type factor = 1)
   { return Unit(PhysicalDimension::mass(), factor); }
   static Unit time(real_type factor = 1)
   { return Unit(PhysicalDimension::time(), factor); }
-  static Unit temperature(real_type factor = 1, real_type offset = 0)
-  { return Unit(PhysicalDimension::temperature(), factor, offset); }
-  static Unit current(real_type factor = 1)
-  { return Unit(PhysicalDimension::current(), factor); }
-  static Unit amountSubstance(real_type factor = 1)
-  { return Unit(PhysicalDimension::amountSubstance(), factor); }
-  static Unit lumIntensity(real_type factor = 1)
-  { return Unit(PhysicalDimension::lumIntensity(), factor); }
+  static Unit thermodynamicTemperature(real_type factor = 1,
+                                       real_type offset = 0)
+  { return Unit(PhysicalDimension::thermodynamicTemperature(),
+                factor, offset); }
+  static Unit electricCurrent(real_type factor = 1)
+  { return Unit(PhysicalDimension::electricCurrent(), factor); }
+  static Unit amountOfSubstance(real_type factor = 1)
+  { return Unit(PhysicalDimension::amountOfSubstance(), factor); }
+  static Unit luminousIntensity(real_type factor = 1)
+  { return Unit(PhysicalDimension::luminousIntensity(), factor); }
+
+  static Unit planeAngle(void)
+  { return length()/length(); }
+  static Unit solidAngle(void)
+  { return area()/area(); }
+
+  static Unit frequency(void)
+  { return Unit()/time(); }
+
+
   static Unit area(real_type factor = 1)
   { return Unit(PhysicalDimension::area(), factor); }
   static Unit volume(real_type factor = 1)
@@ -327,6 +354,9 @@
   static Unit inertia(real_type factor = 1)
   { return mass(factor)*area(); }
 
+  static Unit electricCharge(real_type factor = 1)
+  { return electricCurrent(factor)*time(); }
+
   // Convert from native units to the unit given in the unit argument.
   real_type convertTo(const real_type& value) const
   { return (value - mOffset)/mFactor; }
@@ -395,16 +425,16 @@
 
 inline
 Unit
-exp(const Unit& u, signed char exponent)
+pow(const Unit& u, signed char exponent)
 {
   if (exponent == 0)
     return Unit();
   else if (exponent == 1)
     return u;
   else if (1 < exponent)
-    return u*exp(u, exponent-1);
+    return u*pow(u, exponent-1);
   else if (exponent < 0)
-    return Unit()/exp(u, -exponent);
+    return Unit()/pow(u, -exponent);
 }
 
 inline
@@ -462,31 +492,34 @@
         stream << int(physicalDimension.getTime()) << stream.widen(' ');
       stream << stream.widen(' ');
     }
-    if (physicalDimension.getTemperature()) {
+    if (physicalDimension.getThermodynamicTemperature()) {
       stream << stream.widen('K');
-      if (physicalDimension.getTemperature() != 1)
-        stream << int(physicalDimension.getTemperature());
+      if (physicalDimension.getThermodynamicTemperature() != 1)
+        stream << int(physicalDimension.getThermodynamicTemperature());
       stream << stream.widen(' ');
     }
-    if (physicalDimension.getCurrent()) {
+    if (physicalDimension.getElectricCurrent()) {
       stream << stream.widen('A');
-      if (physicalDimension.getCurrent() != 1)
-        stream << int(physicalDimension.getCurrent());
+      if (physicalDimension.getElectricCurrent() != 1)
+        stream << int(physicalDimension.getElectricCurrent());
       stream << stream.widen(' ');
     }
-    if (physicalDimension.getLumIntensity()) {
+    if (physicalDimension.getLuminousIntensity()) {
       stream << stream.widen('c') << stream.widen('d');
-      if (physicalDimension.getLumIntensity() != 1)
-        stream << int(physicalDimension.getLumIntensity());
+      if (physicalDimension.getLuminousIntensity() != 1)
+        stream << int(physicalDimension.getLuminousIntensity());
       stream << stream.widen(' ');
     }
   } else {
     stream << ", Length = " << int(physicalDimension.getLength())
            << ", Mass = " << int(physicalDimension.getMass())
            << ", Time = " << int(physicalDimension.getTime())
-           << ", Temperature = " << int(physicalDimension.getTemperature())
-           << ", Current = " << int(physicalDimension.getCurrent())
-           << ", LumIntensity = " << int(physicalDimension.getLumIntensity());
+           << ", ThermodynamicTemperature = "
+           << int(physicalDimension.getThermodynamicTemperature())
+           << ", ElectricCurrent = "
+           << int(physicalDimension.getElectricCurrent())
+           << ", LuminousIntensity = "
+           << int(physicalDimension.getLuminousIntensity());
   }
   return stream;
 }



From frohlich at mail.berlios.de  Tue Jul 15 19:13:53 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 15 Jul 2008 19:13:53 +0200
Subject: [OpenFDM-svn] r409 - trunk/OpenFDM/src/OpenFDM
Message-ID: <200807151713.m6FHDrpo023264@sheep.berlios.de>

Author: frohlich
Date: 2008-07-15 19:13:52 +0200 (Tue, 15 Jul 2008)
New Revision: 409

Modified:
   trunk/OpenFDM/src/OpenFDM/WeakReferenced.h
Log:
Remove unused include.


Modified: trunk/OpenFDM/src/OpenFDM/WeakReferenced.h
===================================================================
--- trunk/OpenFDM/src/OpenFDM/WeakReferenced.h	2008-07-13 20:00:14 UTC (rev 408)
+++ trunk/OpenFDM/src/OpenFDM/WeakReferenced.h	2008-07-15 17:13:52 UTC (rev 409)
@@ -5,7 +5,6 @@
 #ifndef OpenFDM_WeakReferenced_H
 #define OpenFDM_WeakReferenced_H
 
-#include "Mutex.h"
 #include "Referenced.h"
 #include "ScopeLock.h"
 #include "SharedPtr.h"



From frohlich at mail.berlios.de  Sat Jul 19 11:42:14 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 19 Jul 2008 11:42:14 +0200
Subject: [OpenFDM-svn] r410 - branches
Message-ID: <200807190942.m6J9gEUO031354@sheep.berlios.de>

Author: frohlich
Date: 2008-07-19 11:42:14 +0200 (Sat, 19 Jul 2008)
New Revision: 410

Added:
   branches/OpenFDM-StateSeparation/
Log:
Experimental branch to separate state and ports from models.


Copied: branches/OpenFDM-StateSeparation (from rev 409, trunk/OpenFDM)



From frohlich at mail.berlios.de  Sat Jul 19 13:12:44 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 19 Jul 2008 13:12:44 +0200
Subject: [OpenFDM-svn] r411 - in branches/OpenFDM-StateSeparation/src: .
	OpenFDM test
Message-ID: <200807191112.m6JBCiiA016945@sheep.berlios.de>

Author: frohlich
Date: 2008-07-19 13:12:35 +0200 (Sat, 19 Jul 2008)
New Revision: 411

Modified:
   branches/OpenFDM-StateSeparation/src/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/test/Makefile.am
Log:
Remove files from that build that are expected not to compile in the near future.


Modified: branches/OpenFDM-StateSeparation/src/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/Makefile.am	2008-07-19 09:42:14 UTC (rev 410)
+++ branches/OpenFDM-StateSeparation/src/Makefile.am	2008-07-19 11:12:35 UTC (rev 411)
@@ -1,4 +1,5 @@
-SUBDIRS = OpenFDM JSBSim test
+# SUBDIRS = OpenFDM JSBSim test
+SUBDIRS = OpenFDM test
 if ENABLE_BUILDER
 SUBDIRS += builder
 endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-07-19 09:42:14 UTC (rev 410)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-07-19 11:12:35 UTC (rev 411)
@@ -224,5 +224,7 @@
   Vehicle.cpp \
   WheelContact.cpp
 
-nobase_OpenFDMinclude_HEADERS = $(OpenFDMCoreHEADERS) $(OpenFDMModelsHEADERS)
-libOpenFDM_la_SOURCES = $(OpenFDMCoreSOURCES) $(OpenFDMModelsSOURCES)
+# nobase_OpenFDMinclude_HEADERS = $(OpenFDMCoreHEADERS) $(OpenFDMModelsHEADERS)
+nobase_OpenFDMinclude_HEADERS = $(OpenFDMCoreHEADERS)
+# libOpenFDM_la_SOURCES = $(OpenFDMCoreSOURCES) $(OpenFDMModelsSOURCES)
+libOpenFDM_la_SOURCES = $(OpenFDMCoreSOURCES)

Modified: branches/OpenFDM-StateSeparation/src/test/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/Makefile.am	2008-07-19 09:42:14 UTC (rev 410)
+++ branches/OpenFDM-StateSeparation/src/test/Makefile.am	2008-07-19 11:12:35 UTC (rev 411)
@@ -1,14 +1,15 @@
 INCLUDES = -I$(srcdir)/..
 
 # define some util programs
-bin_PROGRAMS = tiretestrig
+# bin_PROGRAMS = tiretestrig
 
 # define some unit tests
-check_PROGRAMS = quattest unitstest simulationtime constintegral harmonic limit
+#check_PROGRAMS = quattest unitstest simulationtime constintegral harmonic limit
+check_PROGRAMS = quattest unitstest limit
 TESTS          = $(check_PROGRAMS)
 
-tiretestrig_SOURCES = tiretestrig.cpp
-tiretestrig_LDADD = ../OpenFDM/libOpenFDM.la -lhdf5
+# tiretestrig_SOURCES = tiretestrig.cpp
+# tiretestrig_LDADD = ../OpenFDM/libOpenFDM.la -lhdf5
 
 unitstest_SOURCES = unitstest.cpp
 unitstest_LDADD = ../OpenFDM/libOpenFDM.la
@@ -16,14 +17,14 @@
 quattest_SOURCES = quattest.cpp
 quattest_LDADD = ../OpenFDM/libOpenFDM.la
 
-simulationtime_SOURCES = simulationtime.cpp
-simulationtime_LDADD = ../OpenFDM/libOpenFDM.la
+# simulationtime_SOURCES = simulationtime.cpp
+# simulationtime_LDADD = ../OpenFDM/libOpenFDM.la
 
-constintegral_SOURCES = constintegral.cpp
-constintegral_LDADD = ../OpenFDM/libOpenFDM.la
+# constintegral_SOURCES = constintegral.cpp
+# constintegral_LDADD = ../OpenFDM/libOpenFDM.la
 
-harmonic_SOURCES = harmonic.cpp
-harmonic_LDADD = ../OpenFDM/libOpenFDM.la
+# harmonic_SOURCES = harmonic.cpp
+# harmonic_LDADD = ../OpenFDM/libOpenFDM.la
 
 limit_SOURCES = limit.cpp
 limit_LDADD = ../OpenFDM/libOpenFDM.la



From frohlich at mail.berlios.de  Sun Jul 20 18:04:15 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 20 Jul 2008 18:04:15 +0200
Subject: [OpenFDM-svn] r413 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200807201604.m6KG4Fiq028736@sheep.berlios.de>

Author: frohlich
Date: 2008-07-20 18:04:15 +0200 (Sun, 20 Jul 2008)
New Revision: 413

Added:
   branches/OpenFDM-StateSeparation/src/OpenFDM/StateValue.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/StateValue.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h
Log:
Add StateValue, include in build system.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-07-20 11:22:22 UTC (rev 412)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-07-20 16:04:15 UTC (rev 413)
@@ -72,6 +72,7 @@
   ScopeLock.h \
   SharedPtr.h \
   StateStream.h \
+  StateValue.h \
   System.h \
   TableData.h \
   TaskInfo.h \
@@ -100,6 +101,7 @@
   PortInfo.cpp \
   PortValue.cpp \
   SampleTime.cpp \
+  StateValue.cpp \
   Time.cpp \
   Unit.cpp \
   Variant.cpp

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h	2008-07-20 11:22:22 UTC (rev 412)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h	2008-07-20 16:04:15 UTC (rev 413)
@@ -13,10 +13,15 @@
 
 class PortValue : public Referenced {
 public:
-  virtual ~PortValue();
   //virtual NumericPortValue* toNumericPortValue() { return 0; }
   //virtual MechanicPortValue* toMechanicPortValue() { return 0; }
   //virtual FluidPortValue* toFluidPortValue() { return 0; }
+
+  static void destroy(PortValue* portValue)
+  { delete portValue; }
+
+protected:
+  virtual ~PortValue();
 };
 
 // FIXME Do I need a class for that???

Added: branches/OpenFDM-StateSeparation/src/OpenFDM/StateValue.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/StateValue.cpp	2008-07-20 11:22:22 UTC (rev 412)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/StateValue.cpp	2008-07-20 16:04:15 UTC (rev 413)
@@ -0,0 +1,13 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
+ *
+ */
+
+#include "StateValue.h"
+
+namespace OpenFDM {
+
+StateValue::~StateValue()
+{
+}
+
+} // namespace OpenFDM

Added: branches/OpenFDM-StateSeparation/src/OpenFDM/StateValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/StateValue.h	2008-07-20 11:22:22 UTC (rev 412)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/StateValue.h	2008-07-20 16:04:15 UTC (rev 413)
@@ -0,0 +1,24 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_StateValue_H
+#define OpenFDM_StateValue_H
+
+#include "Referenced.h"
+
+namespace OpenFDM {
+
+class StateValue : public Referenced {
+public:
+
+  static void destroy(StateValue* stateValue)
+  { delete stateValue; }
+
+protected:
+  virtual ~StateValue();
+};
+
+} // namespace OpenFDM
+
+#endif



From frohlich at mail.berlios.de  Tue Jul 22 21:56:12 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 22 Jul 2008 21:56:12 +0200
Subject: [OpenFDM-svn] r414 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200807221956.m6MJuCQG030458@sheep.berlios.de>

Author: frohlich
Date: 2008-07-22 21:56:12 +0200 (Tue, 22 Jul 2008)
New Revision: 414

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h
Log:
Add port value initialization methods.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h	2008-07-20 16:04:15 UTC (rev 413)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h	2008-07-22 19:56:12 UTC (rev 414)
@@ -25,6 +25,9 @@
 public:
 
   // Accessors for real valued ports
+  bool isConnected(const RealOutputPort& port) const
+  { return port.getPortValue(mPortValueVector); }
+
   const real_type& getValue(const RealInputPort& port) const
   { return port.getPortValue(mPortValueVector)->getValue()(0, 0); }
   void setValue(const RealOutputPort& port, const real_type& value)
@@ -36,29 +39,38 @@
   { return port.getPortValue(mPortValueVector)->getValue()(0, 0); }
 
   // Accessors for matrix valued ports
+  bool isConnected(const MatrixOutputPort& port) const
+  { return port.getPortValue(mPortValueVector); }
+
   const Matrix& getValue(const MatrixInputPort& port) const
   { return port.getPortValue(mPortValueVector)->getValue(); }
   void setValue(const MatrixOutputPort& port, const Matrix& matrix)
   { port.getPortValue(mPortValueVector)->setValue(matrix); }
-  // FIXME, will have them, but cannot ensure currently that the size does not change.
+
   const Matrix& operator[](const MatrixInputPort& port) const
   { return port.getPortValue(mPortValueVector)->getValue(); }
-//   Matrix& operator[](const MatrixOutputPort& port)
-//   { return port.getPortValue(mPortValueVector)->getValue(); }
+  // FIXME, make sure that the size cannot change.
+  // May be we have some kind of base class of Matrix that has no resize call
+  // and no resizing assignment/copy???
+  Matrix& operator[](const MatrixOutputPort& port)
+  { return port.getPortValue(mPortValueVector)->getValue(); }
 
-  bool isConnected(const RealOutputPort& port) const
-  { return port.getPortValue(mPortValueVector); }
-  bool isConnected(const MatrixOutputPort& port) const
-  { return port.getPortValue(mPortValueVector); }
 
-  void setPortValue(unsigned idx, PortValue* portValue) // FIXME
+  // FIXME, avoid this method here. With this method the output stage of a model
+  // can change the port values, this should not be available in a model.
+  // may be this must be a derived class that provides some more access??
+  void setPortValue(unsigned idx, PortValue* portValue)
   {
     if (mPortValueVector.size() <= idx)
       mPortValueVector.resize(idx+1);
     mPortValueVector[idx] = portValue;
   }
+  void setPortSize(const MatrixOutputPort& port, const Size& size)
+  {
+    setPortValue(port.getPortIndex(), new NumericPortValue(size));
+  }
 
-private:
+protected:
   PortValueVector mPortValueVector;
 };
 



From frohlich at mail.berlios.de  Wed Jul 23 07:15:18 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 23 Jul 2008 07:15:18 +0200
Subject: [OpenFDM-svn] r415 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200807230515.m6N5FI1b019579@sheep.berlios.de>

Author: frohlich
Date: 2008-07-23 07:15:04 +0200 (Wed, 23 Jul 2008)
New Revision: 415

Added:
   branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateValue.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateValue.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateValue.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
Log:
StateValues like port values.


Added: branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateValue.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateValue.cpp	2008-07-22 19:56:12 UTC (rev 414)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateValue.cpp	2008-07-23 05:15:04 UTC (rev 415)
@@ -0,0 +1,13 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
+ *
+ */
+
+#include "ContinousStateValue.h"
+
+namespace OpenFDM {
+
+ContinousStateValue::~ContinousStateValue()
+{
+}
+
+} // namespace OpenFDM

Added: branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateValue.h	2008-07-22 19:56:12 UTC (rev 414)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateValue.h	2008-07-23 05:15:04 UTC (rev 415)
@@ -0,0 +1,21 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_ContinousStateValue_H
+#define OpenFDM_ContinousStateValue_H
+
+#include "StateValue.h"
+
+namespace OpenFDM {
+
+class ContinousStateValue : public StateValue {
+public:
+
+protected:
+  virtual ~ContinousStateValue();
+};
+
+} // namespace OpenFDM
+
+#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-07-22 19:56:12 UTC (rev 414)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-07-23 05:15:04 UTC (rev 415)
@@ -12,6 +12,7 @@
   Assert.h \
   Atomic.h \
   ConstFrameVisitor.h \
+  ContinousStateValue.h \
   CowPtr.h \
   DoPri5.h \
   Environment.h \
@@ -39,6 +40,7 @@
   Matrix.h \
   MatrixInputPort.h \
   MatrixOutputPort.h \
+  MatrixStateValue.h \
   MidpointRule.h \
   Model.h \
   ModelGroup.h \
@@ -91,8 +93,10 @@
 OpenFDMCoreSOURCES = \
   Assert.cpp \
   Atomic.cpp \
+  ContinousStateValue.cpp \
   Frame.cpp \
   Logger.cpp \
+  MatrixStateValue.cpp \
   Node.cpp \
   NodeVisitor.cpp \
   NumericPortValue.cpp \

Added: branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateValue.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateValue.cpp	2008-07-22 19:56:12 UTC (rev 414)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateValue.cpp	2008-07-23 05:15:04 UTC (rev 415)
@@ -0,0 +1,13 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
+ *
+ */
+
+#include "MatrixStateValue.h"
+
+namespace OpenFDM {
+
+MatrixStateValue::~MatrixStateValue()
+{
+}
+
+} // namespace OpenFDM

Added: branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateValue.h	2008-07-22 19:56:12 UTC (rev 414)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateValue.h	2008-07-23 05:15:04 UTC (rev 415)
@@ -0,0 +1,33 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_MatrixStateValue_H
+#define OpenFDM_MatrixStateValue_H
+
+#include "ContinousStateValue.h"
+#include "Matrix.h"
+
+namespace OpenFDM {
+
+class MatrixStateValue : public ContinousStateValue {
+public:
+  MatrixStateValue(const Size& size) : mMatrix(size)
+  { }
+  const Matrix& getMatrix() const
+  { return mMatrix; }
+  Matrix& getMatrix()
+  { return mMatrix; }
+  void setMatrix(const Matrix& matrix)
+  { OpenFDMAssert(size(matrix) == size(mMatrix)); mMatrix = matrix; }
+
+protected:
+  virtual ~MatrixStateValue();
+
+private:
+  Matrix mMatrix;
+};
+
+} // namespace OpenFDM
+
+#endif



