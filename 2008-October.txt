From frohlich at mail.berlios.de  Thu Oct  2 07:19:01 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 2 Oct 2008 07:19:01 +0200
Subject: [OpenFDM-svn] r548 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810020519.m925J1xU008887@sheep.berlios.de>

Author: frohlich
Date: 2008-10-02 07:18:58 +0200 (Thu, 02 Oct 2008)
New Revision: 548

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateInfo.h
Log:
Add some properties to continous states.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateInfo.h	2008-09-30 20:58:05 UTC (rev 547)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ContinousStateInfo.h	2008-10-02 05:18:58 UTC (rev 548)
@@ -14,12 +14,39 @@
 
 class ContinousStateInfo : public StateInfo {
 public:
+  ContinousStateInfo(bool isTrimable = false) :
+    mRelTol(1e-3),
+    mAbsTol(1e-5),
+    mIsTrimable(isTrimable)
+  { }
+
+  void setIsTrimable(bool isTrimable)
+  { mIsTrimable = isTrimable; }
+  bool getIsTrimable() const
+  { return mIsTrimable; }
+
+  void setRelTol(const real_type& relTol)
+  { mRelTol = relTol; }
+  const real_type& getRelTol() const
+  { return mRelTol; }
+
+  void setAbsTol(const real_type& absTol)
+  { mAbsTol = absTol; }
+  const real_type& getAbsTol() const
+  { return mAbsTol; }
+
   ContinousStateValue* newStateValue(const LeafContext& leafContext) const
   { return newStateValueImplementation(leafContext); }
 
 protected:
   virtual ~ContinousStateInfo() {}
   virtual ContinousStateValue* newStateValueImplementation(const LeafContext&) const = 0;
+private:
+  real_type mRelTol;
+  real_type mAbsTol;
+  bool mIsTrimable;
+//   unsigned char mErrorIndex;
+//   unsigned char mDifferentialEquationOrder;
 };
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Thu Oct  2 07:36:38 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 2 Oct 2008 07:36:38 +0200
Subject: [OpenFDM-svn] r549 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810020536.m925ac4p005921@sheep.berlios.de>

Author: frohlich
Date: 2008-10-02 07:36:37 +0200 (Thu, 02 Oct 2008)
New Revision: 549

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h
Log:
Hmm, for now a task has models to execute ...


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h	2008-10-02 05:18:58 UTC (rev 548)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h	2008-10-02 05:36:37 UTC (rev 549)
@@ -5,6 +5,10 @@
 #ifndef OpenFDM_Task_H
 #define OpenFDM_Task_H
 
+#include "Referenced.h"
+#include "MechanicContext.h"
+#include "ModelContext.h"
+
 namespace OpenFDM {
 
 class Task : public Referenced {
@@ -30,8 +34,22 @@
   const real_type& getStepsize() const
   { return mStepsize; }
 
+  void output()
+  {
+    mModelContextList.output(*this);
+    mMechanicContextList.init(*this);
+  }
+  void update()
+  {
+    mModelContextList.update(*this);
+    mMechanicContextList.update(*this);
+  }
+
+  ModelContextList mModelContextList;
+  MechanicContextList mMechanicContextList;
+
 private:
-  real_type mStepsize;
+  const real_type mStepsize;
 };
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Fri Oct  3 16:24:14 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 3 Oct 2008 16:24:14 +0200
Subject: [OpenFDM-svn] r550 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810031424.m93EOEbU019236@sheep.berlios.de>

Author: frohlich
Date: 2008-10-03 16:24:13 +0200 (Fri, 03 Oct 2008)
New Revision: 550

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateStateInfo.h
Log:
Formating fixes


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.h	2008-10-02 05:36:37 UTC (rev 549)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.h	2008-10-03 14:24:13 UTC (rev 550)
@@ -55,7 +55,7 @@
     }
   };
 
-  typedef  TemplateDiscreteStateInfo<MatrixList> MatrixListStateInfo;
+  typedef TemplateDiscreteStateInfo<MatrixList> MatrixListStateInfo;
 
   MatrixInputPort mInputPort;
   MatrixOutputPort mOutputPort;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateStateInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateStateInfo.h	2008-10-02 05:36:37 UTC (rev 549)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateStateInfo.h	2008-10-03 14:24:13 UTC (rev 550)
@@ -37,7 +37,7 @@
   const_reference getValue(const TemplateValueVector<I,V>& valueVector) const
   { return getValueReference(valueVector.getValue(*this)); }
 
-// protected:
+protected:
   struct Value : public V {
     value_type mValue;
   };



From frohlich at mail.berlios.de  Fri Oct  3 16:48:27 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 3 Oct 2008 16:48:27 +0200
Subject: [OpenFDM-svn] r551 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810031448.m93EmRjX021524@sheep.berlios.de>

Author: frohlich
Date: 2008-10-03 16:48:27 +0200 (Fri, 03 Oct 2008)
New Revision: 551

Removed:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateValue.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateValue.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateContinousStateInfo.h
Log:
Make ContinousStateValues really work. Remove the now unneeded MatrixStateValue.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-03 14:24:13 UTC (rev 550)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-03 14:48:27 UTC (rev 551)
@@ -54,7 +54,6 @@
   Matrix.h \
   MatrixInputPort.h \
   MatrixOutputPort.h \
-  MatrixStateValue.h \
   MatrixStateInfo.h \
   MidpointRule.h \
   MechanicContext.h \
@@ -144,7 +143,6 @@
   LibraryModel.cpp \
   LibraryNode.cpp \
   Logger.cpp \
-  MatrixStateValue.cpp \
   MechanicContext.cpp \
   MechanicInstance.cpp \
   MechanicNode.cpp \

Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateValue.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateValue.cpp	2008-10-03 14:24:13 UTC (rev 550)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateValue.cpp	2008-10-03 14:48:27 UTC (rev 551)
@@ -1,13 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
- *
- */
-
-#include "MatrixStateValue.h"
-
-namespace OpenFDM {
-
-MatrixStateValue::~MatrixStateValue()
-{
-}
-
-} // namespace OpenFDM

Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateValue.h	2008-10-03 14:24:13 UTC (rev 550)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateValue.h	2008-10-03 14:48:27 UTC (rev 551)
@@ -1,46 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
- *
- */
-
-#ifndef OpenFDM_MatrixStateValue_H
-#define OpenFDM_MatrixStateValue_H
-
-#include "ContinousStateValue.h"
-#include "Matrix.h"
-
-namespace OpenFDM {
-
-class MatrixStateValue : public ContinousStateValue {
-public:
-  MatrixStateValue(const Size& size) : mMatrix(size(0), size(1))
-  { }
-  MatrixStateValue()
-  { }
-
-  void resize(const Size& size)
-  { mMatrix.resize(size(0), size(1)); }
-
-  const Matrix& getMatrix() const
-  { return mMatrix; }
-  Matrix& getMatrix()
-  { return mMatrix; }
-  void setMatrix(const Matrix& matrix)
-  { OpenFDMAssert(size(matrix) == size(mMatrix)); mMatrix = matrix; }
-
-  virtual void setValue(const StateStream& stateStream)
-  { stateStream.readSubState(mMatrix); }
-  virtual void getValue(StateStream& stateStream) const
-  { stateStream.writeSubState(mMatrix); }
-  virtual LinAlg::size_type getNumStates() const
-  { return rows(mMatrix)*cols(mMatrix); }
-
-protected:
-  virtual ~MatrixStateValue();
-
-private:
-  Matrix mMatrix;
-};
-
-} // namespace OpenFDM
-
-#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateContinousStateInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateContinousStateInfo.h	2008-10-03 14:24:13 UTC (rev 550)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/TemplateContinousStateInfo.h	2008-10-03 14:48:27 UTC (rev 551)
@@ -6,14 +6,63 @@
 #define OpenFDM_TemplateContinousStateInfo_H
 
 #include "ContinousStateInfo.h"
-#include "MatrixStateValue.h"
+#include "ContinousStateValue.h"
 #include "TemplateStateInfo.h"
 
 namespace OpenFDM {
 
 template<typename T>
-class TemplateContinousStateInfo : 
-    public TemplateStateInfo<T, ContinousStateInfo, MatrixStateValue> {
+class TemplateContinousStateInfo : public ContinousStateInfo {
+public:
+  typedef T value_type;
+
+  typedef value_type& reference;
+  typedef const value_type& const_reference;
+
+//   reference getValueReference(V* value) const
+  reference getValueReference(StateValue* value) const
+  {
+    OpenFDMAssert(value);
+    OpenFDMAssert(dynamic_cast<Value*>(value));
+    return static_cast<Value*>(value)->mValue;
+  }
+//   const_reference getValueReference(const V* value) const
+  const_reference getValueReference(const StateValue* value) const
+  {
+    OpenFDMAssert(value);
+    OpenFDMAssert(dynamic_cast<const Value*>(value));
+    return static_cast<const Value*>(value)->mValue;
+  }
+
+  reference getValue(TemplateValueVector<ContinousStateInfo,ContinousStateValue>& valueVector) const
+  { return getValueReference(valueVector.getValue(*this)); }
+  const_reference getValue(const TemplateValueVector<ContinousStateInfo,ContinousStateValue>& valueVector) const
+  { return getValueReference(valueVector.getValue(*this)); }
+
+protected:
+  struct Value : public ContinousStateValue {
+    value_type mValue;
+
+    void resize(const Size& size)
+    { mValue.resize(size(0), size(1)); }
+    
+    const Matrix& getMatrix() const
+    { return mValue; }
+    Matrix& getMatrix()
+    { return mValue; }
+    void setMatrix(const Matrix& matrix)
+    { OpenFDMAssert(size(matrix) == size(mValue)); mValue = matrix; }
+    
+    virtual void setValue(const StateStream& stateStream)
+    { stateStream.readSubState(mValue); }
+    virtual void getValue(StateStream& stateStream) const
+    { stateStream.writeSubState(mValue); }
+    virtual LinAlg::size_type getNumStates() const
+    { return rows(mValue)*cols(mValue); }
+  };
+
+  virtual Value* newStateValueImplementation(const LeafContext&) const
+  { return new Value; }
 };
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Fri Oct  3 17:08:12 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 3 Oct 2008 17:08:12 +0200
Subject: [OpenFDM-svn] r552 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810031508.m93F8C9d023736@sheep.berlios.de>

Author: frohlich
Date: 2008-10-03 17:08:11 +0200 (Fri, 03 Oct 2008)
New Revision: 552

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/LeafContext.h
Log:
Change continous state allocation.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.cpp	2008-10-03 14:48:27 UTC (rev 551)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.cpp	2008-10-03 15:08:11 UTC (rev 552)
@@ -53,7 +53,7 @@
       << "Size for input port does not match!" << std::endl;
     return false;
   }
-  leafContext.mContinousState.setValue(*mMatrixStateInfo, leafContext);
+  leafContext.setContinousStateSize(*mMatrixStateInfo, sz);
   return true;
 }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/LeafContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/LeafContext.h	2008-10-03 14:48:27 UTC (rev 551)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/LeafContext.h	2008-10-03 15:08:11 UTC (rev 552)
@@ -5,21 +5,35 @@
 #ifndef OpenFDM_LeafContext_H
 #define OpenFDM_LeafContext_H
 
+#include "AbstractNodeContext.h"
 #include "ContinousStateValueVector.h"
 #include "DiscreteStateValueVector.h"
-#include "AbstractNodeContext.h"
+#include "LeafNode.h"
+#include "MatrixStateInfo.h"
 
 namespace OpenFDM {
 
 class LeafContext : public AbstractNodeContext {
 public:
+  virtual ~LeafContext() {}
+  virtual const LeafNode& getNode() const = 0;
+
+  void setContinousStateSize(const MatrixStateInfo& stateInfo,
+                             const Size& sz)
+  {
+    mContinousState.setValue(stateInfo, *this);
+    mContinousState[stateInfo].resize(sz(0), sz(1));
+    mContinousStateDerivative.setValue(stateInfo, *this);
+    mContinousStateDerivative[stateInfo].resize(sz(0), sz(1));
+  }
+
+// protected:
   // Continous States
   ContinousStateValueVector mContinousState;
+  ContinousStateValueVector mContinousStateDerivative;
   // Discrete States
   DiscreteStateValueVector mDiscreteState;
 
-  // Task id's ???
-
   // functors to the operations to do??
 
 };



From frohlich at mail.berlios.de  Fri Oct  3 17:15:32 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 3 Oct 2008 17:15:32 +0200
Subject: [OpenFDM-svn] r553 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810031515.m93FFWvr024559@sheep.berlios.de>

Author: frohlich
Date: 2008-10-03 17:15:32 +0200 (Fri, 03 Oct 2008)
New Revision: 553

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h
Log:
Add the derivative computation task.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-03 15:08:11 UTC (rev 552)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-03 15:15:32 UTC (rev 553)
@@ -13,8 +13,9 @@
 namespace OpenFDM {
 
 class Task;
+class ContinousTask;
 class DiscreteTask;
-class ContinousTask;
+class InitTask;
 
 class MechanicContext : public LeafContext {
 public:
@@ -25,19 +26,19 @@
 
   bool alloc()
   { return mMechanicNode->alloc(*this); }
-  void init(const Task&)
+  void init(const /*Init*/Task&)
   { mMechanicNode->init(mDiscreteState, mContinousState, mPortValueList); }
 
-  void velocities(const ContinousTask&)
+  void velocities(const Task&)
   { mMechanicNode->velocity(mContinousState, mPortValueList); }
-  void articulation(const ContinousTask&)
+  void articulation(const Task&)
   { mMechanicNode->articulation(mContinousState, mPortValueList); }
-  void accelerations(const ContinousTask&)
+  void accelerations(const Task&)
   { }
 
-//   virtual void derivative(const ContinousStateValueVector&,
-//                           const PortValueList&,
-//                           ContinousStateValueVector&) const
+  void derivative(const Task&)
+  { mMechanicNode->derivative(mDiscreteState, mContinousState, mPortValueList,
+                              mContinousStateDerivative); }
  
 //   void outputVelocities()
 //   { }
@@ -72,23 +73,23 @@
         return false;
     return true;
   }
-  void init(const Task& task) const
+  void init(const /*Init*/Task& task) const
   {
     for (list_type::const_iterator i = begin(); i != end(); ++i)
       (*i)->init(task);
   }
-  void velocities(const ContinousTask& task) const
+  void velocities(const Task& task) const
   {
     for (list_type::const_iterator i = begin(); i != end(); ++i)
       (*i)->velocities(task);
   }
-  void articulation(const ContinousTask& task) const
+  void articulation(const Task& task) const
   {
     // Note that this list is traversed from the mechanic leafs to the root
     for (list_type::const_reverse_iterator i = rbegin(); i != rend(); ++i)
       (*i)->articulation(task);
   }
-  void accelerations(const ContinousTask& task) const
+  void accelerations(const Task& task) const
   {
     for (list_type::const_iterator i = begin(); i != end(); ++i)
       (*i)->accelerations(task);
@@ -98,6 +99,11 @@
     for (list_type::const_iterator i = begin(); i != end(); ++i)
       (*i)->update(task);
   }
+  void derivative(const Task& task) const
+  {
+    for (list_type::const_iterator i = begin(); i != end(); ++i)
+      (*i)->derivative(task);
+  }
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h	2008-10-03 15:08:11 UTC (rev 552)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h	2008-10-03 15:15:32 UTC (rev 553)
@@ -28,7 +28,8 @@
   virtual void articulation(const ContinousStateValueVector&,
                             PortValueList&) const
   { }
-  virtual void derivative(const ContinousStateValueVector&,
+  virtual void derivative(const DiscreteStateValueVector&,
+                          const ContinousStateValueVector&,
                           const PortValueList&,
                           ContinousStateValueVector&) const
   { }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h	2008-10-03 15:08:11 UTC (rev 552)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h	2008-10-03 15:15:32 UTC (rev 553)
@@ -13,8 +13,9 @@
 namespace OpenFDM {
 
 class Task;
+class ContinousTask;
 class DiscreteTask;
-class ContinousTask;
+class InitTask;
 
 //// This one is used to execute the simulation system
 class ModelContext : public LeafContext {
@@ -26,18 +27,16 @@
 
   bool alloc()
   { return mModel->alloc(*this); }
-  void init()
+  void init(const /*Init*/Task&)
   { mModel->init(mDiscreteState, mContinousState, mPortValueList); }
   void output(const Task&)
   { mModel->output(mDiscreteState, mContinousState, mPortValueList); }
   void update(const DiscreteTask& discreteTask)
   { mModel->update(discreteTask, mDiscreteState, mContinousState, mPortValueList); }
 
-//   void derivative()
-//   { mModel->derivative(mDiscreteState,
-//                        mContinousState,
-//                        mPortValueList,
-//                        mContinousStateDerivative); }
+  void derivative(const Task&)
+  { mModel->derivative(mDiscreteState, mContinousState, mPortValueList,
+                       mContinousStateDerivative); }
 
   // Return true if this model directly depends on one of models outputs
   bool dependsOn(const ModelContext& modelContext) const;
@@ -61,10 +60,10 @@
         return false;
     return true;
   }
-  void init(const Task& task) const
+  void init(const /*Init*/Task& task) const
   {
     for (list_type::const_iterator i = begin(); i != end(); ++i) {
-      (*i)->init();
+      (*i)->init(task);
       (*i)->output(task);
     }
   }
@@ -78,6 +77,11 @@
     for (list_type::const_iterator i = begin(); i != end(); ++i)
       (*i)->update(task);
   }
+  void derivative(const Task& task) const
+  {
+    for (list_type::const_iterator i = begin(); i != end(); ++i)
+      (*i)->derivative(task);
+  }
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-03 15:08:11 UTC (rev 552)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-03 15:15:32 UTC (rev 553)
@@ -505,7 +505,7 @@
     // FIXME is here just for curiousity :)
     ModelInstanceList::const_iterator i;
     for (i = _modelInstanceList.begin(); i != _modelInstanceList.end(); ++i) {
-      (*i)->getNodeContext().init();
+      (*i)->getNodeContext().init(*reinterpret_cast<Task*>(0));
       (*i)->getNodeContext().output(*reinterpret_cast<Task*>(0));
     }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h	2008-10-03 15:08:11 UTC (rev 552)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h	2008-10-03 15:15:32 UTC (rev 553)
@@ -18,7 +18,10 @@
   const real_type& getTime() const
   { return mTime; }
 
-// protected:
+  /// Hmm, there should be some exec method,
+  /// that can be used to do real multitasking here ...
+
+protected:
   void setTime(const real_type& time)
   { mTime = time; }
 
@@ -26,6 +29,32 @@
   real_type mTime;
 };
 
+class InitTask : public Task {
+public:
+  void init(const real_type& t)
+  {
+    setTime(t);
+    // The model outputs before mechanical state propagation
+    mModelContextList[0].init(*this);
+    // Now the mechanical state propagation
+    mMechanicContextList.init(*this);
+    mMechanicContextList.velocities(*this);
+    // The model outputs before mechanical force propagation
+    mModelContextList[1].init(*this);
+    // Now the mechanical force propagation
+    mMechanicContextList.articulation(*this);
+    // The model outputs before mechanical acceleration propagation
+    mModelContextList[2].init(*this);
+    // Now the mechanical acceleration propagation
+    mMechanicContextList.accelerations(*this);
+    // The model outputs past mechanical acceleration propagation
+    mModelContextList[3].init(*this);
+  }
+
+  ModelContextList mModelContextList[4];
+  MechanicContextList mMechanicContextList;
+};
+
 class DiscreteTask : public Task {
 public:
   DiscreteTask(const real_type& stepsize) : mStepsize(stepsize) { }
@@ -34,13 +63,16 @@
   const real_type& getStepsize() const
   { return mStepsize; }
 
-  void output()
+  void output(const real_type& t)
   {
+    setTime(t);
     mModelContextList.output(*this);
-    mMechanicContextList.init(*this);
+    // ?????
+//     mMechanicContextList.output(*this);
   }
-  void update()
+  void update(const real_type& startTime)
   {
+    OpenFDMAssert(equal(startTime, getTime(), 100));
     mModelContextList.update(*this);
     mMechanicContextList.update(*this);
   }



From frohlich at mail.berlios.de  Fri Oct  3 17:22:57 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 3 Oct 2008 17:22:57 +0200
Subject: [OpenFDM-svn] r554 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810031522.m93FMvNx025311@sheep.berlios.de>

Author: frohlich
Date: 2008-10-03 17:22:57 +0200 (Fri, 03 Oct 2008)
New Revision: 554

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h
Log:
Add a ContinousTask class.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h	2008-10-03 15:15:32 UTC (rev 553)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h	2008-10-03 15:22:57 UTC (rev 554)
@@ -84,6 +84,108 @@
   const real_type mStepsize;
 };
 
+class ContinousTask : public Task {
+public:
+  class SystemStateValueVector {
+  public:
+    SystemStateValueVector() : mNumStates(0) {}
+    
+    void clear()
+    {
+      mNumStates = 0;
+      mStateValues.clear();
+    }
+
+    LinAlg::size_type getNumStates() const
+    { return mNumStates; }
+    
+    void push_back(ContinousStateValue* stateValue)
+    {
+      OpenFDMAssert(stateValue);
+      mNumStates += stateValue->getNumStates();
+      mStateValues.push_back(stateValue);
+    }
+    
+    void setStateValue(const Vector& v)
+    {
+      // FIXME: too much copies
+      StateStream stateStream(v);
+      for (unsigned i = 0; i < mStateValues.size(); ++i)
+        mStateValues[i]->setValue(stateStream);
+      OpenFDMAssert(stateStream.isAtEnd());
+    }
+    
+    void getStateValue(Vector& v) const
+    {
+      // FIXME: too much copies
+      StateStream stateStream(getNumStates());
+      for (unsigned i = 0; i < mStateValues.size(); ++i)
+        mStateValues[i]->getValue(stateStream);
+      OpenFDMAssert(stateStream.isAtEnd());
+      v = stateStream.getState();
+    }
+    
+  private:
+    LinAlg::size_type mNumStates;
+    std::vector<SharedPtr<ContinousStateValue> > mStateValues;
+  };
+  
+  void output(const real_type& t)
+  {
+    setTime(t);
+    // The model outputs before mechanical state propagation
+    mModelContextList[0].output(*this);
+    // Now the mechanical state propagation
+    mMechanicContextList.velocities(*this);
+    // The model outputs before mechanical force propagation
+    mModelContextList[1].output(*this);
+    // Now the mechanical force propagation
+    mMechanicContextList.articulation(*this);
+    // The model outputs before mechanical acceleration propagation
+    mModelContextList[2].output(*this);
+    // Now the mechanical acceleration propagation
+    mMechanicContextList.accelerations(*this);
+    // The output stage happens in a mechanic system - if it does -
+    // past the mechanic system has completed.
+//     mMechanicContextList.output(*this);
+    // The model outputs past mechanical acceleration propagation
+    mModelContextList[3].output(*this);
+  }
+
+  void derivative()
+  {
+    for (unsigned i = 0; i < 4; ++i)
+      mModelContextList[i].derivative(*this);
+    mMechanicContextList.derivative(*this);
+  }
+
+  LinAlg::size_type getNumStates() const
+  { return mStateValues.getNumStates(); }
+
+  void setStateValue(const Vector& v)
+  { mStateValues.setStateValue(v); }
+  void getStateValue(Vector& v) const
+  { mStateValues.getStateValue(v); }
+  void getStateDerivative(Vector& v) const
+  { mDerivativeValues.getStateValue(v); }
+
+  void appendStateValuesFromLeafContext(LeafContext& leafContext)
+  {
+    unsigned numContStates = leafContext.getNode().getNumContinousStateValues();
+    for (unsigned k = 0; k < numContStates; ++k) {
+      ContinousStateInfo* continousStateInfo;
+      continousStateInfo = const_cast<ContinousStateInfo*>(leafContext.getNode().getContinousStateInfo(k));
+      mStateValues.push_back(leafContext.mContinousState.getValue(*continousStateInfo));
+      mDerivativeValues.push_back(leafContext.mContinousStateDerivative.getValue(*continousStateInfo));
+    }
+  }
+
+  ModelContextList mModelContextList[4];
+  MechanicContextList mMechanicContextList;
+  SystemStateValueVector mStateValues;
+  SystemStateValueVector mDerivativeValues;
+};
+
 } // namespace OpenFDM
 
 #endif



From frohlich at mail.berlios.de  Sat Oct  4 10:20:10 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 4 Oct 2008 10:20:10 +0200
Subject: [OpenFDM-svn] r555 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200810040820.m948KAgg007446@sheep.berlios.de>

Author: frohlich
Date: 2008-10-04 10:20:10 +0200 (Sat, 04 Oct 2008)
New Revision: 555

Modified:
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Also set sensible parameters for the continous system test case.


Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-03 15:22:57 UTC (rev 554)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-04 08:20:10 UTC (rev 555)
@@ -11,8 +11,12 @@
 Node* buildGroupExample()
 {
   SharedPtr<Group> group = new Group("G0");
-  Group::NodeId gain = group->addChild(new Gain("gain"));
-  Group::NodeId integrator1 = group->addChild(new Integrator("I1"));
+  Group::NodeId gain = group->addChild(new Gain("gain", -1));
+  Integrator* i1 = new Integrator("I1");
+  Matrix v(1, 1);
+  v(0, 0) = 1;
+  i1->setInitialValue(v);
+  Group::NodeId integrator1 = group->addChild(i1);
   Group::NodeId integrator2 = group->addChild(new Integrator("I2"));
   Group::NodeId output = group->addChild(new Output("O"));
   Group::NodeId delay = group->addChild(new Delay("D"));



From frohlich at mail.berlios.de  Sat Oct  4 16:12:57 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 4 Oct 2008 16:12:57 +0200
Subject: [OpenFDM-svn] r556 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810041412.m94ECvrI028985@sheep.berlios.de>

Author: frohlich
Date: 2008-10-04 16:12:57 +0200 (Sat, 04 Oct 2008)
New Revision: 556

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h
Log:
Make it work with const PortValues.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h	2008-10-04 08:20:10 UTC (rev 555)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h	2008-10-04 14:12:57 UTC (rev 556)
@@ -17,7 +17,7 @@
   //virtual MechanicPortValue* toMechanicPortValue() { return 0; }
   //virtual FluidPortValue* toFluidPortValue() { return 0; }
 
-  static void destroy(PortValue* portValue)
+  static void destroy(const PortValue* portValue)
   { delete portValue; }
 
 protected:



From frohlich at mail.berlios.de  Sat Oct  4 16:28:51 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 4 Oct 2008 16:28:51 +0200
Subject: [OpenFDM-svn] r557 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200810041428.m94ESpVj030142@sheep.berlios.de>

Author: frohlich
Date: 2008-10-04 16:28:51 +0200 (Sat, 04 Oct 2008)
New Revision: 557

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
   branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
   branches/OpenFDM-StateSeparation/src/test/Makefile.am
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Make hdf5 logging work again.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-04 14:12:57 UTC (rev 556)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-04 14:28:51 UTC (rev 557)
@@ -79,6 +79,19 @@
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
 
+  void traverse(NodeVisitor& visitor)
+  {
+    unsigned numChildren = getNumChildren();
+    for (unsigned i = 0; i < numChildren; ++i)
+      getChild(i)->accept(visitor);
+  }
+  void traverse(ConstNodeVisitor& visitor) const
+  {
+    unsigned numChildren = getNumChildren();
+    for (unsigned i = 0; i < numChildren; ++i)
+      getChild(i)->accept(visitor);
+  }
+
   NodeId addChild(const SharedPtr<Node>& node);
   unsigned getNumChildren() const;
   NodeId getNodeId(unsigned i) const;

Modified: branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-04 14:12:57 UTC (rev 556)
+++ branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-04 14:28:51 UTC (rev 557)
@@ -8,9 +8,9 @@
 #include <sstream>
 #include <set>
 #include <hdf5.h>
-#include <OpenFDM/ModelGroup.h>
-#include <OpenFDM/ModelVisitor.h>
 #include <OpenFDM/System.h>
+#include <OpenFDM/ConstNodeVisitor.h>
+#include <OpenFDM/NodeInstance.h>
 
 namespace OpenFDM {
 
@@ -178,66 +178,118 @@
   HDF5Object _parent;
 };
 
-class HDF5Writer : public ModelVisitor {
+
+
+
+class HDF5Log : protected ConstNodeVisitor {
 public:
-  HDF5Writer(const std::string& filename) :
-    _hdf5File(filename),
-    _group(_hdf5File, "System"),
-    _ts(_group.getId(), "t")
+  HDF5Log(const std::string& filename) :
+    mHDF5File(filename),
+    mCurrentGroup(mHDF5File, "System"),
+    mTimeStream(mCurrentGroup.getId(), "t")
   { }
-  ~HDF5Writer()
+  ~HDF5Log()
   { }
 
-  virtual void apply(Model& model)
+  void attachTo(const System* system)
   {
-    HDF5Group modelGroup(_group, model.getName());
+    if (!system)
+      return;
+    if (!system->getNode())
+      return;
+    mSystem = system;
+    system->getNode()->accept(*this);
+  }
 
-    dumpObject(modelGroup, model);
+  void dump()
+  {
+    if (mSystem)
+      mTimeStream.append(mSystem->getTime());
+    DumperList::iterator i;
+    for (i = mDumperList.begin(); i != mDumperList.end(); ++i)
+      (*i)->append();
+  }
 
-    unsigned numOutputs = model.getNumOutputPorts();
-    if (numOutputs > 0) {
-      HDF5Group outputGroup(modelGroup, "outputs");
-      UniqueStringSet outputStringSet;
-      for (unsigned i = 0; i < numOutputs; ++i) {
-        NumericPortProvider* numericPort = model.getOutputPort(i);
-        if (!numericPort)
-          continue;
-        PortInterface* portInterface = numericPort->getPortInterface();
-        if (!portInterface)
-          continue;
-        MatrixPortInterface* matrixPortInterface;
-        matrixPortInterface = portInterface->toMatrixPortInterface();
-        if (!matrixPortInterface)
-          continue;
-        
-        std::string name;
-        name = outputStringSet.makeUnique(model.getOutputPort(i)->getName());
-        _dumperList.push_back(new MatrixDumper(matrixPortInterface, outputGroup.getId(), name));
-      }
+private:
+  const AbstractNodeInstance* getNodeInstance(const NodePath& nodePath) const
+  {
+    /// FIXME, use a map for that???
+    NodeInstanceList::const_iterator i;
+    for (i = mSystem->getNodeInstanceList().begin();
+         i != mSystem->getNodeInstanceList().end(); ++i) {
+      if ((*i)->getNodePath() == nodePath)
+        return (*i);
     }
+    return 0;
   }
-  virtual void apply(ModelGroup& modelGroup)
+
+  void appendPortValues(const AbstractNodeInstance& nodeInstance)
   {
-    HDF5Group parentGroup = _group;
-    _group = HDF5Group(_group, modelGroup.getName()),
+    UniqueStringSet uniqueStringSet;
 
-    dumpObject(_group, modelGroup);
+    HDF5Group portValuesGroup(mCurrentGroup, "portValues");
+    unsigned numPorts = nodeInstance.getNode().getNumPorts();
+    for (unsigned i = 0; i < numPorts; ++i) {
+      const PortValue* portValue;
+      portValue = nodeInstance.getPortValueList().getPortValue(i);
+      const NumericPortValue* npv;
+      npv = dynamic_cast<const NumericPortValue*>(portValue);
+      if (!npv)
+        continue;
+      std::string name = nodeInstance.getNode().getPort(i)->getName();
+      name = uniqueStringSet.makeUnique(name);
+      mDumperList.push_back(new MatrixDumper(npv, portValuesGroup, name));
+    }
+  }
+  void appendPortValues(const Node& node)
+  {
+    const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
+    OpenFDMAssert(nodeInstance);
+    appendPortValues(*nodeInstance);
+  }
 
-    traverse(modelGroup);
-    _group = parentGroup;
+  virtual void apply(const Node& node)
+  {
+    HDF5Group parentGroup = mCurrentGroup;
+    mCurrentGroup = HDF5Group(parentGroup, node.getName());
+    appendPortValues(node);
+    mCurrentGroup = parentGroup;
   }
-  virtual void apply(System& system)
+  virtual void apply(const Group& group)
   {
-    if (_dumperList.empty())
-      ModelVisitor::apply(system);
-    _ts.append(system.getTime());
-    for (DumperList::iterator i = _dumperList.begin(); i != _dumperList.end();
-         ++i) {
-      (*i)->append();
-    }
+    HDF5Group parentGroup = mCurrentGroup;
+    mCurrentGroup = HDF5Group(parentGroup, group.getName());
+
+    appendPortValues(group);
+    group.traverse(*this);
+
+    mCurrentGroup = parentGroup;
   }
 
-private:
+  // FIXME: do we need???
+  SharedPtr<const System> mSystem;
+
+  HDF5File mHDF5File;
+  HDF5Group mCurrentGroup;
+  HDFMatrixStream mTimeStream;
+
+  struct MatrixDumper : public Referenced {
+    MatrixDumper(const NumericPortValue* numericPortValue,
+                 const HDF5Object& parent, const std::string& name) :
+      mNumericPortValue(numericPortValue),
+      _stream(parent, name)
+    { OpenFDMAssert(numericPortValue); }
+    void append()
+    { _stream.append(mNumericPortValue->getValue()); }
+
+    SharedPtr<const NumericPortValue> mNumericPortValue;
+    HDFMatrixStream _stream;
+  };
+
+  typedef std::list<SharedPtr<MatrixDumper> > DumperList;
+  DumperList mDumperList;
+
+  // Helper class that makes names unique ...
   struct UniqueStringSet {
     std::string makeUnique(const std::string& s)
     {
@@ -257,55 +309,6 @@
   private:
     std::set<std::string> _strings;
   };
-
-  void dumpObject(HDF5Object& parent, Object& object)
-  {
-    HDF5Group propertyGroup(parent, "properties");
-    std::vector<PropertyInfo> propertyInfoList;
-    object.getPropertyInfoList(propertyInfoList);
-    std::vector<PropertyInfo>::const_iterator i;
-    for (i = propertyInfoList.begin(); i != propertyInfoList.end(); ++i) {
-      std::string name = i->getName();
-      Variant v;
-      if (!object.getPropertyValue(name, v))
-        continue;
-      if (v.isMatrix()) {
-        HDFMatrixStream value(propertyGroup, name);
-        value.append(v.toMatrix());
-      } if (v.isReal()) {
-        HDFMatrixStream value(propertyGroup, name);
-        value.append(v.toReal());
-      } if (v.isInteger()) {
-        // FIXME, converts to double ...
-        HDFMatrixStream value(propertyGroup, name);
-        value.append(v.toInteger());
-      } if (v.isUnsigned()) {
-        // FIXME, converts to double ...
-        HDFMatrixStream value(propertyGroup, name);
-        value.append(v.toUnsigned());
-      }
-    }
-  }
-
-  HDF5File _hdf5File;
-  HDF5Group _group;
-
-  HDFMatrixStream _ts;
-
-  struct MatrixDumper : public Referenced {
-    MatrixDumper(MatrixPortInterface* matrixPortInterface, const HDF5Object& parent, const std::string& name) :
-      _matrixPortInterface(matrixPortInterface),
-      _stream(parent, name)
-    { }
-    void append()
-    { _stream.append(_matrixPortInterface->getMatrixValue()); }
-
-    SharedPtr<MatrixPortInterface> _matrixPortInterface;
-    HDFMatrixStream _stream;
-  };
-
-  typedef std::list<SharedPtr<MatrixDumper> > DumperList;
-  DumperList _dumperList;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/test/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/Makefile.am	2008-10-04 14:12:57 UTC (rev 556)
+++ branches/OpenFDM-StateSeparation/src/test/Makefile.am	2008-10-04 14:28:51 UTC (rev 557)
@@ -19,7 +19,7 @@
 quattest_LDADD = ../OpenFDM/libOpenFDM.la
 
 structure_SOURCES = structure.cpp
-structure_LDADD = ../OpenFDM/libOpenFDM.la
+structure_LDADD = ../OpenFDM/libOpenFDM.la -lhdf5
 
 # simulationtime_SOURCES = simulationtime.cpp
 # simulationtime_LDADD = ../OpenFDM/libOpenFDM.la

Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-04 14:12:57 UTC (rev 556)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-04 14:28:51 UTC (rev 557)
@@ -6,6 +6,8 @@
 #include <OpenFDM/Group.h>
 #include <OpenFDM/System.h>
 
+#include "HDF5Writer.h"
+
 using namespace OpenFDM;
 
 Node* buildGroupExample()
@@ -78,19 +80,14 @@
   if (!system->init())
     return 1;
 
-  NodeInstanceList::const_iterator i;
-  for (i = system->getNodeInstanceList().begin();
-       i != system->getNodeInstanceList().end(); ++i) {
-    std::cout << (*i)->getNodeNamePath() << std::endl;
-    for (unsigned k = 0; k < (*i)->getNode().getNumPorts(); ++k) {
-      std::cout << "  " << (*i)->getNode().getPort(k)->getName() << " "
-                << (*i)->getPortValueList().getPortValue(k);
-      const NumericPortValue* npv =
-        dynamic_cast<const NumericPortValue*>((*i)->getPortValueList().getPortValue(k));
-      if (npv)
-        std::cout << " " << npv->getValue();
-      std::cout << std::endl;
-    }
+  HDF5Log log("system.h5");
+  log.attachTo(system);
+  log.dump();
+
+  double h = 0.01;
+  while (system->getTime() < 10) {
+    system->simulate(system->getTime() + h);
+    log.dump();
   }
 
   return 0;



From frohlich at mail.berlios.de  Sat Oct  4 17:03:31 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 4 Oct 2008 17:03:31 +0200
Subject: [OpenFDM-svn] r558 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200810041503.m94F3VXh000438@sheep.berlios.de>

Author: frohlich
Date: 2008-10-04 17:03:31 +0200 (Sat, 04 Oct 2008)
New Revision: 558

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
Log:
More automatic unique names for the HDF5 stuff.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-04 14:28:51 UTC (rev 557)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-04 15:03:31 UTC (rev 558)
@@ -654,7 +654,7 @@
 bool
 System::simulate(const real_type& t)
 {
-  if (mAbstractSystem)
+  if (!mAbstractSystem)
     return false;
   mAbstractSystem->outputAt(t);
   return true;

Modified: branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-04 14:28:51 UTC (rev 557)
+++ branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-04 15:03:31 UTC (rev 558)
@@ -251,26 +251,63 @@
   virtual void apply(const Node& node)
   {
     HDF5Group parentGroup = mCurrentGroup;
-    mCurrentGroup = HDF5Group(parentGroup, node.getName());
+    std::string name = node.getName();
+    name = mCurrentUniqueStringSet.makeUnique(name);
+
+    std::cout << name << std::endl;
+    mCurrentGroup = HDF5Group(parentGroup, name);
     appendPortValues(node);
     mCurrentGroup = parentGroup;
   }
   virtual void apply(const Group& group)
   {
     HDF5Group parentGroup = mCurrentGroup;
-    mCurrentGroup = HDF5Group(parentGroup, group.getName());
+    std::string name = group.getName();
+    name = mCurrentUniqueStringSet.makeUnique(name);
+    std::cout << name << std::endl;
+    mCurrentGroup = HDF5Group(parentGroup, name);
 
     appendPortValues(group);
+
+    UniqueStringSet parentUniqueStringSet;
+    parentUniqueStringSet.swap(mCurrentUniqueStringSet);
     group.traverse(*this);
+    parentUniqueStringSet.swap(mCurrentUniqueStringSet);
 
     mCurrentGroup = parentGroup;
   }
 
+  // Helper class that makes names unique ...
+  struct UniqueStringSet {
+    UniqueStringSet()
+    { _strings.insert(""); }
+    std::string makeUnique(const std::string& s)
+    {
+      if (_strings.find(s) == _strings.end()) {
+        _strings.insert(s);
+        return s;
+      }
+      std::string unique;
+      unsigned id = 0;
+      do {
+        std::stringstream ss;
+        ss << s << ++id;
+        unique = ss.str();
+      } while (_strings.find(unique) != _strings.end());
+      return unique;
+    }
+    void swap(UniqueStringSet other)
+    { _strings.swap(other._strings); }
+  private:
+    std::set<std::string> _strings;
+  };
+
   // FIXME: do we need???
   SharedPtr<const System> mSystem;
 
   HDF5File mHDF5File;
   HDF5Group mCurrentGroup;
+  UniqueStringSet mCurrentUniqueStringSet;
   HDFMatrixStream mTimeStream;
 
   struct MatrixDumper : public Referenced {
@@ -288,27 +325,6 @@
 
   typedef std::list<SharedPtr<MatrixDumper> > DumperList;
   DumperList mDumperList;
-
-  // Helper class that makes names unique ...
-  struct UniqueStringSet {
-    std::string makeUnique(const std::string& s)
-    {
-      if (_strings.find(s) == _strings.end()) {
-        _strings.insert(s);
-        return s;
-      }
-      std::string unique;
-      unsigned id = 0;
-      do {
-        std::stringstream ss;
-        ss << s << ++id;
-        unique = ss.str();
-      } while (_strings.find(unique) != _strings.end());
-      return unique;
-    }
-  private:
-    std::set<std::string> _strings;
-  };
 };
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Sat Oct  4 17:07:46 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 4 Oct 2008 17:07:46 +0200
Subject: [OpenFDM-svn] r559 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200810041507.m94F7kfe000705@sheep.berlios.de>

Author: frohlich
Date: 2008-10-04 17:07:46 +0200 (Sat, 04 Oct 2008)
New Revision: 559

Modified:
   branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
Log:
Oops, some cout's left.


Modified: branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-04 15:03:31 UTC (rev 558)
+++ branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-04 15:07:46 UTC (rev 559)
@@ -253,8 +253,6 @@
     HDF5Group parentGroup = mCurrentGroup;
     std::string name = node.getName();
     name = mCurrentUniqueStringSet.makeUnique(name);
-
-    std::cout << name << std::endl;
     mCurrentGroup = HDF5Group(parentGroup, name);
     appendPortValues(node);
     mCurrentGroup = parentGroup;
@@ -264,7 +262,6 @@
     HDF5Group parentGroup = mCurrentGroup;
     std::string name = group.getName();
     name = mCurrentUniqueStringSet.makeUnique(name);
-    std::cout << name << std::endl;
     mCurrentGroup = HDF5Group(parentGroup, name);
 
     appendPortValues(group);



From frohlich at mail.berlios.de  Sun Oct  5 14:51:50 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 5 Oct 2008 14:51:50 +0200
Subject: [OpenFDM-svn] r560 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200810051251.m95CpoWU018316@sheep.berlios.de>

Author: frohlich
Date: 2008-10-05 14:51:50 +0200 (Sun, 05 Oct 2008)
New Revision: 560

Modified:
   branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Factor out some common functionality for the output log stuff.


Modified: branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-04 15:07:46 UTC (rev 559)
+++ branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-05 12:51:50 UTC (rev 560)
@@ -7,6 +7,7 @@
 
 #include <sstream>
 #include <set>
+#include <map>
 #include <hdf5.h>
 #include <OpenFDM/System.h>
 #include <OpenFDM/ConstNodeVisitor.h>
@@ -30,7 +31,7 @@
   { return _id; }
 
   int getNumReferences() const
-  { return H5Iget_ref(_id); }
+  { if (_id < 0) return 0; return H5Iget_ref(_id); }
   bool valid() const
   { return 0 <= _id && H5I_BADID != H5Iget_type(_id); }
 
@@ -54,17 +55,25 @@
   }
 
 protected:
+  // Assign this object a new reference, the reference count is not incremented
+  // in this method
+  void assignNewRef(hid_t id)
+  {
+    if (_id == id)
+      return;
+    release();
+    _id = id;
+  }
   void assign(hid_t id)
   {
     if (_id == id)
       return;
-    if (_id < 0 || H5I_BADID == H5Iget_type(_id))
-      release();
-    H5Iinc_ref(id);
+    if (0 <= id && H5I_BADID != H5Iget_type(id))
+      H5Iinc_ref(id);
     release();
     _id = id;
   }
-// private:
+private:
   hid_t _id;
 };
 
@@ -78,15 +87,27 @@
 
   bool create(const HDF5Object& parent, const std::string& name)
   {
+    hid_t id;
 #if (1 < H5_VERS_MAJOR || (1 == H5_VERS_MAJOR && 8 <= H5_VERS_MINOR))
-    _id = H5Gcreate(parent.getId(), name.c_str(),  H5P_DEFAULT,  H5P_DEFAULT,  H5P_DEFAULT);
+    id = H5Gcreate(parent.getId(), name.c_str(), H5P_DEFAULT, H5P_DEFAULT,
+                   H5P_DEFAULT);
 #else
-    _id = H5Gcreate(parent.getId(), name.c_str(), 0);
+    id = H5Gcreate(parent.getId(), name.c_str(), 0);
 #endif
-    if (_id < 0)
-      return false;
-    return true;
+    assignNewRef(id);
+    return 0 < id;
   }
+
+//   bool link(const HDF5Object& object, const std::string& name)
+//   {
+//     if (!valid())
+//       return false;
+//     if (!object.valid())
+//       return false;
+//     int status = H5Olink(object.getId(), getId(), name.c_str(),
+//                          H5P_DEFAULT, H5P_DEFAULT);
+//     return 0 <= status;
+//   }
 };
 
 class HDF5File : public HDF5Object {
@@ -96,7 +117,10 @@
   HDF5File(const std::string& filename)
   { open(filename); }
   void open(const std::string& name)
-  { _id = H5Fcreate(name.c_str(), H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT); }
+  {
+    hid_t id = H5Fcreate(name.c_str(), H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
+    assignNewRef(id);
+  }
 };
 
 class HDFMatrixStream : public HDF5Object {
@@ -118,7 +142,7 @@
   void append(const Matrix& matrix)
   {
     herr_t status;
-    if (_id < 0) {
+    if (!valid()) {
       hsize_t rank = 3;
       if (cols(matrix) == 1) {
         rank = 2;
@@ -137,21 +161,23 @@
 
       hid_t cparms = H5Pcreate(H5P_DATASET_CREATE);
       status = H5Pset_chunk(cparms, rank, chunk_dims);
+      hid_t id;
 #if (1 < H5_VERS_MAJOR || (1 == H5_VERS_MAJOR && 8 <= H5_VERS_MINOR))
-      _id = H5Dcreate(_parent.getId(), _name.c_str(), H5T_NATIVE_DOUBLE,
+      id = H5Dcreate(_parent.getId(), _name.c_str(), H5T_NATIVE_DOUBLE,
                       _dataspace.getId(), H5P_DEFAULT, cparms, H5P_DEFAULT);
 #else
-      _id = H5Dcreate(_parent.getId(), _name.c_str(), H5T_NATIVE_DOUBLE,
+      id = H5Dcreate(_parent.getId(), _name.c_str(), H5T_NATIVE_DOUBLE,
                       _dataspace.getId(), cparms);
 #endif
+      assignNewRef(id);
       H5Pclose(cparms);
     } else {
       // increment size
       _dims[0] += 1;
-      status = H5Dextend(_id, _dims);
+      status = H5Dextend(getId(), _dims);
     }
 
-    HDF5Object filespace = H5Dget_space(_id);
+    HDF5Object filespace = H5Dget_space(getId());
     hsize_t offset[3] = { _dims[0] - 1, 0, 0 };
     hsize_t dims1[3] = { 1, _dims[1], _dims[2] };
     status = H5Sselect_hyperslab(filespace.getId(), H5S_SELECT_SET,
@@ -178,81 +204,121 @@
   HDF5Object _parent;
 };
 
+class DataLogObject : public ConstNodeVisitor {
+public:
+  virtual ~DataLogObject() {}
 
+  virtual void output(const real_type& t) = 0;
 
-
-class HDF5Log : protected ConstNodeVisitor {
-public:
-  HDF5Log(const std::string& filename) :
-    mHDF5File(filename),
-    mCurrentGroup(mHDF5File, "System"),
-    mTimeStream(mCurrentGroup.getId(), "t")
-  { }
-  ~HDF5Log()
-  { }
-
   void attachTo(const System* system)
   {
+    mNodeInstanceMap.clear();
     if (!system)
       return;
-    if (!system->getNode())
-      return;
-    mSystem = system;
+    // Build an index to the system nodes
+    NodeInstanceList::const_iterator i;
+    for (i = system->getNodeInstanceList().begin();
+         i != system->getNodeInstanceList().end(); ++i) {
+      mNodeInstanceMap[(*i)->getNodePath()] = *i;
+    }
     system->getNode()->accept(*this);
   }
 
-  void dump()
-  {
-    if (mSystem)
-      mTimeStream.append(mSystem->getTime());
-    DumperList::iterator i;
-    for (i = mDumperList.begin(); i != mDumperList.end(); ++i)
-      (*i)->append();
-  }
+  virtual void apply(const PortInfo* portInfo, const PortValue* portValue)
+  { }
+  virtual void apply(const PortInfo* portInfo,
+                     const NumericPortValue* numericPortValue)
+  { apply(portInfo, static_cast<const PortValue*>(numericPortValue)); }
+  virtual void apply(const PortInfo* portInfo,
+                     const MechanicPortValue* mechanicPortValue)
+  { apply(portInfo, static_cast<const PortValue*>(mechanicPortValue)); }
 
-private:
+protected:
   const AbstractNodeInstance* getNodeInstance(const NodePath& nodePath) const
   {
-    /// FIXME, use a map for that???
-    NodeInstanceList::const_iterator i;
-    for (i = mSystem->getNodeInstanceList().begin();
-         i != mSystem->getNodeInstanceList().end(); ++i) {
-      if ((*i)->getNodePath() == nodePath)
-        return (*i);
-    }
-    return 0;
+    NodeInstanceMap::const_iterator i = mNodeInstanceMap.find(nodePath);
+    if (i == mNodeInstanceMap.end())
+      return 0;
+    return i->second;
   }
-
+  void appendPortValues(const Node&)
+  {
+    const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
+    appendPortValues(*nodeInstance);
+  }
   void appendPortValues(const AbstractNodeInstance& nodeInstance)
   {
-    UniqueStringSet uniqueStringSet;
-
-    HDF5Group portValuesGroup(mCurrentGroup, "portValues");
     unsigned numPorts = nodeInstance.getNode().getNumPorts();
     for (unsigned i = 0; i < numPorts; ++i) {
       const PortValue* portValue;
       portValue = nodeInstance.getPortValueList().getPortValue(i);
       const NumericPortValue* npv;
       npv = dynamic_cast<const NumericPortValue*>(portValue);
-      if (!npv)
+      if (npv) {
+        apply(nodeInstance.getNode().getPort(i), npv);
         continue;
-      std::string name = nodeInstance.getNode().getPort(i)->getName();
-      name = uniqueStringSet.makeUnique(name);
-      mDumperList.push_back(new MatrixDumper(npv, portValuesGroup, name));
+      }
+
+      const MechanicPortValue* mpv;
+      mpv = dynamic_cast<const MechanicPortValue*>(portValue);
+      if (npv) {
+        apply(nodeInstance.getNode().getPort(i), mpv);
+        continue;
+      }
+
+      apply(nodeInstance.getNode().getPort(i), portValue);
     }
   }
+
+private:
+  typedef std::map<NodePath, SharedPtr<const AbstractNodeInstance> > NodeInstanceMap;
+  NodeInstanceMap mNodeInstanceMap;
+};
+
+
+class HDF5Log : public DataLogObject {
+public:
+  HDF5Log(const std::string& filename) :
+    mHDF5File(filename),
+    mCurrentGroup(mHDF5File, "System"),
+    mTimeStream(mCurrentGroup.getId(), "t")
+  { }
+  ~HDF5Log()
+  { }
+
+// private:
+  void output(const real_type& t)
+  {
+    mTimeStream.append(t);
+    DumperList::iterator i;
+    for (i = mDumperList.begin(); i != mDumperList.end(); ++i)
+      (*i)->append();
+  }
+
+  virtual void apply(const PortInfo* portInfo,
+                     const NumericPortValue* numericPortValue)
+  {
+    OpenFDMAssert(mCurrentPortValuesGroup.valid());
+    std::string name = portInfo->getName();
+    name = mCurrentPortValuesUniqueStringSet.makeUnique(name);
+    mDumperList.push_back(new MatrixDumper(numericPortValue, mCurrentPortValuesGroup, name));
+  }
+
   void appendPortValues(const Node& node)
   {
-    const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
-    OpenFDMAssert(nodeInstance);
-    appendPortValues(*nodeInstance);
+    OpenFDMAssert(mCurrentGroup.valid());
+    mCurrentPortValuesGroup = HDF5Group(mCurrentGroup, "portValues");
+    DataLogObject::appendPortValues(node);
+    mCurrentPortValuesGroup = HDF5Group();
+    mCurrentPortValuesUniqueStringSet = UniqueStringSet();
   }
 
   virtual void apply(const Node& node)
   {
     HDF5Group parentGroup = mCurrentGroup;
+    OpenFDMAssert(mCurrentGroup.valid());
     std::string name = node.getName();
-    name = mCurrentUniqueStringSet.makeUnique(name);
+    name = mCurrentGroupUniqueStringSet.makeUnique(name);
     mCurrentGroup = HDF5Group(parentGroup, name);
     appendPortValues(node);
     mCurrentGroup = parentGroup;
@@ -260,16 +326,17 @@
   virtual void apply(const Group& group)
   {
     HDF5Group parentGroup = mCurrentGroup;
+    OpenFDMAssert(mCurrentGroup.valid());
     std::string name = group.getName();
-    name = mCurrentUniqueStringSet.makeUnique(name);
+    name = mCurrentGroupUniqueStringSet.makeUnique(name);
     mCurrentGroup = HDF5Group(parentGroup, name);
 
     appendPortValues(group);
 
     UniqueStringSet parentUniqueStringSet;
-    parentUniqueStringSet.swap(mCurrentUniqueStringSet);
+    parentUniqueStringSet.swap(mCurrentGroupUniqueStringSet);
     group.traverse(*this);
-    parentUniqueStringSet.swap(mCurrentUniqueStringSet);
+    parentUniqueStringSet.swap(mCurrentGroupUniqueStringSet);
 
     mCurrentGroup = parentGroup;
   }
@@ -293,20 +360,25 @@
       } while (_strings.find(unique) != _strings.end());
       return unique;
     }
-    void swap(UniqueStringSet other)
+    void swap(UniqueStringSet& other)
     { _strings.swap(other._strings); }
   private:
     std::set<std::string> _strings;
   };
 
-  // FIXME: do we need???
-  SharedPtr<const System> mSystem;
-
   HDF5File mHDF5File;
   HDF5Group mCurrentGroup;
-  UniqueStringSet mCurrentUniqueStringSet;
   HDFMatrixStream mTimeStream;
 
+  UniqueStringSet mCurrentPortValuesUniqueStringSet;
+  UniqueStringSet mCurrentGroupUniqueStringSet;
+
+  HDF5Group mCurrentPortValuesGroup;
+
+  // Only hdf5 version >= 1.8 can do hard links
+//   typedef std::map<const PortValue*, SharedPtr<HDF5Object> > PortValueMap;
+//   PortValueMap mPortValueMap;
+
   struct MatrixDumper : public Referenced {
     MatrixDumper(const NumericPortValue* numericPortValue,
                  const HDF5Object& parent, const std::string& name) :

Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-04 15:07:46 UTC (rev 559)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-05 12:51:50 UTC (rev 560)
@@ -82,12 +82,12 @@
 
   HDF5Log log("system.h5");
   log.attachTo(system);
-  log.dump();
+  log.output(system->getTime());
 
   double h = 0.01;
   while (system->getTime() < 10) {
     system->simulate(system->getTime() + h);
-    log.dump();
+    log.output(system->getTime());
   }
 
   return 0;



From frohlich at mail.berlios.de  Sun Oct  5 15:13:43 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 5 Oct 2008 15:13:43 +0200
Subject: [OpenFDM-svn] r561 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200810051313.m95DDhWj020328@sheep.berlios.de>

Author: frohlich
Date: 2008-10-05 15:13:43 +0200 (Sun, 05 Oct 2008)
New Revision: 561

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.h
   branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
Log:
Hve that poer node path map in the system.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h	2008-10-05 12:51:50 UTC (rev 560)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h	2008-10-05 13:13:43 UTC (rev 561)
@@ -6,6 +6,8 @@
 #define OpenFDM_AbstractNodeInstance_H
 
 #include <string>
+#include <list>
+#include <map>
 #include "AbstractNodeContext.h"
 #include "Assert.h"
 #include "Node.h"
@@ -58,6 +60,8 @@
 };
 
 typedef std::list<SharedPtr<AbstractNodeInstance> > NodeInstanceList;
+typedef std::list<SharedPtr<const AbstractNodeInstance> > ConstNodeInstanceList;
+typedef std::map<NodePath, SharedPtr<AbstractNodeInstance> > NodeInstanceMap;
 
 } // namespace OpenFDM
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h	2008-10-05 12:51:50 UTC (rev 560)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h	2008-10-05 13:13:43 UTC (rev 561)
@@ -7,6 +7,7 @@
 
 #include "Assert.h"
 #include "Node.h"
+#include "Referenced.h"
 
 namespace OpenFDM {
 
@@ -23,7 +24,7 @@
 class RootJoint;
 class Interact;
 
-class ConstNodeVisitor {
+class ConstNodeVisitor : public Referenced {
 public:
   virtual ~ConstNodeVisitor();
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h	2008-10-05 12:51:50 UTC (rev 560)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h	2008-10-05 13:13:43 UTC (rev 561)
@@ -7,6 +7,7 @@
 
 #include "Assert.h"
 #include "Node.h"
+#include "Referenced.h"
 
 namespace OpenFDM {
 
@@ -23,7 +24,7 @@
 class RootJoint;
 class Interact;
 
-class NodeVisitor {
+class NodeVisitor : public Referenced {
 public:
   virtual ~NodeVisitor();
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-05 12:51:50 UTC (rev 560)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-05 13:13:43 UTC (rev 561)
@@ -638,7 +638,12 @@
   
   // Have something to run in our hands.
   // Not get the information required to reflect the system to the user.
-  mNodeInstanceList.swap(nodeInstanceCollector._nodeInstanceList);
+  NodeInstanceList::iterator i;
+  for (i = nodeInstanceCollector._nodeInstanceList.begin();
+       i != nodeInstanceCollector._nodeInstanceList.end(); ++i) {
+    mNodeInstanceMap[(*i)->getNodePath()] = *i;
+    mNodeInstanceList.push_back(*i);
+  }
   
   return true;
 }
@@ -648,6 +653,7 @@
 {
   mAbstractSystem = 0;
   mNodeInstanceList.clear();
+  mNodeInstanceMap.clear();
 }
 
 /// Simulate the system until the time tEnd

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.h	2008-10-05 12:51:50 UTC (rev 560)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.h	2008-10-05 13:13:43 UTC (rev 561)
@@ -40,16 +40,32 @@
   /// Return the current simulation time, convenience function
   real_type getTime(void) const;
 
-  const NodeInstanceList& getNodeInstanceList() const
+  const ConstNodeInstanceList& getNodeInstanceList() const
   { return mNodeInstanceList; }
 
+  const AbstractNodeInstance* getNodeInstance(const NodePath& nodePath) const
+  {
+    NodeInstanceMap::const_iterator i = mNodeInstanceMap.find(nodePath);
+    if (i == mNodeInstanceMap.end())
+      return 0;
+    return i->second;
+  }
+  AbstractNodeInstance* getNodeInstance(const NodePath& nodePath)
+  {
+    NodeInstanceMap::const_iterator i = mNodeInstanceMap.find(nodePath);
+    if (i == mNodeInstanceMap.end())
+      return 0;
+    return i->second;
+  }
+
 private:
   class NodeInstanceCollector;
 
   SharedPtr<Node> mNode;
 
   SharedPtr<AbstractSystem> mAbstractSystem;
-  NodeInstanceList mNodeInstanceList;
+  ConstNodeInstanceList mNodeInstanceList;
+  NodeInstanceMap mNodeInstanceMap;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-05 12:51:50 UTC (rev 560)
+++ branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-05 13:13:43 UTC (rev 561)
@@ -216,7 +216,7 @@
     if (!system)
       return;
     // Build an index to the system nodes
-    NodeInstanceList::const_iterator i;
+    ConstNodeInstanceList::const_iterator i;
     for (i = system->getNodeInstanceList().begin();
          i != system->getNodeInstanceList().end(); ++i) {
       mNodeInstanceMap[(*i)->getNodePath()] = *i;



From frohlich at mail.berlios.de  Sun Oct  5 15:15:31 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 5 Oct 2008 15:15:31 +0200
Subject: [OpenFDM-svn] r562 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200810051315.m95DFVJv020656@sheep.berlios.de>

Author: frohlich
Date: 2008-10-05 15:15:30 +0200 (Sun, 05 Oct 2008)
New Revision: 562

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractSystem.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Dump first attemp to execute continous systems.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractSystem.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractSystem.h	2008-10-05 13:13:43 UTC (rev 561)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractSystem.h	2008-10-05 13:15:30 UTC (rev 562)
@@ -28,9 +28,17 @@
   {
     // Cry if we cannot do anything!
     OpenFDMAssert(!getValidityInterval().empty());
+
+//     if (equal(getTime(), getValidityInterval().getEnd())
+//     continousUpdate(tEnd);
+
     // update until our requested end time is in the current interval.
-    while (needUpdate(t))
-      update(t);
+    while (needUpdate(t)) {
+      discreteUpdate();
+
+      real_type tEnd = min(getValidityInterval().getEnd(), t);
+      continousUpdate(tEnd);
+    }
     if (t != mTime)
       output(t);
   }
@@ -46,13 +54,20 @@
                        << mValidityInterval.getEnd() << std::endl;
   }
 
-  void update(const real_type& tEndHint)
+  void discreteUpdate()
   {
-    updateImplementation(tEndHint);
+    discreteUpdateImplementation();
     Log(Schedule,Info) << "Updated to time Interval from t = "
                        << mValidityInterval.getBegin() << " to t = "
                        << mValidityInterval.getEnd() << std::endl;
   }
+  void continousUpdate(const real_type& tEnd)
+  {
+    continousUpdateImplementation(tEnd);
+    Log(Schedule,Info) << "Updated to time Interval from t = "
+                       << mValidityInterval.getBegin() << " to t = "
+                       << mValidityInterval.getEnd() << std::endl;
+  }
   void output(const real_type& t)
   {
     OpenFDMAssert(getValidityInterval().contains(t));
@@ -60,6 +75,16 @@
     outputImplementation(mTime);
     Log(Schedule,Info) << "Output for time t =  " << t << std::endl;
   }
+
+  /// FIXME: make that non virtual, but keep that up to date in the
+  /// implementation.
+  /// Hmm that interval concept is better????
+//   virtual real_type getNextDiscreteSampleHit() const
+//   {
+//     // Hmm, is this not enough for the sample hits??
+//     return mValidityInterval.getEnd();
+//   }
+
 protected:
 
   void setValidityInterval(const TimeInterval& validityInterval)
@@ -69,7 +94,8 @@
 
   bool needUpdate(const real_type& t) const
   { return getValidityInterval().isStrictlyLeftOf(t); }
-  virtual void updateImplementation(const real_type& tEndHint) = 0;
+  virtual void discreteUpdateImplementation() = 0;
+  virtual void continousUpdateImplementation(const real_type& tEnd) = 0;
 
   virtual void outputImplementation(const real_type& t) = 0;
 
@@ -78,12 +104,90 @@
   real_type mTime;
 };
 
-// FIXME: dump them here for now. Will be required later ...
 class EnabledSystem : public AbstractSystem {
+public:
+  enum EnableMode {
+    /// If disabled, the models output/state is just held.
+    /// On reenable, the model just continues to work
+    Hold,
+    /// If disabled, the models output/state is just held.
+    /// On reenable, the model is initialized
+    HoldReset,
+    /// If disabled, the models output/state is initialized
+    ResetHold
+  };
+
+  EnableMode getEnableMode(void) const
+  { return mEnableMode; }
+  void setEnableMode(EnableMode enableMode)
+  { mEnableMode = enableMode; }
+
+  void setSystem(AbstractSystem* system)
+  { mAbstractSystem = system; }
+  AbstractSystem* getSystem() const
+  { return mAbstractSystem; }
+
+  void setPortValue(NumericPortValue* portValue)
+  { mEnablePort = portValue; }
+  NumericPortValue* getPortValue() const
+  { return mEnablePort; }
+
+protected:
+  virtual void initImplementation(const real_type& t)
+  {
+    mEnabledState = getEnableInput();
+    mAbstractSystem->init(t);
+  }
+  virtual void discreteUpdateImplementation()
+  {
+    if (getEnableInput()) {
+      if (mEnabledState) {
+      } else {
+        if (mEnableMode == HoldReset) {
+          mAbstractSystem->init(getTime());
+        }       
+      }
+      mEnabledState = true;
+      mAbstractSystem->discreteUpdate();
+    } else {
+      if (mEnabledState) {
+        if (mEnableMode == ResetHold) {
+          mAbstractSystem->init(getTime());
+        }
+      } else {
+      }
+      mEnabledState = false;
+    }
+  }
+  virtual void continousUpdateImplementation(const real_type& tEnd)
+  {
+    if (!mEnabledState)
+      return;
+    mAbstractSystem->continousUpdate(tEnd);
+  }
+  virtual void outputImplementation(const real_type& t)
+  {
+    if (!mEnabledState)
+      return;
+    mAbstractSystem->output(t);
+  }
+
+  bool getEnableInput() const
+  { return 0.5 < abs(mEnablePort->getValue()(0, 0)); }
+
+private:
+  SharedPtr<AbstractSystem> mAbstractSystem;
+
+  SharedPtr<NumericPortValue> mEnablePort;
+  bool mEnabledState;
+  EnableMode mEnableMode;
 };
 
 class GroupedSystem : public AbstractSystem {
 public:
+  // FIXME: that 'nextSampleTime can be computed during the discreteUpdate
+  // step ...
+
   unsigned getNumChildren() const
   { return mAbstractSystemList.size(); }
   AbstractSystem* getChild(unsigned index)
@@ -116,19 +220,27 @@
       (*i)->init(t);
     }
   }
-  virtual void updateImplementation(const real_type& tEndHint)
+  virtual void continousUpdateImplementation(const real_type& tEnd)
   {
+//     // initially set to all
+//     TimeInterval validityInterval = TimeInterval::all();
+//     AbstractSystemList::const_iterator i;
+//     for (i = mAbstractSystemList.begin(); i != mAbstractSystemList.end(); ++i) {
+//       (*i)->update(tEndHint);
+//       if (validityInterval.getBegin() < (*i)->getValidityInterval().getBegin())
+//         validityInterval.setBegin((*i)->getValidityInterval().getBegin());
+//       if ((*i)->getValidityInterval().getEnd() < validityInterval.getEnd())
+//         validityInterval.setEnd((*i)->getValidityInterval().getEnd());
+//     }
+//     setValidityInterval(validityInterval);
+  }
+  virtual void discreteUpdateImplementation()
+  {
     // initially set to all
-    TimeInterval validityInterval = TimeInterval::all();
-    AbstractSystemList::const_iterator i;
-    for (i = mAbstractSystemList.begin(); i != mAbstractSystemList.end(); ++i) {
-      (*i)->update(tEndHint);
-      if (validityInterval.getBegin() < (*i)->getValidityInterval().getBegin())
-        validityInterval.setBegin((*i)->getValidityInterval().getBegin());
-      if ((*i)->getValidityInterval().getEnd() < validityInterval.getEnd())
-        validityInterval.setEnd((*i)->getValidityInterval().getEnd());
-    }
-    setValidityInterval(validityInterval);
+//     AbstractSystemList::const_iterator i;
+//     for (i = mAbstractSystemList.begin(); i != mAbstractSystemList.end(); ++i) {
+//       (*i)->update();
+//     }
   }
   virtual void outputImplementation(const real_type& t)
   {
@@ -141,7 +253,6 @@
   AbstractSystemList mAbstractSystemList;
 };
 
-
 } // namespace OpenFDM
 
 #endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-05 13:13:43 UTC (rev 561)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-05 13:15:30 UTC (rev 562)
@@ -12,7 +12,11 @@
 #include "NodeInstance.h"
 #include "Object.h"
 #include "RootJoint.h"
+#include "Task.h"
 
+#include "Function.h"
+#include "ExplicitEuler.h"
+
 namespace OpenFDM {
 
 
@@ -47,6 +51,164 @@
 /// FIXME: IMO THIS MUST WORK THIS WAY
 ///
 
+class ContinousSystemFunction : public Function {
+public:
+  virtual size_type inSize(void) const
+  { return mContinousTask->getNumStates(); }
+  virtual size_type outSize(void) const
+  { return mContinousTask->getNumStates(); }
+  virtual void eval(value_type t, const invector_type& v, outvector_type& out)
+  {
+    mContinousTask->setStateValue(v);
+    mContinousTask->output(t);
+    mContinousTask->derivative();
+    mContinousTask->getStateDerivative(out);
+  }
+  SharedPtr<ContinousTask> mContinousTask;
+};
+
+class DiscreteSystem : public AbstractSystem {
+  struct TimeSlice;
+public:
+  DiscreteSystem(const real_type& basicSampleTime, unsigned numSteps) :
+    mCycleTime(basicSampleTime*numSteps),
+    mBasicSampleTime(basicSampleTime)
+  {
+    DiscreteTask *discreteTask = new DiscreteTask(basicSampleTime);
+    TimeSlice timeSlice;
+    timeSlice.mTaskIndex.push_back(0);
+    mDiscreteTaskList.push_back(discreteTask);
+    mList.push_back(timeSlice);
+
+    mContinousTask = new ContinousTask;
+    mInitTask = new InitTask;
+
+    mContinousSystemFunction = new ContinousSystemFunction;
+    mContinousSystemFunction->mContinousTask = mContinousTask;
+
+    mODESolver = new ExplicitEuler;
+    mODESolver->setFunction(mContinousSystemFunction);
+  }
+
+  void appendModelContext(unsigned stride, ModelContext* modelContext)
+  {
+    // The init task contains them all
+    mInitTask->mModelContextList[0].push_back(modelContext);
+    // FIXME: decide which ones where ...
+    mDiscreteTaskList[0]->mModelContextList.push_back(modelContext);
+    mContinousTask->mModelContextList[0].push_back(modelContext);
+    mContinousTask->appendStateValuesFromLeafContext(*modelContext);
+  }
+
+protected:
+  virtual void initImplementation(const real_type& t)
+  {
+    mInitTask->init(t);
+
+    if (mList.empty())
+      return;
+
+    mList.front().mSampleHit = t;
+
+    // Set the state into the ode solver
+    Vector v;
+    mContinousTask->getStateValue(v);
+    mODESolver->setState(v);
+    mODESolver->setTime(t);
+  }
+
+  virtual void discreteUpdateImplementation()
+  {
+    if (mList.empty())
+      return;
+    // std::rotate(...) ... nein - ist ineffizient ...
+    discreteUpdate(mList.front());
+    // FIXME: do something that does not creep away ...
+    mList.front().mSampleHit += mCycleTime;
+    discreteOutput(mList.front());
+
+    // FIXME:
+    real_type startTime = getValidityInterval().getEnd();
+    real_type endTime = mBasicSampleTime + getValidityInterval().getEnd();
+    // Note that this implicitly sets the value of the next sample hit to the
+    // end of this validity interval.
+    setValidityInterval(TimeInterval(startTime, endTime));
+  }
+  void discreteUpdate(const TimeSlice& timeSlice)
+  {
+    for (unsigned i = 0; i < timeSlice.mTaskIndex.size(); ++i) {
+      unsigned index = timeSlice.mTaskIndex[i];
+      mDiscreteTaskList[index]->update(timeSlice.mSampleHit);
+    }
+  }
+  // FIXME ???
+  void discreteOutput(const TimeSlice& timeSlice)
+  {
+    for (unsigned i = 0; i < timeSlice.mTaskIndex.size(); ++i) {
+      unsigned index = timeSlice.mTaskIndex[i];
+      mDiscreteTaskList[index]->output(timeSlice.mSampleHit);
+    }
+  }
+
+  virtual void continousUpdateImplementation(const real_type& tEnd)
+  {
+    mODESolver->integrate(tEnd);
+  }
+  real_type getNextDiscreteSampleHit() const
+  {
+    OpenFDMAssert(getNextDiscreteSampleHitAlternate() == getValidityInterval().getEnd());
+    return getValidityInterval().getEnd();
+  }
+  real_type getNextDiscreteSampleHitAlternate() const
+  {
+    if (mList.empty())
+      return Limits<real_type>::max_value();
+    return mList.front().mSampleHit;
+  }
+
+  virtual void outputImplementation(const real_type& t)
+  {
+    if (mContinousTask)
+      mContinousTask->output(t);
+  }
+
+private:
+  struct TimeSlice {
+    /// The list of task indices that must be executed at this sample hit
+    std::vector<unsigned> mTaskIndex;
+    /// The time of the next sample hit
+    real_type mSampleHit;
+    /// Helps to get less drifting time values:
+    /// mCycleOffset*mCycleTime is the time offset of this slice in a complete
+    /// cycle of all slices ...
+    //const real_type mCycleOffset;
+  };
+
+  /// The time for all timeslices in the system.
+  /// Used to increment the sample hit times ...
+  /// FIXME
+  const real_type mCycleTime;
+  const real_type mBasicSampleTime;
+
+  /// The Task responsible for initializing the model contexts.
+  /// Contains all node contexts in execution order.
+  /// All other tasks just contain their relevant subsets.
+  SharedPtr<InitTask> mInitTask;
+  /// All discrete Tasks in this System.
+  std::vector<SharedPtr<DiscreteTask> > mDiscreteTaskList;
+  /// The time slice sorted list of tasks to execute on each update.
+  /// Past each update this list is rotated by one entry.
+  std::list<TimeSlice> mList;
+  /// The continous task that is used to compute continous outputs.
+  /// (should! FIXME) Contains only those tasks that change on continous output.
+  SharedPtr<ContinousTask> mContinousTask;
+  SharedPtr<ContinousSystemFunction> mContinousSystemFunction;
+  SharedPtr<ODESolver> mODESolver;
+};
+
+////////////////////////////////////////////////////////////////////
+
+// Just here so that I do not care for intationation order for now ...
 class System::NodeInstanceCollector : public ConstNodeVisitor {
 public:
 
@@ -502,15 +664,19 @@
     if (!allocModels())
       return 0;
 
-    // FIXME is here just for curiousity :)
+    // Now the system is ready for state initialization and execution
+    // Build up te abstract system and return that
+
+    // For the first cut, assume many things like basic step size and such ...
+    SharedPtr<DiscreteSystem> discreteSystem;
+    discreteSystem = new DiscreteSystem(0.01, 1);
+
     ModelInstanceList::const_iterator i;
     for (i = _modelInstanceList.begin(); i != _modelInstanceList.end(); ++i) {
-      (*i)->getNodeContext().init(*reinterpret_cast<Task*>(0));
-      (*i)->getNodeContext().output(*reinterpret_cast<Task*>(0));
+      discreteSystem->appendModelContext(1, &(*i)->getNodeContext());
     }
 
-    // FIXME:
-    return new GroupedSystem;
+    return discreteSystem.release();
   }
 
 protected:
@@ -635,7 +801,7 @@
   mAbstractSystem = nodeInstanceCollector.buildSystem();
   if (!mAbstractSystem)
     return false;
-  
+
   // Have something to run in our hands.
   // Not get the information required to reflect the system to the user.
   NodeInstanceList::iterator i;
@@ -645,6 +811,9 @@
     mNodeInstanceList.push_back(*i);
   }
   
+  // Hmm, really here???
+  mAbstractSystem->init(0);
+
   return true;
 }
 

Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-05 13:13:43 UTC (rev 561)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-05 13:15:30 UTC (rev 562)
@@ -74,8 +74,8 @@
 
 int main()
 {
-//   SharedPtr<System> system = new System("System", buildGroupExample());
-  SharedPtr<System> system = new System("System", buildDiscreteExample());
+  SharedPtr<System> system = new System("System", buildGroupExample());
+//   SharedPtr<System> system = new System("System", buildDiscreteExample());
 
   if (!system->init())
     return 1;



From frohlich at mail.berlios.de  Sun Oct  5 15:30:19 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 5 Oct 2008 15:30:19 +0200
Subject: [OpenFDM-svn] r563 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810051330.m95DUJCb023032@sheep.berlios.de>

Author: frohlich
Date: 2008-10-05 15:30:19 +0200 (Sun, 05 Oct 2008)
New Revision: 563

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
Log:
Move Group::traverse into implementation file.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-10-05 13:15:30 UTC (rev 562)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-10-05 13:30:19 UTC (rev 563)
@@ -44,6 +44,20 @@
   visitor.handleNodePathAndApply(this);
 }
 
+void Group::traverse(NodeVisitor& visitor)
+{
+  ChildList::const_iterator i;
+  for (i = _childList.begin(); i != _childList.end(); ++i)
+    (*i)->node->accept(visitor);
+}
+
+void Group::traverse(ConstNodeVisitor& visitor) const
+{
+  ChildList::const_iterator i;
+  for (i = _childList.begin(); i != _childList.end(); ++i)
+    (*i)->node->accept(visitor);
+}
+
 Group::NodeId
 Group::addChild(const SharedPtr<Node>& node)
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-05 13:15:30 UTC (rev 562)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-05 13:30:19 UTC (rev 563)
@@ -79,18 +79,8 @@
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
 
-  void traverse(NodeVisitor& visitor)
-  {
-    unsigned numChildren = getNumChildren();
-    for (unsigned i = 0; i < numChildren; ++i)
-      getChild(i)->accept(visitor);
-  }
-  void traverse(ConstNodeVisitor& visitor) const
-  {
-    unsigned numChildren = getNumChildren();
-    for (unsigned i = 0; i < numChildren; ++i)
-      getChild(i)->accept(visitor);
-  }
+  void traverse(NodeVisitor& visitor);
+  void traverse(ConstNodeVisitor& visitor) const;
 
   NodeId addChild(const SharedPtr<Node>& node);
   unsigned getNumChildren() const;



From frohlich at mail.berlios.de  Sun Oct  5 15:49:24 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 5 Oct 2008 15:49:24 +0200
Subject: [OpenFDM-svn] r564 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810051349.m95DnOVi031648@sheep.berlios.de>

Author: frohlich
Date: 2008-10-05 15:49:23 +0200 (Sun, 05 Oct 2008)
New Revision: 564

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.h
Log:
Move new node instance accessors into implementation file.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-05 13:30:19 UTC (rev 563)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-05 13:49:23 UTC (rev 564)
@@ -851,4 +851,22 @@
   return mAbstractSystem->getTime();
 }
 
+const AbstractNodeInstance*
+System::getNodeInstance(const NodePath& nodePath) const
+{
+  NodeInstanceMap::const_iterator i = mNodeInstanceMap.find(nodePath);
+  if (i == mNodeInstanceMap.end())
+    return 0;
+  return i->second;
+}
+
+AbstractNodeInstance*
+System::getNodeInstance(const NodePath& nodePath)
+{
+  NodeInstanceMap::const_iterator i = mNodeInstanceMap.find(nodePath);
+  if (i == mNodeInstanceMap.end())
+    return 0;
+  return i->second;
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.h	2008-10-05 13:30:19 UTC (rev 563)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.h	2008-10-05 13:49:23 UTC (rev 564)
@@ -40,23 +40,13 @@
   /// Return the current simulation time, convenience function
   real_type getTime(void) const;
 
+  /// Get the whole NodeInstance list
   const ConstNodeInstanceList& getNodeInstanceList() const
   { return mNodeInstanceList; }
 
-  const AbstractNodeInstance* getNodeInstance(const NodePath& nodePath) const
-  {
-    NodeInstanceMap::const_iterator i = mNodeInstanceMap.find(nodePath);
-    if (i == mNodeInstanceMap.end())
-      return 0;
-    return i->second;
-  }
-  AbstractNodeInstance* getNodeInstance(const NodePath& nodePath)
-  {
-    NodeInstanceMap::const_iterator i = mNodeInstanceMap.find(nodePath);
-    if (i == mNodeInstanceMap.end())
-      return 0;
-    return i->second;
-  }
+  /// Get node instances by their path within the system
+  const AbstractNodeInstance* getNodeInstance(const NodePath& nodePath) const;
+  AbstractNodeInstance* getNodeInstance(const NodePath& nodePath);
 
 private:
   class NodeInstanceCollector;



From frohlich at mail.berlios.de  Sun Oct  5 15:50:04 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 5 Oct 2008 15:50:04 +0200
Subject: [OpenFDM-svn] r565 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200810051350.m95Do4GA032294@sheep.berlios.de>

Author: frohlich
Date: 2008-10-05 15:50:03 +0200 (Sun, 05 Oct 2008)
New Revision: 565

Modified:
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Add a new yet unused test case.


Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-05 13:49:23 UTC (rev 564)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-05 13:50:03 UTC (rev 565)
@@ -10,6 +10,24 @@
 
 using namespace OpenFDM;
 
+// Build a system with a single gain component referencing itself
+bool testSelfReferencingDirectInput()
+{
+  Group* group = new Group("group");
+  Group::NodeId gain = group->addChild(new Gain("gain"));
+  group->connect(gain, "output", gain, "input");
+
+  SharedPtr<System> system = new System("Self referencing Gain");
+  system->setNode(group);
+
+  if (system->init()) {
+    std::cerr << "Detection of self referencing direct input loops failed!"
+              << std::endl;
+    return false;
+  }
+  return true;
+}
+
 Node* buildGroupExample()
 {
   SharedPtr<Group> group = new Group("G0");



From frohlich at mail.berlios.de  Sun Oct  5 16:31:05 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 5 Oct 2008 16:31:05 +0200
Subject: [OpenFDM-svn] r566 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200810051431.m95EV5g6009826@sheep.berlios.de>

Author: frohlich
Date: 2008-10-05 16:31:05 +0200 (Sun, 05 Oct 2008)
New Revision: 566

Modified:
   branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
Log:
Add conversion initializers from the base object.


Modified: branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-05 13:50:03 UTC (rev 565)
+++ branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-05 14:31:05 UTC (rev 566)
@@ -82,6 +82,16 @@
 public:
   HDF5Group()
   { }
+  HDF5Group(const HDF5Object& object)
+  {
+    if (!object.valid())
+      return;
+    if (H5Iget_type(object.getId()) != H5I_GROUP)
+      return;
+    assign(object.getId());
+  }
+  HDF5Group(const HDF5Group& group)
+  { assign(group.getId()); }
   HDF5Group(const HDF5Object& parent, const std::string& filename)
   { create(parent, filename); }
 
@@ -114,6 +124,16 @@
 public:
   HDF5File()
   { }
+  HDF5File(const HDF5File& file)
+  { assign(file.getId()); }
+  HDF5File(const HDF5Object& object)
+  {
+    if (!object.valid())
+      return;
+    if (H5Iget_type(object.getId()) != H5I_FILE)
+      return;
+    assign(object.getId());
+  }
   HDF5File(const std::string& filename)
   { open(filename); }
   void open(const std::string& name)



From frohlich at mail.berlios.de  Sun Oct  5 20:36:41 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 5 Oct 2008 20:36:41 +0200
Subject: [OpenFDM-svn] r567 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200810051836.m95IafcN030298@sheep.berlios.de>

Author: frohlich
Date: 2008-10-05 20:36:40 +0200 (Sun, 05 Oct 2008)
New Revision: 567

Modified:
   branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
Log:
Add assignement operators.


Modified: branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-05 14:31:05 UTC (rev 566)
+++ branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-05 18:36:40 UTC (rev 567)
@@ -59,8 +59,6 @@
   // in this method
   void assignNewRef(hid_t id)
   {
-    if (_id == id)
-      return;
     release();
     _id = id;
   }
@@ -95,6 +93,9 @@
   HDF5Group(const HDF5Object& parent, const std::string& filename)
   { create(parent, filename); }
 
+  HDF5Group& operator=(const HDF5Group& object)
+  { assign(object.getId()); return *this; }
+
   bool create(const HDF5Object& parent, const std::string& name)
   {
     hid_t id;
@@ -136,6 +137,8 @@
   }
   HDF5File(const std::string& filename)
   { open(filename); }
+  HDF5File& operator=(const HDF5File& object)
+  { assign(object.getId()); return *this; }
   void open(const std::string& name)
   {
     hid_t id = H5Fcreate(name.c_str(), H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);



From frohlich at mail.berlios.de  Sun Oct  5 21:02:32 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 5 Oct 2008 21:02:32 +0200
Subject: [OpenFDM-svn] r568 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200810051902.m95J2WXm000071@sheep.berlios.de>

Author: frohlich
Date: 2008-10-05 21:02:32 +0200 (Sun, 05 Oct 2008)
New Revision: 568

Added:
   branches/OpenFDM-StateSeparation/src/OpenFDM/SystemLog.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
Log:
Move base class to src/OpenFDM/SystemLog.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-05 18:36:40 UTC (rev 567)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-05 19:02:32 UTC (rev 568)
@@ -105,6 +105,7 @@
   StateInfoVector.h \
   StateValue.h \
   System.h \
+  SystemLog.h \
   TableData.h \
   Task.h \
   TemplateContinousStateInfo.h \

Added: branches/OpenFDM-StateSeparation/src/OpenFDM/SystemLog.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SystemLog.h	2008-10-05 18:36:40 UTC (rev 567)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SystemLog.h	2008-10-05 19:02:32 UTC (rev 568)
@@ -0,0 +1,82 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_SystemLog_H
+#define OpenFDM_SystemLog_H
+
+#include <OpenFDM/System.h>
+#include <OpenFDM/ConstNodeVisitor.h>
+#include <OpenFDM/NodeInstance.h>
+
+namespace OpenFDM {
+
+class SystemLog : public ConstNodeVisitor {
+public:
+  virtual ~SystemLog() {}
+
+  virtual void output(const real_type& t) = 0;
+
+  void attachTo(const System* system)
+  {
+    mSystem = system;
+    if (!system)
+      return;
+    system->getNode()->accept(*this);
+  }
+
+  virtual void apply(const PortInfo* portInfo, const PortValue* portValue)
+  { }
+  virtual void apply(const PortInfo* portInfo,
+                     const NumericPortValue* numericPortValue)
+  { apply(portInfo, static_cast<const PortValue*>(numericPortValue)); }
+  virtual void apply(const PortInfo* portInfo,
+                     const MechanicPortValue* mechanicPortValue)
+  { apply(portInfo, static_cast<const PortValue*>(mechanicPortValue)); }
+
+protected:
+  const AbstractNodeInstance* getNodeInstance(const NodePath& nodePath) const
+  {
+    SharedPtr<const System> system = mSystem.lock();
+    if (!system)
+      return 0;
+    return system->getNodeInstance(nodePath);
+  }
+  void appendPortValues(const Node&)
+  {
+    const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
+    if (!nodeInstance)
+      return;
+    appendPortValues(*nodeInstance);
+  }
+  void appendPortValues(const AbstractNodeInstance& nodeInstance)
+  {
+    unsigned numPorts = nodeInstance.getNode().getNumPorts();
+    for (unsigned i = 0; i < numPorts; ++i) {
+      const PortValue* portValue;
+      portValue = nodeInstance.getPortValueList().getPortValue(i);
+      const NumericPortValue* npv;
+      npv = dynamic_cast<const NumericPortValue*>(portValue);
+      if (npv) {
+        apply(nodeInstance.getNode().getPort(i), npv);
+        continue;
+      }
+
+      const MechanicPortValue* mpv;
+      mpv = dynamic_cast<const MechanicPortValue*>(portValue);
+      if (npv) {
+        apply(nodeInstance.getNode().getPort(i), mpv);
+        continue;
+      }
+
+      apply(nodeInstance.getNode().getPort(i), portValue);
+    }
+  }
+
+private:
+  WeakPtr<const System> mSystem;
+};
+
+} // namespace OpenFDM
+
+#endif

Modified: branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-05 18:36:40 UTC (rev 567)
+++ branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-05 19:02:32 UTC (rev 568)
@@ -7,11 +7,8 @@
 
 #include <sstream>
 #include <set>
-#include <map>
 #include <hdf5.h>
-#include <OpenFDM/System.h>
-#include <OpenFDM/ConstNodeVisitor.h>
-#include <OpenFDM/NodeInstance.h>
+#include <OpenFDM/SystemLog.h>
 
 namespace OpenFDM {
 
@@ -227,80 +224,8 @@
   HDF5Object _parent;
 };
 
-class DataLogObject : public ConstNodeVisitor {
+class HDF5Log : public SystemLog {
 public:
-  virtual ~DataLogObject() {}
-
-  virtual void output(const real_type& t) = 0;
-
-  void attachTo(const System* system)
-  {
-    mNodeInstanceMap.clear();
-    if (!system)
-      return;
-    // Build an index to the system nodes
-    ConstNodeInstanceList::const_iterator i;
-    for (i = system->getNodeInstanceList().begin();
-         i != system->getNodeInstanceList().end(); ++i) {
-      mNodeInstanceMap[(*i)->getNodePath()] = *i;
-    }
-    system->getNode()->accept(*this);
-  }
-
-  virtual void apply(const PortInfo* portInfo, const PortValue* portValue)
-  { }
-  virtual void apply(const PortInfo* portInfo,
-                     const NumericPortValue* numericPortValue)
-  { apply(portInfo, static_cast<const PortValue*>(numericPortValue)); }
-  virtual void apply(const PortInfo* portInfo,
-                     const MechanicPortValue* mechanicPortValue)
-  { apply(portInfo, static_cast<const PortValue*>(mechanicPortValue)); }
-
-protected:
-  const AbstractNodeInstance* getNodeInstance(const NodePath& nodePath) const
-  {
-    NodeInstanceMap::const_iterator i = mNodeInstanceMap.find(nodePath);
-    if (i == mNodeInstanceMap.end())
-      return 0;
-    return i->second;
-  }
-  void appendPortValues(const Node&)
-  {
-    const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
-    appendPortValues(*nodeInstance);
-  }
-  void appendPortValues(const AbstractNodeInstance& nodeInstance)
-  {
-    unsigned numPorts = nodeInstance.getNode().getNumPorts();
-    for (unsigned i = 0; i < numPorts; ++i) {
-      const PortValue* portValue;
-      portValue = nodeInstance.getPortValueList().getPortValue(i);
-      const NumericPortValue* npv;
-      npv = dynamic_cast<const NumericPortValue*>(portValue);
-      if (npv) {
-        apply(nodeInstance.getNode().getPort(i), npv);
-        continue;
-      }
-
-      const MechanicPortValue* mpv;
-      mpv = dynamic_cast<const MechanicPortValue*>(portValue);
-      if (npv) {
-        apply(nodeInstance.getNode().getPort(i), mpv);
-        continue;
-      }
-
-      apply(nodeInstance.getNode().getPort(i), portValue);
-    }
-  }
-
-private:
-  typedef std::map<NodePath, SharedPtr<const AbstractNodeInstance> > NodeInstanceMap;
-  NodeInstanceMap mNodeInstanceMap;
-};
-
-
-class HDF5Log : public DataLogObject {
-public:
   HDF5Log(const std::string& filename) :
     mHDF5File(filename),
     mCurrentGroup(mHDF5File, "System"),
@@ -331,7 +256,7 @@
   {
     OpenFDMAssert(mCurrentGroup.valid());
     mCurrentPortValuesGroup = HDF5Group(mCurrentGroup, "portValues");
-    DataLogObject::appendPortValues(node);
+    SystemLog::appendPortValues(node);
     mCurrentPortValuesGroup = HDF5Group();
     mCurrentPortValuesUniqueStringSet = UniqueStringSet();
   }



From frohlich at mail.berlios.de  Sun Oct  5 21:03:04 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 5 Oct 2008 21:03:04 +0200
Subject: [OpenFDM-svn] r569 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200810051903.m95J34VC000148@sheep.berlios.de>

Author: frohlich
Date: 2008-10-05 21:03:04 +0200 (Sun, 05 Oct 2008)
New Revision: 569

Modified:
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Add new example.


Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-05 19:02:32 UTC (rev 568)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-05 19:03:04 UTC (rev 569)
@@ -4,6 +4,8 @@
 #include <OpenFDM/Delay.h>
 #include <OpenFDM/Output.h>
 #include <OpenFDM/Group.h>
+#include <OpenFDM/LibraryNode.h>
+#include <OpenFDM/LibraryModel.h>
 #include <OpenFDM/System.h>
 
 #include "HDF5Writer.h"
@@ -28,7 +30,7 @@
   return true;
 }
 
-Node* buildGroupExample()
+Node* buildContinousExample()
 {
   SharedPtr<Group> group = new Group("G0");
   Group::NodeId gain = group->addChild(new Gain("gain", -1));
@@ -49,19 +51,14 @@
   group->connect(gain, "output", delay, "input");
   group->connect(delay, "output", outputDelay, "input");
 
-  //FIXME: broken naming
-//   Group::NodeId groupOutputNode = group->addAcceptorPort();
   Group::NodeId groupOutputNode = group->addProviderPort();
   group->connect(integrator2, "output", groupOutputNode, "input");
 
   SharedPtr<Group> topGroup = new Group("G1");
-  Group::NodeId child0 = topGroup->addChild(group);
-  Group::NodeId child1 = topGroup->addChild(group);
+  Group::NodeId child = topGroup->addChild(group);
 
-  Group::NodeId output0 = topGroup->addChild(new Output("O2"));
-  topGroup->connect(child0, 0, output0, 0);
-  Group::NodeId output1 = topGroup->addChild(new Output("O3"));
-  topGroup->connect(child1, 0, output1, 0);
+  Group::NodeId output0 = topGroup->addChild(new Output("Output"));
+  topGroup->connect(child, 0, output0, 0);
 
   return topGroup.release();
 }
@@ -90,10 +87,29 @@
   return group.release();
 }
 
+Node* buildLibraryNodeExample()
+{
+  SharedPtr<Node> node = buildDiscreteExample();
+  SharedPtr<LibraryModel> libraryModel = new LibraryModel("Library Model");
+  libraryModel->setNode(node);
+  
+  SharedPtr<LibraryNode> libraryNode1 = new LibraryNode("Library Node 1");
+  libraryNode1->setLibraryModel(libraryModel);
+
+  SharedPtr<LibraryNode> libraryNode2 = new LibraryNode("Library Node 2");
+  libraryNode2->setLibraryModel(libraryModel);
+
+  SharedPtr<Group> group = new Group("Group");
+  group->addChild(libraryNode1);
+  group->addChild(libraryNode2);
+  return group.release();
+}
+
 int main()
 {
-  SharedPtr<System> system = new System("System", buildGroupExample());
+  SharedPtr<System> system = new System("System", buildContinousExample());
 //   SharedPtr<System> system = new System("System", buildDiscreteExample());
+//   SharedPtr<System> system = new System("System", buildLibraryNodeExample());
 
   if (!system->init())
     return 1;



From frohlich at mail.berlios.de  Mon Oct  6 00:23:53 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 6 Oct 2008 00:23:53 +0200
Subject: [OpenFDM-svn] r570 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200810052223.m95MNr9c021347@sheep.berlios.de>

Author: frohlich
Date: 2008-10-06 00:23:53 +0200 (Mon, 06 Oct 2008)
New Revision: 570

Modified:
   branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
Log:
Fix some memory problems in the hdf5 writer


Modified: branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-05 19:03:04 UTC (rev 569)
+++ branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-05 22:23:53 UTC (rev 570)
@@ -12,13 +12,14 @@
 
 namespace OpenFDM {
 
-class HDF5Object : public Referenced {
+class HDF5Object {
 public:
   HDF5Object() : _id(-1) { }
-  HDF5Object(hid_t id) : _id(-1) { assign(id); }
+  HDF5Object(hid_t id, bool newRef) : _id(-1)
+  { if (newRef) assignNewRef(id); else assign(id); }
   HDF5Object(const HDF5Object& object) : _id(-1)
   { assign(object.getId()); }
-  virtual ~HDF5Object()
+  ~HDF5Object()
   { release(); }
 
   HDF5Object& operator=(const HDF5Object& object)
@@ -72,7 +73,6 @@
   hid_t _id;
 };
 
-
 class HDF5Group : public HDF5Object {
 public:
   HDF5Group()
@@ -95,6 +95,8 @@
 
   bool create(const HDF5Object& parent, const std::string& name)
   {
+    if (!parent.valid())
+      return false;
     hid_t id;
 #if (1 < H5_VERS_MAJOR || (1 == H5_VERS_MAJOR && 8 <= H5_VERS_MINOR))
     id = H5Gcreate(parent.getId(), name.c_str(), H5P_DEFAULT, H5P_DEFAULT,
@@ -103,7 +105,7 @@
     id = H5Gcreate(parent.getId(), name.c_str(), 0);
 #endif
     assignNewRef(id);
-    return 0 < id;
+    return 0 <= id;
   }
 
 //   bool link(const HDF5Object& object, const std::string& name)
@@ -136,20 +138,94 @@
   { open(filename); }
   HDF5File& operator=(const HDF5File& object)
   { assign(object.getId()); return *this; }
-  void open(const std::string& name)
+  bool open(const std::string& name)
   {
     hid_t id = H5Fcreate(name.c_str(), H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
     assignNewRef(id);
+    return 0 <= id;
   }
 };
 
+class HDFMatrix : public HDF5Object {
+public:
+  HDFMatrix()
+  { }
+  HDFMatrix(const HDF5Object& parent, const std::string& name,
+            const Matrix& matrix)
+  { create(parent, name, matrix); }
+
+  bool create(const HDF5Object& parent, const std::string& name,
+              const Matrix& matrix)
+  {
+    if (!parent.valid())
+      return false;
+
+    hsize_t rank = 2;
+    hsize_t dims[2] = { rows(matrix), cols(matrix) };
+
+//     HDF5Object dataspace(H5Screate(H5S_NULL));
+//     HDF5Object dataspace(H5Screate(H5S_SIMPLE));
+    HDF5Object dataspace(H5Screate_simple(rank, dims, 0), true);
+    if (!dataspace.valid())
+      return false;
+
+    hid_t id;
+#if (1 < H5_VERS_MAJOR || (1 == H5_VERS_MAJOR && 8 <= H5_VERS_MINOR))
+    id = H5Dcreate(parent.getId(), name.c_str(), H5T_NATIVE_DOUBLE,
+                   dataspace.getId(), H5P_DEFAULT, H5P_DEFAULT, H5P_DEFAULT);
+#else
+    id = H5Dcreate(parent.getId(), name.c_str(), H5T_NATIVE_DOUBLE,
+                   dataspace.getId(), H5P_DEFAULT);
+#endif
+    if (id < 0)
+      return false;
+    assignNewRef(id);
+
+    if (H5Dwrite(getId(), H5T_NATIVE_DOUBLE, H5S_ALL,
+                 H5S_ALL, H5P_DEFAULT, matrix.find(0, 0)) < 0)
+      return false;
+
+    return true;
+  }
+};
+
 class HDFMatrixStream : public HDF5Object {
 public:
-  HDFMatrixStream(const HDF5Object& parent, const std::string& name) :
-    _name(name),
-    _chunklen(100),
-    _parent(parent)
+  HDFMatrixStream(const HDF5Object& parent, const std::string& name,
+                  const Size& size)
   {
+    hsize_t _chunklen(100);
+    herr_t status;
+    hsize_t rank = 3;
+    if (size(0) == 1) {
+      rank = 2;
+      if (size(1) == 1)
+        rank = 1;
+    }
+    _dims[0] = 1;
+    _dims[1] = size(0);
+    _dims[2] = size(1);
+    hsize_t maxdims[3] = { H5S_UNLIMITED, _dims[1], _dims[2] };
+    _dataspace = HDF5Object(H5Screate_simple(rank, _dims, maxdims), true);
+    if (!_dataspace.valid())
+      return;
+
+    _dims[0] = 0;
+
+    hsize_t chunk_dims[3] = { _chunklen, _dims[1], _dims[2] };
+    
+    HDF5Object cparms(H5Pcreate(H5P_DATASET_CREATE), true);
+    status = H5Pset_chunk(cparms.getId(), rank, chunk_dims);
+    hid_t id;
+#if (1 < H5_VERS_MAJOR || (1 == H5_VERS_MAJOR && 8 <= H5_VERS_MINOR))
+    id = H5Dcreate(parent.getId(), name.c_str(), H5T_NATIVE_DOUBLE,
+                   _dataspace.getId(), H5P_DEFAULT, cparms.getId(),
+                   H5P_DEFAULT);
+#else
+    id = H5Dcreate(parent.getId(), name.c_str(), H5T_NATIVE_DOUBLE,
+                   _dataspace.getId(), cparms.getId());
+#endif
+    assignNewRef(id);
   }
 
   void append(const real_type& scalar)
@@ -161,67 +237,29 @@
 
   void append(const Matrix& matrix)
   {
-    herr_t status;
-    if (!valid()) {
-      hsize_t rank = 3;
-      if (cols(matrix) == 1) {
-        rank = 2;
-        if (rows(matrix) == 1)
-          rank = 1;
-      }
-      _dims[0] = 1;
-      _dims[1] = rows(matrix);
-      _dims[2] = cols(matrix);
-      hsize_t maxdims[3] = { H5S_UNLIMITED, _dims[1], _dims[2] };
-      _dataspace = H5Screate_simple(rank, _dims, maxdims);
-      if (!_dataspace.valid())
-        return;
+    if (!valid())
+      return;
 
-      hsize_t chunk_dims[3] = { _chunklen, rows(matrix), cols(matrix) };
+    // increment size
+    _dims[0] += 1;
+    herr_t status = H5Dextend(getId(), _dims);
 
-      hid_t cparms = H5Pcreate(H5P_DATASET_CREATE);
-      status = H5Pset_chunk(cparms, rank, chunk_dims);
-      hid_t id;
-#if (1 < H5_VERS_MAJOR || (1 == H5_VERS_MAJOR && 8 <= H5_VERS_MINOR))
-      id = H5Dcreate(_parent.getId(), _name.c_str(), H5T_NATIVE_DOUBLE,
-                      _dataspace.getId(), H5P_DEFAULT, cparms, H5P_DEFAULT);
-#else
-      id = H5Dcreate(_parent.getId(), _name.c_str(), H5T_NATIVE_DOUBLE,
-                      _dataspace.getId(), cparms);
-#endif
-      assignNewRef(id);
-      H5Pclose(cparms);
-    } else {
-      // increment size
-      _dims[0] += 1;
-      status = H5Dextend(getId(), _dims);
-    }
-
-    HDF5Object filespace = H5Dget_space(getId());
+    HDF5Object filespace(H5Dget_space(getId()), true);
     hsize_t offset[3] = { _dims[0] - 1, 0, 0 };
     hsize_t dims1[3] = { 1, _dims[1], _dims[2] };
     status = H5Sselect_hyperslab(filespace.getId(), H5S_SELECT_SET,
                                  offset, NULL, dims1, NULL);
 
-    std::vector<double> data(_dims[1]*_dims[2]);
-    for (hsize_t i = 0; i < _dims[1]; ++i)
-      for (hsize_t j = 0; j < _dims[2]; ++j)
-        // FIXME?? row or column major ...
-        data[j + i*_dims[2]] = matrix(i, j);
-        // data[i + j*_dims[1]] = matrix(i, j);
     status = H5Dwrite(getId(), H5T_NATIVE_DOUBLE,
                       _dataspace.getId(), filespace.getId(),
-                      H5P_DEFAULT, &data.front());
+                      H5P_DEFAULT, matrix.find(0, 0));
+
+    H5Sselect_none(filespace.getId());
   }
 
 private:
-  std::string _name;
   hsize_t _dims[3];
   HDF5Object _dataspace;
-
-  hsize_t _chunklen;
-
-  HDF5Object _parent;
 };
 
 class HDF5Log : public SystemLog {
@@ -229,7 +267,7 @@
   HDF5Log(const std::string& filename) :
     mHDF5File(filename),
     mCurrentGroup(mHDF5File, "System"),
-    mTimeStream(mCurrentGroup.getId(), "t")
+    mTimeStream(mCurrentGroup, "t", Size(1, 1))
   { }
   ~HDF5Log()
   { }
@@ -331,7 +369,7 @@
     MatrixDumper(const NumericPortValue* numericPortValue,
                  const HDF5Object& parent, const std::string& name) :
       mNumericPortValue(numericPortValue),
-      _stream(parent, name)
+      _stream(parent, name, size(mNumericPortValue->getValue()))
     { OpenFDMAssert(numericPortValue); }
     void append()
     { _stream.append(mNumericPortValue->getValue()); }



From frohlich at mail.berlios.de  Mon Oct  6 07:37:57 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 6 Oct 2008 07:37:57 +0200
Subject: [OpenFDM-svn] r571 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810060537.m965bvBY032642@sheep.berlios.de>

Author: frohlich
Date: 2008-10-06 07:37:56 +0200 (Mon, 06 Oct 2008)
New Revision: 571

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
Log:
Remove some unused code from the Group.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-10-05 22:23:53 UTC (rev 570)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-10-06 05:37:56 UTC (rev 571)
@@ -72,14 +72,6 @@
   return _childList.size();
 }
 
-Group::NodeId
-Group::getNodeId(unsigned i) const
-{
-  if (_childList.size() <= i)
-    return NodeId();
-  return NodeId(_childList[i]);
-}
-
 unsigned
 Group::getChildNumber(const NodeId& nodeId) const
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-05 22:23:53 UTC (rev 570)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-06 05:37:56 UTC (rev 571)
@@ -84,71 +84,35 @@
 
   NodeId addChild(const SharedPtr<Node>& node);
   unsigned getNumChildren() const;
-  NodeId getNodeId(unsigned i) const;
   unsigned getChildNumber(const NodeId& nodeId) const;
   SharedPtr<Node> getChild(unsigned i);
   SharedPtr<const Node> getChild(unsigned i) const;
   SharedPtr<Node> getChild(const NodeId& nodeId);
   SharedPtr<const Node> getChild(const NodeId& nodeId) const;
 
-  NodeId getGroupAcceptorNode(const PortId& portId) const
+  unsigned getGroupPortNodeIndex(const PortId& portId) const
   {
     SharedPtr<const PortInfo> port = getPort(portId);
     if (!port)
-      return NodeId();
-    const ProxyAcceptorPortInfo* proxyAcceptorPort = port->toProxyAcceptorPortInfo();
-    if (!proxyAcceptorPort)
-      return NodeId();
+      return ~0u;
 
-    SharedPtr<GroupAcceptorNode> groupPort = proxyAcceptorPort->mGroupPort;
-    ChildList::const_iterator i;
-    for (i = _childList.begin(); i != _childList.end(); ++i) {
-      if ((*i)->node == groupPort)
-        return NodeId(*i);
-    }
-    return NodeId();
-  }
-  NodeId getGroupProviderNode(const PortId& portId) const
-  {
-    SharedPtr<const PortInfo> port = getPort(portId);
-    if (!port)
-      return NodeId();
+    SharedPtr<Node> node;
     const ProxyProviderPortInfo* proxyProviderPort = port->toProxyProviderPortInfo();
-    if (!proxyProviderPort)
-      return NodeId();
+    const ProxyAcceptorPortInfo* proxyAcceptorPort = port->toProxyAcceptorPortInfo();
+    if (proxyProviderPort) {
+      node = proxyProviderPort->mGroupPort;
+    } else if (proxyAcceptorPort) {
+      node = proxyAcceptorPort->mGroupPort;
+    } else
+      return ~0u;
 
-    SharedPtr<GroupProviderNode> groupPort = proxyProviderPort->mGroupPort;
-    ChildList::const_iterator i;
-    for (i = _childList.begin(); i != _childList.end(); ++i) {
-      if ((*i)->node == groupPort)
-        return NodeId(*i);
+    for (unsigned i = 0; i < _childList.size(); ++i) {
+      if (_childList[i]->node == node)
+        return i;
     }
-    return NodeId();
+    return ~0u;
   }
-  NodeId getGroupPortNode(const PortId& portId) const
-  {
-    NodeId nodeId = getGroupProviderNode(portId);
-    if (getChild(nodeId)) // FIXME!!
-      return nodeId;
-    return getGroupAcceptorNode(portId);
-  }
-  unsigned getGroupPortNodeIndex(const PortId& portId) const
-  {
-    return getChildNumber(getGroupPortNode(portId));
-  }
 
-  PortId getGroupPort(const NodeId& nodeId) const
-  {
-    // FIXME horrible algorithm
-    unsigned numPorts = getNumPorts();
-    for (unsigned i = 0; i < numPorts; ++i) {
-      NodeId thisId = getGroupPortNode(getPortId(i));
-      if (getChildNumber(nodeId) == getChildNumber(thisId))
-        return getPortId(i);
-    }
-    return PortId();
-  }
-
   // add a new group port to the group
   NodeId addAcceptorPort()
   {
@@ -253,11 +217,6 @@
     return _connectList[i]->_providerPort.lock();
   }
 
-  PortId getConnectAcceptorPortId(unsigned i) const
-  { return PortId(SharedPtr<const PortInfo>(getConnectAcceptorPortInfo(i))); }
-  PortId getConnectProviderPortId(unsigned i) const
-  { return PortId(SharedPtr<const PortInfo>(getConnectProviderPortInfo(i))); }
-
 private:
   class Child;
 public:
@@ -304,18 +263,6 @@
       return node->getPort(portId);
     }
 
-    std::string getId() const
-    {
-      SharedPtr<Child> child = _child.lock();
-      if (!child)
-        return std::string();
-      return _child.lock()->identifier;
-    }
-
-    // FIXME, do I need ???
-    bool operator<(const NodeId& nodeId) const
-    { return _child < nodeId._child; }
-
   private:
     friend class Group;
     NodeId(const SharedPtr<Child>& child) : _child(child) {}



From frohlich at mail.berlios.de  Mon Oct  6 23:54:03 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 6 Oct 2008 23:54:03 +0200
Subject: [OpenFDM-svn] r572 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810062154.m96Ls38a002340@sheep.berlios.de>

Author: frohlich
Date: 2008-10-06 23:54:02 +0200 (Mon, 06 Oct 2008)
New Revision: 572

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
Log:
More Group cleanup


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-06 05:37:56 UTC (rev 571)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-06 21:54:02 UTC (rev 572)
@@ -20,6 +20,11 @@
 
 namespace OpenFDM {
 
+/// Port structure:
+/// InputPort (NumericPortValue, size constraint?)
+/// OutputPort (NumericPortValue, size constraint?)
+/// BodyLink (MechanicPortValue ...)
+
 class ProxyAcceptorPortInfo;
 class ProxyProviderPortInfo;
 
@@ -84,12 +89,8 @@
 
   NodeId addChild(const SharedPtr<Node>& node);
   unsigned getNumChildren() const;
-  unsigned getChildNumber(const NodeId& nodeId) const;
   SharedPtr<Node> getChild(unsigned i);
   SharedPtr<const Node> getChild(unsigned i) const;
-  SharedPtr<Node> getChild(const NodeId& nodeId);
-  SharedPtr<const Node> getChild(const NodeId& nodeId) const;
-
   unsigned getGroupPortNodeIndex(const PortId& portId) const
   {
     SharedPtr<const PortInfo> port = getPort(portId);
@@ -180,26 +181,20 @@
 
   unsigned getNumConnects() const
   { return _connectList.size(); }
-  
-  NodeId getConnectAcceptorNodeId(unsigned i) const
-  {
-    if (getNumConnects() <= i)
-      return NodeId();
-    return _connectList[i]->_acceptorNodeId;
-  }
+
   unsigned getConnectAcceptorNodeIndex(unsigned i) const
   {
-    return getChildNumber(getConnectAcceptorNodeId(i));
-  }
-  NodeId getConnectProviderNodeId(unsigned i) const
-  {
     if (getNumConnects() <= i)
-      return NodeId();
-    return _connectList[i]->_providerNodeId;
+      return ~0u;
+    NodeId nodeId = _connectList[i]->_acceptorNodeId;
+    return getChildNumber(nodeId);
   }
   unsigned getConnectProviderNodeIndex(unsigned i) const
   {
-    return getChildNumber(getConnectProviderNodeId(i));
+    if (getNumConnects() <= i)
+      return ~0u;
+    NodeId nodeId = _connectList[i]->_providerNodeId;
+    return getChildNumber(nodeId);
   }
 
   SharedPtr<const AcceptorPortInfo>
@@ -218,6 +213,9 @@
   }
 
 private:
+  unsigned getChildNumber(const NodeId& nodeId) const;
+  SharedPtr<Node> getChild(const NodeId& nodeId);
+  SharedPtr<const Node> getChild(const NodeId& nodeId) const;
   class Child;
 public:
   class NodeId {



From frohlich at mail.berlios.de  Tue Oct  7 06:55:57 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 7 Oct 2008 06:55:57 +0200
Subject: [OpenFDM-svn] r573 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810070455.m974tvnQ009841@sheep.berlios.de>

Author: frohlich
Date: 2008-10-07 06:55:54 +0200 (Tue, 07 Oct 2008)
New Revision: 573

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
Log:
Remove unused flields from the groups internals.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-10-06 21:54:02 UTC (rev 572)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-10-07 04:55:54 UTC (rev 573)
@@ -61,8 +61,7 @@
 Group::NodeId
 Group::addChild(const SharedPtr<Node>& node)
 {
-  std::string identifier = getUniqueIdentifier(node->getName());
-  _childList.push_back(new Child(this, node, identifier));
+  _childList.push_back(new Child(this, node));
   return NodeId(_childList.back());
 }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-06 21:54:02 UTC (rev 572)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-07 04:55:54 UTC (rev 573)
@@ -270,41 +270,13 @@
 private:
 
   struct Child : public WeakReferenced {
-    Child(Group* _group, Node* _node, std::string& id) :
-      group(_group), node(_node), identifier(id)
+    Child(Group* _group, Node* _node) :
+      group(_group), node(_node)
     { }
     WeakPtr<Group> group;
     SharedPtr<Node> node;
-    // what happens if the nodes name changes ?? FIXME
-    std::string identifier;
   };
 
-  std::string getUniqueIdentifier(const std::string& name) const
-  {
-    if (isUniqueIdentifier(name))
-      return name;
-    unsigned counter = 0;
-    std::string identifier;
-    do {
-      std::stringstream ss;
-      ss << name << '(' << ++counter << ')';
-      identifier = ss.str();
-    } while (!isUniqueIdentifier(identifier));
-    OpenFDMAssert(!identifier.empty());
-    return identifier;
-  }
-
-  // Tells true if the identifier is not yet used
-  bool isUniqueIdentifier(const std::string& identifier) const
-  {
-    for (ChildList::const_iterator i = _childList.begin();
-         i != _childList.end(); ++i) {
-      if ((*i)->identifier == identifier)
-        return false;
-    }
-    return true;
-  }
-
   struct Connect : public WeakReferenced {
     bool setProvider(const NodeId& node, const PortId& portId)
     {
@@ -315,7 +287,6 @@
       if (!providerPort)
         return false;
       _providerNodeId = node;
-      _providerPortId = portId;
       _providerPort = providerPort;
       return true;
     }
@@ -328,17 +299,14 @@
       if (!acceptorPort)
         return false;
       _acceptorNodeId = node;
-      _acceptorPortId = portId;
       _acceptorPort = acceptorPort;
       return true;
     }
 
     NodeId _providerNodeId;
-    PortId _providerPortId;
     WeakPtr<const ProviderPortInfo> _providerPort;
 
     NodeId _acceptorNodeId;
-    PortId _acceptorPortId;
     WeakPtr<const AcceptorPortInfo> _acceptorPort;
 
     // Where the line in the gui will be ...??



From frohlich at mail.berlios.de  Tue Oct  7 07:27:33 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 7 Oct 2008 07:27:33 +0200
Subject: [OpenFDM-svn] r574 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810070527.m975RXw8007711@sheep.berlios.de>

Author: frohlich
Date: 2008-10-07 07:27:31 +0200 (Tue, 07 Oct 2008)
New Revision: 574

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/AcceptorPortInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ProviderPortInfo.h
Log:
Dump an idea to improove the port system.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AcceptorPortInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AcceptorPortInfo.h	2008-10-07 04:55:54 UTC (rev 573)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AcceptorPortInfo.h	2008-10-07 05:27:31 UTC (rev 574)
@@ -15,6 +15,9 @@
   AcceptorPortInfo(Node* node, const std::string& name);
   virtual ~AcceptorPortInfo();
 
+  virtual bool canConnect(const PortInfo& portInfo) const
+  { return portInfo.toProviderPortInfo(); }
+
   virtual const AcceptorPortInfo* toAcceptorPortInfo() const;
 
   virtual bool getDirectInput() const

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-07 04:55:54 UTC (rev 573)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-07 05:27:31 UTC (rev 574)
@@ -23,7 +23,7 @@
 /// Port structure:
 /// InputPort (NumericPortValue, size constraint?)
 /// OutputPort (NumericPortValue, size constraint?)
-/// BodyLink (MechanicPortValue ...)
+/// MechanicLink (MechanicPortValue ...)
 
 class ProxyAcceptorPortInfo;
 class ProxyProviderPortInfo;
@@ -157,6 +157,10 @@
     if (!port1)
       return false;
 
+    // Just a crude first time check if this will work in principle.
+    if (!port0->canConnect(*port1))
+      return false;
+
     if (port0->toProviderPortInfo() && port1->toAcceptorPortInfo()) {
       SharedPtr<Connect> connect = new Connect;
       if (!connect->setProvider(nodeId0, portId0))

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-10-07 04:55:54 UTC (rev 573)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-10-07 05:27:31 UTC (rev 574)
@@ -37,6 +37,9 @@
 
   unsigned getIndex() const { return mIndex; }
 
+  virtual bool canConnect(const PortInfo& portInfo) const
+  { return false; }
+
   virtual const AcceptorPortInfo* toAcceptorPortInfo() const
   { return 0; }
   virtual const ProviderPortInfo* toProviderPortInfo() const
@@ -45,7 +48,8 @@
   { return 0; }
   virtual const ProxyProviderPortInfo* toProxyProviderPortInfo() const
   { return 0; }
-  
+
+  // May be virtual here ???, identify the fast and the slow path ...
   PortValue* getPortValue(const PortValueVector& portValueVector) const
   {
     unsigned index = getIndex();

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ProviderPortInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ProviderPortInfo.h	2008-10-07 04:55:54 UTC (rev 573)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ProviderPortInfo.h	2008-10-07 05:27:31 UTC (rev 574)
@@ -18,6 +18,9 @@
   /// Public interface to instantiate a new port value
   PortValue* newValue() const;
 
+  virtual bool canConnect(const PortInfo& portInfo) const
+  { return portInfo.toAcceptorPortInfo(); }
+
   /// Dynamic casts
   virtual const ProviderPortInfo* toProviderPortInfo() const;
 



From frohlich at mail.berlios.de  Tue Oct  7 19:17:26 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 7 Oct 2008 19:17:26 +0200
Subject: [OpenFDM-svn] r575 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200810071717.m97HHQLd008534@sheep.berlios.de>

Author: frohlich
Date: 2008-10-07 19:17:25 +0200 (Tue, 07 Oct 2008)
New Revision: 575

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.h
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Attach a system log to the system.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-07 05:27:31 UTC (rev 574)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-07 17:17:25 UTC (rev 575)
@@ -12,6 +12,7 @@
 #include "NodeInstance.h"
 #include "Object.h"
 #include "RootJoint.h"
+#include "SystemLog.h"
 #include "Task.h"
 
 #include "Function.h"
@@ -109,6 +110,7 @@
       return;
 
     mList.front().mSampleHit = t;
+    discreteOutput(mList.front());
 
     // Set the state into the ode solver
     Vector v;
@@ -810,6 +812,10 @@
     mNodeInstanceMap[(*i)->getNodePath()] = *i;
     mNodeInstanceList.push_back(*i);
   }
+
+  SystemLogList::const_iterator j;
+  for (j = mSystemLogList.begin(); j != mSystemLogList.end(); ++j)
+    (*j)->attachTo(this);
   
   // Hmm, really here???
   mAbstractSystem->init(0);
@@ -823,6 +829,10 @@
   mAbstractSystem = 0;
   mNodeInstanceList.clear();
   mNodeInstanceMap.clear();
+
+  SystemLogList::const_iterator i;
+  for (i = mSystemLogList.begin(); i != mSystemLogList.end(); ++i)
+    (*i)->attachTo(0);
 }
 
 /// Simulate the system until the time tEnd
@@ -832,6 +842,11 @@
   if (!mAbstractSystem)
     return false;
   mAbstractSystem->outputAt(t);
+
+  SystemLogList::const_iterator i;
+  for (i = mSystemLogList.begin(); i != mSystemLogList.end(); ++i)
+    (*i)->output(t);
+
   return true;
 }
 
@@ -869,4 +884,27 @@
   return i->second;
 }
 
+void
+System::attach(SystemLog* systemLog)
+{
+  mSystemLogList.push_back(systemLog);
+  if (!mAbstractSystem)
+    return;
+  systemLog->attachTo(this);
+}
+
+void
+System::detach(SystemLog* systemLog)
+{
+  SystemLogList::iterator i = mSystemLogList.begin();
+  while (i != mSystemLogList.end()) {
+    if (*i == systemLog) {
+      i = mSystemLogList.erase(i);
+      if (mAbstractSystem)
+        systemLog->attachTo(0);
+    } else
+      ++i;
+  }
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.h	2008-10-07 05:27:31 UTC (rev 574)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.h	2008-10-07 17:17:25 UTC (rev 575)
@@ -17,6 +17,7 @@
 /// Provides algorithms to simulate and trim the whole system.
 
 class AbstractSystem;
+class SystemLog;
 
 class System : public Object {
   OPENFDM_OBJECT(System, Object);
@@ -48,6 +49,9 @@
   const AbstractNodeInstance* getNodeInstance(const NodePath& nodePath) const;
   AbstractNodeInstance* getNodeInstance(const NodePath& nodePath);
 
+  void attach(SystemLog* systemLog);
+  void detach(SystemLog* systemLog);
+
 private:
   class NodeInstanceCollector;
 
@@ -56,6 +60,9 @@
   SharedPtr<AbstractSystem> mAbstractSystem;
   ConstNodeInstanceList mNodeInstanceList;
   NodeInstanceMap mNodeInstanceMap;
+
+  typedef std::list<SharedPtr<SystemLog> > SystemLogList;
+  SystemLogList mSystemLogList;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-07 05:27:31 UTC (rev 574)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-07 17:17:25 UTC (rev 575)
@@ -111,17 +111,14 @@
 //   SharedPtr<System> system = new System("System", buildDiscreteExample());
 //   SharedPtr<System> system = new System("System", buildLibraryNodeExample());
 
+  system->attach(new HDF5Log("system.h5"));
+
   if (!system->init())
     return 1;
 
-  HDF5Log log("system.h5");
-  log.attachTo(system);
-  log.output(system->getTime());
-
   double h = 0.01;
   while (system->getTime() < 10) {
     system->simulate(system->getTime() + h);
-    log.output(system->getTime());
   }
 
   return 0;



From frohlich at mail.berlios.de  Wed Oct  8 07:40:03 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 8 Oct 2008 07:40:03 +0200
Subject: [OpenFDM-svn] r576 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810080540.m985e3kP000103@sheep.berlios.de>

Author: frohlich
Date: 2008-10-08 07:40:02 +0200 (Wed, 08 Oct 2008)
New Revision: 576

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicAcceptorPortInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicProviderPortInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/NumericAcceptorPortInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/NumericProviderPortInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ProviderPortInfo.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ProviderPortInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Simplify connection stuff a bit.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-07 17:17:25 UTC (rev 575)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-08 05:40:02 UTC (rev 576)
@@ -60,6 +60,11 @@
   SharedPtr<GroupAcceptorNode> mGroupPort;
   virtual const ProxyAcceptorPortInfo* toProxyAcceptorPortInfo() const
   { return this; }
+
+  // FIXME
+  virtual bool acceptPortValue(const PortValue* portValue) const
+  { return true; }
+
 };
 
 class ProxyProviderPortInfo : public ProviderPortInfo {
@@ -70,6 +75,9 @@
   { return 0; } //FIXME
   virtual const ProxyProviderPortInfo* toProxyProviderPortInfo() const
   { return this; }
+  // FIXME
+  virtual bool acceptPortValue(const PortValue* portValue) const
+  { return true; }
   SharedPtr<GroupProviderNode> mGroupPort;
 };
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicAcceptorPortInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicAcceptorPortInfo.h	2008-10-07 17:17:25 UTC (rev 575)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicAcceptorPortInfo.h	2008-10-08 05:40:02 UTC (rev 576)
@@ -7,6 +7,7 @@
 
 #include <string>
 #include "AcceptorPortInfo.h"
+#include "MechanicPortValue.h"
 
 namespace OpenFDM {
 
@@ -15,6 +16,9 @@
   MechanicAcceptorPortInfo(Node* node, const std::string& name) :
     AcceptorPortInfo(node, name)
   { }
+
+  virtual bool acceptPortValue(const PortValue* portValue) const
+  { return dynamic_cast<const MechanicPortValue*>(portValue); }
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicProviderPortInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicProviderPortInfo.h	2008-10-07 17:17:25 UTC (rev 575)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicProviderPortInfo.h	2008-10-08 05:40:02 UTC (rev 576)
@@ -16,6 +16,8 @@
   MechanicProviderPortInfo(Node* node, const std::string& name) :
     ProviderPortInfo(node, name)
   { }
+  virtual bool acceptPortValue(const PortValue* portValue) const
+  { return dynamic_cast<const MechanicPortValue*>(portValue); }
 protected:
   virtual MechanicPortValue* newValueImplementation() const
   { return new MechanicPortValue; }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NumericAcceptorPortInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NumericAcceptorPortInfo.h	2008-10-07 17:17:25 UTC (rev 575)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NumericAcceptorPortInfo.h	2008-10-08 05:40:02 UTC (rev 576)
@@ -8,6 +8,7 @@
 #include <string>
 #include "AcceptorPortInfo.h"
 #include "Matrix.h"
+#include "NumericPortValue.h"
 
 namespace OpenFDM {
 
@@ -22,6 +23,12 @@
   void setDirectInput(bool directInput)
   { mDirectInput = directInput; }
 
+  virtual unsigned getMaxConnects() const
+  { return 1; }
+
+  virtual bool acceptPortValue(const PortValue* portValue) const
+  { return dynamic_cast<const NumericPortValue*>(portValue); }
+
 private:
   Size mSize;
   bool mDirectInput;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NumericProviderPortInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NumericProviderPortInfo.h	2008-10-07 17:17:25 UTC (rev 575)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NumericProviderPortInfo.h	2008-10-08 05:40:02 UTC (rev 576)
@@ -8,6 +8,7 @@
 #include <string>
 #include "ProviderPortInfo.h"
 #include "NumericPortValue.h"
+#include "Limits.h"
 
 namespace OpenFDM {
 
@@ -16,6 +17,12 @@
   NumericProviderPortInfo(Node* node, const std::string& name, const Size& sz);
   virtual ~NumericProviderPortInfo();
 
+  virtual unsigned getMaxConnects() const
+  { return Limits<unsigned>::max(); }
+
+  virtual bool acceptPortValue(const PortValue* portValue) const
+  { return dynamic_cast<const NumericPortValue*>(portValue); }
+
 protected:
   virtual NumericPortValue* newValueImplementation() const;
 private:

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-10-07 17:17:25 UTC (rev 575)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-10-08 05:40:02 UTC (rev 576)
@@ -59,6 +59,20 @@
 
   void clear();
 
+  virtual unsigned getMaxConnects() const
+  { return 1; }
+
+  virtual bool acceptPortValue(const PortValue*) const
+  { return false; }
+
+  /// Public interface to instantiate a new port value
+  PortValue* newValue() const
+  { return newValueImplementation(); }
+
+protected:
+  virtual PortValue* newValueImplementation() const // = 0;
+  { return 0; }
+
 private:
   PortInfo(const PortInfo&);
   PortInfo& operator=(const PortInfo&);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ProviderPortInfo.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ProviderPortInfo.cpp	2008-10-07 17:17:25 UTC (rev 575)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ProviderPortInfo.cpp	2008-10-08 05:40:02 UTC (rev 576)
@@ -15,12 +15,6 @@
 {
 }
 
-PortValue*
-ProviderPortInfo::newValue() const
-{
-  return newValueImplementation();
-}
-
 const ProviderPortInfo*
 ProviderPortInfo::toProviderPortInfo() const
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ProviderPortInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ProviderPortInfo.h	2008-10-07 17:17:25 UTC (rev 575)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ProviderPortInfo.h	2008-10-08 05:40:02 UTC (rev 576)
@@ -15,21 +15,11 @@
   ProviderPortInfo(Node* node, const std::string& name);
   virtual ~ProviderPortInfo();
 
-  /// Public interface to instantiate a new port value
-  PortValue* newValue() const;
-
   virtual bool canConnect(const PortInfo& portInfo) const
   { return portInfo.toAcceptorPortInfo(); }
 
   /// Dynamic casts
   virtual const ProviderPortInfo* toProviderPortInfo() const;
-
-protected:
-  /// The basic property of a provider port is that it can provide
-  /// a port value that can be used by acceptor ports.
-  /// It s just important to know that one of the connected ports
-  /// is able to provide storage for the value.
-  virtual PortValue* newValueImplementation() const = 0;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-07 17:17:25 UTC (rev 575)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-08 05:40:02 UTC (rev 576)
@@ -214,11 +214,6 @@
 class System::NodeInstanceCollector : public ConstNodeVisitor {
 public:
 
-  struct AcceptorPortData;
-  struct ProviderPortData;
-  struct ProxyAcceptorPortData;
-  struct ProxyProviderPortData;
-
   struct PortData : public WeakReferenced {
   public:
     PortData(AbstractNodeInstance* nodeInstance, const PortInfo* portInfo) :
@@ -227,143 +222,88 @@
     { }
     virtual ~PortData()
     { }
-    virtual AcceptorPortData* toAcceptorPortData()
-    { return 0; }
-    virtual ProviderPortData* toProviderPortData()
-    { return 0; }
-    virtual ProxyAcceptorPortData* toProxyAcceptorPortData()
-    { return 0; }
-    virtual ProxyProviderPortData* toProxyProviderPortData()
-    { return 0; }
-    virtual bool connect(PortData*) = 0;
 
-    const SharedPtr<const PortInfo>& getPortInfo() const
-    { return mPortInfo; }
-
-    void setLocalPortValue(PortValue* portValue)
+    bool addPortData(PortData* portData)
     {
-      if (!getPortInfo())
-        return;
-      if (!mNodeInstance)
-        return;
-      unsigned index = getPortInfo()->getIndex();
-      mNodeInstance->getPortValueList().setPortValue(index, portValue);
+      if (getPortInfo()->getMaxConnects() <= mConnectedPorts.size())
+        return false;
+      mConnectedPorts.push_back(portData);
+      return true;
     }
 
-  private:
-    SharedPtr<AbstractNodeInstance> mNodeInstance;
-    SharedPtr<const PortInfo> mPortInfo;
-  };
-
-  struct ProviderPortData : public PortData {
-    ProviderPortData(AbstractNodeInstance* nodeInstance,
-                     const ProviderPortInfo* providerPort) :
-      PortData(nodeInstance, providerPort),
-      _providerPort(providerPort)
-    { }
-    virtual ProviderPortData* toProviderPortData()
-    { return this; }
-
-    virtual bool connect(PortData* portData)
+    bool connect(PortData* portData)
     {
-      if (!portData)
+      if (getPortInfo()->getMaxConnects() <= mConnectedPorts.size())
         return false;
-      AcceptorPortData* acceptorPortData = portData->toAcceptorPortData();
-      if (!acceptorPortData)
+      if (!portData->addPortData(this))
         return false;
-      return acceptorPortData->connectToProvider(this);
+      mConnectedPorts.push_back(portData);
+      return true;
     }
 
-    virtual void createPortValue()
-    {
-      PortValue* portValue = _providerPort->newValue();
-      if (!portValue)
-        return;
-      setPortValue(portValue);
-    }
+    const SharedPtr<const PortInfo>& getPortInfo() const
+    { return mPortInfo; }
 
-    void setPortValue(PortValue* portValue)
+    bool setLocalPortValue(PortValue* portValue)
     {
-      setLocalPortValue(portValue);
-      for (unsigned i = 0; i < _acceptorPortDataList.size(); ++i)
-        _acceptorPortDataList[i]->setPortValue(portValue);
-    }
-
-    SharedPtr<const ProviderPortInfo> _providerPort;
-    std::vector<SharedPtr<AcceptorPortData> > _acceptorPortDataList;
-  };
-  struct AcceptorPortData : public PortData {
-    AcceptorPortData(AbstractNodeInstance* nodeInstance,
-                     const AcceptorPortInfo* acceptorPort) :
-      PortData(nodeInstance, acceptorPort),
-      _acceptorPort(acceptorPort)
-    { }
-    virtual AcceptorPortData* toAcceptorPortData()
-    { return this; }
-
-    virtual bool connect(PortData* portData)
-    {
-      if (!portData)
+      if (!getPortInfo())
         return false;
-      ProviderPortData* providerPortData = portData->toProviderPortData();
-      if (!providerPortData)
+      if (!mNodeInstance)
         return false;
-      return connectToProvider(providerPortData);
+      // FIXME: move the set port value and accept port value into one call
+      if (!getPortInfo()->acceptPortValue(portValue))
+        return false;
+      unsigned index = getPortInfo()->getIndex();
+      mNodeInstance->getPortValueList().setPortValue(index, portValue);
+      return true;
     }
 
-    bool connectToProvider(ProviderPortData* providerPortData)
+    bool setConnectedPortValues(PortValue* portValue)
     {
-      // The current one must not be connected already ...
-      OpenFDMAssert(!_providerPortData.lock());
-      if (!providerPortData)
-        return false;
-      providerPortData->_acceptorPortDataList.push_back(this);
-      _providerPortData = providerPortData;
-      return true;
+      for (unsigned i = 0; i < mConnectedPorts.size(); ++i) {
+        SharedPtr<PortData> portData = mConnectedPorts[i].lock();
+        if (!portData)
+          return false;
+        if (!portData->setProxyPortValue(portValue))
+          return false;
+      }
+      return setLocalPortValue(portValue);
     }
 
-    virtual void setPortValue(PortValue* portValue)
+    bool setProxyPortValue(PortValue* portValue)
     {
-      setLocalPortValue(portValue);
+      SharedPtr<PortData> portData = mProxyPortData.lock();
+      if (portData) {
+        if (!portData->setConnectedPortValues(portValue))
+          return false;
+      }
+      return setLocalPortValue(portValue);
     }
 
-    SharedPtr<const AcceptorPortInfo> _acceptorPort;
-    WeakPtr<ProviderPortData> _providerPortData;
-  };
-  struct ProxyAcceptorPortData : public AcceptorPortData {
-  public:
-    ProxyAcceptorPortData(AbstractNodeInstance* nodeInstance,
-                          const AcceptorPortInfo* acceptorPortInfo) :
-      AcceptorPortData(nodeInstance, acceptorPortInfo)
-    { }
-    virtual ProxyAcceptorPortData* toProxyAcceptorPortData()
-    { return this; }
-    virtual void setPortValue(PortValue* portValue)
+    void setProxyPortData(PortData* proxyPortData)
+    { mProxyPortData = proxyPortData; }
+
+    virtual bool createPortValue()
     {
-      setLocalPortValue(portValue);
-      mProxyProviderPortData->setPortValue(portValue);
+      if (mNodeInstance->getPortValueList().getPortValue(getPortInfo()->getIndex()))
+        return true;
+      if (mProxyPortData.lock())
+        return true;
+      PortValue* portValue = getPortInfo()->newValue();
+      if (!portValue)
+        return true; // FIXME
+      return setConnectedPortValues(portValue);
     }
-    SharedPtr<ProxyProviderPortData> mProxyProviderPortData;
-  };
-  struct ProxyProviderPortData : public ProviderPortData {
-  public:
-    ProxyProviderPortData(AbstractNodeInstance* nodeInstance,
-                          const ProviderPortInfo* providerPortInfo) :
-      ProviderPortData(nodeInstance, providerPortInfo)
-    { }
-    virtual ProxyProviderPortData* toProxyProviderPortData()
-    { return this; }
-    void setProxyAcceptorPortData(ProxyAcceptorPortData* proxyAcceptorPortData)
-    { proxyAcceptorPortData->mProxyProviderPortData = this; }
 
-    // FIXME
-    virtual void createPortValue()
-    { }
+  private:
+    SharedPtr<AbstractNodeInstance> mNodeInstance;
+    SharedPtr<const PortInfo> mPortInfo;
+    std::vector<WeakPtr<PortData> > mConnectedPorts;
+    WeakPtr<PortData> mProxyPortData;
   };
 
-
   // Return true if this leaf directly depends on one of leafInstance outputs
-  class PortDataList : public WeakReferenced {
+  class PortDataList : public Referenced {
   public:
     void setNodeInstance(AbstractNodeInstance* nodeInstance)
     {
@@ -372,45 +312,18 @@
       mPortDataVector.resize(nodeInstance->getNode().getNumPorts());
     }
     
-    AcceptorPortData* newAcceptorPortData(const AcceptorPortInfo* acceptorPort)
+    PortData* newPortData(const PortInfo* portInfo)
     {
-      AcceptorPortData* acceptorPortData;
-      acceptorPortData = new AcceptorPortData(mNodeInstance, acceptorPort);
-      mPortDataVector[acceptorPort->getIndex()] = acceptorPortData;
-      return acceptorPortData;
+      PortData* portData = new PortData(mNodeInstance, portInfo);
+      mPortDataVector[portInfo->getIndex()] = portData;
+      return portData;
     }
-    ProviderPortData* newProviderPortData(const ProviderPortInfo* providerPort)
-    {
-      ProviderPortData* providerPortData;
-      providerPortData = new ProviderPortData(mNodeInstance, providerPort);
-      mPortDataVector[providerPort->getIndex()] = providerPortData;
-      return providerPortData;
-    }
-    ProxyAcceptorPortData* newProxyAcceptorPortData(const AcceptorPortInfo* acceptorPort)
-    {
-      ProxyAcceptorPortData* acceptorPortData;
-      acceptorPortData = new ProxyAcceptorPortData(mNodeInstance, acceptorPort);
-      mPortDataVector[acceptorPort->getIndex()] = acceptorPortData;
-      return acceptorPortData;
-    }
-    ProxyProviderPortData* newProxyProviderPortData(const ProviderPortInfo* providerPort)
-    {
-      ProxyProviderPortData* providerPortData;
-      providerPortData = new ProxyProviderPortData(mNodeInstance, providerPort);
-      mPortDataVector[providerPort->getIndex()] = providerPortData;
-      return providerPortData;
-    }
     
     bool allocAndConnectProviderPortValues()
     {
-      // FIXME: move that into the PortData stuff
       for (unsigned i = 0; i < mPortDataVector.size(); ++i) {
-        // Also set the port value to all connected ports
-        ProviderPortData* providerPortData;
-        providerPortData = mPortDataVector[i]->toProviderPortData();
-        if (!providerPortData)
-          continue;
-        providerPortData->createPortValue();
+        if (!mPortDataVector[i]->createPortValue())
+          return false;
       }
       return true;
     }
@@ -447,21 +360,15 @@
   virtual void apply(const GroupAcceptorNode& leaf)
   {
     PortDataList* portDataList = buildNodeContext(leaf);
-
     OpenFDMAssert(leaf.getPort(0));
-
-    ProviderPortData* providerPortData;
-    providerPortData = portDataList->newProxyProviderPortData(leaf._groupInternalPort);
+    portDataList->newPortData(leaf.getPort(0));
   }
   // Aussen provider, innen acceptor
   virtual void apply(const GroupProviderNode& leaf)
   {
     PortDataList* portDataList = buildNodeContext(leaf);
-
     OpenFDMAssert(leaf.getPort(0));
-
-    AcceptorPortData* acceptorPortData;
-    acceptorPortData = portDataList->newProxyAcceptorPortData(leaf._groupInternalPort);
+    portDataList->newPortData(leaf.getPort(0));
   }
 
   void allocPortData(AbstractNodeInstance* nodeInstance, const LeafNode& leaf)
@@ -470,19 +377,8 @@
     portDataList = getCurrentNodePortDataList();
     portDataList->setNodeInstance(nodeInstance);
 
-    for (unsigned i = 0; i < leaf.getNumPorts(); ++i) {
-      SharedPtr<const PortInfo> port = leaf.getPort(i);
-      const ProviderPortInfo* providerPort = port->toProviderPortInfo();
-      if (providerPort) {
-        ProviderPortData* providerPortData;
-        providerPortData = portDataList->newProviderPortData(providerPort);
-      }
-      const AcceptorPortInfo* acceptorPort = port->toAcceptorPortInfo();
-      if (acceptorPort) {
-        AcceptorPortData* acceptorPortData;
-        acceptorPortData = portDataList->newAcceptorPortData(acceptorPort);
-      }
-    }
+    for (unsigned i = 0; i < leaf.getNumPorts(); ++i)
+      portDataList->newPortData(leaf.getPort(i));
   }
 
   virtual void apply(const RootJoint& node)
@@ -540,11 +436,13 @@
       unsigned providerNodeIndex = group.getConnectProviderNodeIndex(i);
 
       if (acceptorNodeIndex == ~0u) {
-        Log(Schedule, Error) << "Cannot find acceptor node from nodeId" << std::endl;
+        Log(Schedule, Error)
+          << "Cannot find acceptor node from nodeId" << std::endl;
         continue;
       }
       if (providerNodeIndex == ~0u) {
-        Log(Schedule, Error) << "Cannot find provider node from nodeId" << std::endl;
+        Log(Schedule, Error)
+          << "Cannot find provider node from nodeId" << std::endl;
         continue;
       }
 
@@ -591,37 +489,12 @@
 
       PortData* portData;
       portData = childrenPortDataMap[nodeIndex]->mPortDataVector.front();
-      if (portData->toProxyAcceptorPortData()) {
-        ProxyAcceptorPortData* proxyAcceptorPortData;
-        proxyAcceptorPortData = portData->toProxyAcceptorPortData();
 
-        const ProviderPortInfo* providerPortInfo;
-        providerPortInfo = group.getPort(i)->toProviderPortInfo();
-        OpenFDMAssert(providerPortInfo);
+      PortData* parentPortData;
+      parentPortData = portDataList->newPortData(group.getPort(i));
 
-        ProxyProviderPortData* proxyProviderPortData;
-        proxyProviderPortData =
-          portDataList->newProxyProviderPortData(providerPortInfo);
-
-        proxyProviderPortData->setProxyAcceptorPortData(proxyAcceptorPortData);
-
-      } else if (portData->toProxyProviderPortData()) {
-        ProxyProviderPortData* proxyProviderPortData;
-        proxyProviderPortData = portData->toProxyProviderPortData();
-
-        const AcceptorPortInfo* acceptorPortInfo;
-        acceptorPortInfo = group.getPort(i)->toAcceptorPortInfo();
-        OpenFDMAssert(acceptorPortInfo);
-
-        ProxyAcceptorPortData* proxyAcceptorPortData;
-        proxyAcceptorPortData =
-          portDataList->newProxyAcceptorPortData(acceptorPortInfo);
-
-        proxyProviderPortData->setProxyAcceptorPortData(proxyAcceptorPortData);
-
-      } else {
-        OpenFDMAssert(false);
-      }
+      parentPortData->setProxyPortData(portData);
+      portData->setProxyPortData(parentPortData);
     }
   }
 



From frohlich at mail.berlios.de  Wed Oct  8 17:46:05 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 8 Oct 2008 17:46:05 +0200
Subject: [OpenFDM-svn] r577 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810081546.m98Fk5PR029058@sheep.berlios.de>

Author: frohlich
Date: 2008-10-08 17:46:04 +0200 (Wed, 08 Oct 2008)
New Revision: 577

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Streamline connect information.
Prepare for symmetric port connects.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-08 05:40:02 UTC (rev 576)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-08 15:46:04 UTC (rev 577)
@@ -169,59 +169,48 @@
     if (!port0->canConnect(*port1))
       return false;
 
-    if (port0->toProviderPortInfo() && port1->toAcceptorPortInfo()) {
-      SharedPtr<Connect> connect = new Connect;
-      if (!connect->setProvider(nodeId0, portId0))
-        return false;
-      if (!connect->addAcceptor(nodeId1, portId1))
-        return false;
-      _connectList.push_back(connect);
-      return true;
-    } else if (port1->toProviderPortInfo() && port0->toAcceptorPortInfo()) {
-      SharedPtr<Connect> connect = new Connect;
-      if (!connect->setProvider(nodeId1, portId1))
-        return false;
-      if (!connect->addAcceptor(nodeId0, portId0))
-        return false;
-      _connectList.push_back(connect);
-      return true;
-    } else {
-      return false;
-    }
+    SharedPtr<Connect> connect = new Connect;
+    connect->_portId0 = portId0;
+    connect->_nodeId0 = nodeId0;
+    connect->_portId1 = portId1;
+    connect->_nodeId1 = nodeId1;
+    _connectList.push_back(connect);
+
+    return true;
   }
 
 
   unsigned getNumConnects() const
   { return _connectList.size(); }
 
-  unsigned getConnectAcceptorNodeIndex(unsigned i) const
+  unsigned getConnectNodeIndex0(unsigned i) const
   {
     if (getNumConnects() <= i)
       return ~0u;
-    NodeId nodeId = _connectList[i]->_acceptorNodeId;
-    return getChildNumber(nodeId);
+    return getChildNumber(_connectList[i]->_nodeId0);
   }
-  unsigned getConnectProviderNodeIndex(unsigned i) const
+  unsigned getConnectNodeIndex1(unsigned i) const
   {
     if (getNumConnects() <= i)
       return ~0u;
-    NodeId nodeId = _connectList[i]->_providerNodeId;
-    return getChildNumber(nodeId);
+    return getChildNumber(_connectList[i]->_nodeId1);
   }
 
-  SharedPtr<const AcceptorPortInfo>
-  getConnectAcceptorPortInfo(unsigned i) const
+  SharedPtr<const PortInfo>
+  getConnectPortInfo0(unsigned i) const
   {
     if (getNumConnects() <= i)
       return 0;
-    return _connectList[i]->_acceptorPort.lock();
+    SharedPtr<const Node> node = getChild(_connectList[i]->_nodeId0);
+    return node->getPort(_connectList[i]->_portId0);
   }
-  SharedPtr<const ProviderPortInfo>
-  getConnectProviderPortInfo(unsigned i) const
+  SharedPtr<const PortInfo>
+  getConnectPortInfo1(unsigned i) const
   {
     if (getNumConnects() <= i)
       return 0;
-    return _connectList[i]->_providerPort.lock();
+    SharedPtr<const Node> node = getChild(_connectList[i]->_nodeId1);
+    return node->getPort(_connectList[i]->_portId1);
   }
 
 private:
@@ -290,37 +279,12 @@
   };
 
   struct Connect : public WeakReferenced {
-    bool setProvider(const NodeId& node, const PortId& portId)
-    {
-      SharedPtr<const PortInfo> port = node.getPortPtr(portId);
-      if (!port)
-        return false;
-      const ProviderPortInfo* providerPort = port->toProviderPortInfo();
-      if (!providerPort)
-        return false;
-      _providerNodeId = node;
-      _providerPort = providerPort;
-      return true;
-    }
-    bool addAcceptor(const NodeId& node, const PortId& portId)
-    {
-      SharedPtr<const PortInfo> port = node.getPortPtr(portId);
-      if (!port)
-        return false;
-      const AcceptorPortInfo* acceptorPort = port->toAcceptorPortInfo();
-      if (!acceptorPort)
-        return false;
-      _acceptorNodeId = node;
-      _acceptorPort = acceptorPort;
-      return true;
-    }
+    NodeId _nodeId0;
+    PortId _portId0;
 
-    NodeId _providerNodeId;
-    WeakPtr<const ProviderPortInfo> _providerPort;
+    NodeId _nodeId1;
+    PortId _portId1;
 
-    NodeId _acceptorNodeId;
-    WeakPtr<const AcceptorPortInfo> _acceptorPort;
-
     // Where the line in the gui will be ...??
     // std::list<Vector2> _positions;
   };

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-08 05:40:02 UTC (rev 576)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-08 15:46:04 UTC (rev 577)
@@ -432,40 +432,36 @@
     // Apply the group internal connections to the instances
     unsigned numConnects = group.getNumConnects();
     for (unsigned i = 0; i < numConnects; ++i) {
-      unsigned acceptorNodeIndex = group.getConnectAcceptorNodeIndex(i);
-      unsigned providerNodeIndex = group.getConnectProviderNodeIndex(i);
-
-      if (acceptorNodeIndex == ~0u) {
+      unsigned nodeIndex0 = group.getConnectNodeIndex0(i);
+      if (nodeIndex0 == ~0u) {
         Log(Schedule, Error)
-          << "Cannot find acceptor node from nodeId" << std::endl;
+          << "Cannot find node from nodeId" << std::endl;
         continue;
       }
-      if (providerNodeIndex == ~0u) {
+      unsigned nodeIndex1 = group.getConnectNodeIndex1(i);
+      if (nodeIndex1 == ~0u) {
         Log(Schedule, Error)
-          << "Cannot find provider node from nodeId" << std::endl;
+          << "Cannot find node from nodeId" << std::endl;
         continue;
       }
 
-      SharedPtr<const AcceptorPortInfo> acceptorPort;
-      acceptorPort = group.getConnectAcceptorPortInfo(i);
-      SharedPtr<const ProviderPortInfo> providerPort;
-      providerPort = group.getConnectProviderPortInfo(i);
-
-      if (!acceptorPort) {
-        Log(Schedule, Error) << "Cannot find acceptor Port data node "
-                  << group.getChild(acceptorNodeIndex)->getName() << std::endl;
+      SharedPtr<const PortInfo> portInfo0 = group.getConnectPortInfo0(i);
+      if (!portInfo0) {
+        Log(Schedule, Error) << "Cannot find provider Port data node "
+                  << group.getChild(nodeIndex0)->getName() << std::endl;
         continue;
       }
-      if (!providerPort) {
-        Log(Schedule, Error) << "Cannot find provider Port data node "
-                  << group.getChild(providerNodeIndex)->getName() << std::endl;
+      SharedPtr<const PortInfo> portInfo1 = group.getConnectPortInfo1(i);
+      if (!portInfo1) {
+        Log(Schedule, Error) << "Cannot find acceptor Port data node "
+                  << group.getChild(nodeIndex1)->getName() << std::endl;
         continue;
       }
 
-      unsigned acceptorPortNumber = acceptorPort->getIndex();
-      unsigned providerPortNumber = providerPort->getIndex();
-      if (!_portDataMap[acceptorNodeIndex]->mPortDataVector[acceptorPortNumber]->
-          connect(_portDataMap[providerNodeIndex]->mPortDataVector[providerPortNumber]))
+      unsigned portInfoIndex0 = portInfo0->getIndex();
+      unsigned portInfoIndex1 = portInfo1->getIndex();
+      if (!_portDataMap[nodeIndex1]->mPortDataVector[portInfoIndex1]->
+          connect(_portDataMap[nodeIndex0]->mPortDataVector[portInfoIndex0]))
         Log(Schedule, Error) << "Cannot connect????" << std::endl;
     }
 



From frohlich at mail.berlios.de  Thu Oct  9 06:34:48 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 9 Oct 2008 06:34:48 +0200
Subject: [OpenFDM-svn] r579 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810090434.m994YmEf028251@sheep.berlios.de>

Author: frohlich
Date: 2008-10-09 06:34:47 +0200 (Thu, 09 Oct 2008)
New Revision: 579

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixInputPort.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixOutputPort.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicPortValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RealInputPort.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RealOutputPort.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/SystemLog.h
Log:
Implement virtuals insted of dynamic casts.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixInputPort.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixInputPort.h	2008-10-08 18:03:38 UTC (rev 578)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixInputPort.h	2008-10-09 04:34:47 UTC (rev 579)
@@ -23,7 +23,7 @@
     OpenFDMAssert(mPort);
     PortValue* portValue = mPort->getPortValue(portValueVector);
     OpenFDMAssert(portValue);
-    OpenFDMAssert(dynamic_cast<NumericPortValue*>(portValue));
+    OpenFDMAssert(portValue->toNumericPortValue());
     return static_cast<NumericPortValue*>(portValue);
   }
   bool empty() const

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixOutputPort.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixOutputPort.h	2008-10-08 18:03:38 UTC (rev 578)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixOutputPort.h	2008-10-09 04:34:47 UTC (rev 579)
@@ -19,7 +19,7 @@
   {
     PortValue* portValue = mPort->getPortValue(portValueVector);
     OpenFDMAssert(portValue);
-    OpenFDMAssert(dynamic_cast<NumericPortValue*>(portValue));
+    OpenFDMAssert(portValue->toNumericPortValue());
     return static_cast<NumericPortValue*>(portValue);
   }
   unsigned getPortIndex() const

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h	2008-10-08 18:03:38 UTC (rev 578)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h	2008-10-09 04:34:47 UTC (rev 579)
@@ -20,7 +20,7 @@
   {
     PortValue* portValue = mPort->getPortValue(portValueVector);
     OpenFDMAssert(portValue);
-    OpenFDMAssert(dynamic_cast<MechanicPortValue*>(portValue));
+    OpenFDMAssert(portValue->toMechanicPortValue());
     return static_cast<MechanicPortValue*>(portValue);
   }
   unsigned getPortIndex() const

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicPortValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicPortValue.h	2008-10-08 18:03:38 UTC (rev 578)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicPortValue.h	2008-10-09 04:34:47 UTC (rev 579)
@@ -16,6 +16,9 @@
 public:
   virtual ~MechanicPortValue();
 
+  virtual MechanicPortValue* toMechanicPortValue() { return this; }
+  virtual const MechanicPortValue* toMechanicPortValue() const { return this; }
+
 // protected:
   // FIXME:
   // Since the interact side is the provider port, an interact might provide

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h	2008-10-08 18:03:38 UTC (rev 578)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NumericPortValue.h	2008-10-09 04:34:47 UTC (rev 579)
@@ -15,6 +15,9 @@
   NumericPortValue(const Size& size);
   virtual ~NumericPortValue();
 
+  virtual NumericPortValue* toNumericPortValue() { return this; }
+  virtual const NumericPortValue* toNumericPortValue() const { return this; }
+
   const Matrix& getValue() const
   { return mMatrix; }
   Matrix& getValue()

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-10-08 18:03:38 UTC (rev 578)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-10-09 04:34:47 UTC (rev 579)
@@ -91,7 +91,7 @@
   virtual bool acceptPortValue(const PortValue* portValue) const
   {
     const NumericPortValue* numericPortValue;
-    numericPortValue = dynamic_cast<const NumericPortValue*>(portValue);
+    numericPortValue = portValue->toNumericPortValue();
     if (!numericPortValue)
       return false;
     // May be do a size check here???
@@ -174,7 +174,7 @@
   { return portInfo.toMechanicLinkInfo(); }
 
   virtual bool acceptPortValue(const PortValue* portValue) const
-  { return dynamic_cast<const MechanicPortValue*>(portValue); }
+  { return portValue->toMechanicPortValue(); }
 
 protected:
   virtual MechanicPortValue* newValueImplementation() const

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h	2008-10-08 18:03:38 UTC (rev 578)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h	2008-10-09 04:34:47 UTC (rev 579)
@@ -11,11 +11,15 @@
 
 namespace OpenFDM {
 
+class NumericPortValue;
+class MechanicPortValue;
+
 class PortValue : public Referenced {
 public:
-  //virtual NumericPortValue* toNumericPortValue() { return 0; }
-  //virtual MechanicPortValue* toMechanicPortValue() { return 0; }
-  //virtual FluidPortValue* toFluidPortValue() { return 0; }
+  virtual NumericPortValue* toNumericPortValue() { return 0; }
+  virtual const NumericPortValue* toNumericPortValue() const { return 0; }
+  virtual MechanicPortValue* toMechanicPortValue() { return 0; }
+  virtual const MechanicPortValue* toMechanicPortValue() const { return 0; }
 
   static void destroy(const PortValue* portValue)
   { delete portValue; }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RealInputPort.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RealInputPort.h	2008-10-08 18:03:38 UTC (rev 578)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RealInputPort.h	2008-10-09 04:34:47 UTC (rev 579)
@@ -23,7 +23,7 @@
     OpenFDMAssert(mPort);
     PortValue* portValue = mPort->getPortValue(portValueVector);
     OpenFDMAssert(portValue);
-    OpenFDMAssert(dynamic_cast<NumericPortValue*>(portValue));
+    OpenFDMAssert(portValue->toNumericPortValue());
     return static_cast<NumericPortValue*>(portValue);
   }
   bool empty() const

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RealOutputPort.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RealOutputPort.h	2008-10-08 18:03:38 UTC (rev 578)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RealOutputPort.h	2008-10-09 04:34:47 UTC (rev 579)
@@ -20,7 +20,7 @@
   {
     PortValue* portValue = mPort->getPortValue(portValueVector);
     OpenFDMAssert(portValue);
-    OpenFDMAssert(dynamic_cast<NumericPortValue*>(portValue));
+    OpenFDMAssert(portValue->toNumericPortValue());
     return static_cast<NumericPortValue*>(portValue);
   }
   unsigned getPortIndex() const

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SystemLog.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SystemLog.h	2008-10-08 18:03:38 UTC (rev 578)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SystemLog.h	2008-10-09 04:34:47 UTC (rev 579)
@@ -55,15 +55,13 @@
     for (unsigned i = 0; i < numPorts; ++i) {
       const PortValue* portValue;
       portValue = nodeInstance.getPortValueList().getPortValue(i);
-      const NumericPortValue* npv;
-      npv = dynamic_cast<const NumericPortValue*>(portValue);
+      const NumericPortValue* npv = portValue->toNumericPortValue();
       if (npv) {
         apply(nodeInstance.getNode().getPort(i), npv);
         continue;
       }
 
-      const MechanicPortValue* mpv;
-      mpv = dynamic_cast<const MechanicPortValue*>(portValue);
+      const MechanicPortValue* mpv = portValue->toMechanicPortValue();
       if (npv) {
         apply(nodeInstance.getNode().getPort(i), mpv);
         continue;



From frohlich at mail.berlios.de  Thu Oct  9 06:50:55 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 9 Oct 2008 06:50:55 +0200
Subject: [OpenFDM-svn] r580 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810090450.m994otCY012369@sheep.berlios.de>

Author: frohlich
Date: 2008-10-09 06:50:53 +0200 (Thu, 09 Oct 2008)
New Revision: 580

Added:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
Removed:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicPortValue.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicPortValue.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/SystemLog.h
Log:
ename MechanicPortValue to MechanicLinkValue.

M    src/OpenFDM/Group.h
D    src/OpenFDM/MechanicPortValue.cpp
M    src/OpenFDM/Makefile.am
M    src/OpenFDM/PortValue.h
D    src/OpenFDM/MechanicPortValue.h
A    src/OpenFDM/MechanicLinkValue.cpp
A    src/OpenFDM/MechanicLinkValue.h
M    src/OpenFDM/MechanicLink.h
M    src/OpenFDM/PortValueList.h
M    src/OpenFDM/SystemLog.h
M    src/OpenFDM/PortInfo.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-09 04:34:47 UTC (rev 579)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-09 04:50:53 UTC (rev 580)
@@ -21,7 +21,7 @@
 /// Port structure:
 /// InputPort (NumericPortValue, size constraint?)
 /// OutputPort (NumericPortValue, size constraint?)
-/// MechanicLink (MechanicPortValue ...)
+/// MechanicLink (MechanicLinkValue ...)
 
 class GroupAcceptorNode : public Node {
 public:

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-09 04:34:47 UTC (rev 579)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-09 04:50:53 UTC (rev 580)
@@ -58,8 +58,8 @@
   MechanicContext.h \
   MechanicInstance.h \
   MechanicLink.h \
+  MechanicLinkValue.h \
   MechanicNode.h \
-  MechanicPortValue.h \
   Model.h \
   ModelContext.h \
   ModelInstance.h \
@@ -138,8 +138,8 @@
   Logger.cpp \
   MechanicContext.cpp \
   MechanicInstance.cpp \
+  MechanicLinkValue.cpp \
   MechanicNode.cpp \
-  MechanicPortValue.cpp \
   MidpointRule.cpp \
   Model.cpp \
   ModelContext.cpp \

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h	2008-10-09 04:34:47 UTC (rev 579)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h	2008-10-09 04:50:53 UTC (rev 580)
@@ -5,7 +5,7 @@
 #ifndef OpenFDM_MechanicLink_H
 #define OpenFDM_MechanicLink_H
 
-#include "MechanicPortValue.h"
+#include "MechanicLinkValue.h"
 #include "PortInfo.h"
 #include "SharedPtr.h"
 
@@ -16,12 +16,12 @@
   MechanicLink(Node* node, const std::string& name) :
     mPort(new MechanicLinkInfo(node, name))
   {}
-  MechanicPortValue* getPortValue(const PortValueVector& portValueVector) const
+  MechanicLinkValue* getPortValue(const PortValueVector& portValueVector) const
   {
     PortValue* portValue = mPort->getPortValue(portValueVector);
     OpenFDMAssert(portValue);
-    OpenFDMAssert(portValue->toMechanicPortValue());
-    return static_cast<MechanicPortValue*>(portValue);
+    OpenFDMAssert(portValue->toMechanicLinkValue());
+    return static_cast<MechanicLinkValue*>(portValue);
   }
   unsigned getPortIndex() const
   { return mPort->getIndex(); }

Copied: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.cpp (from rev 578, branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicPortValue.cpp)
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicPortValue.cpp	2008-10-08 18:03:38 UTC (rev 578)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.cpp	2008-10-09 04:50:53 UTC (rev 580)
@@ -0,0 +1,13 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
+ *
+ */
+
+#include "MechanicLinkValue.h"
+
+namespace OpenFDM {
+
+MechanicLinkValue::~MechanicLinkValue()
+{
+}
+
+} // namespace OpenFDM

Copied: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h (from rev 579, branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicPortValue.h)
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicPortValue.h	2008-10-09 04:34:47 UTC (rev 579)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-10-09 04:50:53 UTC (rev 580)
@@ -0,0 +1,47 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_MechanicLinkValue_H
+#define OpenFDM_MechanicLinkValue_H
+
+#include "Inertia.h"
+#include "PortValue.h"
+#include "Rotation.h"
+#include "Vector.h"
+
+namespace OpenFDM {
+
+class MechanicLinkValue : public PortValue {
+public:
+  virtual ~MechanicLinkValue();
+
+  virtual MechanicLinkValue* toMechanicLinkValue() { return this; }
+  virtual const MechanicLinkValue* toMechanicLinkValue() const { return this; }
+
+// protected:
+  // FIXME:
+  // Since the interact side is the provider port, an interact might provide
+  // different typed ports, the Rigid body can test for at init time and
+  // avoid inertia computations for ports not contributing that ...
+  // May be build a class hierarchy that accounts for different inputs
+  // and outputs a rigid body can have.
+  // Example: force port, force and inertia, frame port, velocity port
+  Vector3 mPosition;
+  Rotation mOrientation;
+  Vector6 mSpatialVelocity;
+  Vector6 mSpatialAcceleration;
+  Vector6 mArticulatedForce;
+  SpatialInertia mArticulatedInertia;
+  // Frame????
+  // FIXME: how to show who is responsible for setting the values???
+  // Solution:
+  // Ok, if set the joint is responsible for filling the velocities
+  // and accelerations, the body is responsible for the inertia -
+  // if unset it is the other way round ...
+  bool mDownStream;
+};
+
+} // namespace OpenFDM
+
+#endif

Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicPortValue.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicPortValue.cpp	2008-10-09 04:34:47 UTC (rev 579)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicPortValue.cpp	2008-10-09 04:50:53 UTC (rev 580)
@@ -1,13 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
- *
- */
-
-#include "MechanicPortValue.h"
-
-namespace OpenFDM {
-
-MechanicPortValue::~MechanicPortValue()
-{
-}
-
-} // namespace OpenFDM

Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicPortValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicPortValue.h	2008-10-09 04:34:47 UTC (rev 579)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicPortValue.h	2008-10-09 04:50:53 UTC (rev 580)
@@ -1,47 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
- *
- */
-
-#ifndef OpenFDM_MechanicPortValue_H
-#define OpenFDM_MechanicPortValue_H
-
-#include "Inertia.h"
-#include "PortValue.h"
-#include "Rotation.h"
-#include "Vector.h"
-
-namespace OpenFDM {
-
-class MechanicPortValue : public PortValue {
-public:
-  virtual ~MechanicPortValue();
-
-  virtual MechanicPortValue* toMechanicPortValue() { return this; }
-  virtual const MechanicPortValue* toMechanicPortValue() const { return this; }
-
-// protected:
-  // FIXME:
-  // Since the interact side is the provider port, an interact might provide
-  // different typed ports, the Rigid body can test for at init time and
-  // avoid inertia computations for ports not contributing that ...
-  // May be build a class hierarchy that accounts for different inputs
-  // and outputs a rigid body can have.
-  // Example: force port, force and inertia, frame port, velocity port
-  Vector3 mPosition;
-  Rotation mOrientation;
-  Vector6 mSpatialVelocity;
-  Vector6 mSpatialAcceleration;
-  Vector6 mArticulatedForce;
-  SpatialInertia mArticulatedInertia;
-  // Frame????
-  // FIXME: how to show who is responsible for setting the values???
-  // Solution:
-  // Ok, if set the joint is responsible for filling the velocities
-  // and accelerations, the body is responsible for the inertia -
-  // if unset it is the other way round ...
-  bool mDownStream;
-};
-
-} // namespace OpenFDM
-
-#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-10-09 04:34:47 UTC (rev 579)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-10-09 04:50:53 UTC (rev 580)
@@ -11,7 +11,7 @@
 #include "WeakPtr.h"
 #include "WeakReferenced.h"
 
-#include "MechanicPortValue.h"
+#include "MechanicLinkValue.h"
 #include "NumericPortValue.h"
 
 namespace OpenFDM {
@@ -25,6 +25,7 @@
 
 class Node;
 
+class NumericPortInfo;
 class InputPortInfo;
 class OutputPortInfo;
 class MechanicLinkInfo;
@@ -39,6 +40,7 @@
 
   unsigned getIndex() const { return mIndex; }
 
+  virtual const NumericPortInfo* toNumericPortInfo() const { return 0; }
   virtual const InputPortInfo* toInputPortInfo() const { return 0; }
   virtual const OutputPortInfo* toOutputPortInfo() const { return 0; }
   virtual const MechanicLinkInfo* toMechanicLinkInfo() const { return 0; }
@@ -88,6 +90,9 @@
   virtual ~NumericPortInfo()
   { }
 
+  virtual const NumericPortInfo* toNumericPortInfo() const
+  { return this; }
+
   virtual bool acceptPortValue(const PortValue* portValue) const
   {
     const NumericPortValue* numericPortValue;
@@ -174,11 +179,11 @@
   { return portInfo.toMechanicLinkInfo(); }
 
   virtual bool acceptPortValue(const PortValue* portValue) const
-  { return portValue->toMechanicPortValue(); }
+  { return portValue->toMechanicLinkValue(); }
 
 protected:
-  virtual MechanicPortValue* newValueImplementation() const
-  { return new MechanicPortValue; }
+  virtual MechanicLinkValue* newValueImplementation() const
+  { return new MechanicLinkValue; }
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h	2008-10-09 04:34:47 UTC (rev 579)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortValue.h	2008-10-09 04:50:53 UTC (rev 580)
@@ -12,14 +12,14 @@
 namespace OpenFDM {
 
 class NumericPortValue;
-class MechanicPortValue;
+class MechanicLinkValue;
 
 class PortValue : public Referenced {
 public:
   virtual NumericPortValue* toNumericPortValue() { return 0; }
   virtual const NumericPortValue* toNumericPortValue() const { return 0; }
-  virtual MechanicPortValue* toMechanicPortValue() { return 0; }
-  virtual const MechanicPortValue* toMechanicPortValue() const { return 0; }
+  virtual MechanicLinkValue* toMechanicLinkValue() { return 0; }
+  virtual const MechanicLinkValue* toMechanicLinkValue() const { return 0; }
 
   static void destroy(const PortValue* portValue)
   { delete portValue; }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h	2008-10-09 04:34:47 UTC (rev 579)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h	2008-10-09 04:50:53 UTC (rev 580)
@@ -56,7 +56,7 @@
   { return port.getPortValue(mPortValueVector); }
 
   // FIXME Implement access control for the port value
-  MechanicPortValue& operator[](const MechanicLink& port) const
+  MechanicLinkValue& operator[](const MechanicLink& port) const
   { return *port.getPortValue(mPortValueVector); }
 
 
@@ -102,6 +102,27 @@
     return mPortValueVector[idx];
   }
 
+  /// Save but partially expensive Accessor for numeric ports
+  const NumericPortValue* getPortValue(const NumericPortInfo* portInfo) const
+  {
+    if (!portInfo)
+      return 0;
+    const PortValue* portValue = getPortValue(portInfo->getIndex());
+    if (!portValue)
+      return 0;
+    return portValue->toNumericPortValue();
+  }
+  /// Save but partially expensive Accessor for numeric ports
+  const MechanicLinkValue* getPortValue(const MechanicLinkInfo* portInfo) const
+  {
+    if (!portInfo)
+      return 0;
+    const PortValue* portValue = getPortValue(portInfo->getIndex());
+    if (!portValue)
+      return 0;
+    return portValue->toMechanicLinkValue();
+  }
+
 protected:
   PortValueVector mPortValueVector;
 };

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SystemLog.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SystemLog.h	2008-10-09 04:34:47 UTC (rev 579)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SystemLog.h	2008-10-09 04:50:53 UTC (rev 580)
@@ -31,7 +31,7 @@
                      const NumericPortValue* numericPortValue)
   { apply(portInfo, static_cast<const PortValue*>(numericPortValue)); }
   virtual void apply(const PortInfo* portInfo,
-                     const MechanicPortValue* mechanicPortValue)
+                     const MechanicLinkValue* mechanicPortValue)
   { apply(portInfo, static_cast<const PortValue*>(mechanicPortValue)); }
 
 protected:
@@ -61,7 +61,7 @@
         continue;
       }
 
-      const MechanicPortValue* mpv = portValue->toMechanicPortValue();
+      const MechanicLinkValue* mpv = portValue->toMechanicLinkValue();
       if (npv) {
         apply(nodeInstance.getNode().getPort(i), mpv);
         continue;



From frohlich at mail.berlios.de  Thu Oct  9 07:07:01 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 9 Oct 2008 07:07:01 +0200
Subject: [OpenFDM-svn] r581 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810090507.m99571ot028871@sheep.berlios.de>

Author: frohlich
Date: 2008-10-09 07:06:59 +0200 (Thu, 09 Oct 2008)
New Revision: 581

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Cleanup.

M    src/OpenFDM/System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-09 04:50:53 UTC (rev 580)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-09 05:06:59 UTC (rev 581)
@@ -210,7 +210,6 @@
 
 ////////////////////////////////////////////////////////////////////
 
-// Just here so that I do not care for intationation order for now ...
 class System::NodeInstanceCollector : public ConstNodeVisitor {
 public:
 
@@ -337,7 +336,6 @@
     SharedPtr<AbstractNodeInstance> mNodeInstance;
   };
 
-
   virtual void apply(const Node& node)
   { Log(Schedule, Error) << __PRETTY_FUNCTION__ << std::endl; }
   virtual void apply(const LeafNode& leaf)
@@ -424,14 +422,18 @@
     ExternalGroupPortDataMap parentGroupPortDataMap(group.getNumPorts());
     parentGroupPortDataMap.swap(_groupPortDataMap);
 
-    // Walk the children
+    // End pushing external connection data
+
+    // Now walk the children
     for (unsigned i = 0; i < group.getNumChildren(); ++i) {
+      // Push the right per node port information struct
       SharedPtr<PortDataList> parentNodePortDataList;
       parentNodePortDataList.swap(mCurrentNodePortDataList);
       mCurrentNodePortDataList = _portDataMap[i];
 
       group.getChild(i)->accept(*this);
 
+      // Pop the per node port information struct
       parentNodePortDataList.swap(mCurrentNodePortDataList);
     }
 
@@ -468,30 +470,31 @@
       unsigned portInfoIndex1 = portInfo1->getIndex();
       if (!_portDataMap[nodeIndex1]->mPortDataVector[portInfoIndex1]->
           connect(_portDataMap[nodeIndex0]->mPortDataVector[portInfoIndex0]))
-        Log(Schedule, Error) << "Cannot connect????" << std::endl;
+        Log(Schedule, Error) << "Internal Error: Cannot connect ports that"
+          " appeared to be compatible before." << std::endl;
     }
 
     SharedPtr<PortDataList> portDataList = buildNodeContext(group);
 
-    parentPortDataMap.swap(_portDataMap);
-    // Ok, some nameing niceness
-    PortDataMap childrenPortDataMap;
-    childrenPortDataMap.swap(parentPortDataMap);
-
     // add group connect routings
     // merge child list into the global list of instances
     for (unsigned i = 0; i < group.getNumPorts(); ++i) {
       PortData* portData = _groupPortDataMap[i];
+      if (!portData) {
+        Log(Schedule, Error) << "Internal Error: Cannot find internal port "
+          "data for group external port!" << std::endl;
+        continue;
+      }
 
-      PortData* parentPortData;
-      parentPortData = portDataList->newPortData(group.getPort(i));
-
+      // Allocate a new port data struct in the parent.
+      PortData* parentPortData = portDataList->newPortData(group.getPort(i));
       parentPortData->setProxyPortData(portData);
       portData->setProxyPortData(parentPortData);
     }
 
-    // Swap the PortDataList by external port index map back
+    // Pop the per group port connect info
     parentGroupPortDataMap.swap(_groupPortDataMap);
+    parentPortDataMap.swap(_portDataMap);
   }
 
   ////////////////////////////////////////////////////////////////////////////
@@ -515,9 +518,11 @@
   // Holds the PortDataList pointer indexed by parent groups port index
   typedef std::vector<SharedPtr<PortData> > ExternalGroupPortDataMap;
   ExternalGroupPortDataMap _groupPortDataMap;
-  // Just to hold references to all mort data lists we have in the
+  // Just to hold references to all port data lists we have in the
   // simulation system. They are just needed during traversal for connect
-  // information and to distribute port value pointers.
+  // information and to distribute port value pointers. If this list is not
+  // built up the PortData values are deleted befor the PortValues are
+  // distributed.
   typedef std::list<SharedPtr<PortDataList> > PortDataListList;
   PortDataListList _portDataListList;
 



From frohlich at mail.berlios.de  Thu Oct  9 07:50:08 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 9 Oct 2008 07:50:08 +0200
Subject: [OpenFDM-svn] r582 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200810090550.m995o8Jt007833@sheep.berlios.de>

Author: frohlich
Date: 2008-10-09 07:50:05 +0200 (Thu, 09 Oct 2008)
New Revision: 582

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Rename the group inputs and outputs.
Add a new mechanic link group port.

M    src/test/structure.cpp
M    src/OpenFDM/Group.h
M    src/OpenFDM/Group.cpp
M    src/OpenFDM/NodeVisitor.h
M    src/OpenFDM/ConstNodeVisitor.h
M    src/OpenFDM/NodeVisitor.cpp
M    src/OpenFDM/System.cpp
M    src/OpenFDM/ConstNodeVisitor.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp	2008-10-09 05:06:59 UTC (rev 581)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp	2008-10-09 05:50:05 UTC (rev 582)
@@ -33,18 +33,24 @@
 }
 
 void
-ConstNodeVisitor::apply(const GroupAcceptorNode& node)
+ConstNodeVisitor::apply(const GroupInput& node)
 {
   apply(static_cast<const Node&>(node));
 }
 
 void
-ConstNodeVisitor::apply(const GroupProviderNode& node)
+ConstNodeVisitor::apply(const GroupOutput& node)
 {
   apply(static_cast<const Node&>(node));
 }
 
 void
+ConstNodeVisitor::apply(const GroupMechanicLink& node)
+{
+  apply(static_cast<const Node&>(node));
+}
+
+void
 ConstNodeVisitor::apply(const LibraryNode& libraryNode)
 {
   apply(static_cast<const Node&>(libraryNode));

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h	2008-10-09 05:06:59 UTC (rev 581)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h	2008-10-09 05:50:05 UTC (rev 582)
@@ -13,8 +13,9 @@
 
 class Node;
 class Group;
-class GroupAcceptorNode;
-class GroupProviderNode;
+class GroupInput;
+class GroupOutput;
+class GroupMechanicLink;
 class LibraryNode;
 class LeafNode;
 class Model;
@@ -31,8 +32,9 @@
   virtual void apply(const Node&);
 
   virtual void apply(const Group&);
-  virtual void apply(const GroupAcceptorNode&);
-  virtual void apply(const GroupProviderNode&);
+  virtual void apply(const GroupInput&);
+  virtual void apply(const GroupOutput&);
+  virtual void apply(const GroupMechanicLink&);
 
   virtual void apply(const LibraryNode&);
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-10-09 05:06:59 UTC (rev 581)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-10-09 05:50:05 UTC (rev 582)
@@ -8,18 +8,24 @@
 
 namespace OpenFDM {
 
-GroupAcceptorNode::GroupAcceptorNode(const std::string& name) :
+GroupInput::GroupInput(const std::string& name) :
   Node(name),
-  _groupInternalPort(new OutputPortInfo(this, "output", Size(0, 0)))
+  mGroupInternalPort(new OutputPortInfo(this, "output", Size(0, 0)))
 {
 }
 
-GroupProviderNode::GroupProviderNode(const std::string& name) :
+GroupOutput::GroupOutput(const std::string& name) :
   Node(name),
-  _groupInternalPort(new InputPortInfo(this, "input", Size(0, 0), false))
+  mGroupInternalPort(new InputPortInfo(this, "input", Size(0, 0), false))
 {
 }
 
+GroupMechanicLink::GroupMechanicLink(const std::string& name) :
+  Node(name),
+  mGroupInternalPort(new MechanicLinkInfo(this, "link"))
+{
+}
+
 BEGIN_OPENFDM_OBJECT_DEF(Group, Node)
   END_OPENFDM_OBJECT_DEF
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-09 05:06:59 UTC (rev 581)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-09 05:50:05 UTC (rev 582)
@@ -23,9 +23,9 @@
 /// OutputPort (NumericPortValue, size constraint?)
 /// MechanicLink (MechanicLinkValue ...)
 
-class GroupAcceptorNode : public Node {
+class GroupInput : public Node {
 public:
-  GroupAcceptorNode(const std::string& name = std::string());
+  GroupInput(const std::string& name = std::string());
   virtual void accept(NodeVisitor& visitor)
   { visitor.apply(*this); }
   virtual void accept(ConstNodeVisitor& visitor) const
@@ -33,13 +33,13 @@
   unsigned getExternalPortIndex() const
   { return mExternalPortInfo->getIndex(); }
 
-  SharedPtr<OutputPortInfo> _groupInternalPort;
+  SharedPtr<OutputPortInfo> mGroupInternalPort;
   SharedPtr<const PortInfo> mExternalPortInfo;
 };
 
-class GroupProviderNode : public Node {
+class GroupOutput : public Node {
 public:
-  GroupProviderNode(const std::string& name = std::string());
+  GroupOutput(const std::string& name = std::string());
   virtual void accept(NodeVisitor& visitor)
   { visitor.apply(*this); }
   virtual void accept(ConstNodeVisitor& visitor) const
@@ -47,10 +47,24 @@
   unsigned getExternalPortIndex() const
   { return mExternalPortInfo->getIndex(); }
 
-  SharedPtr<InputPortInfo> _groupInternalPort;
+  SharedPtr<InputPortInfo> mGroupInternalPort;
   SharedPtr<const PortInfo> mExternalPortInfo;
 };
 
+class GroupMechanicLink : public Node {
+public:
+  GroupMechanicLink(const std::string& name = std::string());
+  virtual void accept(NodeVisitor& visitor)
+  { visitor.apply(*this); }
+  virtual void accept(ConstNodeVisitor& visitor) const
+  { visitor.apply(*this); }
+  unsigned getExternalPortIndex() const
+  { return mExternalPortInfo->getIndex(); }
+
+  SharedPtr<MechanicLinkInfo> mGroupInternalPort;
+  SharedPtr<const PortInfo> mExternalPortInfo;
+};
+
 class Group : public Node {
   OPENFDM_OBJECT(Group, Node);
 public:
@@ -71,24 +85,33 @@
   SharedPtr<const Node> getChild(unsigned i) const;
 
   // add a new group port to the group
-  NodeId addAcceptorPort()
+  NodeId addGroupInput()
   {
-    GroupAcceptorNode *groupAcceptorNode = new GroupAcceptorNode;
+    GroupInput *groupAcceptorNode = new GroupInput;
     NodeId nodeId = addChild(groupAcceptorNode);
     InputPortInfo* inputPortInfo;
     inputPortInfo = new InputPortInfo(this, "input", Size(0, 0), false);
     groupAcceptorNode->mExternalPortInfo = inputPortInfo;
     return nodeId;
   }
-  NodeId addProviderPort()
+  NodeId addGroupOutput()
   {
-    GroupProviderNode *groupProviderNode = new GroupProviderNode;
+    GroupOutput *groupProviderNode = new GroupOutput;
     NodeId nodeId = addChild(groupProviderNode);
     OutputPortInfo* outputPortInfo;
     outputPortInfo = new OutputPortInfo(this, "output", Size(0, 0));
     groupProviderNode->mExternalPortInfo = outputPortInfo;
     return nodeId;
   }
+  NodeId addGroupMechanicLink()
+  {
+    GroupMechanicLink *groupProviderNode = new GroupMechanicLink;
+    NodeId nodeId = addChild(groupProviderNode);
+    MechanicLinkInfo* outputPortInfo;
+    outputPortInfo = new MechanicLinkInfo(this, "link");
+    groupProviderNode->mExternalPortInfo = outputPortInfo;
+    return nodeId;
+  }
 
   bool connect(const NodeId& nodeId0, const std::string& portName0,
                const NodeId& nodeId1, const std::string& portName1)

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp	2008-10-09 05:06:59 UTC (rev 581)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp	2008-10-09 05:50:05 UTC (rev 582)
@@ -33,18 +33,24 @@
 }
 
 void
-NodeVisitor::apply(GroupAcceptorNode& node)
+NodeVisitor::apply(GroupInput& node)
 {
   apply(static_cast<Node&>(node));
 }
 
 void
-NodeVisitor::apply(GroupProviderNode& node)
+NodeVisitor::apply(GroupOutput& node)
 {
   apply(static_cast<Node&>(node));
 }
 
 void
+NodeVisitor::apply(GroupMechanicLink& node)
+{
+  apply(static_cast<Node&>(node));
+}
+
+void
 NodeVisitor::apply(LibraryNode& libraryNode)
 {
   apply(static_cast<Node&>(libraryNode));

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h	2008-10-09 05:06:59 UTC (rev 581)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h	2008-10-09 05:50:05 UTC (rev 582)
@@ -13,8 +13,9 @@
 
 class Node;
 class Group;
-class GroupAcceptorNode;
-class GroupProviderNode;
+class GroupInput;
+class GroupOutput;
+class GroupMechanicLink;
 class LibraryNode;
 class LeafNode;
 class Model;
@@ -31,8 +32,9 @@
   virtual void apply(Node&);
 
   virtual void apply(Group&);
-  virtual void apply(GroupAcceptorNode&);
-  virtual void apply(GroupProviderNode&);
+  virtual void apply(GroupInput&);
+  virtual void apply(GroupOutput&);
+  virtual void apply(GroupMechanicLink&);
 
   virtual void apply(LibraryNode&);
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-09 05:06:59 UTC (rev 581)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-09 05:50:05 UTC (rev 582)
@@ -354,22 +354,28 @@
     return portDataList;
   }
 
-  // Aussen acceptor, innen provider
-  virtual void apply(const GroupAcceptorNode& leaf)
+  /// FIXME: may be collapse them into one class with a type argument?
+  virtual void apply(const GroupInput& leaf)
   {
     PortDataList* portDataList = buildNodeContext(leaf);
     OpenFDMAssert(leaf.getPort(0));
     PortData* portData = portDataList->newPortData(leaf.getPort(0));
     _groupPortDataMap[leaf.getExternalPortIndex()] = portData;
   }
-  // Aussen provider, innen acceptor
-  virtual void apply(const GroupProviderNode& leaf)
+  virtual void apply(const GroupOutput& leaf)
   {
     PortDataList* portDataList = buildNodeContext(leaf);
     OpenFDMAssert(leaf.getPort(0));
     PortData* portData = portDataList->newPortData(leaf.getPort(0));
     _groupPortDataMap[leaf.getExternalPortIndex()] = portData;
   }
+  virtual void apply(const GroupMechanicLink& leaf)
+  {
+    PortDataList* portDataList = buildNodeContext(leaf);
+    OpenFDMAssert(leaf.getPort(0));
+    PortData* portData = portDataList->newPortData(leaf.getPort(0));
+    _groupPortDataMap[leaf.getExternalPortIndex()] = portData;
+  }
 
   void allocPortData(AbstractNodeInstance* nodeInstance, const LeafNode& leaf)
   {

Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-09 05:06:59 UTC (rev 581)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-09 05:50:05 UTC (rev 582)
@@ -51,7 +51,7 @@
   group->connect(gain, "output", delay, "input");
   group->connect(delay, "output", outputDelay, "input");
 
-  Group::NodeId groupOutputNode = group->addProviderPort();
+  Group::NodeId groupOutputNode = group->addGroupOutput();
   group->connect(integrator2, "output", groupOutputNode, "input");
 
   SharedPtr<Group> topGroup = new Group("G1");



From frohlich at mail.berlios.de  Thu Oct  9 07:55:17 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 9 Oct 2008 07:55:17 +0200
Subject: [OpenFDM-svn] r583 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810090555.m995tHg5024823@sheep.berlios.de>

Author: frohlich
Date: 2008-10-09 07:55:16 +0200 (Thu, 09 Oct 2008)
New Revision: 583

Added:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Fraction.h
Removed:
   branches/OpenFDM-StateSeparation/src/OpenFDM/SampleTime.cpp
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/SampleTime.h
Log:
Hmm, may be sample times like that...

M    src/OpenFDM/Makefile.am
M    src/OpenFDM/Node.h
D    src/OpenFDM/SampleTime.cpp
M    src/OpenFDM/Node.cpp
A    src/OpenFDM/Fraction.h
M    src/OpenFDM/SampleTime.h


Added: branches/OpenFDM-StateSeparation/src/OpenFDM/Fraction.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Fraction.h	2008-10-09 05:50:05 UTC (rev 582)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Fraction.h	2008-10-09 05:55:16 UTC (rev 583)
@@ -0,0 +1,374 @@
+/* -*-c++-*- OpenFDM - Copyright (C) 2007-2008 Mathias Froehlich 
+ *
+ */
+
+#ifndef OpenFDM_Fraction_H
+#define OpenFDM_Fraction_H
+
+#include <istream>
+#include <ostream>
+#include <cctype>
+
+#include "Types.h"
+#include "Limits.h"
+#include "Math.h"
+
+namespace OpenFDM {
+
+class Fraction {
+public:
+  typedef long numerator_type;
+  typedef unsigned long denominator_type;
+
+  Fraction()
+  { }
+  Fraction(const numerator_type& numerator) :
+    mNumerator(numerator),
+    mDenominator(1)
+  { }
+  Fraction(const numerator_type& numerator,
+           const denominator_type& denominator) :
+    mNumerator(numerator),
+    mDenominator(denominator)
+  { reduce(); }
+
+  const numerator_type& getNumerator() const
+  { return mNumerator; }
+  const denominator_type& getDenominator() const
+  { return mDenominator; }
+
+  real_type getRealValue() const
+  {
+    int exp2 = 0;
+    numerator_type n = getNumerator();
+    while (n != 0 && (n&1) == 0) {
+      ++exp2;
+      n >> 1;
+    }
+    denominator_type d = getDenominator();
+    while (d != 0 && (d&1) == 0) {
+      --exp2;
+      d >> 1;
+    }
+    
+    return ldexp(real_type(n)/real_type(d), exp2);
+  }
+
+  denominator_type reductionFactor() const
+  { return gcd(std::abs(mNumerator), mDenominator); }
+
+  Fraction& reduce()
+  {
+    denominator_type tmp = reductionFactor();
+    if (tmp <= 1)
+      return *this;
+    mNumerator /= tmp;
+    mDenominator /= tmp;
+    return *this;
+  }
+
+  Fraction& operator+=(const Fraction& fraction)
+  {
+    // Just in case that the argument is *this
+    numerator_type numerator = fraction.mNumerator;
+    denominator_type denumerator = fraction.mDenominator;
+
+    denominator_type g = gcd(mDenominator, denumerator);
+    mDenominator /= g;
+    mNumerator = mNumerator*(denumerator/g) + numerator*mDenominator;
+    g = gcd(std::abs(mNumerator), g);
+    mNumerator /= g;
+    mDenominator *= denumerator/g;
+
+    return *this;
+  }
+  Fraction& operator-=(const Fraction& fraction)
+  {
+    // Just in case that the argument is *this
+    numerator_type numerator = fraction.mNumerator;
+    denominator_type denumerator = fraction.mDenominator;
+
+    denominator_type g = gcd(mDenominator, denumerator);
+    mDenominator /= g;
+    mNumerator = mNumerator*(denumerator/g) - numerator*mDenominator;
+    g = gcd(std::abs(mNumerator), g);
+    mNumerator /= g;
+    mDenominator *= denumerator/g;
+
+    return *this;
+  }
+
+  Fraction& operator*=(const Fraction& fraction)
+  {
+    // Just in case that the argument is *this
+    numerator_type numerator = fraction.mNumerator;
+    denominator_type denumerator = fraction.mDenominator;
+
+    denominator_type g0 = gcd(std::abs(mNumerator), denumerator);
+    denominator_type g1 = gcd(std::abs(numerator), mDenominator);
+
+    mNumerator /= g0;
+    mNumerator *= numerator/g1;
+    mDenominator /= g1;
+    mDenominator *= denumerator/g0;
+    return *this;
+  }
+  Fraction& operator/=(const Fraction& fraction)
+  {
+    // Just in case that the argument is *this
+    numerator_type numerator = fraction.mNumerator;
+    denominator_type denumerator = fraction.mDenominator;
+
+    denominator_type g0 = gcd(mDenominator, denumerator);
+    denominator_type g1 = gcd(std::abs(mNumerator), std::abs(numerator));
+
+    mNumerator /= g1;
+    mNumerator *= denumerator/g0;
+    mDenominator /= g0;
+    mDenominator *= numerator/g1;
+    return *this;
+  }
+
+  Fraction operator+() const
+  { return *this; }
+
+  Fraction operator-() const
+  { return Fraction(-getNumerator(), getDenominator(), true); }
+
+  static Fraction NaN() { return Fraction(0, 0, true); }
+  static Fraction inf() { return Fraction(1, 0, true); }
+
+  static denominator_type gcd(denominator_type a, denominator_type b)
+  {
+    if (a == 0 || b == 0)
+      return 1;
+
+    while (b) {
+      denominator_type r = a % b;
+      a = b;
+      b = r;
+    }
+
+    return a;
+  }
+
+  static
+  bool
+  less(const Fraction& u, const Fraction& v)
+  {
+    // Avoid overflow
+    denominator_type ud = u.getDenominator();
+    denominator_type vd = v.getDenominator();
+    denominator_type gcdd = Fraction::gcd(ud, vd);
+    ud /= gcdd;
+    vd /= gcdd;
+    
+    numerator_type un = u.getNumerator();
+    numerator_type vn = v.getNumerator();
+    denominator_type gcdn = gcd(std::abs(un), std::abs(vn));
+    un /= gcdn;
+    vn /= gcdn;
+    
+    return un*vd < ud*vn;
+  }
+
+  static
+  bool
+  equal(const Fraction& u, const Fraction& v)
+  {
+    // Avoid overflow
+    denominator_type ud = u.getDenominator();
+    denominator_type vd = v.getDenominator();
+    denominator_type gcdd = Fraction::gcd(ud, vd);
+    ud /= gcdd;
+    vd /= gcdd;
+    
+    numerator_type un = u.getNumerator();
+    numerator_type vn = v.getNumerator();
+    denominator_type gcdn = gcd(std::abs(un), std::abs(vn));
+    un /= gcdn;
+    vn /= gcdn;
+    
+    return un*vd == ud*vn;
+  }
+
+private:
+  Fraction(const numerator_type& numerator,
+           const denominator_type& denominator,
+           bool reduced) :
+    mNumerator(numerator),
+    mDenominator(denominator)
+  { if (!reduced) reduce(); }
+
+  numerator_type mNumerator;
+  denominator_type mDenominator;
+};
+
+inline
+Fraction
+operator+(const Fraction& u, const Fraction& v)
+{ return Fraction(u) += v; }
+
+inline
+Fraction
+operator-(const Fraction& u, const Fraction& v)
+{ return Fraction(u) -= v; }
+
+inline
+Fraction
+operator*(const Fraction& u, const Fraction& v)
+{ return Fraction(u) *= v; }
+
+inline
+Fraction
+operator/(const Fraction& u, const Fraction& v)
+{ return Fraction(u) /= v; }
+
+inline
+Fraction
+operator%(const Fraction& x, const Fraction& y)
+{
+  Fraction q = x/y;
+  Fraction::denominator_type n = std::abs(q.getNumerator())/q.getDenominator();
+  return x - n*y;
+}
+
+inline
+Fraction
+fmod(const Fraction& x, const Fraction& y)
+{ return x % y; }
+
+inline
+bool
+isfinite(const Fraction& fraction)
+{ return fraction.getDenominator() != 0; }
+
+inline
+bool
+isnan(const Fraction& fraction)
+{ return fraction.getNumerator() == 0 && fraction.getDenominator() == 0; }
+
+inline
+bool
+operator==(const Fraction& u, const Fraction& v)
+{
+  if (isnan(u) || isnan(v))
+    return false;
+  return Fraction::equal(u, v);
+}
+
+inline
+bool
+operator!=(const Fraction& u, const Fraction& v)
+{
+  if (isnan(u) || isnan(v))
+    return false;
+  return !Fraction::equal(u, v);
+}
+
+inline
+bool
+operator<(const Fraction& u, const Fraction& v)
+{
+  if (isnan(u) || isnan(v))
+    return false;
+  return Fraction::less(u, v);
+}
+
+inline
+bool
+operator<=(const Fraction& u, const Fraction& v)
+{
+  if (isnan(u) || isnan(v))
+    return false;
+  return !Fraction::less(v, u);
+}
+
+inline
+bool
+operator>(const Fraction& u, const Fraction& v)
+{
+  if (isnan(u) || isnan(v))
+    return false;
+  return Fraction::less(v, u);
+}
+
+inline
+bool
+operator>=(const Fraction& u, const Fraction& v)
+{
+  if (isnan(u) || isnan(v))
+    return false;
+  return !Fraction::less(u, v);
+}
+
+inline
+Fraction
+abs(const Fraction& x)
+{ return Fraction(std::abs(x.getNumerator()), x.getDenominator()); }
+
+inline
+Fraction
+fabs(const Fraction& x)
+{ return Fraction(std::abs(x.getNumerator()), x.getDenominator()); }
+
+
+/// Compute the greatest common divisor of a and b
+inline
+Fraction
+greatestCommonDivisor(Fraction a, Fraction b)
+{
+  a = abs(a);
+  b = abs(b);
+
+  while (b != 0) {
+    Fraction r = a % b;
+    a = b;
+    b = r;
+  }
+
+  return a;
+}
+
+
+template<typename char_type, typename traits_type> 
+inline
+std::basic_ostream<char_type, traits_type>&
+operator<<(std::basic_ostream<char_type, traits_type>& os, const Fraction& f)
+{ return os << f.getNumerator() << os.widen('/') << f.getDenominator(); }
+
+template<typename char_type, typename traits_type> 
+inline
+std::basic_istream<char_type, traits_type>&
+operator>>(std::basic_istream<char_type, traits_type>& is, Fraction& f)
+{
+  Fraction::numerator_type numerator;
+  is >> numerator;
+  if (is.peek() == is.widen('/')) {
+    is.ignore(1);
+    Fraction::denominator_type denominator;
+    is >> denominator;
+    f = Fraction(numerator, denominator);
+    return is;
+
+  } else if (is.peek() == is.widen('.')) {
+    is.ignore(1);
+    
+    Fraction::denominator_type denominator = 1;
+    while (std::isdigit(is.peek())) {
+      char_type digit = is.get();
+      numerator = numerator*10 + digit - '0';
+      denominator *= 10;
+    }
+    f = Fraction(numerator, denominator);
+    
+    return is;
+  } else {
+    f = Fraction(numerator);
+    return is;
+  }
+}
+
+} // namespace OpenFDM
+
+#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-09 05:50:05 UTC (rev 582)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-09 05:55:16 UTC (rev 583)
@@ -27,6 +27,7 @@
   EnvironmentObject.h \
   ExplicitAdams.h \
   ExplicitEuler.h \
+  Fraction.h \
   Frame.h \
   FrameVisitor.h \
   Function.h \
@@ -156,7 +157,6 @@
   PortValue.cpp \
   RigidBody.cpp \
   RootJoint.cpp \
-  SampleTime.cpp \
   StateValue.cpp \
   System.cpp \
   Time.cpp \

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-10-09 05:50:05 UTC (rev 582)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-10-09 05:55:16 UTC (rev 583)
@@ -13,7 +13,8 @@
   END_OPENFDM_OBJECT_DEF
 
 Node::Node(const std::string& name) :
-  Object(name)
+  Object(name),
+  mSampleTime(0, 1)
 {
 }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-10-09 05:50:05 UTC (rev 582)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-10-09 05:55:16 UTC (rev 583)
@@ -7,6 +7,7 @@
 
 #include <string>
 #include <vector>
+#include "Fraction.h"
 #include "Object.h"
 #include "PortId.h"
 #include "PortInfo.h"
@@ -47,6 +48,11 @@
   unsigned getPortIndex(const PortId& portId) const;
   bool checkPort(const PortId& portId) const;
 
+  const Fraction& getSampleTime() const
+  { return mSampleTime; }
+  void setSampleTime(const Fraction& sampleTime)
+  { mSampleTime = sampleTime; }
+
 protected:
 
   void addParent(Node* parent);
@@ -56,16 +62,22 @@
   Node(const Node&);
   Node& operator=(const Node&);
 
+  /// Methods and variables for port handling.
+  friend class PortInfo;
+
   void addPort(PortInfo* port);
   void removePort(PortInfo* port);
 
   typedef std::vector<SharedPtr<PortInfo> > PortList;
   PortList mPortList;
 
-  friend class PortInfo;
-
+  /// Parents.
   typedef std::vector<WeakPtr<Node> > ParentList;
   ParentList mParentList;
+
+  /// Sample time handling.
+  /// FIXME Should that be something like the old sample time set??
+  Fraction mSampleTime;
 };
 
 } // namespace OpenFDM

Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/SampleTime.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SampleTime.cpp	2008-10-09 05:50:05 UTC (rev 582)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SampleTime.cpp	2008-10-09 05:55:16 UTC (rev 583)
@@ -1,13 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#include "SampleTime.h"
-
-namespace OpenFDM {
-
-const SampleTime SampleTime::PerTimestep(-2);
-const SampleTime SampleTime::Inherited(-1);
-const SampleTime SampleTime::Continous(0);
-
-} // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SampleTime.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SampleTime.h	2008-10-09 05:50:05 UTC (rev 582)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SampleTime.h	2008-10-09 05:55:16 UTC (rev 583)
@@ -10,6 +10,7 @@
 
 #include "Types.h"
 #include "Assert.h"
+#include "Fraction.h"
 
 namespace OpenFDM {
 
@@ -23,10 +24,13 @@
 /// animations
 class SampleTime {
 public:
-  /// Default constructor, defaults to discrete sample time
-  SampleTime(void) : mSampleTime(0) {}
+  /// Default constructor, defaults to continous sample time
+  SampleTime(const SampleTime& sampleTime = getInherited()) :
+    mSampleTime(sampleTime.mSampleTime) {}
   /// Constructor with given sample time
-  SampleTime(real_type sampleTime) : mSampleTime(sampleTime) {}
+  SampleTime(const Fraction& sampleTime) :
+    mSampleTime(sampleTime) {}
+  /// Constructor with given sample time
   /// Returns true if the sample time is a continous sample time
   bool isContinous(void) const
   { return mSampleTime == 0; }
@@ -41,7 +45,7 @@
   bool isPerTimestep(void) const
   { return mSampleTime == -2; }
   /// Returns the actual sample time
-  real_type getSampleTime(void) const
+  const Fraction& getSampleTime(void) const
   { return mSampleTime; }
 
   /// Returns true if th sample time is valid
@@ -53,12 +57,13 @@
   bool operator!=(const SampleTime& st) const
   { return mSampleTime != st.mSampleTime; }
 
-  static const SampleTime PerTimestep;
-  static const SampleTime Inherited;
-  static const SampleTime Continous;
+  static SampleTime getPerBasicStepSize() { return Fraction(-3); }
+  static SampleTime getPerTimestep() { return Fraction(-2); }
+  static SampleTime getInherited() { return Fraction(-1); }
+  static SampleTime getContinous() { return Fraction(0); }
 
 private:
-  real_type mSampleTime;
+  Fraction mSampleTime;
 };
 
 class SampleTimeSet {



From frohlich at mail.berlios.de  Thu Oct  9 20:41:01 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 9 Oct 2008 20:41:01 +0200
Subject: [OpenFDM-svn] r584 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200810091841.m99If1tf023875@sheep.berlios.de>

Author: frohlich
Date: 2008-10-09 20:41:00 +0200 (Thu, 09 Oct 2008)
New Revision: 584

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Improove group interface nodes.
M    src/test/structure.cpp
M    src/OpenFDM/Group.h
M    src/OpenFDM/Group.cpp
M    src/OpenFDM/Node.h
M    src/OpenFDM/NodeVisitor.h
M    src/OpenFDM/ConstNodeVisitor.h
M    src/OpenFDM/Node.cpp
M    src/OpenFDM/NodeVisitor.cpp
M    src/OpenFDM/System.cpp
M    src/OpenFDM/ConstNodeVisitor.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp	2008-10-09 05:55:16 UTC (rev 583)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp	2008-10-09 18:41:00 UTC (rev 584)
@@ -33,24 +33,12 @@
 }
 
 void
-ConstNodeVisitor::apply(const GroupInput& node)
+ConstNodeVisitor::apply(const GroupInterfaceNode& node)
 {
   apply(static_cast<const Node&>(node));
 }
 
 void
-ConstNodeVisitor::apply(const GroupOutput& node)
-{
-  apply(static_cast<const Node&>(node));
-}
-
-void
-ConstNodeVisitor::apply(const GroupMechanicLink& node)
-{
-  apply(static_cast<const Node&>(node));
-}
-
-void
 ConstNodeVisitor::apply(const LibraryNode& libraryNode)
 {
   apply(static_cast<const Node&>(libraryNode));

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h	2008-10-09 05:55:16 UTC (rev 583)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h	2008-10-09 18:41:00 UTC (rev 584)
@@ -13,9 +13,7 @@
 
 class Node;
 class Group;
-class GroupInput;
-class GroupOutput;
-class GroupMechanicLink;
+class GroupInterfaceNode;
 class LibraryNode;
 class LeafNode;
 class Model;
@@ -32,9 +30,7 @@
   virtual void apply(const Node&);
 
   virtual void apply(const Group&);
-  virtual void apply(const GroupInput&);
-  virtual void apply(const GroupOutput&);
-  virtual void apply(const GroupMechanicLink&);
+  virtual void apply(const GroupInterfaceNode&);
 
   virtual void apply(const LibraryNode&);
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-10-09 05:55:16 UTC (rev 583)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.cpp	2008-10-09 18:41:00 UTC (rev 584)
@@ -8,24 +8,6 @@
 
 namespace OpenFDM {
 
-GroupInput::GroupInput(const std::string& name) :
-  Node(name),
-  mGroupInternalPort(new OutputPortInfo(this, "output", Size(0, 0)))
-{
-}
-
-GroupOutput::GroupOutput(const std::string& name) :
-  Node(name),
-  mGroupInternalPort(new InputPortInfo(this, "input", Size(0, 0), false))
-{
-}
-
-GroupMechanicLink::GroupMechanicLink(const std::string& name) :
-  Node(name),
-  mGroupInternalPort(new MechanicLinkInfo(this, "link"))
-{
-}
-
 BEGIN_OPENFDM_OBJECT_DEF(Group, Node)
   END_OPENFDM_OBJECT_DEF
 
@@ -67,6 +49,10 @@
 Group::NodeId
 Group::addChild(const SharedPtr<Node>& node)
 {
+  if (!node)
+    return NodeId();
+  if (!node->addParent(this))
+    return NodeId();
   _childList.push_back(new Child(this, node));
   return NodeId(_childList.back());
 }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-09 05:55:16 UTC (rev 583)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-09 18:41:00 UTC (rev 584)
@@ -18,51 +18,97 @@
 
 namespace OpenFDM {
 
-/// Port structure:
-/// InputPort (NumericPortValue, size constraint?)
-/// OutputPort (NumericPortValue, size constraint?)
-/// MechanicLink (MechanicLinkValue ...)
-
-class GroupInput : public Node {
+class GroupInterfaceNode : public Node {
 public:
-  GroupInput(const std::string& name = std::string());
+  GroupInterfaceNode(const std::string& name) : Node(name) {}
   virtual void accept(NodeVisitor& visitor)
-  { visitor.apply(*this); }
+  {
+    visitor.handleNodePathAndApply(this);
+  }
   virtual void accept(ConstNodeVisitor& visitor) const
-  { visitor.apply(*this); }
+  {
+    visitor.handleNodePathAndApply(this);
+  }
+
   unsigned getExternalPortIndex() const
   { return mExternalPortInfo->getIndex(); }
+protected:
+  virtual bool addParent(Node* parent)
+  {
+    if (getNumParents()) {
+      Log(Model,Warning) << "Group Interface Nodes cannot have more than "
+        "one parent!" << std::endl;
+      return false;
+    }
+    
+    return Node::addParent(parent);
+  }
+  virtual void removeParent(Node* parent)
+  {
+    Node::removeParent(parent);
+  }
 
+  void setExternalPortInfo(PortInfo* portInfo)
+  {
+    mExternalPortInfo = portInfo;
+  }
+
+private:
+  SharedPtr<PortInfo> mExternalPortInfo;
+};
+
+class GroupInput : public GroupInterfaceNode {
+public:
+  GroupInput(const std::string& name) :
+    GroupInterfaceNode(name),
+    mGroupInternalPort(new OutputPortInfo(this, "output", Size(0, 0)))
+  { }
+protected:
+  virtual bool addParent(Node* parent)
+  {
+    if (!GroupInterfaceNode::addParent(parent))
+      return false;
+    setExternalPortInfo(new InputPortInfo(parent, "input", Size(0, 0), false));
+    return true;
+  }
+private:
   SharedPtr<OutputPortInfo> mGroupInternalPort;
-  SharedPtr<const PortInfo> mExternalPortInfo;
 };
 
-class GroupOutput : public Node {
+class GroupOutput : public GroupInterfaceNode {
 public:
-  GroupOutput(const std::string& name = std::string());
-  virtual void accept(NodeVisitor& visitor)
-  { visitor.apply(*this); }
-  virtual void accept(ConstNodeVisitor& visitor) const
-  { visitor.apply(*this); }
-  unsigned getExternalPortIndex() const
-  { return mExternalPortInfo->getIndex(); }
-
+  GroupOutput(const std::string& name) :
+    GroupInterfaceNode(name),
+    mGroupInternalPort(new InputPortInfo(this, "input", Size(0, 0), false))
+  { }
+protected:
+  virtual bool addParent(Node* parent)
+  {
+    if (!GroupInterfaceNode::addParent(parent))
+      return false;
+    setExternalPortInfo(new OutputPortInfo(parent, "output", Size(0, 0)));
+    return true;
+  }
+private:
   SharedPtr<InputPortInfo> mGroupInternalPort;
-  SharedPtr<const PortInfo> mExternalPortInfo;
 };
 
-class GroupMechanicLink : public Node {
+class GroupMechanicLink : public GroupInterfaceNode {
 public:
-  GroupMechanicLink(const std::string& name = std::string());
-  virtual void accept(NodeVisitor& visitor)
-  { visitor.apply(*this); }
-  virtual void accept(ConstNodeVisitor& visitor) const
-  { visitor.apply(*this); }
-  unsigned getExternalPortIndex() const
-  { return mExternalPortInfo->getIndex(); }
-
+  GroupMechanicLink(const std::string& name) :
+    GroupInterfaceNode(name),
+    mGroupInternalPort(new MechanicLinkInfo(this, "link"))
+  { }
+protected:
+  virtual bool addParent(Node* parent)
+  {
+    if (!GroupInterfaceNode::addParent(parent))
+      return false;
+    setExternalPortInfo(new MechanicLinkInfo(parent, "link"));
+    return true;
+  }
+private:
   SharedPtr<MechanicLinkInfo> mGroupInternalPort;
-  SharedPtr<const PortInfo> mExternalPortInfo;
 };
 
 class Group : public Node {
@@ -84,35 +130,6 @@
   SharedPtr<Node> getChild(unsigned i);
   SharedPtr<const Node> getChild(unsigned i) const;
 
-  // add a new group port to the group
-  NodeId addGroupInput()
-  {
-    GroupInput *groupAcceptorNode = new GroupInput;
-    NodeId nodeId = addChild(groupAcceptorNode);
-    InputPortInfo* inputPortInfo;
-    inputPortInfo = new InputPortInfo(this, "input", Size(0, 0), false);
-    groupAcceptorNode->mExternalPortInfo = inputPortInfo;
-    return nodeId;
-  }
-  NodeId addGroupOutput()
-  {
-    GroupOutput *groupProviderNode = new GroupOutput;
-    NodeId nodeId = addChild(groupProviderNode);
-    OutputPortInfo* outputPortInfo;
-    outputPortInfo = new OutputPortInfo(this, "output", Size(0, 0));
-    groupProviderNode->mExternalPortInfo = outputPortInfo;
-    return nodeId;
-  }
-  NodeId addGroupMechanicLink()
-  {
-    GroupMechanicLink *groupProviderNode = new GroupMechanicLink;
-    NodeId nodeId = addChild(groupProviderNode);
-    MechanicLinkInfo* outputPortInfo;
-    outputPortInfo = new MechanicLinkInfo(this, "link");
-    groupProviderNode->mExternalPortInfo = outputPortInfo;
-    return nodeId;
-  }
-
   bool connect(const NodeId& nodeId0, const std::string& portName0,
                const NodeId& nodeId1, const std::string& portName1)
   { return connect(nodeId0, nodeId0.getPortId(portName0),
@@ -126,15 +143,17 @@
                const NodeId& nodeId1, const PortId& portId1)
   {
     // Make sure the models belong to this group
-    if (!getChild(nodeId0))
+    SharedPtr<Node> child0 = getChild(nodeId0);
+    if (!child0)
       return false;
-    if (!getChild(nodeId1))
+    SharedPtr<Node> child1 = getChild(nodeId1);
+    if (!child1)
       return false;
 
-    SharedPtr<const PortInfo> port0 = nodeId0.getPortPtr(portId0);
+    SharedPtr<const PortInfo> port0 = child0->getPort(portId0);
     if (!port0)
       return false;
-    SharedPtr<const PortInfo> port1 = nodeId1.getPortPtr(portId1);
+    SharedPtr<const PortInfo> port1 = child1->getPort(portId1);
     if (!port1)
       return false;
 
@@ -224,17 +243,6 @@
       return node->getPortId(name);
     }
 
-    const PortInfo* getPortPtr(const PortId& portId) const // FIXME??
-    {
-      SharedPtr<Child> child = _child.lock();
-      if (!child)
-        return 0;
-      SharedPtr<Node> node = child->node;
-      if (!node)
-        return 0;
-      return node->getPort(portId);
-    }
-
   private:
     friend class Group;
     NodeId(const SharedPtr<Child>& child) : _child(child) {}

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-10-09 05:55:16 UTC (rev 583)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-10-09 18:41:00 UTC (rev 584)
@@ -140,12 +140,13 @@
   return i != mPortList.end();
 }
 
-void
+bool
 Node::addParent(Node* parent)
 {
   if (!parent)
-    return;
+    return false;
   mParentList.push_back(parent);
+  return true;
 }
 
 void

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-10-09 05:55:16 UTC (rev 583)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-10-09 18:41:00 UTC (rev 584)
@@ -15,6 +15,7 @@
 
 namespace OpenFDM {
 
+class Group;
 class Node;
 class NodeVisitor;
 class ConstNodeVisitor;
@@ -55,8 +56,9 @@
 
 protected:
 
-  void addParent(Node* parent);
-  void removeParent(Node* parent);
+  friend class Group;
+  virtual bool addParent(Node* parent);
+  virtual void removeParent(Node* parent);
 
 private:
   Node(const Node&);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp	2008-10-09 05:55:16 UTC (rev 583)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp	2008-10-09 18:41:00 UTC (rev 584)
@@ -33,24 +33,12 @@
 }
 
 void
-NodeVisitor::apply(GroupInput& node)
+NodeVisitor::apply(GroupInterfaceNode& node)
 {
   apply(static_cast<Node&>(node));
 }
 
 void
-NodeVisitor::apply(GroupOutput& node)
-{
-  apply(static_cast<Node&>(node));
-}
-
-void
-NodeVisitor::apply(GroupMechanicLink& node)
-{
-  apply(static_cast<Node&>(node));
-}
-
-void
 NodeVisitor::apply(LibraryNode& libraryNode)
 {
   apply(static_cast<Node&>(libraryNode));

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h	2008-10-09 05:55:16 UTC (rev 583)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h	2008-10-09 18:41:00 UTC (rev 584)
@@ -13,9 +13,7 @@
 
 class Node;
 class Group;
-class GroupInput;
-class GroupOutput;
-class GroupMechanicLink;
+class GroupInterfaceNode;
 class LibraryNode;
 class LeafNode;
 class Model;
@@ -32,9 +30,7 @@
   virtual void apply(Node&);
 
   virtual void apply(Group&);
-  virtual void apply(GroupInput&);
-  virtual void apply(GroupOutput&);
-  virtual void apply(GroupMechanicLink&);
+  virtual void apply(GroupInterfaceNode&);
 
   virtual void apply(LibraryNode&);
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-09 05:55:16 UTC (rev 583)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-09 18:41:00 UTC (rev 584)
@@ -354,28 +354,13 @@
     return portDataList;
   }
 
-  /// FIXME: may be collapse them into one class with a type argument?
-  virtual void apply(const GroupInput& leaf)
+  virtual void apply(const GroupInterfaceNode& leaf)
   {
     PortDataList* portDataList = buildNodeContext(leaf);
     OpenFDMAssert(leaf.getPort(0));
     PortData* portData = portDataList->newPortData(leaf.getPort(0));
     _groupPortDataMap[leaf.getExternalPortIndex()] = portData;
   }
-  virtual void apply(const GroupOutput& leaf)
-  {
-    PortDataList* portDataList = buildNodeContext(leaf);
-    OpenFDMAssert(leaf.getPort(0));
-    PortData* portData = portDataList->newPortData(leaf.getPort(0));
-    _groupPortDataMap[leaf.getExternalPortIndex()] = portData;
-  }
-  virtual void apply(const GroupMechanicLink& leaf)
-  {
-    PortDataList* portDataList = buildNodeContext(leaf);
-    OpenFDMAssert(leaf.getPort(0));
-    PortData* portData = portDataList->newPortData(leaf.getPort(0));
-    _groupPortDataMap[leaf.getExternalPortIndex()] = portData;
-  }
 
   void allocPortData(AbstractNodeInstance* nodeInstance, const LeafNode& leaf)
   {

Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-09 05:55:16 UTC (rev 583)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-09 18:41:00 UTC (rev 584)
@@ -51,7 +51,7 @@
   group->connect(gain, "output", delay, "input");
   group->connect(delay, "output", outputDelay, "input");
 
-  Group::NodeId groupOutputNode = group->addGroupOutput();
+  Group::NodeId groupOutputNode = group->addChild(new GroupOutput("GIO"));
   group->connect(integrator2, "output", groupOutputNode, "input");
 
   SharedPtr<Group> topGroup = new Group("G1");



From frohlich at mail.berlios.de  Fri Oct 10 16:01:08 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 10 Oct 2008 16:01:08 +0200
Subject: [OpenFDM-svn] r585 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810101401.m9AE18EP031674@sheep.berlios.de>

Author: frohlich
Date: 2008-10-10 16:01:07 +0200 (Fri, 10 Oct 2008)
New Revision: 585

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Gain.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Gain.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Model.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Output.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Output.h
Log:
Add a task argument to the output method.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.cpp	2008-10-09 18:41:00 UTC (rev 584)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.cpp	2008-10-10 14:01:07 UTC (rev 585)
@@ -65,7 +65,7 @@
 }
 
 void
-Delay::output(const DiscreteStateValueVector& discreteState,
+Delay::output(const Task&,const DiscreteStateValueVector& discreteState,
               const ContinousStateValueVector&,
               PortValueList& portValues) const
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.h	2008-10-09 18:41:00 UTC (rev 584)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.h	2008-10-10 14:01:07 UTC (rev 585)
@@ -21,7 +21,7 @@
   virtual bool alloc(LeafContext& leafContext) const;
   virtual void init(DiscreteStateValueVector& discreteState,
                     ContinousStateValueVector&, const PortValueList&) const;
-  virtual void output(const DiscreteStateValueVector& discreteState,
+  virtual void output(const Task&,const DiscreteStateValueVector& discreteState,
                       const ContinousStateValueVector&,
                       PortValueList& portValues) const;
   virtual void update(const DiscreteTask&, DiscreteStateValueVector&,

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.cpp	2008-10-09 18:41:00 UTC (rev 584)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.cpp	2008-10-10 14:01:07 UTC (rev 585)
@@ -73,7 +73,8 @@
 }
 
 void
-DiscreteIntegrator::output(const DiscreteStateValueVector& discreteState,
+DiscreteIntegrator::output(const Task&,
+                           const DiscreteStateValueVector& discreteState,
                            const ContinousStateValueVector&,
                            PortValueList& portValues) const
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.h	2008-10-09 18:41:00 UTC (rev 584)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.h	2008-10-10 14:01:07 UTC (rev 585)
@@ -20,7 +20,7 @@
   virtual bool alloc(LeafContext& leafContext) const;
   virtual void init(DiscreteStateValueVector& discreteState,
                     ContinousStateValueVector&, const PortValueList&) const;
-  virtual void output(const DiscreteStateValueVector& discreteState,
+  virtual void output(const Task&,const DiscreteStateValueVector& discreteState,
                       const ContinousStateValueVector&,
                       PortValueList& portValues) const;
   virtual void update(const DiscreteTask&, DiscreteStateValueVector&,

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Gain.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Gain.cpp	2008-10-09 18:41:00 UTC (rev 584)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Gain.cpp	2008-10-10 14:01:07 UTC (rev 585)
@@ -47,7 +47,8 @@
 }
 
 void
-Gain::output(const DiscreteStateValueVector&, const ContinousStateValueVector&,
+Gain::output(const Task&,const DiscreteStateValueVector&,
+             const ContinousStateValueVector&,
              PortValueList& portValues) const
 {
   portValues[mOutputPort] = mGain*portValues[mInputPort];

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Gain.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Gain.h	2008-10-09 18:41:00 UTC (rev 584)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Gain.h	2008-10-10 14:01:07 UTC (rev 585)
@@ -18,7 +18,7 @@
   virtual ~Gain(void);
 
   virtual bool alloc(LeafContext& leafContext) const;
-  virtual void output(const DiscreteStateValueVector&,
+  virtual void output(const Task&,const DiscreteStateValueVector&,
                       const ContinousStateValueVector&,
                       PortValueList& portValues) const;
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-09 18:41:00 UTC (rev 584)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-10 14:01:07 UTC (rev 585)
@@ -257,6 +257,7 @@
     { }
     WeakPtr<Group> group;
     SharedPtr<Node> node;
+    // name extension to make name uniqe?
   };
 
   struct Connect : public WeakReferenced {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.cpp	2008-10-09 18:41:00 UTC (rev 584)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.cpp	2008-10-10 14:01:07 UTC (rev 585)
@@ -72,7 +72,7 @@
 }
 
 void
-Integrator::output(const DiscreteStateValueVector&,
+Integrator::output(const Task&,const DiscreteStateValueVector&,
                    const ContinousStateValueVector& continousState,
                    PortValueList& portValues) const
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.h	2008-10-09 18:41:00 UTC (rev 584)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.h	2008-10-10 14:01:07 UTC (rev 585)
@@ -22,7 +22,7 @@
                     ContinousStateValueVector& continousState,
                     const PortValueList& portValueList) const;
 
-  virtual void output(const DiscreteStateValueVector&, const ContinousStateValueVector& continousState, PortValueList& portValues) const;
+  virtual void output(const Task&,const DiscreteStateValueVector&, const ContinousStateValueVector& continousState, PortValueList& portValues) const;
   virtual void derivative(const DiscreteStateValueVector&, const ContinousStateValueVector& state, const PortValueList& portValues, ContinousStateValueVector& deriv) const;
 
   void setInitialValue(const Matrix& initialValue);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Model.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Model.h	2008-10-09 18:41:00 UTC (rev 584)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Model.h	2008-10-10 14:01:07 UTC (rev 585)
@@ -23,6 +23,7 @@
 class ContinousStateValueVector;
 class PortValueList;
 class ContinousStateValueVector;
+class Task;
 
 class Model : public LeafNode {
   OPENFDM_OBJECT(Model, LeafNode);
@@ -40,7 +41,7 @@
   virtual void update(const DiscreteTask&, DiscreteStateValueVector&,
                       const ContinousStateValueVector&,
                       const PortValueList&) const { }
-  virtual void output(const DiscreteStateValueVector&,
+  virtual void output(const Task&,const DiscreteStateValueVector&,
                       const ContinousStateValueVector&,
                       PortValueList&) const { }
   virtual void derivative(const DiscreteStateValueVector&,

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h	2008-10-09 18:41:00 UTC (rev 584)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h	2008-10-10 14:01:07 UTC (rev 585)
@@ -29,8 +29,8 @@
   { return mModel->alloc(*this); }
   void init(const /*Init*/Task&)
   { mModel->init(mDiscreteState, mContinousState, mPortValueList); }
-  void output(const Task&)
-  { mModel->output(mDiscreteState, mContinousState, mPortValueList); }
+  void output(const Task& task)
+  { mModel->output(task, mDiscreteState, mContinousState, mPortValueList); }
   void update(const DiscreteTask& discreteTask)
   { mModel->update(discreteTask, mDiscreteState, mContinousState, mPortValueList); }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Output.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Output.cpp	2008-10-09 18:41:00 UTC (rev 584)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Output.cpp	2008-10-10 14:01:07 UTC (rev 585)
@@ -43,7 +43,7 @@
 }
 
 void
-Output::output(const DiscreteStateValueVector&,
+Output::output(const Task&,const DiscreteStateValueVector&,
                const ContinousStateValueVector&,
                PortValueList& portValues) const
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Output.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Output.h	2008-10-09 18:41:00 UTC (rev 584)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Output.h	2008-10-10 14:01:07 UTC (rev 585)
@@ -25,7 +25,7 @@
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
 
-  virtual void output(const DiscreteStateValueVector&,
+  virtual void output(const Task&,const DiscreteStateValueVector&,
                       const ContinousStateValueVector&,
                       PortValueList& portValues) const;
 



From frohlich at mail.berlios.de  Fri Oct 10 16:08:57 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 10 Oct 2008 16:08:57 +0200
Subject: [OpenFDM-svn] r586 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810101408.m9AE8v4d032578@sheep.berlios.de>

Author: frohlich
Date: 2008-10-10 16:08:57 +0200 (Fri, 10 Oct 2008)
New Revision: 586

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/LeafNode.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h
Log:
Add a task argument to the init method.

M    src/OpenFDM/DiscreteIntegrator.h
M    src/OpenFDM/LeafNode.h
M    src/OpenFDM/Integrator.h
M    src/OpenFDM/MechanicContext.h
M    src/OpenFDM/Delay.h
M    src/OpenFDM/Integrator.cpp
M    src/OpenFDM/DiscreteIntegrator.cpp
M    src/OpenFDM/ModelContext.h
M    src/OpenFDM/Delay.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.cpp	2008-10-10 14:01:07 UTC (rev 585)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.cpp	2008-10-10 14:08:57 UTC (rev 586)
@@ -56,7 +56,7 @@
 }
 
 void
-Delay::init(DiscreteStateValueVector& discreteState,
+Delay::init(const Task&,DiscreteStateValueVector& discreteState,
             ContinousStateValueVector&,const PortValueList&) const
 {
   discreteState[*mMatrixStateInfo].clear();

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.h	2008-10-10 14:01:07 UTC (rev 585)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Delay.h	2008-10-10 14:08:57 UTC (rev 586)
@@ -19,7 +19,7 @@
   virtual ~Delay();
 
   virtual bool alloc(LeafContext& leafContext) const;
-  virtual void init(DiscreteStateValueVector& discreteState,
+  virtual void init(const Task&,DiscreteStateValueVector& discreteState,
                     ContinousStateValueVector&, const PortValueList&) const;
   virtual void output(const Task&,const DiscreteStateValueVector& discreteState,
                       const ContinousStateValueVector&,

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.cpp	2008-10-10 14:01:07 UTC (rev 585)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.cpp	2008-10-10 14:08:57 UTC (rev 586)
@@ -59,7 +59,7 @@
 }
 
 void
-DiscreteIntegrator::init(DiscreteStateValueVector& discreteState,
+DiscreteIntegrator::init(const Task&, DiscreteStateValueVector& discreteState,
                          ContinousStateValueVector&,
                          const PortValueList& portValues) const
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.h	2008-10-10 14:01:07 UTC (rev 585)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.h	2008-10-10 14:08:57 UTC (rev 586)
@@ -18,7 +18,7 @@
   virtual ~DiscreteIntegrator(void);
 
   virtual bool alloc(LeafContext& leafContext) const;
-  virtual void init(DiscreteStateValueVector& discreteState,
+  virtual void init(const Task&,DiscreteStateValueVector& discreteState,
                     ContinousStateValueVector&, const PortValueList&) const;
   virtual void output(const Task&,const DiscreteStateValueVector& discreteState,
                       const ContinousStateValueVector&,

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.cpp	2008-10-10 14:01:07 UTC (rev 585)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.cpp	2008-10-10 14:08:57 UTC (rev 586)
@@ -58,7 +58,7 @@
 }
 
 void
-Integrator::init(DiscreteStateValueVector& discreteState,
+Integrator::init(const Task&, DiscreteStateValueVector& discreteState,
                  ContinousStateValueVector& continousState,
                  const PortValueList& portValues) const
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.h	2008-10-10 14:01:07 UTC (rev 585)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.h	2008-10-10 14:08:57 UTC (rev 586)
@@ -18,12 +18,17 @@
   virtual ~Integrator(void);
 
   virtual bool alloc(LeafContext& leafContext) const;
-  virtual void init(DiscreteStateValueVector& discreteState,
+  virtual void init(const Task&, DiscreteStateValueVector& discreteState,
                     ContinousStateValueVector& continousState,
                     const PortValueList& portValueList) const;
 
-  virtual void output(const Task&,const DiscreteStateValueVector&, const ContinousStateValueVector& continousState, PortValueList& portValues) const;
-  virtual void derivative(const DiscreteStateValueVector&, const ContinousStateValueVector& state, const PortValueList& portValues, ContinousStateValueVector& deriv) const;
+  virtual void output(const Task&,const DiscreteStateValueVector&,
+                      const ContinousStateValueVector& continousState,
+                      PortValueList& portValues) const;
+  virtual void derivative(const DiscreteStateValueVector&,
+                          const ContinousStateValueVector& state,
+                          const PortValueList& portValues,
+                          ContinousStateValueVector& deriv) const;
 
   void setInitialValue(const Matrix& initialValue);
   const Matrix& getInitialValue() const;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/LeafNode.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/LeafNode.h	2008-10-10 14:01:07 UTC (rev 585)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/LeafNode.h	2008-10-10 14:08:57 UTC (rev 586)
@@ -17,6 +17,7 @@
 class ContinousStateValueVector;
 class DiscreteStateValueVector;
 class PortValueList;
+class Task;
 
 class LeafNode : public Node {
   OPENFDM_OBJECT(LeafNode, Node);
@@ -33,8 +34,8 @@
   virtual bool alloc(LeafContext&) const // = 0;
   { return true; }
 
-  virtual void init(DiscreteStateValueVector&, ContinousStateValueVector&,
-                    const PortValueList&) const
+  virtual void init(const Task&,DiscreteStateValueVector&,
+                    ContinousStateValueVector&, const PortValueList&) const
   { }
 
   unsigned getNumContinousStateValues() const

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-10 14:01:07 UTC (rev 585)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-10 14:08:57 UTC (rev 586)
@@ -26,8 +26,8 @@
 
   bool alloc()
   { return mMechanicNode->alloc(*this); }
-  void init(const /*Init*/Task&)
-  { mMechanicNode->init(mDiscreteState, mContinousState, mPortValueList); }
+  void init(const /*Init*/Task& task)
+  { mMechanicNode->init(task, mDiscreteState, mContinousState, mPortValueList); }
 
   void velocities(const Task&)
   { mMechanicNode->velocity(mContinousState, mPortValueList); }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h	2008-10-10 14:01:07 UTC (rev 585)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h	2008-10-10 14:08:57 UTC (rev 586)
@@ -27,8 +27,8 @@
 
   bool alloc()
   { return mModel->alloc(*this); }
-  void init(const /*Init*/Task&)
-  { mModel->init(mDiscreteState, mContinousState, mPortValueList); }
+  void init(const /*Init*/Task& task)
+  { mModel->init(task, mDiscreteState, mContinousState, mPortValueList); }
   void output(const Task& task)
   { mModel->output(task, mDiscreteState, mContinousState, mPortValueList); }
   void update(const DiscreteTask& discreteTask)



From frohlich at mail.berlios.de  Fri Oct 10 16:12:57 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 10 Oct 2008 16:12:57 +0200
Subject: [OpenFDM-svn] r587 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810101412.m9AECvvm000123@sheep.berlios.de>

Author: frohlich
Date: 2008-10-10 16:12:57 +0200 (Fri, 10 Oct 2008)
New Revision: 587

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h
Log:
add a task argument to the mechanic stuff.

M    src/OpenFDM/MechanicContext.h
M    src/OpenFDM/MechanicNode.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-10 14:08:57 UTC (rev 586)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-10 14:12:57 UTC (rev 587)
@@ -29,12 +29,12 @@
   void init(const /*Init*/Task& task)
   { mMechanicNode->init(task, mDiscreteState, mContinousState, mPortValueList); }
 
-  void velocities(const Task&)
-  { mMechanicNode->velocity(mContinousState, mPortValueList); }
-  void articulation(const Task&)
-  { mMechanicNode->articulation(mContinousState, mPortValueList); }
-  void accelerations(const Task&)
-  { }
+  void velocities(const Task& task)
+  { mMechanicNode->velocity(task, mContinousState, mPortValueList); }
+  void articulation(const Task& task)
+  { mMechanicNode->articulation(task, mContinousState, mPortValueList); }
+  void accelerations(const Task& task)
+  { mMechanicNode->acceleration(task, mContinousState, mPortValueList); }
 
   void derivative(const Task&)
   { mMechanicNode->derivative(mDiscreteState, mContinousState, mPortValueList,

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h	2008-10-10 14:08:57 UTC (rev 586)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h	2008-10-10 14:12:57 UTC (rev 587)
@@ -23,12 +23,15 @@
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
 
-  virtual void velocity(const ContinousStateValueVector&,
+  virtual void velocity(const Task&, const ContinousStateValueVector&,
                         PortValueList&) const
   { }
-  virtual void articulation(const ContinousStateValueVector&,
+  virtual void articulation(const Task&, const ContinousStateValueVector&,
                             PortValueList&) const
   { }
+  virtual void acceleration(const Task&, const ContinousStateValueVector&,
+                            PortValueList&) const
+  { }
   virtual void derivative(const DiscreteStateValueVector&,
                           const ContinousStateValueVector&,
                           const PortValueList&,



From frohlich at mail.berlios.de  Fri Oct 10 16:26:45 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 10 Oct 2008 16:26:45 +0200
Subject: [OpenFDM-svn] r588 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810101426.m9AEQjlK001277@sheep.berlios.de>

Author: frohlich
Date: 2008-10-10 16:26:44 +0200 (Fri, 10 Oct 2008)
New Revision: 588

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/SimulationTime.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SimulationTime.h
Log:
Reactivate SimulationTime model.

M    src/OpenFDM/SimulationTime.h
M    src/OpenFDM/SimulationTime.cpp
M    src/OpenFDM/Makefile.am
M    src/OpenFDM/MechanicNode.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-10 14:12:57 UTC (rev 587)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-10 14:26:44 UTC (rev 588)
@@ -235,7 +235,8 @@
   DiscreteIntegrator.cpp \
   Gain.cpp \
   Integrator.cpp \
-  Output.cpp
+  Output.cpp \
+  SimulationTime.cpp
 
 #   AeroForce.cpp \
 #   AirSpring.cpp \
@@ -273,7 +274,6 @@
 #   Saturation.cpp \
 #   SimpleContact.cpp \
 #   SimpleGear.cpp \
-#   SimulationTime.cpp \
 #   Summer.cpp \
 #   Table.cpp \
 #   Tailhook.cpp \

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h	2008-10-10 14:12:57 UTC (rev 587)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h	2008-10-10 14:26:44 UTC (rev 588)
@@ -11,8 +11,9 @@
 
 namespace OpenFDM {
 
+class DiscreteTask;
 class PortValueList;
-class DiscreteTask;
+class Task;
 
 class MechanicNode : public LeafNode {
   OPENFDM_OBJECT(MechanicNode, LeafNode);
@@ -29,6 +30,7 @@
   virtual void articulation(const Task&, const ContinousStateValueVector&,
                             PortValueList&) const
   { }
+  // hmm, may be this should be output???
   virtual void acceleration(const Task&, const ContinousStateValueVector&,
                             PortValueList&) const
   { }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SimulationTime.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SimulationTime.cpp	2008-10-10 14:12:57 UTC (rev 587)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SimulationTime.cpp	2008-10-10 14:26:44 UTC (rev 588)
@@ -3,7 +3,7 @@
  */
 
 #include "SimulationTime.h"
-#include "ModelVisitor.h"
+#include "Task.h"
 
 namespace OpenFDM {
 
@@ -11,10 +11,9 @@
   END_OPENFDM_OBJECT_DEF
 
 SimulationTime::SimulationTime(const std::string& name) :
-  Model(name)
+  Model(name),
+  mOutputPort(newRealOutputPort("output"))
 {
-  setNumOutputPorts(1);
-  setOutputPort(0, "output", this, &SimulationTime::getOutputValue);
 }
 
 SimulationTime::~SimulationTime(void)
@@ -22,27 +21,11 @@
 }
 
 void
-SimulationTime::accept(ModelVisitor& visitor)
+SimulationTime::output(const Task& task, const DiscreteStateValueVector&,
+                       const ContinousStateValueVector&,
+                       PortValueList& portValues) const
 {
-  visitor.handleNodePathAndApply(*this);
+  portValues[mOutputPort] = task.getTime();
 }
 
-bool
-SimulationTime::init()
-{
-  return Model::init();
-}
-
-void
-SimulationTime::output(const TaskInfo& taskInfo)
-{
-  mOutputValue = taskInfo.getTime();
-}
-
-const real_type&
-SimulationTime::getOutputValue(void) const
-{
-  return mOutputValue;
-}
-
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SimulationTime.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SimulationTime.h	2008-10-10 14:12:57 UTC (rev 587)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SimulationTime.h	2008-10-10 14:26:44 UTC (rev 588)
@@ -6,6 +6,7 @@
 #define OpenFDM_SimulationTime_H
 
 #include "Model.h"
+#include "RealOutputPort.h"
 
 namespace OpenFDM {
 
@@ -15,18 +16,11 @@
   SimulationTime(const std::string& name);
   virtual ~SimulationTime(void);
 
-  /// Double dispatch helper for the system visitor
-  virtual void accept(ModelVisitor& visitor);
-  /// Double dispatch helper for the system visitor
-//   virtual void accept(ConstModelVisitor& visitor) const;
-
-  virtual bool init(void);
-  virtual void output(const TaskInfo&);
-
-  const real_type& getOutputValue(void) const;
-
+  virtual void output(const Task& task, const DiscreteStateValueVector&,
+                      const ContinousStateValueVector&,
+                      PortValueList& portValues) const;
 private:
-  real_type mOutputValue;
+  RealOutputPort mOutputPort;
 };
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Fri Oct 10 18:51:27 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 10 Oct 2008 18:51:27 +0200
Subject: [OpenFDM-svn] r589 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810101651.m9AGpR4D008236@sheep.berlios.de>

Author: frohlich
Date: 2008-10-10 18:51:24 +0200 (Fri, 10 Oct 2008)
New Revision: 589

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Fraction.h
Log:
Fix problem with real conversion.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Fraction.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Fraction.h	2008-10-10 14:26:44 UTC (rev 588)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Fraction.h	2008-10-10 16:51:24 UTC (rev 589)
@@ -43,12 +43,12 @@
     numerator_type n = getNumerator();
     while (n != 0 && (n&1) == 0) {
       ++exp2;
-      n >> 1;
+      n >>= 1;
     }
     denominator_type d = getDenominator();
     while (d != 0 && (d&1) == 0) {
       --exp2;
-      d >> 1;
+      d >>= 1;
     }
     
     return ldexp(real_type(n)/real_type(d), exp2);



From frohlich at mail.berlios.de  Fri Oct 10 18:52:02 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 10 Oct 2008 18:52:02 +0200
Subject: [OpenFDM-svn] r590 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810101652.m9AGq22G009364@sheep.berlios.de>

Author: frohlich
Date: 2008-10-10 18:52:01 +0200 (Fri, 10 Oct 2008)
New Revision: 590

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
Log:
Add a size check for port setting.

M    PortInfo.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-10-10 16:51:24 UTC (rev 589)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-10-10 16:52:01 UTC (rev 590)
@@ -57,7 +57,7 @@
 
   virtual unsigned getMaxConnects() const = 0;
   virtual bool canConnect(const PortInfo& portInfo) const = 0;
-  virtual bool acceptPortValue(const PortValue*) const = 0;
+  virtual bool acceptPortValue(PortValue*) const = 0;
 
   /// Public interface to instantiate a new port value
   PortValue* newValue() const
@@ -93,14 +93,19 @@
   virtual const NumericPortInfo* toNumericPortInfo() const
   { return this; }
 
-  virtual bool acceptPortValue(const PortValue* portValue) const
+  virtual bool acceptPortValue(PortValue* portValue) const
   {
-    const NumericPortValue* numericPortValue;
+    NumericPortValue* numericPortValue;
     numericPortValue = portValue->toNumericPortValue();
     if (!numericPortValue)
       return false;
-    // May be do a size check here???
-    return true;
+    if (mSize == Size(0, 0))
+      return true;
+    if (size(numericPortValue->getValue()) == Size(0, 0)) {
+      numericPortValue->getValue().resize(mSize(0), mSize(1));
+      return true;
+    }
+    return size(numericPortValue->getValue()) == mSize;
   }
 
 protected:
@@ -178,7 +183,7 @@
   virtual bool canConnect(const PortInfo& portInfo) const
   { return portInfo.toMechanicLinkInfo(); }
 
-  virtual bool acceptPortValue(const PortValue* portValue) const
+  virtual bool acceptPortValue(PortValue* portValue) const
   { return portValue->toMechanicLinkValue(); }
 
 protected:



From frohlich at mail.berlios.de  Fri Oct 10 18:52:40 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 10 Oct 2008 18:52:40 +0200
Subject: [OpenFDM-svn] r591 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200810101652.m9AGqe9X010319@sheep.berlios.de>

Author: frohlich
Date: 2008-10-10 18:52:39 +0200 (Fri, 10 Oct 2008)
New Revision: 591

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/test/Makefile.am
   branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp
Log:
Reactivate the simulation time block.

M    src/test/simulationtime.cpp
M    src/test/Makefile.am
M    src/OpenFDM/System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-10 16:52:01 UTC (rev 590)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-10 16:52:39 UTC (rev 591)
@@ -249,6 +249,9 @@
         return false;
       if (!mNodeInstance)
         return false;
+      Log(Schedule, Debug3)
+        << "setLocalPortValue for port \"" << getPortInfo()->getName()
+        << "\" is at: " << portValue << endl;
       // FIXME: move the set port value and accept port value into one call
       if (!getPortInfo()->acceptPortValue(portValue))
         return false;
@@ -259,6 +262,9 @@
 
     bool setConnectedPortValues(PortValue* portValue)
     {
+      Log(Schedule, Debug3)
+        << "setConnectedPortValues for port \"" << getPortInfo()->getName()
+        << "\" is at: " << portValue << endl;
       for (unsigned i = 0; i < mConnectedPorts.size(); ++i) {
         SharedPtr<PortData> portData = mConnectedPorts[i].lock();
         if (!portData)
@@ -271,6 +277,9 @@
 
     bool setProxyPortValue(PortValue* portValue)
     {
+      Log(Schedule, Debug3)
+        << "setProxyPortValues for port \"" << getPortInfo()->getName()
+        << "\" is at: " << portValue << endl;
       SharedPtr<PortData> portData = mProxyPortData.lock();
       if (portData) {
         if (!portData->setConnectedPortValues(portValue))
@@ -321,8 +330,18 @@
     bool allocAndConnectProviderPortValues()
     {
       for (unsigned i = 0; i < mPortDataVector.size(); ++i) {
-        if (!mPortDataVector[i]->createPortValue())
+        Log(Schedule, Debug3) << "Try to to allocate port value \""
+                               << mPortDataVector[i]->getPortInfo()->getName()
+                               << "\" of \"" << mNodeInstance->getNodeNamePath()
+                               << "\"" << endl;
+        if (!mPortDataVector[i]->createPortValue()) {
+          Log(Schedule, Error) << "Failed to allocate port value \""
+                               << mPortDataVector[i]->getPortInfo()->getName()
+                               << "\" of \"" << mNodeInstance->getNodeNamePath()
+                               << "\".\nAborting!" << endl;
+
           return false;
+        }
       }
       return true;
     }
@@ -605,10 +624,8 @@
   {
     PortDataListList::const_iterator i;
     for (i = _portDataListList.begin(); i != _portDataListList.end(); ++i) {
-      if (!(*i)->allocAndConnectProviderPortValues()) {
-        Log(Schedule, Error) << "Could not alloc for model ... FIXME" << endl;
+      if (!(*i)->allocAndConnectProviderPortValues())
         return false;
-      }
     }
     return true;
   }

Modified: branches/OpenFDM-StateSeparation/src/test/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/Makefile.am	2008-10-10 16:52:01 UTC (rev 590)
+++ branches/OpenFDM-StateSeparation/src/test/Makefile.am	2008-10-10 16:52:39 UTC (rev 591)
@@ -6,7 +6,7 @@
 
 # define some unit tests
 #check_PROGRAMS = quattest unitstest structure simulationtime constintegral harmonic limit
-check_PROGRAMS = quattest unitstest limit
+check_PROGRAMS = quattest unitstest simulationtime limit
 TESTS          = $(check_PROGRAMS)
 
 # tiretestrig_SOURCES = tiretestrig.cpp
@@ -21,8 +21,8 @@
 structure_SOURCES = structure.cpp
 structure_LDADD = ../OpenFDM/libOpenFDM.la -lhdf5
 
-# simulationtime_SOURCES = simulationtime.cpp
-# simulationtime_LDADD = ../OpenFDM/libOpenFDM.la
+simulationtime_SOURCES = simulationtime.cpp
+simulationtime_LDADD = ../OpenFDM/libOpenFDM.la
 
 # constintegral_SOURCES = constintegral.cpp
 # constintegral_LDADD = ../OpenFDM/libOpenFDM.la

Modified: branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp	2008-10-10 16:52:01 UTC (rev 590)
+++ branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp	2008-10-10 16:52:39 UTC (rev 591)
@@ -6,6 +6,7 @@
 #include <vector>
 #include <iostream>
 #include <OpenFDM/Output.h>
+#include <OpenFDM/Group.h>
 #include <OpenFDM/SimulationTime.h>
 #include <OpenFDM/System.h>
 
@@ -27,21 +28,25 @@
 int
 main(int argc, char *argv[])
 {
-  real_type rate = 0.1;
+  Fraction rate(1, 10);
 
   SharedPtr<System> system = new System("Simulation Time System");
+  Group* group = new Group("Simulation Time Group");
+  system->setNode(group);
   
   SimulationTime* simulationTime = new SimulationTime("Simulation Time");
-  system->addModel(simulationTime);
+  Group::NodeId simTimeId = group->addChild(simulationTime);
 
   Output* output = new Output("Simulation Time Output");
-  system->addModel(output);
+  Group::NodeId outputId = group->addChild(output);
   SharedPtr<CollectOutputCallback> simTimeCallback = new CollectOutputCallback;
   output->setCallback(simTimeCallback);
-  output->addSampleTime(rate);
-  Connection::connect(output->getInputPort(0),
-                      simulationTime->getOutputPort(0));
-
+  output->setSampleTime(rate);
+  if (!group->connect(simTimeId, "output", outputId, "input")) {
+    std::cout << "Could not connect ports" << std::endl;
+    return EXIT_FAILURE;
+  }
+  
   if (!system->init()) {
     std::cout << "Could not initialize the system" << std::endl;
     return EXIT_FAILURE;
@@ -51,11 +56,11 @@
 
   Vector errors(simTimeCallback->values.size());
   for (unsigned i = 0; i < simTimeCallback->values.size(); ++i) {
-    errors(i) = simTimeCallback->values[i] - i*rate;
+    errors(i) = simTimeCallback->values[i] - i*rate.getRealValue();
   }
 
   real_type expectedRoundoff;
-  expectedRoundoff = Limits<real_type>::epsilon()*system->getTime()/rate;
+  expectedRoundoff = Limits<real_type>::epsilon()/rate.getRealValue();
   real_type error = normInf(errors);
   if (expectedRoundoff < error) {
     std::cerr << "Maximum simulation time error " << error



From frohlich at mail.berlios.de  Fri Oct 10 19:07:23 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 10 Oct 2008 19:07:23 +0200
Subject: [OpenFDM-svn] r592 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810101707.m9AH7NGd028784@sheep.berlios.de>

Author: frohlich
Date: 2008-10-10 19:07:22 +0200 (Fri, 10 Oct 2008)
New Revision: 592

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Check port values before we start execution.

M    src/OpenFDM/PortInfo.cpp
M    src/OpenFDM/System.cpp
M    src/OpenFDM/PortInfo.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.cpp	2008-10-10 16:52:39 UTC (rev 591)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.cpp	2008-10-10 17:07:22 UTC (rev 592)
@@ -10,7 +10,8 @@
 PortInfo::PortInfo(Node* node, const std::string& name) :
   mNode(node),
   mName(name),
-  mIndex(~0u)
+  mIndex(~0u),
+  mOptional(false)
 {
   OpenFDMAssert(node);
   node->addPort(this);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-10-10 16:52:39 UTC (rev 591)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-10-10 17:07:22 UTC (rev 592)
@@ -38,6 +38,9 @@
   const std::string& getName() const { return mName; }
   void setName(const std::string& name);
 
+  bool getOptional() const { return mOptional; }
+  void setOptional(bool optional) { mOptional = optional; }
+
   unsigned getIndex() const { return mIndex; }
 
   virtual const NumericPortInfo* toNumericPortInfo() const { return 0; }
@@ -76,6 +79,7 @@
   WeakPtr<Node> mNode;
   std::string mName;
   unsigned mIndex;
+  bool mOptional;
 
   // FIXME: Hmm, can I avoid this??
   friend class Node;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-10 16:52:39 UTC (rev 591)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-10 17:07:22 UTC (rev 592)
@@ -622,11 +622,29 @@
   bool
   allocPortValues()
   {
+    // alloc port values
     PortDataListList::const_iterator i;
     for (i = _portDataListList.begin(); i != _portDataListList.end(); ++i) {
       if (!(*i)->allocAndConnectProviderPortValues())
         return false;
     }
+    // check port values and report unconnected mandatory values.
+    ModelInstanceList::const_iterator j;
+    for (j = _modelInstanceList.begin(); j != _modelInstanceList.end(); ++j) {
+      const Node& node = (*j)->getNode();
+      for (unsigned k = 0; k < node.getNumPorts(); ++k) {
+        SharedPtr<const PortInfo> portInfo = node.getPort(k);
+        if (portInfo->getOptional())
+          continue;
+        if (!(*j)->getPortValueList().getPortValue(k)) {
+          Log(Schedule, Error) << "Mandatory port value for port \""
+                               << portInfo->getName() << "\" for model \""
+                               << (*j)->getNodeNamePath()
+                               << "\" is not connected!" << endl;
+          return false;
+        }
+      }
+    }
     return true;
   }
 



From frohlich at mail.berlios.de  Fri Oct 10 20:46:33 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 10 Oct 2008 20:46:33 +0200
Subject: [OpenFDM-svn] r593 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810101846.m9AIkX1l020485@sheep.berlios.de>

Author: frohlich
Date: 2008-10-10 20:46:33 +0200 (Fri, 10 Oct 2008)
New Revision: 593

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/ConstModel.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ConstModel.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
Log:
Reactivate ConstModel

M    src/OpenFDM/Makefile.am
M    src/OpenFDM/ConstModel.cpp
M    src/OpenFDM/ConstModel.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ConstModel.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ConstModel.cpp	2008-10-10 17:07:22 UTC (rev 592)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ConstModel.cpp	2008-10-10 18:46:33 UTC (rev 593)
@@ -4,6 +4,8 @@
 
 #include "ConstModel.h"
 
+#include "PortValueList.h"
+
 namespace OpenFDM {
 
 BEGIN_OPENFDM_OBJECT_DEF(ConstModel, Model)
@@ -11,16 +13,31 @@
   END_OPENFDM_OBJECT_DEF
 
 ConstModel::ConstModel(const std::string& name, const Matrix& value) :
-  Model(name), mValue(value)
+  Model(name),
+  mOutputPort(newMatrixOutputPort("output")),
+  mValue(value)
 {
-  setNumOutputPorts(1);
-  setOutputPort(0, "output", this, &ConstModel::getValue);
 }
 
+ConstModel::ConstModel(const std::string& name, const real_type& value) :
+  Model(name),
+  mOutputPort(newMatrixOutputPort("output"))
+{
+  setScalarValue(value);
+}
+
 ConstModel::~ConstModel(void)
 {
 }
 
+void
+ConstModel::output(const Task& ,const DiscreteStateValueVector&,
+                   const ContinousStateValueVector&,
+                   PortValueList& portValues) const
+{
+  portValues[mOutputPort] = mValue;
+}
+
 const Matrix&
 ConstModel::getValue(void) const
 {
@@ -34,7 +51,7 @@
 }
 
 void
-ConstModel::setScalarValue(real_type value)
+ConstModel::setScalarValue(const real_type& value)
 {
   mValue.resize(1, 1);
   mValue(0, 0) = value;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ConstModel.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ConstModel.h	2008-10-10 17:07:22 UTC (rev 592)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ConstModel.h	2008-10-10 18:46:33 UTC (rev 593)
@@ -14,15 +14,21 @@
   OPENFDM_OBJECT(ConstModel, Model);
 public:
   ConstModel(const std::string& name, const Matrix& value = Matrix());
+  ConstModel(const std::string& name, const real_type& value);
   virtual ~ConstModel(void);
 
+  virtual void output(const Task&,const DiscreteStateValueVector&,
+                      const ContinousStateValueVector& continousState,
+                      PortValueList& portValues) const;
+
   const Matrix& getValue(void) const;
   void setValue(const Matrix& value);
 
   // For conveninence
-  void setScalarValue(real_type value);
+  void setScalarValue(const real_type& value);
 
 private:
+  MatrixOutputPort mOutputPort;
   Matrix mValue;
 };
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-10 17:07:22 UTC (rev 592)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-10 18:46:33 UTC (rev 593)
@@ -231,6 +231,7 @@
   Wind.h
 
 OpenFDMModelsSOURCES = \
+  ConstModel.cpp \
   Delay.cpp \
   DiscreteIntegrator.cpp \
   Gain.cpp \
@@ -244,7 +245,6 @@
 #   AtmosphereSTD1976.cpp \
 #   Bias.cpp \
 #   BinaryFunctionModel.cpp \
-#   ConstModel.cpp \
 #   Contact.cpp \
 #   DeadBand.cpp \
 #   DefaultGravity.cpp \



From frohlich at mail.berlios.de  Fri Oct 10 21:32:17 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 10 Oct 2008 21:32:17 +0200
Subject: [OpenFDM-svn] r594 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810101932.m9AJWHUK026699@sheep.berlios.de>

Author: frohlich
Date: 2008-10-10 21:32:17 +0200 (Fri, 10 Oct 2008)
New Revision: 594

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Input.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Input.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
Log:
Reactivate Input model.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Input.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Input.cpp	2008-10-10 18:46:33 UTC (rev 593)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Input.cpp	2008-10-10 19:32:17 UTC (rev 594)
@@ -3,7 +3,7 @@
  */
 
 #include "Input.h"
-#include "ModelVisitor.h"
+#include "PortValueList.h"
 
 namespace OpenFDM {
 
@@ -18,10 +18,9 @@
 
 Input::Input(const std::string& name) :
   Model(name),
+  mOutputPort(newRealOutputPort("output")),
   mInputGain(1)
 {
-  setNumOutputPorts(1);
-  setOutputPort(0, "output", this, &Input::getOutputValue);
 }
 
 Input::~Input(void)
@@ -29,41 +28,13 @@
 }
 
 void
-Input::accept(ModelVisitor& visitor)
+Input::output(const Task& ,const DiscreteStateValueVector&,
+              const ContinousStateValueVector&,
+              PortValueList& portValues) const
 {
-  visitor.handleNodePathAndApply(*this);
+  portValues[mOutputPort] = mInputGain*mCallback->getValue();
 }
 
-const Input*
-Input::toInput(void) const
-{
-  return this;
-}
-
-Input*
-Input::toInput(void)
-{
-  return this;
-}
-
-bool
-Input::init(void)
-{
-  if (!mCallback) {
-    Log(Model, Error) << "Initialization of Input model \"" << getName()
-                      << "\" failed: Input Callback not set!" << endl;
-    return false;
-  }
-
-  return Model::init();
-}
-
-void
-Input::output(const TaskInfo&)
-{
-  mOutputValue = mInputGain*mCallback->getValue();
-}
-
 Input::Callback*
 Input::getCallback(void) const
 {
@@ -100,10 +71,4 @@
   mInputName = inputName;
 }
 
-const real_type&
-Input::getOutputValue(void) const
-{
-  return mOutputValue;
-}
-
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Input.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Input.h	2008-10-10 18:46:33 UTC (rev 593)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Input.h	2008-10-10 19:32:17 UTC (rev 594)
@@ -15,17 +15,10 @@
   Input(const std::string& name);
   virtual ~Input(void);
 
-  /// Double dispatch helper for the system visitor
-  virtual void accept(ModelVisitor& visitor);
-  /// Double dispatch helper for the system visitor
-//   virtual void accept(ConstModelVisitor& visitor) const;
+  virtual void output(const Task&,const DiscreteStateValueVector&,
+                      const ContinousStateValueVector& continousState,
+                      PortValueList& portValues) const;
 
-  virtual const Input* toInput(void) const;
-  virtual Input* toInput(void);
-
-  virtual bool init(void);
-  virtual void output(const TaskInfo&);
-
   class Callback : public WeakReferenced {
   public:
     virtual ~Callback();
@@ -41,11 +34,9 @@
   const std::string& getInputName(void) const;
   void setInputName(const std::string& inputName);
 
-  const real_type& getOutputValue(void) const;
-
 private:
+  RealOutputPort mOutputPort;
   SharedPtr<Callback> mCallback;
-  real_type mOutputValue;
   real_type mInputGain;
   std::string mInputName;
 };

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-10 18:46:33 UTC (rev 593)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-10 19:32:17 UTC (rev 594)
@@ -235,6 +235,7 @@
   Delay.cpp \
   DiscreteIntegrator.cpp \
   Gain.cpp \
+  Input.cpp \
   Integrator.cpp \
   Output.cpp \
   SimulationTime.cpp
@@ -256,7 +257,6 @@
 #   Force.cpp \
 #   Gravity.cpp \
 #   Ground.cpp \
-#   Input.cpp \
 #   Joint.cpp \
 #   Launchbar.cpp \
 #   LinearSpringDamper.cpp \



From frohlich at mail.berlios.de  Fri Oct 10 22:07:43 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 10 Oct 2008 22:07:43 +0200
Subject: [OpenFDM-svn] r595 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810102007.m9AK7hwT029870@sheep.berlios.de>

Author: frohlich
Date: 2008-10-10 22:07:42 +0200 (Fri, 10 Oct 2008)
New Revision: 595

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicInstance.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicInstance.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ModelInstance.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ModelInstance.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
More Sample time handling.

M    src/OpenFDM/ModelInstance.h
M    src/OpenFDM/MechanicInstance.h
M    src/OpenFDM/AbstractNodeInstance.cpp
M    src/OpenFDM/MechanicInstance.cpp
M    src/OpenFDM/ModelInstance.cpp
M    src/OpenFDM/Node.h
M    src/OpenFDM/Node.cpp
M    src/OpenFDM/System.cpp
M    src/OpenFDM/AbstractNodeInstance.h
M    src/OpenFDM/NodeInstance.cpp
M    src/OpenFDM/NodeInstance.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.cpp	2008-10-10 19:32:17 UTC (rev 594)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.cpp	2008-10-10 20:07:42 UTC (rev 595)
@@ -11,8 +11,10 @@
 
 namespace OpenFDM {
 
-AbstractNodeInstance::AbstractNodeInstance(const NodePath& nodePath) :
-  mNodePath(nodePath)
+AbstractNodeInstance::AbstractNodeInstance(const NodePath& nodePath,
+                                           const SampleTime& sampleTime) :
+  mNodePath(nodePath),
+  mSampleTime(sampleTime)
 {
   OpenFDMAssert(!nodePath.empty());
 }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h	2008-10-10 19:32:17 UTC (rev 594)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h	2008-10-10 20:07:42 UTC (rev 595)
@@ -11,6 +11,7 @@
 #include "AbstractNodeContext.h"
 #include "Assert.h"
 #include "Node.h"
+#include "SampleTime.h"
 #include "SharedPtr.h"
 #include "WeakReferenced.h"
 
@@ -21,7 +22,7 @@
 /// This class is meant to show up in the user interface of this simulation.
 class AbstractNodeInstance : public WeakReferenced {
 public:
-  AbstractNodeInstance(const NodePath& nodePath);
+  AbstractNodeInstance(const NodePath& nodePath, const SampleTime& sampleTime);
   virtual ~AbstractNodeInstance();
 
   /// The actual Node this AbstractNodeInstance stems from
@@ -30,12 +31,12 @@
 
   const NodePath& getNodePath() const { return mNodePath; }
 
-//   /// Set the sample times this node will run on
-//   void setSampleTimeSet(const SampleTimeSet& sampleTimeSet)
-//   { mSampleTimeSet = sampleTimeSet; }
-//   /// Get the sample times this node will run on
-//   const SampleTimeSet& getSampleTimeSet() const
-//   { return mSampleTimeSet; }
+  /// Set the sample time this node will run on
+  void setSampleTime(const SampleTime& sampleTime)
+  { mSampleTime = sampleTime; }
+  /// Get the sample time this node will run on
+  const SampleTime& getSampleTime() const
+  { return mSampleTime; }
 
   PortValueList& getPortValueList()
   { return getNodeContext().getPortValueList(); }
@@ -53,8 +54,8 @@
   AbstractNodeInstance(const AbstractNodeInstance&);
   AbstractNodeInstance& operator=(const AbstractNodeInstance&);
 
-//   /// The sample times this node will run on
-//   SampleTimeSet mSampleTimeSet;
+  /// The sample times this node will run on
+  SampleTime mSampleTime;
 
   NodePath mNodePath;
 };

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicInstance.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicInstance.cpp	2008-10-10 19:32:17 UTC (rev 594)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicInstance.cpp	2008-10-10 20:07:42 UTC (rev 595)
@@ -7,8 +7,9 @@
 namespace OpenFDM {
 
 MechanicInstance::MechanicInstance(const NodePath& nodePath,
+                                   const SampleTime& sampleTime,
                                    const MechanicNode* mechanicNode) :
-  AbstractNodeInstance(nodePath),
+  AbstractNodeInstance(nodePath, sampleTime),
   mMechanicContext(new MechanicContext(mechanicNode))
 {
 }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicInstance.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicInstance.h	2008-10-10 19:32:17 UTC (rev 594)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicInstance.h	2008-10-10 20:07:42 UTC (rev 595)
@@ -14,7 +14,7 @@
 
 class MechanicInstance : public AbstractNodeInstance {
 public:
-  MechanicInstance(const NodePath& nodePath,
+  MechanicInstance(const NodePath& nodePath, const SampleTime& sampleTime,
                    const MechanicNode* mechanicNode);
   virtual ~MechanicInstance();
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ModelInstance.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ModelInstance.cpp	2008-10-10 19:32:17 UTC (rev 594)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ModelInstance.cpp	2008-10-10 20:07:42 UTC (rev 595)
@@ -6,8 +6,9 @@
 
 namespace OpenFDM {
 
-ModelInstance::ModelInstance(const NodePath& nodePath, const Model* model) :
-  AbstractNodeInstance(nodePath),
+ModelInstance::ModelInstance(const NodePath& nodePath,
+                             const SampleTime& sampleTime, const Model* model) :
+  AbstractNodeInstance(nodePath, sampleTime),
   mModelContext(new ModelContext(model))
 {
 }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ModelInstance.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ModelInstance.h	2008-10-10 19:32:17 UTC (rev 594)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ModelInstance.h	2008-10-10 20:07:42 UTC (rev 595)
@@ -14,7 +14,8 @@
 
 class ModelInstance : public AbstractNodeInstance {
 public:
-  ModelInstance(const NodePath& nodePath, const Model* model);
+  ModelInstance(const NodePath& nodePath, const SampleTime& sampleTime,
+                const Model* model);
   virtual ~ModelInstance();
 
   // Return true if this leaf directly depends on one of leafInstance outputs

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-10-10 19:32:17 UTC (rev 594)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-10-10 20:07:42 UTC (rev 595)
@@ -14,7 +14,7 @@
 
 Node::Node(const std::string& name) :
   Object(name),
-  mSampleTime(0, 1)
+  mSampleTime(SampleTime::getInherited())
 {
 }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-10-10 19:32:17 UTC (rev 594)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-10-10 20:07:42 UTC (rev 595)
@@ -7,10 +7,10 @@
 
 #include <string>
 #include <vector>
-#include "Fraction.h"
 #include "Object.h"
 #include "PortId.h"
 #include "PortInfo.h"
+#include "SampleTime.h"
 #include "SharedPtr.h"
 
 namespace OpenFDM {
@@ -49,9 +49,9 @@
   unsigned getPortIndex(const PortId& portId) const;
   bool checkPort(const PortId& portId) const;
 
-  const Fraction& getSampleTime() const
+  const SampleTime& getSampleTime() const
   { return mSampleTime; }
-  void setSampleTime(const Fraction& sampleTime)
+  void setSampleTime(const SampleTime& sampleTime)
   { mSampleTime = sampleTime; }
 
 protected:
@@ -79,7 +79,7 @@
 
   /// Sample time handling.
   /// FIXME Should that be something like the old sample time set??
-  Fraction mSampleTime;
+  SampleTime mSampleTime;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.cpp	2008-10-10 19:32:17 UTC (rev 594)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.cpp	2008-10-10 20:07:42 UTC (rev 595)
@@ -6,8 +6,9 @@
 
 namespace OpenFDM {
 
-NodeInstance::NodeInstance(const NodePath& nodePath, const Node* node) :
-  AbstractNodeInstance(nodePath),
+NodeInstance::NodeInstance(const NodePath& nodePath,
+                           const SampleTime& sampleTime, const Node* node) :
+  AbstractNodeInstance(nodePath, sampleTime),
   mNodeContext(new NodeContext(node))
 {
 }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.h	2008-10-10 19:32:17 UTC (rev 594)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.h	2008-10-10 20:07:42 UTC (rev 595)
@@ -12,7 +12,8 @@
 
 class NodeInstance : public AbstractNodeInstance {
 public:
-  NodeInstance(const NodePath& nodePath, const Node* node);
+  NodeInstance(const NodePath& nodePath, const SampleTime& sampleTime,
+               const Node* node);
   virtual ~NodeInstance();
 
 protected:

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-10 19:32:17 UTC (rev 594)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-10 20:07:42 UTC (rev 595)
@@ -365,7 +365,7 @@
   PortDataList* buildNodeContext(const Node& node)
   {
     NodeInstance* nodeInstance;
-    nodeInstance = new NodeInstance(getNodePath(), &node);
+    nodeInstance = new NodeInstance(getNodePath(), mSampleTime, &node);
     _nodeInstanceList.push_back(nodeInstance);
     PortDataList* portDataList;
     portDataList = getCurrentNodePortDataList();
@@ -395,7 +395,7 @@
   {
     // Need to stor the root nodes to build up the spanning tree for the
     // mechanical system here.
-    MechanicInstance* mechanicInstance = new MechanicInstance(getNodePath(), &node);
+    MechanicInstance* mechanicInstance = new MechanicInstance(getNodePath(), mSampleTime, &node);
     _nodeInstanceList.push_back(mechanicInstance);
 //     _mechanicInstanceList.push_back(mechanicInstance);
     _rootJointInstanceList.push_back(mechanicInstance);
@@ -403,14 +403,14 @@
   }
   virtual void apply(const MechanicNode& node)
   {
-    MechanicInstance* mechanicInstance = new MechanicInstance(getNodePath(), &node);
+    MechanicInstance* mechanicInstance = new MechanicInstance(getNodePath(), mSampleTime, &node);
     _nodeInstanceList.push_back(mechanicInstance);
     _mechanicInstanceList.push_back(mechanicInstance);
     allocPortData(mechanicInstance, node);
   }
   virtual void apply(const Model& node)
   {
-    ModelInstance* modelInstance = new ModelInstance(getNodePath(), &node);
+    ModelInstance* modelInstance = new ModelInstance(getNodePath(), mSampleTime, &node);
     _nodeInstanceList.push_back(modelInstance);
     _modelInstanceList.push_back(modelInstance);
     allocPortData(modelInstance, node);
@@ -441,8 +441,16 @@
       parentNodePortDataList.swap(mCurrentNodePortDataList);
       mCurrentNodePortDataList = _portDataMap[i];
 
-      group.getChild(i)->accept(*this);
+      SharedPtr<const Node> node = group.getChild(i);
 
+      SampleTime sampleTime = mSampleTime;
+      if (node->getSampleTime().isInherited())
+        mSampleTime = node->getSampleTime();
+
+      node->accept(*this);
+
+      mSampleTime = sampleTime;
+
       // Pop the per node port information struct
       parentNodePortDataList.swap(mCurrentNodePortDataList);
     }
@@ -536,6 +544,9 @@
   typedef std::list<SharedPtr<PortDataList> > PortDataListList;
   PortDataListList _portDataListList;
 
+  // Current nodes sample time
+  SampleTime mSampleTime;
+
   // Here the miracle occurs.
   // The collected simulation nodes are packed into something that can be used
   // to simulate the system.



From frohlich at mail.berlios.de  Sat Oct 11 09:57:32 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 11 Oct 2008 09:57:32 +0200
Subject: [OpenFDM-svn] r596 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810110757.m9B7vWEr004493@sheep.berlios.de>

Author: frohlich
Date: 2008-10-11 09:57:31 +0200 (Sat, 11 Oct 2008)
New Revision: 596

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/SampleTime.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.h
Log:
Improove sample time handling in the model collection step.

M    src/OpenFDM/System.h
M    src/OpenFDM/System.cpp
M    src/OpenFDM/SampleTime.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SampleTime.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SampleTime.h	2008-10-10 20:07:42 UTC (rev 595)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SampleTime.h	2008-10-11 07:57:31 UTC (rev 596)
@@ -44,13 +44,28 @@
   /// Returns true if the task is a per timestep task
   bool isPerTimestep(void) const
   { return mSampleTime == -2; }
+  /// Returns true if the task is a per basic sample time task
+  bool isPerBasicSampleTime(void) const
+  { return mSampleTime == -3; }
   /// Returns the actual sample time
   const Fraction& getSampleTime(void) const
   { return mSampleTime; }
 
-  /// Returns true if th sample time is valid
+  /// Returns true if the sample time is valid
   bool isValid(void) const
-  { return isContinous() || isDiscrete() || isInherited() || isPerTimestep(); }
+  {
+    if (isContinous())
+      return true;
+    if (isDiscrete())
+      return true;
+    if (isInherited())
+      return true;
+    if (isPerTimestep())
+      return true;
+    if (isPerBasicSampleTime())
+      return true;
+    return false;
+  }
 
   bool operator==(const SampleTime& st) const
   { return mSampleTime == st.mSampleTime; }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-10 20:07:42 UTC (rev 595)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-11 07:57:31 UTC (rev 596)
@@ -212,6 +212,10 @@
 
 class System::NodeInstanceCollector : public ConstNodeVisitor {
 public:
+  NodeInstanceCollector(const SampleTime& sampleTime) :
+    mSampleTime(sampleTime),
+    mBasicSampleTime(SampleTime::getContinous())
+  { }
 
   struct PortData : public WeakReferenced {
   public:
@@ -444,9 +448,21 @@
       SharedPtr<const Node> node = group.getChild(i);
 
       SampleTime sampleTime = mSampleTime;
-      if (node->getSampleTime().isInherited())
-        mSampleTime = node->getSampleTime();
 
+      mSampleTime = node->getSampleTime();
+      if (mSampleTime.isInherited())
+        mSampleTime = sampleTime;
+      else if (mSampleTime.isDiscrete()) {
+        if (!mBasicSampleTime.isDiscrete())
+          mBasicSampleTime = mSampleTime;
+        else {
+          Fraction a = mBasicSampleTime.getSampleTime();
+          Fraction b = mSampleTime.getSampleTime();
+          mBasicSampleTime = SampleTime(greatestCommonDivisor(a, b));
+          OpenFDMAssert(mBasicSampleTime.isDiscrete());
+        }
+      }
+
       node->accept(*this);
 
       mSampleTime = sampleTime;
@@ -546,6 +562,10 @@
 
   // Current nodes sample time
   SampleTime mSampleTime;
+  // past all the traversal, this contains the basic sample time of the
+  // whole system. It is built up during traversal and has almost no meaning
+  // until all models have be traversed.
+  SampleTime mBasicSampleTime;
 
   // Here the miracle occurs.
   // The collected simulation nodes are packed into something that can be used
@@ -564,12 +584,18 @@
     if (!allocModels())
       return 0;
 
+    real_type basicSampleTime = 0.01; // FIXME in this case just continous
+    if (mBasicSampleTime.isDiscrete())
+      basicSampleTime = mBasicSampleTime.getSampleTime().getRealValue();
+
+    Log(Model, Info) << "Basic sample time is " << basicSampleTime << std::endl;
+
     // Now the system is ready for state initialization and execution
     // Build up te abstract system and return that
 
     // For the first cut, assume many things like basic step size and such ...
     SharedPtr<DiscreteSystem> discreteSystem;
-    discreteSystem = new DiscreteSystem(0.01, 1);
+    discreteSystem = new DiscreteSystem(basicSampleTime, 1);
 
     ModelInstanceList::const_iterator i;
     for (i = _modelInstanceList.begin(); i != _modelInstanceList.end(); ++i) {
@@ -689,7 +715,8 @@
 
 System::System(const std::string& name, Node* node) :
   Object(name),
-  mNode(node)
+  mNode(node),
+  mSampleTime(SampleTime::getContinous())
 {
 }
 
@@ -705,13 +732,24 @@
 }
 
 bool
+System::setSampleTime(const SampleTime& sampleTime)
+{
+  if (!sampleTime.isContinous() && !sampleTime.isDiscrete()) {
+    Log(Model, Warning) << "Ignoring attemp to set invalid sample time for "
+                        << " System \"" << getName() << "\"" << std::endl;
+    return false;
+  }
+  mSampleTime = sampleTime;
+}
+
+bool
 System::init()
 {
   if (!mNode)
     return false;
   
   // Build up the lists required to run the model.
-  NodeInstanceCollector nodeInstanceCollector;
+  NodeInstanceCollector nodeInstanceCollector(mSampleTime);
   mNode->accept(nodeInstanceCollector);
   
   mAbstractSystem = nodeInstanceCollector.buildSystem();

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.h	2008-10-10 20:07:42 UTC (rev 595)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.h	2008-10-11 07:57:31 UTC (rev 596)
@@ -10,6 +10,7 @@
 #include "AbstractNodeInstance.h"
 #include "Node.h"
 #include "Object.h"
+#include "SampleTime.h"
 
 namespace OpenFDM {
 
@@ -29,6 +30,12 @@
   SharedPtr<const Node> getNode() const { return mNode; }
   void setNode(Node* node);
 
+  /// The toplevel sample time of the system. Defaults to continous.
+  /// Allowed values are dontinous and discrete sample times.
+  /// Attemps to set an invalid value are ignored.
+  const SampleTime& getSampleTime(void) const { return mSampleTime; }
+  bool setSampleTime(const SampleTime& sampleTime);
+
   bool init();
   void clear();
 
@@ -56,6 +63,7 @@
   class NodeInstanceCollector;
 
   SharedPtr<Node> mNode;
+  SampleTime mSampleTime;
 
   SharedPtr<AbstractSystem> mAbstractSystem;
   ConstNodeInstanceList mNodeInstanceList;



From frohlich at mail.berlios.de  Sat Oct 11 10:17:16 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 11 Oct 2008 10:17:16 +0200
Subject: [OpenFDM-svn] r597 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810110817.m9B8HGG6006049@sheep.berlios.de>

Author: frohlich
Date: 2008-10-11 10:17:15 +0200 (Sat, 11 Oct 2008)
New Revision: 597

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.h
Log:
Comment fixes.

M    src/OpenFDM/System.h
M    src/OpenFDM/System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-11 07:57:31 UTC (rev 596)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-11 08:17:15 UTC (rev 597)
@@ -445,10 +445,13 @@
       parentNodePortDataList.swap(mCurrentNodePortDataList);
       mCurrentNodePortDataList = _portDataMap[i];
 
+      // push the sample time
+      SampleTime sampleTime = mSampleTime;
+
+      // our next node to traverse
       SharedPtr<const Node> node = group.getChild(i);
 
-      SampleTime sampleTime = mSampleTime;
-
+      // check what to do with sample times
       mSampleTime = node->getSampleTime();
       if (mSampleTime.isInherited())
         mSampleTime = sampleTime;
@@ -463,8 +466,10 @@
         }
       }
 
+      // now traverse the child ...
       node->accept(*this);
 
+      // restore old group sample time
       mSampleTime = sampleTime;
 
       // Pop the per node port information struct

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.h	2008-10-11 07:57:31 UTC (rev 596)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.h	2008-10-11 08:17:15 UTC (rev 597)
@@ -31,7 +31,7 @@
   void setNode(Node* node);
 
   /// The toplevel sample time of the system. Defaults to continous.
-  /// Allowed values are dontinous and discrete sample times.
+  /// Allowed values are continous and discrete sample times.
   /// Attemps to set an invalid value are ignored.
   const SampleTime& getSampleTime(void) const { return mSampleTime; }
   bool setSampleTime(const SampleTime& sampleTime);



From frohlich at mail.berlios.de  Sat Oct 11 11:07:19 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 11 Oct 2008 11:07:19 +0200
Subject: [OpenFDM-svn] r598 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200810110907.m9B97JEK010164@sheep.berlios.de>

Author: frohlich
Date: 2008-10-11 11:07:19 +0200 (Sat, 11 Oct 2008)
New Revision: 598

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Add check for self referencing direct dependencies.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-11 08:17:15 UTC (rev 597)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-11 09:07:19 UTC (rev 598)
@@ -619,6 +619,13 @@
       SharedPtr<ModelInstance> modelInstance = _modelInstanceList.front();
       _modelInstanceList.pop_front();
 
+      if (modelInstance->dependsOn(*modelInstance)) {
+        Log(Schedule, Error)
+          << "Self referencing direct dependency for Model \""
+          << modelInstance->getNodeNamePath() << "\" detected!" << std::endl;
+        return false;
+      }
+
       ModelInstanceList::iterator i;
       for (i = sortedModelInstanceList.begin();
            i != sortedModelInstanceList.end();

Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-11 08:17:15 UTC (rev 597)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-11 09:07:19 UTC (rev 598)
@@ -15,7 +15,7 @@
 // Build a system with a single gain component referencing itself
 bool testSelfReferencingDirectInput()
 {
-  Group* group = new Group("group");
+  SharedPtr<Group> group = new Group("group");
   Group::NodeId gain = group->addChild(new Gain("gain"));
   group->connect(gain, "output", gain, "input");
 
@@ -107,6 +107,12 @@
 
 int main()
 {
+  // Check a self referencing gain model, to see if cyclic loops
+  // are properly detected
+  if (!testSelfReferencingDirectInput())
+    return EXIT_FAILURE;
+
+
   SharedPtr<System> system = new System("System", buildContinousExample());
 //   SharedPtr<System> system = new System("System", buildDiscreteExample());
 //   SharedPtr<System> system = new System("System", buildLibraryNodeExample());



From frohlich at mail.berlios.de  Sat Oct 11 11:34:23 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 11 Oct 2008 11:34:23 +0200
Subject: [OpenFDM-svn] r599 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810110934.m9B9YN9R012508@sheep.berlios.de>

Author: frohlich
Date: 2008-10-11 11:34:22 +0200 (Sat, 11 Oct 2008)
New Revision: 599

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
Log:
Add possibility to ask for node paths.

M    src/OpenFDM/Node.h
M    src/OpenFDM/Node.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-10-11 09:07:19 UTC (rev 598)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-10-11 09:34:22 UTC (rev 599)
@@ -162,6 +162,27 @@
   }
 }
 
+class Node::NodePathListCollectVisitor : public ConstNodeVisitor {
+public:
+  virtual void apply(const Node& node)
+  {
+    if (node.getNumParents()) {
+      node.ascend(*this);
+    } else {
+      mNodePathList.push_back(getNodePath());
+    }
+  }
+
+  NodePathList mNodePathList;
+};
+
+NodePathList
+Node::getNodePathList() const
+{
+  NodePathListCollectVisitor visitor;
+  return visitor.mNodePathList;
+}
+
 void
 Node::addPort(PortInfo* port)
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-10-11 09:07:19 UTC (rev 598)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-10-11 09:34:22 UTC (rev 599)
@@ -21,6 +21,7 @@
 class ConstNodeVisitor;
 
 typedef std::vector<SharedPtr<const Node> > NodePath;
+typedef std::vector<NodePath> NodePathList;
 
 class Node : public Object {
   OPENFDM_OBJECT(Node, Object);
@@ -54,6 +55,9 @@
   void setSampleTime(const SampleTime& sampleTime)
   { mSampleTime = sampleTime; }
 
+  /// Return all node paths this Node is currently attached to.
+  NodePathList getNodePathList() const;
+
 protected:
 
   friend class Group;
@@ -77,6 +81,8 @@
   typedef std::vector<WeakPtr<Node> > ParentList;
   ParentList mParentList;
 
+  class NodePathListCollectVisitor;
+
   /// Sample time handling.
   /// FIXME Should that be something like the old sample time set??
   SampleTime mSampleTime;



From frohlich at mail.berlios.de  Sat Oct 11 12:36:24 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 11 Oct 2008 12:36:24 +0200
Subject: [OpenFDM-svn] r600 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810111036.m9BAaOsP025284@sheep.berlios.de>

Author: frohlich
Date: 2008-10-11 12:36:18 +0200 (Sat, 11 Oct 2008)
New Revision: 600

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Input.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Input.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h
Log:
Add Input to the visitable nodes.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp	2008-10-11 09:34:22 UTC (rev 599)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp	2008-10-11 10:36:18 UTC (rev 600)
@@ -10,6 +10,7 @@
 #include "LeafNode.h"
 #include "MechanicNode.h"
 #include "Model.h"
+#include "Input.h"
 #include "Output.h"
 #include "RigidBody.h"
 #include "RootJoint.h"
@@ -57,6 +58,12 @@
 }
 
 void
+ConstNodeVisitor::apply(const Input& node)
+{
+  apply(static_cast<const Model&>(node));
+}
+
+void
 ConstNodeVisitor::apply(const Output& node)
 {
   apply(static_cast<const Model&>(node));

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h	2008-10-11 09:34:22 UTC (rev 599)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h	2008-10-11 10:36:18 UTC (rev 600)
@@ -17,6 +17,7 @@
 class LibraryNode;
 class LeafNode;
 class Model;
+class Input;
 class Output;
 class MechanicNode;
 class RigidBody;
@@ -36,6 +37,7 @@
 
   virtual void apply(const LeafNode&);
   virtual void apply(const Model&);
+  virtual void apply(const Input&);
   virtual void apply(const Output&);
 
   virtual void apply(const MechanicNode&);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Input.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Input.cpp	2008-10-11 09:34:22 UTC (rev 599)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Input.cpp	2008-10-11 10:36:18 UTC (rev 600)
@@ -3,6 +3,9 @@
  */
 
 #include "Input.h"
+
+#include "ConstNodeVisitor.h"
+#include "NodeVisitor.h"
 #include "PortValueList.h"
 
 namespace OpenFDM {
@@ -28,6 +31,18 @@
 }
 
 void
+Input::accept(NodeVisitor& visitor)
+{
+  visitor.handleNodePathAndApply(this);
+}
+
+void
+Input::accept(ConstNodeVisitor& visitor) const
+{
+  visitor.handleNodePathAndApply(this);
+}
+
+void
 Input::output(const Task& ,const DiscreteStateValueVector&,
               const ContinousStateValueVector&,
               PortValueList& portValues) const

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Input.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Input.h	2008-10-11 09:34:22 UTC (rev 599)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Input.h	2008-10-11 10:36:18 UTC (rev 600)
@@ -15,6 +15,10 @@
   Input(const std::string& name);
   virtual ~Input(void);
 
+  /// Double dispatch helper for the system visitor
+  virtual void accept(NodeVisitor& visitor);
+  virtual void accept(ConstNodeVisitor& visitor) const;
+
   virtual void output(const Task&,const DiscreteStateValueVector&,
                       const ContinousStateValueVector& continousState,
                       PortValueList& portValues) const;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp	2008-10-11 09:34:22 UTC (rev 599)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp	2008-10-11 10:36:18 UTC (rev 600)
@@ -5,6 +5,7 @@
 #include "NodeVisitor.h"
 
 #include "Group.h"
+#include "Input.h"
 #include "Interact.h"
 #include "LibraryNode.h"
 #include "LeafNode.h"
@@ -57,6 +58,12 @@
 }
 
 void
+NodeVisitor::apply(Input& node)
+{
+  apply(static_cast<Model&>(node));
+}
+
+void
 NodeVisitor::apply(Output& node)
 {
   apply(static_cast<Model&>(node));

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h	2008-10-11 09:34:22 UTC (rev 599)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h	2008-10-11 10:36:18 UTC (rev 600)
@@ -17,6 +17,7 @@
 class LibraryNode;
 class LeafNode;
 class Model;
+class Input;
 class Output;
 class MechanicNode;
 class RigidBody;
@@ -36,6 +37,7 @@
 
   virtual void apply(LeafNode&);
   virtual void apply(Model&);
+  virtual void apply(Input&);
   virtual void apply(Output&);
 
   virtual void apply(MechanicNode&);



From frohlich at mail.berlios.de  Sat Oct 11 12:58:38 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 11 Oct 2008 12:58:38 +0200
Subject: [OpenFDM-svn] r601 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200810111058.m9BAwcBv021724@sheep.berlios.de>

Author: frohlich
Date: 2008-10-11 12:58:35 +0200 (Sat, 11 Oct 2008)
New Revision: 601

Modified:
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Add some more testcasesAdd some more testcases.

M    src/test/structure.cpp


Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-11 10:36:18 UTC (rev 600)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-11 10:58:35 UTC (rev 601)
@@ -15,8 +15,8 @@
 // Build a system with a single gain component referencing itself
 bool testSelfReferencingDirectInput()
 {
-  SharedPtr<Group> group = new Group("group");
-  Group::NodeId gain = group->addChild(new Gain("gain"));
+  SharedPtr<Group> group = new Group("Group");
+  Group::NodeId gain = group->addChild(new Gain("Gain"));
   group->connect(gain, "output", gain, "input");
 
   SharedPtr<System> system = new System("Self referencing Gain");
@@ -30,6 +30,61 @@
   return true;
 }
 
+// build up a cyclic direct input loop involving more than one model
+bool testCyclicDependency()
+{
+  SharedPtr<Group> group = new Group("Group");
+  Group::NodeId gain1 = group->addChild(new Gain("Gain 1"));
+  Group::NodeId gain2 = group->addChild(new Gain("Gain 2"));
+  group->connect(gain1, "output", gain2, "input");
+  group->connect(gain2, "output", gain1, "input");
+
+  SharedPtr<System> system = new System("Cyclic loop");
+  system->setNode(group);
+
+  if (system->init()) {
+    std::cerr << "Detection of direct input loops failed!"
+              << std::endl;
+    return false;
+  }
+  return true;
+}
+
+// build up a cyclic direct input loop involving more than one model
+bool testCyclicDependencyWithGroup()
+{
+  SharedPtr<Group> group1 = new Group("Group 1");
+  Group::NodeId groupInput1 = group1->addChild(new GroupInput("Input 1"));
+  Group::NodeId gain1 = group1->addChild(new Gain("Gain 1"));
+  Group::NodeId groupOutput1 = group1->addChild(new GroupOutput("Output 1"));
+  group1->connect(groupInput1, "output", gain1, "input");
+  group1->connect(gain1, "output", groupOutput1, "input");
+
+  SharedPtr<Group> group2 = new Group("Group 2");
+  Group::NodeId groupInput2 = group2->addChild(new GroupInput("Input 2"));
+  Group::NodeId gain2 = group2->addChild(new Gain("Gain 2"));
+  Group::NodeId groupOutput2 = group2->addChild(new GroupOutput("Output 2"));
+  group2->connect(groupInput2, "output", gain2, "input");
+  group2->connect(gain2, "output", groupOutput2, "input");
+
+  SharedPtr<Group> group = new Group("Group");
+  Group::NodeId groupId1 = group->addChild(group1);
+  Group::NodeId groupId2 = group->addChild(group2);
+  group->connect(groupId1, "output", groupId2, "input");
+  group->connect(groupId2, "output", groupId1, "input");
+
+  SharedPtr<System> system = new System("Cyclic loop through groups");
+  system->setNode(group);
+
+  if (system->init()) {
+    std::cerr << "Detection of direct input loops failed!"
+              << std::endl;
+    return false;
+  }
+  return true;
+}
+
+
 Node* buildContinousExample()
 {
   SharedPtr<Group> group = new Group("G0");
@@ -112,7 +167,16 @@
   if (!testSelfReferencingDirectInput())
     return EXIT_FAILURE;
 
+  // Check for cyclic loop analysis
+  if (!testCyclicDependency())
+    return EXIT_FAILURE;
 
+  // Check for cyclic loop analysis through groups.
+  // Als kind of checks if connections through groups work
+  if (!testCyclicDependencyWithGroup())
+    return EXIT_FAILURE;
+
+
   SharedPtr<System> system = new System("System", buildContinousExample());
 //   SharedPtr<System> system = new System("System", buildDiscreteExample());
 //   SharedPtr<System> system = new System("System", buildLibraryNodeExample());



From frohlich at mail.berlios.de  Sat Oct 11 13:10:39 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 11 Oct 2008 13:10:39 +0200
Subject: [OpenFDM-svn] r602 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200810111110.m9BBAdkG000801@sheep.berlios.de>

Author: frohlich
Date: 2008-10-11 13:10:37 +0200 (Sat, 11 Oct 2008)
New Revision: 602

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Add new test cases and a fix to make them work.

M    src/test/structure.cpp
M    src/OpenFDM/System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-11 10:58:35 UTC (rev 601)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-11 11:10:37 UTC (rev 602)
@@ -678,8 +678,8 @@
         return false;
     }
     // check port values and report unconnected mandatory values.
-    ModelInstanceList::const_iterator j;
-    for (j = _modelInstanceList.begin(); j != _modelInstanceList.end(); ++j) {
+    NodeInstanceList::const_iterator j;
+    for (j = _nodeInstanceList.begin(); j != _nodeInstanceList.end(); ++j) {
       const Node& node = (*j)->getNode();
       for (unsigned k = 0; k < node.getNumPorts(); ++k) {
         SharedPtr<const PortInfo> portInfo = node.getPort(k);

Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-11 10:58:35 UTC (rev 601)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-11 11:10:37 UTC (rev 602)
@@ -51,10 +51,32 @@
 }
 
 // build up a cyclic direct input loop involving more than one model
-bool testCyclicDependencyWithGroup()
+bool testCyclicDependencyWithGroup1()
 {
   SharedPtr<Group> group1 = new Group("Group 1");
   Group::NodeId groupInput1 = group1->addChild(new GroupInput("Input 1"));
+  Group::NodeId groupOutput1 = group1->addChild(new GroupOutput("Output 1"));
+  group1->connect(groupInput1, "output", groupOutput1, "input");
+
+  SharedPtr<Group> group = new Group("Group");
+  Group::NodeId groupId1 = group->addChild(group1);
+  group->connect(groupId1, "output", groupId1, "input");
+
+  SharedPtr<System> system = new System("Cyclic loop through groups");
+  system->setNode(group);
+
+  if (system->init()) {
+    std::cerr << "Detection of direct input loops failed!"
+              << std::endl;
+    return false;
+  }
+  return true;
+}
+
+bool testCyclicDependencyWithGroup2()
+{
+  SharedPtr<Group> group1 = new Group("Group 1");
+  Group::NodeId groupInput1 = group1->addChild(new GroupInput("Input 1"));
   Group::NodeId gain1 = group1->addChild(new Gain("Gain 1"));
   Group::NodeId groupOutput1 = group1->addChild(new GroupOutput("Output 1"));
   group1->connect(groupInput1, "output", gain1, "input");
@@ -84,7 +106,6 @@
   return true;
 }
 
-
 Node* buildContinousExample()
 {
   SharedPtr<Group> group = new Group("G0");
@@ -173,8 +194,10 @@
 
   // Check for cyclic loop analysis through groups.
   // Als kind of checks if connections through groups work
-  if (!testCyclicDependencyWithGroup())
+  if (!testCyclicDependencyWithGroup1())
     return EXIT_FAILURE;
+  if (!testCyclicDependencyWithGroup2())
+    return EXIT_FAILURE;
 
 
   SharedPtr<System> system = new System("System", buildContinousExample());



From frohlich at mail.berlios.de  Sat Oct 11 16:02:44 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 11 Oct 2008 16:02:44 +0200
Subject: [OpenFDM-svn] r603 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200810111402.m9BE2iXH030113@sheep.berlios.de>

Author: frohlich
Date: 2008-10-11 16:02:43 +0200 (Sat, 11 Oct 2008)
New Revision: 603

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractSystem.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.h
   branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Fix some scheduling problems.

M    src/test/structure.cpp
M    src/test/simulationtime.cpp
M    src/OpenFDM/AbstractSystem.h
M    src/OpenFDM/System.h
M    src/OpenFDM/System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractSystem.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractSystem.h	2008-10-11 11:10:37 UTC (rev 602)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractSystem.h	2008-10-11 14:02:43 UTC (rev 603)
@@ -24,23 +24,14 @@
   const real_type& getTime() const
   { return mTime; }
 
-  void outputAt(const real_type& t)
+  void advance(const real_type& tMax)
   {
     // Cry if we cannot do anything!
     OpenFDMAssert(!getValidityInterval().empty());
 
-//     if (equal(getTime(), getValidityInterval().getEnd())
-//     continousUpdate(tEnd);
-
-    // update until our requested end time is in the current interval.
-    while (needUpdate(t)) {
-      discreteUpdate();
-
-      real_type tEnd = min(getValidityInterval().getEnd(), t);
-      continousUpdate(tEnd);
-    }
-    if (t != mTime)
-      output(t);
+    // update a single step at most to time tMax
+    discreteUpdate();
+    continousUpdate(min(getValidityInterval().getEnd(), tMax));
   }
 
   // Not sure yet who is responsible for calling them at the right times ...
@@ -56,17 +47,18 @@
 
   void discreteUpdate()
   {
+    if (getTime() < mValidityInterval.getEnd())
+      return;
     discreteUpdateImplementation();
-    Log(Schedule,Info) << "Updated to time Interval from t = "
+    Log(Schedule,Info) << "Updated discrete systems to time Interval from t = "
                        << mValidityInterval.getBegin() << " to t = "
                        << mValidityInterval.getEnd() << std::endl;
   }
   void continousUpdate(const real_type& tEnd)
   {
+    Log(Schedule,Info) << "Update continous systems from time t = "
+                       << mTime << " to t = " << tEnd << std::endl;
     continousUpdateImplementation(tEnd);
-    Log(Schedule,Info) << "Updated to time Interval from t = "
-                       << mValidityInterval.getBegin() << " to t = "
-                       << mValidityInterval.getEnd() << std::endl;
   }
   void output(const real_type& t)
   {
@@ -76,15 +68,6 @@
     Log(Schedule,Info) << "Output for time t =  " << t << std::endl;
   }
 
-  /// FIXME: make that non virtual, but keep that up to date in the
-  /// implementation.
-  /// Hmm that interval concept is better????
-//   virtual real_type getNextDiscreteSampleHit() const
-//   {
-//     // Hmm, is this not enough for the sample hits??
-//     return mValidityInterval.getEnd();
-//   }
-
 protected:
 
   void setValidityInterval(const TimeInterval& validityInterval)

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-11 11:10:37 UTC (rev 602)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-11 14:02:43 UTC (rev 603)
@@ -91,14 +91,29 @@
     mODESolver->setFunction(mContinousSystemFunction);
   }
 
-  void appendModelContext(unsigned stride, ModelContext* modelContext)
+  void appendModelInstance(ModelInstance* modelInstance)
   {
+    ModelContext* modelContext = &modelInstance->getNodeContext();
+    SampleTime sampleTime = modelInstance->getSampleTime();
+
     // The init task contains them all
     mInitTask->mModelContextList[0].push_back(modelContext);
-    // FIXME: decide which ones where ...
-    mDiscreteTaskList[0]->mModelContextList.push_back(modelContext);
-    mContinousTask->mModelContextList[0].push_back(modelContext);
+    
+    // for now continous tasks take also all of them
     mContinousTask->appendStateValuesFromLeafContext(*modelContext);
+    if (sampleTime.isContinous())
+      mContinousTask->mModelContextList[0].push_back(modelContext);
+
+    // Discrete tasks need special treatment
+    if (sampleTime.isDiscrete()) {
+      real_type realSampleTime = sampleTime.getSampleTime().getRealValue();
+      for (unsigned i = 0; i < mDiscreteTaskList.size(); ++i) {
+        if (!equal(mDiscreteTaskList[i]->getStepsize(), realSampleTime))
+          continue;
+        mDiscreteTaskList[i]->mModelContextList.push_back(modelContext);
+        break;
+      }
+    }
   }
 
 protected:
@@ -106,17 +121,16 @@
   {
     mInitTask->init(t);
 
-    if (mList.empty())
-      return;
-
-    mList.front().mSampleHit = t;
-    discreteOutput(mList.front());
-
     // Set the state into the ode solver
     Vector v;
     mContinousTask->getStateValue(v);
     mODESolver->setState(v);
     mODESolver->setTime(t);
+
+    if (mList.empty())
+      return;
+
+    mList.front().mSampleHit = t;
   }
 
   virtual void discreteUpdateImplementation()
@@ -155,19 +169,9 @@
   virtual void continousUpdateImplementation(const real_type& tEnd)
   {
     mODESolver->integrate(tEnd);
+    mContinousTask->setStateValue(mODESolver->getState());
+    output(mODESolver->getTime());
   }
-  real_type getNextDiscreteSampleHit() const
-  {
-    OpenFDMAssert(getNextDiscreteSampleHitAlternate() == getValidityInterval().getEnd());
-    return getValidityInterval().getEnd();
-  }
-  real_type getNextDiscreteSampleHitAlternate() const
-  {
-    if (mList.empty())
-      return Limits<real_type>::max_value();
-    return mList.front().mSampleHit;
-  }
-
   virtual void outputImplementation(const real_type& t)
   {
     if (mContinousTask)
@@ -604,7 +608,7 @@
 
     ModelInstanceList::const_iterator i;
     for (i = _modelInstanceList.begin(); i != _modelInstanceList.end(); ++i) {
-      discreteSystem->appendModelContext(1, &(*i)->getNodeContext());
+      discreteSystem->appendModelInstance(*i);
     }
 
     return discreteSystem.release();
@@ -755,7 +759,7 @@
 }
 
 bool
-System::init()
+System::init(const real_type& t0)
 {
   if (!mNode)
     return false;
@@ -782,7 +786,7 @@
     (*j)->attachTo(this);
   
   // Hmm, really here???
-  mAbstractSystem->init(0);
+  mAbstractSystem->init(t0);
 
   return true;
 }
@@ -805,12 +809,15 @@
 {
   if (!mAbstractSystem)
     return false;
-  mAbstractSystem->outputAt(t);
 
-  SystemLogList::const_iterator i;
-  for (i = mSystemLogList.begin(); i != mSystemLogList.end(); ++i)
-    (*i)->output(t);
+  while (mAbstractSystem->getTime() < t) {
+    mAbstractSystem->advance(t);
 
+    SystemLogList::const_iterator i;
+    for (i = mSystemLogList.begin(); i != mSystemLogList.end(); ++i)
+      (*i)->output(mAbstractSystem->getTime());
+  }
+
   return true;
 }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.h	2008-10-11 11:10:37 UTC (rev 602)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.h	2008-10-11 14:02:43 UTC (rev 603)
@@ -36,7 +36,7 @@
   const SampleTime& getSampleTime(void) const { return mSampleTime; }
   bool setSampleTime(const SampleTime& sampleTime);
 
-  bool init();
+  bool init(const real_type& t0 = real_type(0));
   void clear();
 
   /// Simulate the system until the time tEnd

Modified: branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp	2008-10-11 11:10:37 UTC (rev 602)
+++ branches/OpenFDM-StateSeparation/src/test/simulationtime.cpp	2008-10-11 14:02:43 UTC (rev 603)
@@ -32,6 +32,7 @@
 
   SharedPtr<System> system = new System("Simulation Time System");
   Group* group = new Group("Simulation Time Group");
+  group->setSampleTime(rate);
   system->setNode(group);
   
   SimulationTime* simulationTime = new SimulationTime("Simulation Time");
@@ -41,7 +42,6 @@
   Group::NodeId outputId = group->addChild(output);
   SharedPtr<CollectOutputCallback> simTimeCallback = new CollectOutputCallback;
   output->setCallback(simTimeCallback);
-  output->setSampleTime(rate);
   if (!group->connect(simTimeId, "output", outputId, "input")) {
     std::cout << "Could not connect ports" << std::endl;
     return EXIT_FAILURE;

Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-11 11:10:37 UTC (rev 602)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-11 14:02:43 UTC (rev 603)
@@ -209,10 +209,7 @@
   if (!system->init())
     return 1;
 
-  double h = 0.01;
-  while (system->getTime() < 10) {
-    system->simulate(system->getTime() + h);
-  }
+  system->simulate(10);
 
   return 0;
 }



From frohlich at mail.berlios.de  Sat Oct 11 16:18:22 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sat, 11 Oct 2008 16:18:22 +0200
Subject: [OpenFDM-svn] r604 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810111418.m9BEIMJA031940@sheep.berlios.de>

Author: frohlich
Date: 2008-10-11 16:18:21 +0200 (Sat, 11 Oct 2008)
New Revision: 604

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Fraction.h
Log:
Spelling fixes.

M    src/OpenFDM/Fraction.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Fraction.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Fraction.h	2008-10-11 14:02:43 UTC (rev 603)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Fraction.h	2008-10-11 14:18:21 UTC (rev 604)
@@ -38,21 +38,7 @@
   { return mDenominator; }
 
   real_type getRealValue() const
-  {
-    int exp2 = 0;
-    numerator_type n = getNumerator();
-    while (n != 0 && (n&1) == 0) {
-      ++exp2;
-      n >>= 1;
-    }
-    denominator_type d = getDenominator();
-    while (d != 0 && (d&1) == 0) {
-      --exp2;
-      d >>= 1;
-    }
-    
-    return ldexp(real_type(n)/real_type(d), exp2);
-  }
+  { return real_type(getNumerator())/real_type(getDenominator()); }
 
   denominator_type reductionFactor() const
   { return gcd(std::abs(mNumerator), mDenominator); }
@@ -71,14 +57,14 @@
   {
     // Just in case that the argument is *this
     numerator_type numerator = fraction.mNumerator;
-    denominator_type denumerator = fraction.mDenominator;
+    denominator_type denominator = fraction.mDenominator;
 
-    denominator_type g = gcd(mDenominator, denumerator);
+    denominator_type g = gcd(mDenominator, denominator);
     mDenominator /= g;
-    mNumerator = mNumerator*(denumerator/g) + numerator*mDenominator;
+    mNumerator = mNumerator*(denominator/g) + numerator*mDenominator;
     g = gcd(std::abs(mNumerator), g);
     mNumerator /= g;
-    mDenominator *= denumerator/g;
+    mDenominator *= denominator/g;
 
     return *this;
   }
@@ -86,14 +72,14 @@
   {
     // Just in case that the argument is *this
     numerator_type numerator = fraction.mNumerator;
-    denominator_type denumerator = fraction.mDenominator;
+    denominator_type denominator = fraction.mDenominator;
 
-    denominator_type g = gcd(mDenominator, denumerator);
+    denominator_type g = gcd(mDenominator, denominator);
     mDenominator /= g;
-    mNumerator = mNumerator*(denumerator/g) - numerator*mDenominator;
+    mNumerator = mNumerator*(denominator/g) - numerator*mDenominator;
     g = gcd(std::abs(mNumerator), g);
     mNumerator /= g;
-    mDenominator *= denumerator/g;
+    mDenominator *= denominator/g;
 
     return *this;
   }
@@ -102,28 +88,28 @@
   {
     // Just in case that the argument is *this
     numerator_type numerator = fraction.mNumerator;
-    denominator_type denumerator = fraction.mDenominator;
+    denominator_type denominator = fraction.mDenominator;
 
-    denominator_type g0 = gcd(std::abs(mNumerator), denumerator);
+    denominator_type g0 = gcd(std::abs(mNumerator), denominator);
     denominator_type g1 = gcd(std::abs(numerator), mDenominator);
 
     mNumerator /= g0;
     mNumerator *= numerator/g1;
     mDenominator /= g1;
-    mDenominator *= denumerator/g0;
+    mDenominator *= denominator/g0;
     return *this;
   }
   Fraction& operator/=(const Fraction& fraction)
   {
     // Just in case that the argument is *this
     numerator_type numerator = fraction.mNumerator;
-    denominator_type denumerator = fraction.mDenominator;
+    denominator_type denominator = fraction.mDenominator;
 
-    denominator_type g0 = gcd(mDenominator, denumerator);
+    denominator_type g0 = gcd(mDenominator, denominator);
     denominator_type g1 = gcd(std::abs(mNumerator), std::abs(numerator));
 
     mNumerator /= g1;
-    mNumerator *= denumerator/g0;
+    mNumerator *= denominator/g0;
     mDenominator /= g0;
     mDenominator *= numerator/g1;
     return *this;



From frohlich at mail.berlios.de  Mon Oct 13 06:21:13 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 13 Oct 2008 06:21:13 +0200
Subject: [OpenFDM-svn] r605 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810130421.m9D4LDO4003445@sheep.berlios.de>

Author: frohlich
Date: 2008-10-13 06:21:12 +0200 (Mon, 13 Oct 2008)
New Revision: 605

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h
Log:
Add the mobile root joint to the list of compiled objects.
M    MobileRootJoint.h
M    MobileRootJoint.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-11 14:18:21 UTC (rev 604)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-13 04:21:12 UTC (rev 605)
@@ -240,6 +240,10 @@
   Output.cpp \
   SimulationTime.cpp
 
+OpenFDMMechanicSOURCES = \
+  MobileRootJoint.cpp
+
+
 #   AeroForce.cpp \
 #   AirSpring.cpp \
 #   Atmosphere.cpp \
@@ -263,7 +267,6 @@
 #   Mass.cpp \
 #   MaxModel.cpp \
 #   MinModel.cpp \
-#   MobileRootJoint.cpp \
 #   Output.cpp \
 #   Product.cpp \
 #   PrismaticJoint.cpp \
@@ -285,4 +288,4 @@
 #   WheelContact.cpp
 
 nobase_OpenFDMinclude_HEADERS = $(OpenFDMCoreHEADERS) $(OpenFDMModelsHEADERS)
-libOpenFDM_la_SOURCES = $(OpenFDMCoreSOURCES) $(OpenFDMModelsSOURCES)
+libOpenFDM_la_SOURCES = $(OpenFDMCoreSOURCES) $(OpenFDMModelsSOURCES) $(OpenFDMMecihanicSOURCES)

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-11 14:18:21 UTC (rev 604)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-13 04:21:12 UTC (rev 605)
@@ -12,220 +12,42 @@
 #include "Quaternion.h"
 #include "Inertia.h"
 #include "Gravity.h"
-#include "Frame.h"
-#include "RigidBody.h"
-#include "ModelVisitor.h"
-#include "RootFrame.h"
-#include "MobileRootJointFrame.h"
 
 namespace OpenFDM {
 
-MobileRootJoint::MobileRootJoint(const std::string& name)
-  : Joint(name),
-    mFrame(new MobileRootJointFrame(name))
+MobileRootJoint::MobileRootJoint(const std::string& name) :
+  RootJoint(name)
 {
-  setNumContinousStates(13);
-  addSampleTime(SampleTime::Continous);
 }
 
-MobileRootJoint::~MobileRootJoint(void)
+MobileRootJoint::~MobileRootJoint()
 {
 }
 
 void
-MobileRootJoint::accept(ModelVisitor& visitor)
+MobileRootJoint::velocity(const Task&, const ContinousStateValueVector&,
+                          PortValueList&) const
 {
-  visitor.handleNodePathAndApply(*this);
 }
 
-bool
-MobileRootJoint::init(void)
-{
-  mGravity = mEnvironment->getGravity();
-  if (!mGravity) {
-    Log(Model,Error) << "Can not get gravity model!" << endl;
-    return false;
-  }
-  const Frame* rootFrame = mEnvironment->getRootFrame();
-  if (!rootFrame) {
-    Log(Model,Error) << "Can not get rootFrame model!" << endl;
-    return false;
-  }
-  recheckTopology();
-
-  return Joint::init();
-}
-
 void
-MobileRootJoint::recheckTopology(void)
+MobileRootJoint::articulation(const Task&, const ContinousStateValueVector&,
+                              PortValueList&) const
 {
-  // Hmm, works for the first cut, but rethink what happens with strange
-  // attach reattach sequences ...
-  RigidBody* rigidBody = getOutboardBody();
-  if (!rigidBody)
-    return;
-  // check if already done
-  if (mFrame != rigidBody->getFrame())
-    rigidBody->setFrame(mFrame);
-
-  // Check if we are attached to some rigid body ...
-  rigidBody = getInboardBody();
-  if (rigidBody) {
-    Frame* frame = rigidBody->getFrame();
-    if (frame && !frame->isDirectParentFrameOf(mFrame))
-      frame->addChildFrame(mFrame);
-  } else {
-    if (mEnvironment) {
-      Frame* rootFrame = mEnvironment->getRootFrame();
-      if (rootFrame && !rootFrame->isDirectParentFrameOf(mFrame))
-        rootFrame->addChildFrame(mFrame);
-    }
-  }
 }
 
-const Vector6&
-MobileRootJoint::getRelVel(void) const
-{
-  return mFrame->getRelVel();
-}
-
 void
-MobileRootJoint::setRelVel(const Vector6& vel)
+MobileRootJoint::acceleration(const Task&, const ContinousStateValueVector&,
+                              PortValueList&) const
 {
-  mFrame->setRelVel(vel);
 }
 
 void
-MobileRootJoint::setLinearRelVel(const Vector3& vel)
+MobileRootJoint::derivative(const DiscreteStateValueVector&,
+                            const ContinousStateValueVector&,
+                            const PortValueList&,
+                            ContinousStateValueVector&) const
 {
-  mFrame->setLinearRelVel(vel);
 }
 
-void
-MobileRootJoint::setAngularRelVel(const Vector3& vel)
-{
-  mFrame->setAngularRelVel(vel);
-}
-
-const Vector6&
-MobileRootJoint::getRelVelDot(void) const
-{
-  return mFrame->getRelVelDot();
-}
-
-const Vector3&
-MobileRootJoint::getRefPosition(void) const
-{
-  return mFrame->getRefPosition();
-}
-
-void
-MobileRootJoint::setRefPosition(const Vector3& p)
-{
-  mFrame->setRefPosition(p);
-}
-
-const Quaternion&
-MobileRootJoint::getRefOrientation(void) const
-{
-  return mFrame->getRefOrientation();
-}
-
-void
-MobileRootJoint::setRefOrientation(const Quaternion& o)
-{
-  mFrame->setRefOrientation(o);
-}
-
-Geodetic
-MobileRootJoint::getGeodPosition(void) const
-{
-  if (!mEnvironment)
-    return Geodetic();
-  return mEnvironment->getPlanet()->toGeod(getRefPosition());
-}
-
-void
-MobileRootJoint::setGeodPosition(const Geodetic& geod)
-{
-  if (!mEnvironment)
-    return;
-  setRefPosition(mEnvironment->getPlanet()->toCart(geod));
-}
-
-Quaternion
-MobileRootJoint::getGeodOrientation(void) const
-{
-  if (!mEnvironment)
-    return Quaternion::unit();
-  Quaternion hlOr = mEnvironment->getPlanet()->getGeodHLOrientation(getRefPosition());
-  return inverse(hlOr)*getRefOrientation();
-}
-
-Vector4
-MobileRootJoint::getQDot(void) const
-{
-  // Compute the derivative term originating from the angular velocity.
-  // Correction term to keep the quaternion normalized.
-  // That is if |q| < 1 add a little radial component outward,
-  // if |q| > 1 add a little radial component inward
-  Quaternion q = mFrame->getOrientation();
-  Vector3 angVel = mFrame->getRelVel().getAngular();
-  Vector4 qderiv = derivative(q, angVel) + 1e1*(normalize(q) - q);
-  return qderiv;
-}
-
-Vector3 MobileRootJoint::getPosDot(void) const
-{
-  return mFrame->rotToParent(mFrame->getRelVel().getLinear());
-}
-
-void
-MobileRootJoint::jointArticulation(SpatialInertia& artI, Vector6& artF,
-                             const SpatialInertia& outI,
-                             const Vector6& outF)
-{
-  artI.clear();
-  artF.clear();
-
-  Log(ArtBody, Debug) << "MobileRootJoint::computeRelVelDot():\n" << outI << endl;
-  mFrame->jointArticulation(outF, outI, mGravity);
-}
-
-void
-MobileRootJoint::setState(const StateStream& state)
-{
-  Quaternion q;
-  state.readSubState(q);
-  mFrame->setOrientation(q);
-  Vector3 p;
-  state.readSubState(p);
-  mFrame->setPosition(p);
-  Vector6 v;
-  state.readSubState(v);
-  mFrame->setRelVel(v);
-}
-
-void
-MobileRootJoint::getState(StateStream& state) const
-{
-  state.writeSubState(mFrame->getOrientation());
-  state.writeSubState(mFrame->getPosition());
-  state.writeSubState(mFrame->getRelVel());
-}
-
-void
-MobileRootJoint::getStateDeriv(StateStream& stateDeriv)
-{
-  stateDeriv.writeSubState(getQDot());
-  stateDeriv.writeSubState(getPosDot());
-  stateDeriv.writeSubState(getRelVelDot());
-}
-
-void
-MobileRootJoint::setEnvironment(Environment* environment)
-{
-  mEnvironment = environment;
-}
-
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h	2008-10-11 14:18:21 UTC (rev 604)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h	2008-10-13 04:21:12 UTC (rev 605)
@@ -11,94 +11,26 @@
 #include "Matrix.h"
 #include "Quaternion.h"
 #include "Inertia.h"
-#include "Frame.h"
-#include "RigidBody.h"
-#include "Planet.h"
-#include "Joint.h"
-#include "Environment.h"
+#include "RootJoint.h"
 
 namespace OpenFDM {
 
-class ModelVisitor;
-class MobileRootJointFrame;
-
-class MobileRootJoint
-  : public Joint {
+class MobileRootJoint : public RootJoint {
+  OPENFDM_OBJECT(MobileRootJoint, RootJoint);
 public:
   MobileRootJoint(const std::string& name);
-  virtual ~MobileRootJoint(void);
+  virtual ~MobileRootJoint();
 
-  /// Double dispatch helper for the multibody system visitor
-  virtual void accept(ModelVisitor& visitor);
-  /// Double dispatch helper for the multibody system visitor
-//   virtual void accept(ConstModelVisitor& visitor) const;
-
-  virtual bool init(void);
-
-  virtual void recheckTopology(void);
-
-  /// Gets the relative velocity.
-  const Vector6& getRelVel(void) const;
-  /// Set the relative velocity.
-  void setRelVel(const Vector6& vel);
-  /// Set the relative velocity.
-  void setLinearRelVel(const Vector3& vel);
-  /// Set the relative velocity.
-  void setAngularRelVel(const Vector3& vel);
-
-  /// Gets the relative velocity derivative.
-  const Vector6& getRelVelDot(void) const;
-
-  /// Get the reference position.
-  const Vector3& getRefPosition(void) const;
-  /// Set the reference position.
-  void setRefPosition(const Vector3& p);
-
-  /// Get the reference orientation.
-  const Quaternion& getRefOrientation(void) const;
-  /// Set the reference orientation.
-  void setRefOrientation(const Quaternion& o);
-
-  /// Get the geodetic position.
-  Geodetic getGeodPosition(void) const;
-  /// Set the geodetic position.
-  void setGeodPosition(const Geodetic& geod);
-  /// Get orientation wrt the geodetic hl frame.
-  Quaternion getGeodOrientation(void) const;
-
-  Vector4 getQDot(void) const;
-  Vector3 getPosDot(void) const;
-
-  /** Plugin function for the articulated body algorithm.
-   */
-  virtual void jointArticulation(SpatialInertia& artI, Vector6& artF,
-                                 const SpatialInertia& outI,
-                                 const Vector6& outF);
-
-
-  /** Plugin function for the state propagation.
-   */
-  virtual void setState(const StateStream& state);
-  /** Plugin function for the state propagation.
-   */
-  virtual void getState(StateStream& state) const;
-  /** Plugin function for the state propagation.
-   */
-  virtual void getStateDeriv(StateStream& state);
-
-protected:
-  virtual void setEnvironment(Environment* environment);
-
-private:
-  /// The commonly used gravity model from the environment class
-  /// It is initialized at the init() call
-  SharedPtr<const Gravity> mGravity;
-
-  /// The frame of the mobile root
-  SharedPtr<MobileRootJointFrame> mFrame;
-
-  /// The environment pointer
-  SharedPtr<Environment> mEnvironment;
+  virtual void velocity(const Task&, const ContinousStateValueVector& states,
+                        PortValueList& portValues) const;
+  virtual void articulation(const Task&, const ContinousStateValueVector&,
+                            PortValueList& portValues) const;
+  virtual void acceleration(const Task&, const ContinousStateValueVector&,
+                            PortValueList& portValues) const;
+  virtual void derivative(const DiscreteStateValueVector&,
+                          const ContinousStateValueVector&,
+                          const PortValueList& portValues,
+                          ContinousStateValueVector&) const;
 };
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Mon Oct 13 06:38:35 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 13 Oct 2008 06:38:35 +0200
Subject: [OpenFDM-svn] r606 - in
	branches/OpenFDM-StateSeparation/src/OpenFDM: . LinAlg
Message-ID: <200810130438.m9D4cZwx015213@sheep.berlios.de>

Author: frohlich
Date: 2008-10-13 06:38:33 +0200 (Mon, 13 Oct 2008)
New Revision: 606

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Container.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Vector.h
Log:
Add state to the root joint.

M    Vector.h
M    LinAlg/Container.h
M    MatrixStateInfo.h
M    MobileRootJoint.h
M    MobileRootJoint.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Container.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Container.h	2008-10-13 04:21:12 UTC (rev 605)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/LinAlg/Container.h	2008-10-13 04:38:33 UTC (rev 606)
@@ -850,6 +850,37 @@
 };
 
 template<typename T>
+class Vector1
+  : public Vector<T,1> {
+public:
+  OpenFDM_FORCE_INLINE
+  Vector1(void)
+  { }
+  OpenFDM_FORCE_INLINE
+  Vector1(T v1)
+  { (*this)(0) = v1; }
+  OpenFDM_FORCE_INLINE
+  Vector1(const Vector1& v)
+    : Vector<T,1>(v)
+  { }
+  template<typename Impl, size_type m, size_type n>
+  OpenFDM_FORCE_INLINE
+  Vector1(const MatrixRValue<Impl,m,n>& A)
+    : Vector<T,1>(A)
+  { }
+  OpenFDM_FORCE_INLINE
+  ~Vector1(void)
+  { }
+
+  OpenFDM_FORCE_INLINE
+  const real_type& x(void) const
+  { return Vector<T,1>::operator()(0); }
+  OpenFDM_FORCE_INLINE
+  real_type& x(void)
+  { return Vector<T,1>::operator()(0); }
+};
+
+template<typename T>
 class Vector2
   : public Vector<T,2> {
 public:

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateInfo.h	2008-10-13 04:21:12 UTC (rev 605)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixStateInfo.h	2008-10-13 04:38:33 UTC (rev 606)
@@ -13,6 +13,21 @@
 class MatrixStateInfo : public TemplateContinousStateInfo<Matrix> {
 };
 
+class Vector1StateInfo : public TemplateContinousStateInfo<Vector1> {
+};
+
+class Vector2StateInfo : public TemplateContinousStateInfo<Vector2> {
+};
+
+class Vector3StateInfo : public TemplateContinousStateInfo<Vector3> {
+};
+
+class Vector4StateInfo : public TemplateContinousStateInfo<Vector4> {
+};
+
+class Vector6StateInfo : public TemplateContinousStateInfo<Vector6> {
+};
+
 } // namespace OpenFDM
 
 #endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-13 04:21:12 UTC (rev 605)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-13 04:38:33 UTC (rev 606)
@@ -16,8 +16,15 @@
 namespace OpenFDM {
 
 MobileRootJoint::MobileRootJoint(const std::string& name) :
-  RootJoint(name)
+  RootJoint(name),
+  mMechanicLink(newMechanicLink("link")),
+  mPositionStateInfo(new Vector3StateInfo),
+  mOrientationStateInfo(new Vector4StateInfo),
+  mVelocityStateInfo(new Vector6StateInfo)
 {
+  addContinousStateInfo(mPositionStateInfo);
+  addContinousStateInfo(mOrientationStateInfo);
+  addContinousStateInfo(mVelocityStateInfo);
 }
 
 MobileRootJoint::~MobileRootJoint()

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h	2008-10-13 04:21:12 UTC (rev 605)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h	2008-10-13 04:38:33 UTC (rev 606)
@@ -31,6 +31,12 @@
                           const ContinousStateValueVector&,
                           const PortValueList& portValues,
                           ContinousStateValueVector&) const;
+private:
+  MechanicLink mMechanicLink;
+
+  SharedPtr<MatrixStateInfo> mPositionStateInfo;
+  SharedPtr<MatrixStateInfo> mOrientationStateInfo;
+  SharedPtr<MatrixStateInfo> mVelocityStateInfo;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Vector.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Vector.h	2008-10-13 04:21:12 UTC (rev 605)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Vector.h	2008-10-13 04:38:33 UTC (rev 606)
@@ -23,6 +23,7 @@
 using LinAlg::Range;
 using LinAlg::trans;
 
+typedef LinAlg::Vector1<real_type> Vector1;
 typedef LinAlg::Vector2<real_type> Vector2;
 typedef LinAlg::Vector3<real_type> Vector3;
 typedef LinAlg::Vector4<real_type> Vector4;



From frohlich at mail.berlios.de  Mon Oct 13 06:48:36 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 13 Oct 2008 06:48:36 +0200
Subject: [OpenFDM-svn] r607 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810130448.m9D4maT9026672@sheep.berlios.de>

Author: frohlich
Date: 2008-10-13 06:48:36 +0200 (Mon, 13 Oct 2008)
New Revision: 607

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h
Log:
Add state and mek it really comile ...

M    MobileRootJoint.cpp
M    Makefile.am
M    MobileRootJoint.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-13 04:38:33 UTC (rev 606)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-13 04:48:36 UTC (rev 607)
@@ -288,4 +288,4 @@
 #   WheelContact.cpp
 
 nobase_OpenFDMinclude_HEADERS = $(OpenFDMCoreHEADERS) $(OpenFDMModelsHEADERS)
-libOpenFDM_la_SOURCES = $(OpenFDMCoreSOURCES) $(OpenFDMModelsSOURCES) $(OpenFDMMecihanicSOURCES)
+libOpenFDM_la_SOURCES = $(OpenFDMCoreSOURCES) $(OpenFDMModelsSOURCES) $(OpenFDMMechanicSOURCES)

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-13 04:38:33 UTC (rev 606)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-13 04:48:36 UTC (rev 607)
@@ -5,6 +5,7 @@
 #include "MobileRootJoint.h"
 
 #include "Assert.h"
+#include "LeafContext.h"
 #include "LogStream.h"
 #include "Object.h"
 #include "Vector.h"
@@ -32,6 +33,16 @@
 }
 
 void
+MobileRootJoint::init(const Task&, DiscreteStateValueVector&,
+                      ContinousStateValueVector& continousState,
+                      const PortValueList& portValues) const
+{
+  continousState[*mPositionStateInfo] = Vector3::zeros();
+  continousState[*mOrientationStateInfo] = Quaternion::unit();
+  continousState[*mVelocityStateInfo] = Vector6::zeros();
+}
+
+void
 MobileRootJoint::velocity(const Task&, const ContinousStateValueVector&,
                           PortValueList&) const
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h	2008-10-13 04:38:33 UTC (rev 606)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h	2008-10-13 04:48:36 UTC (rev 607)
@@ -9,6 +9,7 @@
 #include "Object.h"
 #include "Vector.h"
 #include "Matrix.h"
+#include "MatrixStateInfo.h"
 #include "Quaternion.h"
 #include "Inertia.h"
 #include "RootJoint.h"
@@ -21,6 +22,9 @@
   MobileRootJoint(const std::string& name);
   virtual ~MobileRootJoint();
 
+  virtual void init(const Task&, DiscreteStateValueVector&,
+                    ContinousStateValueVector&,
+                    const PortValueList&) const;
   virtual void velocity(const Task&, const ContinousStateValueVector& states,
                         PortValueList& portValues) const;
   virtual void articulation(const Task&, const ContinousStateValueVector&,
@@ -34,9 +38,9 @@
 private:
   MechanicLink mMechanicLink;
 
-  SharedPtr<MatrixStateInfo> mPositionStateInfo;
-  SharedPtr<MatrixStateInfo> mOrientationStateInfo;
-  SharedPtr<MatrixStateInfo> mVelocityStateInfo;
+  SharedPtr<Vector3StateInfo> mPositionStateInfo;
+  SharedPtr<Vector4StateInfo> mOrientationStateInfo;
+  SharedPtr<Vector6StateInfo> mVelocityStateInfo;
 };
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Mon Oct 13 22:22:43 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 13 Oct 2008 22:22:43 +0200
Subject: [OpenFDM-svn] r608 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810132022.m9DKMhZW004348@sheep.berlios.de>

Author: frohlich
Date: 2008-10-13 22:22:42 +0200 (Mon, 13 Oct 2008)
New Revision: 608

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h
Log:
Add a simple draft implementation for a rigid body.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2008-10-13 04:48:36 UTC (rev 607)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2008-10-13 20:22:42 UTC (rev 608)
@@ -6,6 +6,7 @@
 
 #include "ConstNodeVisitor.h"
 #include "NodeVisitor.h"
+#include "PortValueList.h"
 
 namespace OpenFDM {
 
@@ -15,6 +16,7 @@
 RigidBody::RigidBody(const std::string& name) :
   MechanicNode(name)
 {
+  mMechanicLinks.push_back(newMechanicLink("link"));
 }
 
 RigidBody::~RigidBody()
@@ -33,4 +35,49 @@
   visitor.handleNodePathAndApply(this);
 }
 
+void
+RigidBody::velocity(const Task&, const ContinousStateValueVector&,
+                    PortValueList& portValues) const
+{
+  unsigned numLinkValues = mMechanicLinks.size();
+
+  Vector3 position = portValues[mMechanicLinks.front()].mPosition;
+  Quaternion orientation = portValues[mMechanicLinks.front()].mOrientation;
+  Vector6 velocity = portValues[mMechanicLinks.front()].mSpatialVelocity;
+
+  for (unsigned i = 1; i < numLinkValues; ++i) {
+    portValues[mMechanicLinks[i]].mPosition = position;
+    portValues[mMechanicLinks[i]].mOrientation = orientation;
+    portValues[mMechanicLinks[i]].mSpatialVelocity = velocity;
+  }
+}
+
+void
+RigidBody::articulation(const Task&, const ContinousStateValueVector&,
+                        PortValueList& portValues) const
+{
+  unsigned numLinkValues = mMechanicLinks.size();
+
+  SpatialInertia inertia = SpatialInertia::zeros();
+  Vector6 force = Vector6::zeros();
+
+  for (unsigned i = 1; i < numLinkValues; ++i) {
+    inertia += portValues[mMechanicLinks[i]].mArticulatedInertia;
+    force += portValues[mMechanicLinks[i]].mArticulatedForce;
+  }
+
+  portValues[mMechanicLinks.front()].mArticulatedInertia = inertia;
+  portValues[mMechanicLinks.front()].mArticulatedForce = force;
+}
+
+void
+RigidBody::acceleration(const Task&, const ContinousStateValueVector&,
+                        PortValueList& portValues) const
+{
+  unsigned numLinkValues = mMechanicLinks.size();
+  Vector6 accel = portValues[mMechanicLinks.front()].mSpatialAcceleration;
+  for (unsigned i = 1; i < numLinkValues; ++i)
+    portValues[mMechanicLinks[i]].mSpatialAcceleration = accel;
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h	2008-10-13 04:48:36 UTC (rev 607)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h	2008-10-13 20:22:42 UTC (rev 608)
@@ -18,6 +18,24 @@
 
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
+
+  /// Simple node distributing the positions, velocities and accelerations
+  /// from the parent link to the child links. Forces and inertias are summed
+  /// over the children and written into the parent link.
+  ///
+  /// Idea: may be use the same link value for all links and use a
+  /// contributeForce/contributeInertia method to add inertia to a
+  /// parent link???
+
+  virtual void velocity(const Task&, const ContinousStateValueVector& states,
+                        PortValueList& portValues) const;
+  virtual void articulation(const Task&, const ContinousStateValueVector&,
+                            PortValueList& portValues) const;
+  virtual void acceleration(const Task&, const ContinousStateValueVector&,
+                            PortValueList& portValues) const;
+
+private:
+  std::vector<MechanicLink> mMechanicLinks;
 };
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Tue Oct 14 07:48:23 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 14 Oct 2008 07:48:23 +0200
Subject: [OpenFDM-svn] r609 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810140548.m9E5mN8B026395@sheep.berlios.de>

Author: frohlich
Date: 2008-10-14 07:48:22 +0200 (Tue, 14 Oct 2008)
New Revision: 609

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h
Log:
Crude, but add a whole context reference for the mechanics for now.
Implement a mobile root joint.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-13 20:22:42 UTC (rev 608)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-14 05:48:22 UTC (rev 609)
@@ -6,9 +6,10 @@
 #define OpenFDM_MechanicContext_H
 
 #include <list>
-#include "SharedPtr.h"
 #include "LeafContext.h"
 #include "MechanicNode.h"
+#include "SharedPtr.h"
+#include "Transform.h"
 
 namespace OpenFDM {
 
@@ -30,21 +31,16 @@
   { mMechanicNode->init(task, mDiscreteState, mContinousState, mPortValueList); }
 
   void velocities(const Task& task)
-  { mMechanicNode->velocity(task, mContinousState, mPortValueList); }
+  { mMechanicNode->velocity(task, mContinousState, mPortValueList, *this); }
   void articulation(const Task& task)
-  { mMechanicNode->articulation(task, mContinousState, mPortValueList); }
+  { mMechanicNode->articulation(task, mContinousState, mPortValueList, *this); }
   void accelerations(const Task& task)
-  { mMechanicNode->acceleration(task, mContinousState, mPortValueList); }
+  { mMechanicNode->acceleration(task, mContinousState, mPortValueList, *this); }
 
   void derivative(const Task&)
   { mMechanicNode->derivative(mDiscreteState, mContinousState, mPortValueList,
-                              mContinousStateDerivative); }
+                              *this, mContinousStateDerivative); }
  
-//   void outputVelocities()
-//   { }
-//   void outputAcceperation()
-//   { }
-
   void update(const DiscreteTask& discreteTask)
   {
     mMechanicNode->update(discreteTask, mDiscreteState,
@@ -53,6 +49,13 @@
 
   bool isConnectedTo(const MechanicContext& mechanicContext) const;
 
+  // Stores some values persistent accross velocity/articulation/acceleration
+  unsigned mParentLinkIndex;
+  Vector6 mParentSpVel;
+  Vector6 mParentSpAccel;
+  Vector6 mHDot;
+  Vector6 mRelVelDot;
+
 private:
   SharedPtr<const MechanicNode> mMechanicNode;
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-10-13 20:22:42 UTC (rev 608)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-10-14 05:48:22 UTC (rev 609)
@@ -28,18 +28,11 @@
   // and outputs a rigid body can have.
   // Example: force port, force and inertia, frame port, velocity port
   Vector3 mPosition;
-  Rotation mOrientation;
+  Quaternion mOrientation;
   Vector6 mSpatialVelocity;
   Vector6 mSpatialAcceleration;
   Vector6 mArticulatedForce;
   SpatialInertia mArticulatedInertia;
-  // Frame????
-  // FIXME: how to show who is responsible for setting the values???
-  // Solution:
-  // Ok, if set the joint is responsible for filling the velocities
-  // and accelerations, the body is responsible for the inertia -
-  // if unset it is the other way round ...
-  bool mDownStream;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h	2008-10-13 20:22:42 UTC (rev 608)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h	2008-10-14 05:48:22 UTC (rev 609)
@@ -14,6 +14,7 @@
 class DiscreteTask;
 class PortValueList;
 class Task;
+class MechanicContext;
 
 class MechanicNode : public LeafNode {
   OPENFDM_OBJECT(MechanicNode, LeafNode);
@@ -25,18 +26,18 @@
   virtual void accept(ConstNodeVisitor& visitor) const;
 
   virtual void velocity(const Task&, const ContinousStateValueVector&,
-                        PortValueList&) const
+                        PortValueList&, MechanicContext&) const
   { }
   virtual void articulation(const Task&, const ContinousStateValueVector&,
-                            PortValueList&) const
+                            PortValueList&, MechanicContext&) const
   { }
   // hmm, may be this should be output???
   virtual void acceleration(const Task&, const ContinousStateValueVector&,
-                            PortValueList&) const
+                            PortValueList&, MechanicContext&) const
   { }
   virtual void derivative(const DiscreteStateValueVector&,
                           const ContinousStateValueVector&,
-                          const PortValueList&,
+                          const PortValueList&, MechanicContext&,
                           ContinousStateValueVector&) const
   { }
   virtual void update(const DiscreteTask&, DiscreteStateValueVector&,

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-13 20:22:42 UTC (rev 608)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-14 05:48:22 UTC (rev 609)
@@ -13,6 +13,7 @@
 #include "Quaternion.h"
 #include "Inertia.h"
 #include "Gravity.h"
+#include "MechanicContext.h"
 
 namespace OpenFDM {
 
@@ -43,29 +44,88 @@
 }
 
 void
-MobileRootJoint::velocity(const Task&, const ContinousStateValueVector&,
-                          PortValueList&) const
+MobileRootJoint::velocity(const Task&,
+                          const ContinousStateValueVector& continousState,
+                          PortValueList& portValues, MechanicContext& context) const
 {
+  Vector3 position = continousState[*mPositionStateInfo];
+  Quaternion orientation = continousState[*mOrientationStateInfo];
+  Vector6 velocity = continousState[*mVelocityStateInfo];
+
+  /// FIXME, plug in the earths rotation here ...
+  Vector6 mBaseFrameVelocity = Vector6::zeros();
+
+  Vector6 parentSpatialVelocity = motionTo(position, orientation,
+                                           mBaseFrameVelocity);
+
+  context.mParentSpVel = parentSpatialVelocity;
+  context.mParentSpAccel = Vector6::zeros();
+  Vector6 pivel = parentSpatialVelocity;
+  context.mHDot = Vector6(cross(pivel.getAngular(), velocity.getAngular()),
+                          cross(pivel.getAngular(), velocity.getLinear()) + 
+                          cross(pivel.getLinear(), velocity.getAngular()));
+
+  portValues[mMechanicLink].mPosition = position;
+  portValues[mMechanicLink].mOrientation = orientation;
+  portValues[mMechanicLink].mSpatialVelocity = velocity + parentSpatialVelocity;
 }
 
 void
 MobileRootJoint::articulation(const Task&, const ContinousStateValueVector&,
-                              PortValueList&) const
+                              PortValueList&, MechanicContext&) const
 {
+  /// In this case a noop.
 }
 
 void
 MobileRootJoint::acceleration(const Task&, const ContinousStateValueVector&,
-                              PortValueList&) const
+                              PortValueList& portValues, MechanicContext& context) const
 {
+  // Assumption: body is small compared to the distance to the planets
+  // center of mass. That means gravity could be considered equal for the
+  // whole vehicle.
+  // See Featherstone, Orin: Equations and Algorithms
+//   Vector3 ga = gravity->gravityAccel(getRefPosition());
+//     Vector6 grav = Vector6(Vector3::zeros(), rotFromRef(ga));
+
+  // FIXME
+  Vector6 grav = Vector6(Vector3::zeros(), Vector3(0, 0, 9.81));
+
+  SpatialInertia inertia = portValues[mMechanicLink].mArticulatedInertia;
+  Vector6 force = portValues[mMechanicLink].mArticulatedForce;
+
+  // FIXME
+//   mRelVelDot = grav - solve(inertia, force) - getParentSpAccel() - getHdot();
+  Vector6 acceleration = grav - solve(inertia, force) - context.mParentSpAccel - context.mHDot;
+  context.mRelVelDot = acceleration;
+  
+
+  portValues[mMechanicLink].mSpatialAcceleration = acceleration;
 }
 
 void
 MobileRootJoint::derivative(const DiscreteStateValueVector&,
-                            const ContinousStateValueVector&,
-                            const PortValueList&,
-                            ContinousStateValueVector&) const
+                            const ContinousStateValueVector& continousState,
+                            const PortValueList& portValues,
+                            MechanicContext& context,
+                            ContinousStateValueVector& derivatives) const
 {
+  Quaternion orientation = continousState[*mOrientationStateInfo];
+  Vector6 velocity = continousState[*mVelocityStateInfo];
+
+  Vector3 pDot = orientation.backTransform(velocity.getLinear());
+
+  // Compute the derivative term originating from the angular velocity.
+  // Correction term to keep the quaternion normalized.
+  // That is if |q| < 1 add a little radial component outward,
+  // if |q| > 1 add a little radial component inward
+  Quaternion q = orientation;
+  Vector3 angVel = velocity.getAngular();
+  Vector4 qderiv = LinAlg::derivative(q, angVel) + 1e1*(normalize(q) - q);
+
+  derivatives[*mPositionStateInfo] = pDot; 
+  derivatives[*mOrientationStateInfo] = qderiv;
+  derivatives[*mVelocityStateInfo] = context.mRelVelDot;
 }
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h	2008-10-13 20:22:42 UTC (rev 608)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h	2008-10-14 05:48:22 UTC (rev 609)
@@ -26,14 +26,14 @@
                     ContinousStateValueVector&,
                     const PortValueList&) const;
   virtual void velocity(const Task&, const ContinousStateValueVector& states,
-                        PortValueList& portValues) const;
+                        PortValueList& portValues, MechanicContext&) const;
   virtual void articulation(const Task&, const ContinousStateValueVector&,
-                            PortValueList& portValues) const;
+                            PortValueList& portValues, MechanicContext&) const;
   virtual void acceleration(const Task&, const ContinousStateValueVector&,
-                            PortValueList& portValues) const;
+                            PortValueList& portValues, MechanicContext&) const;
   virtual void derivative(const DiscreteStateValueVector&,
                           const ContinousStateValueVector&,
-                          const PortValueList& portValues,
+                          const PortValueList& portValues, MechanicContext&,
                           ContinousStateValueVector&) const;
 private:
   MechanicLink mMechanicLink;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-10-13 20:22:42 UTC (rev 608)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-10-14 05:48:22 UTC (rev 609)
@@ -58,6 +58,10 @@
   /// Return all node paths this Node is currently attached to.
   NodePathList getNodePathList() const;
 
+  /// Hmm, here or in the leaf stuff:
+  /// AbstractNodeInstance* newNodeInstance() ??
+  /// AbstractNodeContext* newNodeContext() ??
+
 protected:
 
   friend class Group;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2008-10-13 20:22:42 UTC (rev 608)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2008-10-14 05:48:22 UTC (rev 609)
@@ -37,7 +37,7 @@
 
 void
 RigidBody::velocity(const Task&, const ContinousStateValueVector&,
-                    PortValueList& portValues) const
+                    PortValueList& portValues, MechanicContext&) const
 {
   unsigned numLinkValues = mMechanicLinks.size();
 
@@ -54,11 +54,11 @@
 
 void
 RigidBody::articulation(const Task&, const ContinousStateValueVector&,
-                        PortValueList& portValues) const
+                        PortValueList& portValues, MechanicContext&) const
 {
   unsigned numLinkValues = mMechanicLinks.size();
 
-  SpatialInertia inertia = SpatialInertia::zeros();
+  SpatialInertia inertia(InertiaMatrix(1, 0, 0, 1, 0, 1), 1);
   Vector6 force = Vector6::zeros();
 
   for (unsigned i = 1; i < numLinkValues; ++i) {
@@ -72,7 +72,7 @@
 
 void
 RigidBody::acceleration(const Task&, const ContinousStateValueVector&,
-                        PortValueList& portValues) const
+                        PortValueList& portValues, MechanicContext&) const
 {
   unsigned numLinkValues = mMechanicLinks.size();
   Vector6 accel = portValues[mMechanicLinks.front()].mSpatialAcceleration;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h	2008-10-13 20:22:42 UTC (rev 608)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h	2008-10-14 05:48:22 UTC (rev 609)
@@ -28,11 +28,11 @@
   /// parent link???
 
   virtual void velocity(const Task&, const ContinousStateValueVector& states,
-                        PortValueList& portValues) const;
+                        PortValueList& portValues, MechanicContext&) const;
   virtual void articulation(const Task&, const ContinousStateValueVector&,
-                            PortValueList& portValues) const;
+                            PortValueList& portValues, MechanicContext&) const;
   virtual void acceleration(const Task&, const ContinousStateValueVector&,
-                            PortValueList& portValues) const;
+                            PortValueList& portValues, MechanicContext&) const;
 
 private:
   std::vector<MechanicLink> mMechanicLinks;



From frohlich at mail.berlios.de  Wed Oct 15 06:55:25 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 15 Oct 2008 06:55:25 +0200
Subject: [OpenFDM-svn] r610 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810150455.m9F4tPXp031584@sheep.berlios.de>

Author: frohlich
Date: 2008-10-15 06:55:21 +0200 (Wed, 15 Oct 2008)
New Revision: 610

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/LibraryNode.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicInstance.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Model.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Model.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ModelInstance.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.h
Log:
Move context creation into a virtual into the nodes.
Special cases might be handled this way ...

M    src/OpenFDM/Group.h
M    src/OpenFDM/Model.h
M    src/OpenFDM/LibraryNode.h
M    src/OpenFDM/MechanicNode.cpp
M    src/OpenFDM/MechanicInstance.cpp
M    src/OpenFDM/ModelInstance.cpp
M    src/OpenFDM/Node.h
M    src/OpenFDM/Model.cpp
M    src/OpenFDM/NodeInstance.cpp
M    src/OpenFDM/NodeInstance.h
M    src/OpenFDM/MechanicNode.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-14 05:48:22 UTC (rev 609)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Group.h	2008-10-15 04:55:21 UTC (rev 610)
@@ -10,6 +10,7 @@
 #include <sstream>
 #include "ConstNodeVisitor.h"
 #include "Node.h"
+#include "NodeContext.h"
 #include "NodeVisitor.h"
 #include "Object.h"
 #include "PortId.h"
@@ -30,6 +31,9 @@
     visitor.handleNodePathAndApply(this);
   }
 
+  virtual AbstractNodeContext* newNodeContext() const
+  { return new NodeContext(this); }
+
   unsigned getExternalPortIndex() const
   { return mExternalPortInfo->getIndex(); }
 protected:
@@ -125,6 +129,9 @@
   void traverse(NodeVisitor& visitor);
   void traverse(ConstNodeVisitor& visitor) const;
 
+  virtual AbstractNodeContext* newNodeContext() const
+  { return new NodeContext(this); }
+
   NodeId addChild(const SharedPtr<Node>& node);
   unsigned getNumChildren() const;
   SharedPtr<Node> getChild(unsigned i);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/LibraryNode.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/LibraryNode.h	2008-10-14 05:48:22 UTC (rev 609)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/LibraryNode.h	2008-10-15 04:55:21 UTC (rev 610)
@@ -21,6 +21,9 @@
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
 
+  virtual AbstractNodeContext* newNodeContext() const
+  { OpenFDMAssert(false); return 0; }
+
   // FIXME: Hmm, how do we map ports??
   // May be the Node just gets virtuals for ports???
   // May be changing ports means informing the parent about that???

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicInstance.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicInstance.cpp	2008-10-14 05:48:22 UTC (rev 609)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicInstance.cpp	2008-10-15 04:55:21 UTC (rev 610)
@@ -10,7 +10,7 @@
                                    const SampleTime& sampleTime,
                                    const MechanicNode* mechanicNode) :
   AbstractNodeInstance(nodePath, sampleTime),
-  mMechanicContext(new MechanicContext(mechanicNode))
+  mMechanicContext(mechanicNode->newMechanicContext())
 {
 }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.cpp	2008-10-14 05:48:22 UTC (rev 609)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.cpp	2008-10-15 04:55:21 UTC (rev 610)
@@ -5,6 +5,7 @@
 #include "MechanicNode.h"
 
 #include "ConstNodeVisitor.h"
+#include "MechanicContext.h"
 #include "NodeVisitor.h"
 
 namespace OpenFDM {
@@ -33,4 +34,16 @@
   visitor.handleNodePathAndApply(this);
 }
 
+AbstractNodeContext*
+MechanicNode::newNodeContext() const
+{
+  return newMechanicContext();
+}
+
+MechanicContext*
+MechanicNode::newMechanicContext() const
+{
+  return new MechanicContext(this);
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h	2008-10-14 05:48:22 UTC (rev 609)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h	2008-10-15 04:55:21 UTC (rev 610)
@@ -25,6 +25,9 @@
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
 
+  virtual AbstractNodeContext* newNodeContext() const;
+  virtual MechanicContext* newMechanicContext() const;
+
   virtual void velocity(const Task&, const ContinousStateValueVector&,
                         PortValueList&, MechanicContext&) const
   { }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Model.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Model.cpp	2008-10-14 05:48:22 UTC (rev 609)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Model.cpp	2008-10-15 04:55:21 UTC (rev 610)
@@ -6,6 +6,7 @@
 
 #include "ConstNodeVisitor.h"
 #include "LogStream.h"
+#include "ModelContext.h"
 #include "NodeVisitor.h"
 
 namespace OpenFDM {
@@ -34,4 +35,16 @@
   visitor.handleNodePathAndApply(this);
 }
 
+AbstractNodeContext*
+Model::newNodeContext() const
+{
+  return newModelContext();
+}
+
+ModelContext*
+Model::newModelContext() const
+{
+  return new ModelContext(this);
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Model.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Model.h	2008-10-14 05:48:22 UTC (rev 609)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Model.h	2008-10-15 04:55:21 UTC (rev 610)
@@ -24,6 +24,7 @@
 class PortValueList;
 class ContinousStateValueVector;
 class Task;
+class ModelContext;
 
 class Model : public LeafNode {
   OPENFDM_OBJECT(Model, LeafNode);
@@ -34,6 +35,9 @@
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
 
+  virtual AbstractNodeContext* newNodeContext() const;
+  virtual ModelContext* newModelContext() const;
+
   // FIXME: May be we want to collapse all state values in one
   // argument? May be it is sufficient to have a const and non const version??
   // FIXME???

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ModelInstance.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ModelInstance.cpp	2008-10-14 05:48:22 UTC (rev 609)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ModelInstance.cpp	2008-10-15 04:55:21 UTC (rev 610)
@@ -9,7 +9,7 @@
 ModelInstance::ModelInstance(const NodePath& nodePath,
                              const SampleTime& sampleTime, const Model* model) :
   AbstractNodeInstance(nodePath, sampleTime),
-  mModelContext(new ModelContext(model))
+  mModelContext(model->newModelContext())
 {
 }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-10-14 05:48:22 UTC (rev 609)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-10-15 04:55:21 UTC (rev 610)
@@ -15,6 +15,7 @@
 
 namespace OpenFDM {
 
+class AbstractNodeContext;
 class Group;
 class Node;
 class NodeVisitor;
@@ -59,8 +60,7 @@
   NodePathList getNodePathList() const;
 
   /// Hmm, here or in the leaf stuff:
-  /// AbstractNodeInstance* newNodeInstance() ??
-  /// AbstractNodeContext* newNodeContext() ??
+  virtual AbstractNodeContext* newNodeContext() const = 0;
 
 protected:
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.cpp	2008-10-14 05:48:22 UTC (rev 609)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.cpp	2008-10-15 04:55:21 UTC (rev 610)
@@ -9,7 +9,7 @@
 NodeInstance::NodeInstance(const NodePath& nodePath,
                            const SampleTime& sampleTime, const Node* node) :
   AbstractNodeInstance(nodePath, sampleTime),
-  mNodeContext(new NodeContext(node))
+  mNodeContext(node->newNodeContext())
 {
 }
 
@@ -17,13 +17,13 @@
 {
 }
 
-NodeContext&
+AbstractNodeContext&
 NodeInstance::getNodeContext()
 {
   return *mNodeContext;
 }
 
-const NodeContext&
+const AbstractNodeContext&
 NodeInstance::getNodeContext() const
 {
   return *mNodeContext;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.h	2008-10-14 05:48:22 UTC (rev 609)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NodeInstance.h	2008-10-15 04:55:21 UTC (rev 610)
@@ -18,11 +18,11 @@
 
 protected:
   /// The node context that belongs to this instance.
-  virtual NodeContext& getNodeContext();
-  virtual const NodeContext& getNodeContext() const;
+  virtual AbstractNodeContext& getNodeContext();
+  virtual const AbstractNodeContext& getNodeContext() const;
 
 private:
-  SharedPtr<NodeContext> mNodeContext;
+  SharedPtr<AbstractNodeContext> mNodeContext;
 };
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Wed Oct 15 07:17:19 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 15 Oct 2008 07:17:19 +0200
Subject: [OpenFDM-svn] r611 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810150517.m9F5HJYX026222@sheep.berlios.de>

Author: frohlich
Date: 2008-10-15 07:17:18 +0200 (Wed, 15 Oct 2008)
New Revision: 611

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.h
Log:
Sketch of an idea ...
M    src/OpenFDM/AbstractNodeContext.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.cpp	2008-10-15 04:55:21 UTC (rev 610)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.cpp	2008-10-15 05:17:18 UTC (rev 611)
@@ -14,4 +14,10 @@
 {
 }
 
+const PortValue*
+AbstractNodeContext::getPortValue(const PortInfo& portInfo) const
+{
+  return mPortValueList.getPortValue(portInfo.getIndex());
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.h	2008-10-15 04:55:21 UTC (rev 610)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.h	2008-10-15 05:17:18 UTC (rev 611)
@@ -15,8 +15,13 @@
   AbstractNodeContext();
   virtual ~AbstractNodeContext();
 
+  /// Returns the Node it belongs to.
   virtual const Node& getNode() const = 0;
 
+  /// Port value accessors for System external usage.
+  virtual const PortValue* getPortValue(const PortInfo& portInfo) const;
+
+  /// might vanish???
   PortValueList& getPortValueList()
   { return mPortValueList; }
   const PortValueList& getPortValueList() const



From frohlich at mail.berlios.de  Wed Oct 15 07:21:25 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 15 Oct 2008 07:21:25 +0200
Subject: [OpenFDM-svn] r612 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810150521.m9F5LP9B029015@sheep.berlios.de>

Author: frohlich
Date: 2008-10-15 07:21:24 +0200 (Wed, 15 Oct 2008)
New Revision: 612

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h
Log:
Constify stuff that cannot change.

M    src/OpenFDM/AbstractNodeInstance.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h	2008-10-15 05:17:18 UTC (rev 611)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h	2008-10-15 05:21:24 UTC (rev 612)
@@ -29,11 +29,12 @@
   const Node& getNode() const
   { return getNodeContext().getNode(); }
 
-  const NodePath& getNodePath() const { return mNodePath; }
+  /// The node path leading to this instance.
+  const NodePath& getNodePath() const
+  { return mNodePath; }
+  /// String representation of the node path.
+  std::string getNodeNamePath() const;
 
-  /// Set the sample time this node will run on
-  void setSampleTime(const SampleTime& sampleTime)
-  { mSampleTime = sampleTime; }
   /// Get the sample time this node will run on
   const SampleTime& getSampleTime() const
   { return mSampleTime; }
@@ -43,8 +44,6 @@
   const PortValueList& getPortValueList() const
   { return getNodeContext().getPortValueList(); }
 
-  std::string getNodeNamePath() const;
-
 protected:
   /// The node context that belongs to this instance.
   virtual AbstractNodeContext& getNodeContext() = 0;
@@ -55,9 +54,9 @@
   AbstractNodeInstance& operator=(const AbstractNodeInstance&);
 
   /// The sample times this node will run on
-  SampleTime mSampleTime;
+  const SampleTime mSampleTime;
 
-  NodePath mNodePath;
+  const NodePath mNodePath;
 };
 
 typedef std::list<SharedPtr<AbstractNodeInstance> > NodeInstanceList;



From frohlich at mail.berlios.de  Wed Oct 15 07:39:59 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 15 Oct 2008 07:39:59 +0200
Subject: [OpenFDM-svn] r613 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810150539.m9F5dxou014845@sheep.berlios.de>

Author: frohlich
Date: 2008-10-15 07:39:50 +0200 (Wed, 15 Oct 2008)
New Revision: 613

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Transform.h
Log:
Make the angular velocity of the base frame configurable.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-15 05:21:24 UTC (rev 612)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-15 05:39:50 UTC (rev 613)
@@ -52,12 +52,9 @@
   Quaternion orientation = continousState[*mOrientationStateInfo];
   Vector6 velocity = continousState[*mVelocityStateInfo];
 
-  /// FIXME, plug in the earths rotation here ...
-  Vector6 mBaseFrameVelocity = Vector6::zeros();
+  Vector6 parentSpatialVelocity = angularMotionTo(position, orientation,
+                                                  getAngularBaseVelocity());
 
-  Vector6 parentSpatialVelocity = motionTo(position, orientation,
-                                           mBaseFrameVelocity);
-
   context.mParentSpVel = parentSpatialVelocity;
   context.mParentSpAccel = Vector6::zeros();
   Vector6 pivel = parentSpatialVelocity;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp	2008-10-15 05:21:24 UTC (rev 612)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp	2008-10-15 05:39:50 UTC (rev 613)
@@ -10,6 +10,7 @@
 namespace OpenFDM {
 
 BEGIN_OPENFDM_OBJECT_DEF(RootJoint, Interact)
+  DEF_OPENFDM_PROPERTY(Matrix, AngularBaseVelocity, Serialized)
   END_OPENFDM_OBJECT_DEF
 
 RootJoint::RootJoint(const std::string& name) :

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h	2008-10-15 05:21:24 UTC (rev 612)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.h	2008-10-15 05:39:50 UTC (rev 613)
@@ -18,6 +18,14 @@
 
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
+
+  const Vector3& getAngularBaseVelocity() const
+  { return mAngularBaseVelocity; }
+  void setAngularBaseVelocity(const Vector3& angularBaseVelocity)
+  { mAngularBaseVelocity = angularBaseVelocity; }
+
+private:
+  Vector3 mAngularBaseVelocity;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Transform.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Transform.h	2008-10-15 05:21:24 UTC (rev 612)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Transform.h	2008-10-15 05:39:50 UTC (rev 613)
@@ -95,6 +95,22 @@
   return Vector6(r.transform(tv1), r.transform(tv2));
 }
 
+OpenFDM_FORCE_INLINE Vector6
+angularMotionTo(const Vector3& p, const Rotation& r, const Vector3& v)
+{
+  return Vector6(r.transform(cross(v, p)), Vector3::zeros());
+}
+OpenFDM_FORCE_INLINE Vector6
+angularMotionTo(const Rotation& r, const Vector3& v)
+{
+  return Vector6(r.transform(v), Vector3::zeros());
+}
+OpenFDM_FORCE_INLINE Vector6
+angularMotionTo(const Vector3& p, const Vector3& v)
+{
+  return Vector6(cross(v, p), Vector3::zeros());
+}
+
 /** Spatial motion vector transform.
     Transforms a spatial motion vector from the current frame to the parent
     frame.



From frohlich at mail.berlios.de  Wed Oct 15 19:07:18 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 15 Oct 2008 19:07:18 +0200
Subject: [OpenFDM-svn] r614 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200810151707.m9FH7I0G031703@sheep.berlios.de>

Author: frohlich
Date: 2008-10-15 19:07:17 +0200 (Wed, 15 Oct 2008)
New Revision: 614

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/SystemLog.h
   branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
Log:
Also log mechanic port values.
Fix a problem with the logger.

M    OpenFDM/SystemLog.h
M    test/HDF5Writer.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SystemLog.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SystemLog.h	2008-10-15 05:39:50 UTC (rev 613)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SystemLog.h	2008-10-15 17:07:17 UTC (rev 614)
@@ -62,7 +62,7 @@
       }
 
       const MechanicLinkValue* mpv = portValue->toMechanicLinkValue();
-      if (npv) {
+      if (mpv) {
         apply(nodeInstance.getNode().getPort(i), mpv);
         continue;
       }

Modified: branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-15 05:39:50 UTC (rev 613)
+++ branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-15 17:07:17 UTC (rev 614)
@@ -289,6 +289,14 @@
     name = mCurrentPortValuesUniqueStringSet.makeUnique(name);
     mDumperList.push_back(new MatrixDumper(numericPortValue, mCurrentPortValuesGroup, name));
   }
+  virtual void apply(const PortInfo* portInfo,
+                     const MechanicLinkValue* mechanicLinkValue)
+  {
+    OpenFDMAssert(mCurrentPortValuesGroup.valid());
+    std::string name = portInfo->getName();
+    name = mCurrentPortValuesUniqueStringSet.makeUnique(name);
+    mDumperList.push_back(new MechanicDumper(mechanicLinkValue, mCurrentPortValuesGroup, name));
+  }
 
   void appendPortValues(const Node& node)
   {
@@ -365,20 +373,60 @@
 //   typedef std::map<const PortValue*, SharedPtr<HDF5Object> > PortValueMap;
 //   PortValueMap mPortValueMap;
 
-  struct MatrixDumper : public Referenced {
+  struct Dumper : public Referenced {
+    virtual ~Dumper() {}
+    virtual void append() = 0;
+  };
+
+  struct MatrixDumper : public Dumper {
     MatrixDumper(const NumericPortValue* numericPortValue,
                  const HDF5Object& parent, const std::string& name) :
       mNumericPortValue(numericPortValue),
       _stream(parent, name, size(mNumericPortValue->getValue()))
     { OpenFDMAssert(numericPortValue); }
-    void append()
+    virtual void append()
     { _stream.append(mNumericPortValue->getValue()); }
 
     SharedPtr<const NumericPortValue> mNumericPortValue;
     HDFMatrixStream _stream;
   };
 
-  typedef std::list<SharedPtr<MatrixDumper> > DumperList;
+  struct MechanicDumper : public Dumper {
+    MechanicDumper(const MechanicLinkValue* mechanicLinkValue,
+                   const HDF5Object& parent, const std::string& name) :
+      mMechanicLinkValue(mechanicLinkValue),
+      _group(parent, name),
+      _position(_group, "position", Size(3, 1)),
+      _orientation(_group, "orientation", Size(4, 1)),
+      _eulerAngle(_group, "eulerAngles", Size(3, 1)),
+      _velocity(_group, "velocity", Size(6, 1)),
+      _acceleration(_group, "acceleration", Size(6, 1)),
+      _force(_group, "force", Size(6, 1)),
+      _inertia(_group, "inertia", Size(6, 6))
+    { }
+    virtual void append()
+    {
+      _position.append(mMechanicLinkValue->mPosition);
+      _orientation.append(mMechanicLinkValue->mOrientation);
+      _eulerAngle.append(mMechanicLinkValue->mOrientation.getEuler());
+      _velocity.append(mMechanicLinkValue->mSpatialVelocity);
+      _acceleration.append(mMechanicLinkValue->mSpatialAcceleration);
+      _force.append(mMechanicLinkValue->mArticulatedForce);
+      _inertia.append(mMechanicLinkValue->mArticulatedInertia);
+    }
+
+    SharedPtr<const MechanicLinkValue> mMechanicLinkValue;
+    HDF5Group _group;
+    HDFMatrixStream _position;
+    HDFMatrixStream _orientation;
+    HDFMatrixStream _eulerAngle;
+    HDFMatrixStream _velocity;
+    HDFMatrixStream _acceleration;
+    HDFMatrixStream _force;
+    HDFMatrixStream _inertia;
+  };
+
+  typedef std::list<SharedPtr<Dumper> > DumperList;
   DumperList mDumperList;
 };
 



From frohlich at mail.berlios.de  Wed Oct 15 19:07:44 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 15 Oct 2008 19:07:44 +0200
Subject: [OpenFDM-svn] r615 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810151707.m9FH7ifO032076@sheep.berlios.de>

Author: frohlich
Date: 2008-10-15 19:07:42 +0200 (Wed, 15 Oct 2008)
New Revision: 615

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
Log:
Add the implementation for the type system

M    MobileRootJoint.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-15 17:07:17 UTC (rev 614)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-15 17:07:42 UTC (rev 615)
@@ -17,6 +17,9 @@
 
 namespace OpenFDM {
 
+BEGIN_OPENFDM_OBJECT_DEF(MobileRootJoint, RootJoint)
+  END_OPENFDM_OBJECT_DEF
+
 MobileRootJoint::MobileRootJoint(const std::string& name) :
   RootJoint(name),
   mMechanicLink(newMechanicLink("link")),
@@ -95,7 +98,6 @@
 //   mRelVelDot = grav - solve(inertia, force) - getParentSpAccel() - getHdot();
   Vector6 acceleration = grav - solve(inertia, force) - context.mParentSpAccel - context.mHDot;
   context.mRelVelDot = acceleration;
-  
 
   portValues[mMechanicLink].mSpatialAcceleration = acceleration;
 }



From frohlich at mail.berlios.de  Wed Oct 15 20:15:10 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 15 Oct 2008 20:15:10 +0200
Subject: [OpenFDM-svn] r616 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810151815.m9FIFAbP022329@sheep.berlios.de>

Author: frohlich
Date: 2008-10-15 20:15:08 +0200 (Wed, 15 Oct 2008)
New Revision: 616

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/LeafContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h
Log:
Unify state allication a small bit.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/LeafContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/LeafContext.h	2008-10-15 17:07:42 UTC (rev 615)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/LeafContext.h	2008-10-15 18:15:08 UTC (rev 616)
@@ -21,12 +21,27 @@
   void setContinousStateSize(const MatrixStateInfo& stateInfo,
                              const Size& sz)
   {
-    mContinousState.setValue(stateInfo, *this);
     mContinousState[stateInfo].resize(sz(0), sz(1));
-    mContinousStateDerivative.setValue(stateInfo, *this);
     mContinousStateDerivative[stateInfo].resize(sz(0), sz(1));
   }
 
+  bool allocStates()
+  {
+    unsigned numContinousStates = getNode().getNumContinousStateValues();
+    for (unsigned i = 0; i < numContinousStates; ++i) {
+      const ContinousStateInfo* continousStateInfo;
+      continousStateInfo = getNode().getContinousStateInfo(i);
+      mContinousState.setValue(*continousStateInfo, *this);
+      mContinousStateDerivative.setValue(*continousStateInfo, *this);
+    }
+    unsigned numDiscreteStates = getNode().getNumDiscreteStateValues();
+    for (unsigned i = 0; i < numDiscreteStates; ++i) {
+      const StateInfo* stateInfo;
+      stateInfo = getNode().getDiscreteStateInfo(i);
+      mDiscreteState.setValue(*stateInfo, *this);
+    }
+    return true;
+  }
 // protected:
   // Continous States
   ContinousStateValueVector mContinousState;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-15 17:07:42 UTC (rev 615)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-15 18:15:08 UTC (rev 616)
@@ -26,7 +26,7 @@
   virtual const MechanicNode& getNode() const;
 
   bool alloc()
-  { return mMechanicNode->alloc(*this); }
+  { if (!allocStates()) return false; return mMechanicNode->alloc(*this); }
   void init(const /*Init*/Task& task)
   { mMechanicNode->init(task, mDiscreteState, mContinousState, mPortValueList); }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h	2008-10-15 17:07:42 UTC (rev 615)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h	2008-10-15 18:15:08 UTC (rev 616)
@@ -26,7 +26,7 @@
   virtual const Model& getNode() const;
 
   bool alloc()
-  { return mModel->alloc(*this); }
+  { if (!allocStates()) return false; return mModel->alloc(*this); }
   void init(const /*Init*/Task& task)
   { mModel->init(task, mDiscreteState, mContinousState, mPortValueList); }
   void output(const Task& task)



From frohlich at mail.berlios.de  Wed Oct 15 20:45:41 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 15 Oct 2008 20:45:41 +0200
Subject: [OpenFDM-svn] r617 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200810151845.m9FIjfkq026141@sheep.berlios.de>

Author: frohlich
Date: 2008-10-15 20:45:40 +0200 (Wed, 15 Oct 2008)
New Revision: 617

Modified:
   branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
Log:
Make the matrices appear in the right size in octave.

M    HDF5Writer.h


Modified: branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-15 18:15:08 UTC (rev 616)
+++ branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-15 18:45:40 UTC (rev 617)
@@ -161,7 +161,7 @@
       return false;
 
     hsize_t rank = 2;
-    hsize_t dims[2] = { rows(matrix), cols(matrix) };
+    hsize_t dims[2] = { cols(matrix), rows(matrix) };
 
 //     HDF5Object dataspace(H5Screate(H5S_NULL));
 //     HDF5Object dataspace(H5Screate(H5S_SIMPLE));
@@ -203,8 +203,8 @@
         rank = 1;
     }
     _dims[0] = 1;
-    _dims[1] = size(0);
-    _dims[2] = size(1);
+    _dims[1] = size(1);
+    _dims[2] = size(0);
     hsize_t maxdims[3] = { H5S_UNLIMITED, _dims[1], _dims[2] };
     _dataspace = HDF5Object(H5Screate_simple(rank, _dims, maxdims), true);
     if (!_dataspace.valid())



From frohlich at mail.berlios.de  Wed Oct 15 21:06:04 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 15 Oct 2008 21:06:04 +0200
Subject: [OpenFDM-svn] r618 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200810151906.m9FJ64Mm027748@sheep.berlios.de>

Author: frohlich
Date: 2008-10-15 21:06:03 +0200 (Wed, 15 Oct 2008)
New Revision: 618

Modified:
   branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
Log:
Use hard links to store duplicate port values.


Modified: branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-15 18:45:40 UTC (rev 617)
+++ branches/OpenFDM-StateSeparation/src/test/HDF5Writer.h	2008-10-15 19:06:03 UTC (rev 618)
@@ -108,16 +108,16 @@
     return 0 <= id;
   }
 
-//   bool link(const HDF5Object& object, const std::string& name)
-//   {
-//     if (!valid())
-//       return false;
-//     if (!object.valid())
-//       return false;
-//     int status = H5Olink(object.getId(), getId(), name.c_str(),
-//                          H5P_DEFAULT, H5P_DEFAULT);
-//     return 0 <= status;
-//   }
+  bool link(const HDF5Object& object, const std::string& name)
+  {
+    if (!valid())
+      return false;
+    if (!object.valid())
+      return false;
+    herr_t status = H5Glink2(object.getId(), ".", H5G_LINK_HARD,
+                             getId(), name.c_str());
+    return 0 <= status;
+  }
 };
 
 class HDF5File : public HDF5Object {
@@ -287,7 +287,16 @@
     OpenFDMAssert(mCurrentPortValuesGroup.valid());
     std::string name = portInfo->getName();
     name = mCurrentPortValuesUniqueStringSet.makeUnique(name);
-    mDumperList.push_back(new MatrixDumper(numericPortValue, mCurrentPortValuesGroup, name));
+
+    if (mPortValueMap.find(numericPortValue) == mPortValueMap.end()) {
+      MatrixDumper* dumper;
+      dumper = new MatrixDumper(numericPortValue,
+                                mCurrentPortValuesGroup, name);
+      mPortValueMap[numericPortValue] = dumper;
+      mDumperList.push_back(dumper);
+    } else {
+      mCurrentPortValuesGroup.link(mPortValueMap.find(numericPortValue)->second->getObject(), name);
+    }
   }
   virtual void apply(const PortInfo* portInfo,
                      const MechanicLinkValue* mechanicLinkValue)
@@ -295,7 +304,16 @@
     OpenFDMAssert(mCurrentPortValuesGroup.valid());
     std::string name = portInfo->getName();
     name = mCurrentPortValuesUniqueStringSet.makeUnique(name);
-    mDumperList.push_back(new MechanicDumper(mechanicLinkValue, mCurrentPortValuesGroup, name));
+
+    if (mPortValueMap.find(mechanicLinkValue) == mPortValueMap.end()) {
+      MechanicDumper* dumper;
+      dumper = new MechanicDumper(mechanicLinkValue,
+                                  mCurrentPortValuesGroup, name);
+      mPortValueMap[mechanicLinkValue] = dumper;
+      mDumperList.push_back(dumper);
+    } else {
+      mCurrentPortValuesGroup.link(mPortValueMap.find(mechanicLinkValue)->second->getObject(), name);
+    }
   }
 
   void appendPortValues(const Node& node)
@@ -369,13 +387,10 @@
 
   HDF5Group mCurrentPortValuesGroup;
 
-  // Only hdf5 version >= 1.8 can do hard links
-//   typedef std::map<const PortValue*, SharedPtr<HDF5Object> > PortValueMap;
-//   PortValueMap mPortValueMap;
-
   struct Dumper : public Referenced {
     virtual ~Dumper() {}
     virtual void append() = 0;
+    virtual HDF5Object getObject() = 0;
   };
 
   struct MatrixDumper : public Dumper {
@@ -386,6 +401,8 @@
     { OpenFDMAssert(numericPortValue); }
     virtual void append()
     { _stream.append(mNumericPortValue->getValue()); }
+    virtual HDF5Object getObject()
+    { return _stream; }
 
     SharedPtr<const NumericPortValue> mNumericPortValue;
     HDFMatrixStream _stream;
@@ -414,6 +431,8 @@
       _force.append(mMechanicLinkValue->mArticulatedForce);
       _inertia.append(mMechanicLinkValue->mArticulatedInertia);
     }
+    virtual HDF5Object getObject()
+    { return _group; }
 
     SharedPtr<const MechanicLinkValue> mMechanicLinkValue;
     HDF5Group _group;
@@ -426,6 +445,9 @@
     HDFMatrixStream _inertia;
   };
 
+  typedef std::map<const PortValue*,SharedPtr<Dumper> > PortValueMap;
+  PortValueMap mPortValueMap;
+
   typedef std::list<SharedPtr<Dumper> > DumperList;
   DumperList mDumperList;
 };



From frohlich at mail.berlios.de  Wed Oct 15 23:44:09 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 15 Oct 2008 23:44:09 +0200
Subject: [OpenFDM-svn] r619 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810152144.m9FLi9LR029915@sheep.berlios.de>

Author: frohlich
Date: 2008-10-15 23:44:08 +0200 (Wed, 15 Oct 2008)
New Revision: 619

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicInstance.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
First attempt to include the mechanic system stuff.

M    OpenFDM/MechanicInstance.h
M    OpenFDM/System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicInstance.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicInstance.h	2008-10-15 19:06:03 UTC (rev 618)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicInstance.h	2008-10-15 21:44:08 UTC (rev 619)
@@ -20,7 +20,7 @@
 
   bool isConnectedTo(const MechanicInstance& mechanicInstance) const;
 
-protected:
+// protected:
   virtual MechanicContext& getNodeContext();
   virtual const MechanicContext& getNodeContext() const;
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-15 19:06:03 UTC (rev 618)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-15 21:44:08 UTC (rev 619)
@@ -116,6 +116,20 @@
     }
   }
 
+  void appendMechanicInstance(MechanicInstance* mechanicInstance)
+  {
+    MechanicContext* mechanicContext = &mechanicInstance->getNodeContext();
+    // FIXME???
+//     SampleTime sampleTime = modelInstance->getSampleTime();
+
+    // The init task contains them all
+    mInitTask->mMechanicContextList.push_back(mechanicContext);
+    
+    // for now continous tasks take also all of them
+    mContinousTask->appendStateValuesFromLeafContext(*mechanicContext);
+    mContinousTask->mMechanicContextList.push_back(mechanicContext);
+  }
+
 protected:
   virtual void initImplementation(const real_type& t)
   {
@@ -405,8 +419,10 @@
     // mechanical system here.
     MechanicInstance* mechanicInstance = new MechanicInstance(getNodePath(), mSampleTime, &node);
     _nodeInstanceList.push_back(mechanicInstance);
-//     _mechanicInstanceList.push_back(mechanicInstance);
-    _rootJointInstanceList.push_back(mechanicInstance);
+    if (node.getNumPorts() == 1)
+      _rootJointInstanceList.push_back(mechanicInstance);
+    else
+      _mechanicInstanceList.push_back(mechanicInstance);
     allocPortData(mechanicInstance, node);
   }
   virtual void apply(const MechanicNode& node)
@@ -585,6 +601,9 @@
     // steps below
     if (!allocPortValues())
       return 0;
+    // The MechanicNode instances are sorted to match the direct input property
+    if (!sortMechanicList())
+      return 0;
     // The model instances are sorted to match the direct input property
     if (!sortModelList())
       return 0;
@@ -611,11 +630,90 @@
       discreteSystem->appendModelInstance(*i);
     }
 
+    MechanicInstanceList::const_iterator j;
+    for (j = _mechanicInstanceList.begin();
+         j != _mechanicInstanceList.end(); ++j) {
+      discreteSystem->appendMechanicInstance(*j);
+    }
+
     return discreteSystem.release();
   }
 
 protected:
   // method to sort the leafs according to their dependency
+  bool sortMechanicList()
+  {
+    MechanicInstanceList sortedMechanicInstanceList;
+    // Start with all the roots in front of the list ...
+    // FIXME: ensure that there is no loop here?
+    sortedMechanicInstanceList.swap(_rootJointInstanceList);
+
+    // Not the best algorithm, but for a first cut ...
+    while (!_mechanicInstanceList.empty()) {
+      MechanicInstanceList nextLevelList;
+
+      MechanicInstanceList::iterator j;
+      for (j = sortedMechanicInstanceList.begin();
+           j != sortedMechanicInstanceList.end(); ++j) {
+        MechanicInstanceList::iterator i;
+        for (i = _mechanicInstanceList.begin();
+             i != _mechanicInstanceList.end();) {
+        
+          if ((*j)->isConnectedTo(*(*i))) {
+            nextLevelList.push_back(*i);
+            i = _mechanicInstanceList.erase(i);
+
+            // Check if this current mechanic node does not reference
+            // back into the already sorted models
+            MechanicInstanceList::iterator k;
+            for (k = sortedMechanicInstanceList.begin();
+                 k != sortedMechanicInstanceList.end(); ++k) {
+              if (*k == *j)
+                continue;
+              if ((*i)->isConnectedTo(*(*k))) {
+                Log(Schedule,Error)
+                  << "Detected closed kinematic loop: MechanicNode \""
+                  << (*i)->getNodeNamePath()
+                  << "\" is linked to MechanicNode \""
+                  << (*k)->getNodeNamePath() << "\"" << std::endl;
+                return false;
+              }
+            }
+          } else {
+            ++i;
+          }
+        }
+      }
+
+      // Check if we have connects in this next level.
+      // Since every mechanic node in this list already has a parent,
+      // if we have a connection in between them, there must be a
+      // closed kinematic loop.
+      for (j = nextLevelList.begin(); j != nextLevelList.end(); ++j) {
+        MechanicInstanceList::iterator i = j;
+        for (++i; i != nextLevelList.end(); ++i) {
+          if ((*j)->isConnectedTo(*(*i))) {
+            Log(Schedule,Error)
+              << "Detected closed kinematic loop: MechanicNode \""
+              << (*j)->getNodeNamePath()
+              << "\" is linked to MechanicNode \""
+              << (*i)->getNodeNamePath() << "\"" << std::endl;
+            return false;
+          }
+        }
+      }
+      
+
+      for (j = nextLevelList.begin(); j != nextLevelList.end(); ++j) {
+        sortedMechanicInstanceList.push_back(*j);
+      }
+    }
+    
+    _mechanicInstanceList.swap(sortedMechanicInstanceList);
+    return true;
+  }
+
+  // method to sort the leafs according to their dependency
   bool sortModelList()
   {
     ModelInstanceList sortedModelInstanceList;
@@ -711,6 +809,24 @@
         return false;
       }
     }
+
+    MechanicInstanceList::const_iterator j;
+    for (j = _rootJointInstanceList.begin();
+         j != _rootJointInstanceList.end(); ++j) {
+      if (!(*j)->getNodeContext().alloc()) {
+        Log(Schedule, Error) << "Could not alloc for MechanicNode \""
+                             << (*j)->getNodeNamePath() << "\"" << endl;
+        return false;
+      }
+    }
+    for (j = _mechanicInstanceList.begin();
+         j != _mechanicInstanceList.end(); ++j) {
+      if (!(*j)->getNodeContext().alloc()) {
+        Log(Schedule, Error) << "Could not alloc for MechanicNode \""
+                             << (*j)->getNodeNamePath() << "\"" << endl;
+        return false;
+      }
+    }
     return true;
   }
 



From frohlich at mail.berlios.de  Wed Oct 15 23:45:43 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 15 Oct 2008 23:45:43 +0200
Subject: [OpenFDM-svn] r620 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200810152145.m9FLjhfm030077@sheep.berlios.de>

Author: frohlich
Date: 2008-10-15 23:45:42 +0200 (Wed, 15 Oct 2008)
New Revision: 620

Modified:
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
First mechanic system example.


Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-15 21:44:08 UTC (rev 619)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-15 21:45:42 UTC (rev 620)
@@ -6,6 +6,8 @@
 #include <OpenFDM/Group.h>
 #include <OpenFDM/LibraryNode.h>
 #include <OpenFDM/LibraryModel.h>
+#include <OpenFDM/MobileRootJoint.h>
+#include <OpenFDM/RigidBody.h>
 #include <OpenFDM/System.h>
 
 #include "HDF5Writer.h"
@@ -181,6 +183,17 @@
   return group.release();
 }
 
+Node* buildSimpleMechanicExample()
+{
+  SharedPtr<Group> group = new Group("G");
+  Group::NodeId rootJoint = group->addChild(new MobileRootJoint("Root Joint"));
+  Group::NodeId rigidBody = group->addChild(new RigidBody("Rigid Body"));
+
+  group->connect(rootJoint, "link", rigidBody, "link");
+
+  return group.release();
+}
+
 int main()
 {
   // Check a self referencing gain model, to see if cyclic loops
@@ -200,9 +213,10 @@
     return EXIT_FAILURE;
 
 
-  SharedPtr<System> system = new System("System", buildContinousExample());
+//   SharedPtr<System> system = new System("System", buildContinousExample());
 //   SharedPtr<System> system = new System("System", buildDiscreteExample());
 //   SharedPtr<System> system = new System("System", buildLibraryNodeExample());
+  SharedPtr<System> system = new System("System", buildSimpleMechanicExample());
 
   system->attach(new HDF5Log("system.h5"));
 



From frohlich at mail.berlios.de  Thu Oct 16 07:38:22 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 16 Oct 2008 07:38:22 +0200
Subject: [OpenFDM-svn] r621 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810160538.m9G5cMAv007039@sheep.berlios.de>

Author: frohlich
Date: 2008-10-16 07:38:21 +0200 (Thu, 16 Oct 2008)
New Revision: 621

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Fix a problem in mechanic model sorting.

M    System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-15 21:45:42 UTC (rev 620)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-16 05:38:21 UTC (rev 621)
@@ -660,20 +660,21 @@
              i != _mechanicInstanceList.end();) {
         
           if ((*j)->isConnectedTo(*(*i))) {
-            nextLevelList.push_back(*i);
+            SharedPtr<MechanicInstance> mechanicInstance = *i;
+            nextLevelList.push_back(mechanicInstance);
             i = _mechanicInstanceList.erase(i);
 
             // Check if this current mechanic node does not reference
             // back into the already sorted models
-            MechanicInstanceList::iterator k;
+            MechanicInstanceList::const_iterator k;
             for (k = sortedMechanicInstanceList.begin();
                  k != sortedMechanicInstanceList.end(); ++k) {
               if (*k == *j)
                 continue;
-              if ((*i)->isConnectedTo(*(*k))) {
+              if (mechanicInstance->isConnectedTo(*(*k))) {
                 Log(Schedule,Error)
                   << "Detected closed kinematic loop: MechanicNode \""
-                  << (*i)->getNodeNamePath()
+                  << mechanicInstance->getNodeNamePath()
                   << "\" is linked to MechanicNode \""
                   << (*k)->getNodeNamePath() << "\"" << std::endl;
                 return false;



From frohlich at mail.berlios.de  Thu Oct 16 07:39:30 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 16 Oct 2008 07:39:30 +0200
Subject: [OpenFDM-svn] r622 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810160539.m9G5dUck008770@sheep.berlios.de>

Author: frohlich
Date: 2008-10-16 07:39:29 +0200 (Thu, 16 Oct 2008)
New Revision: 622

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
Log:
Add functions for mass and force contribution.

M    MechanicLinkValue.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-10-16 05:38:21 UTC (rev 621)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-10-16 05:39:29 UTC (rev 622)
@@ -19,6 +19,16 @@
   virtual MechanicLinkValue* toMechanicLinkValue() { return this; }
   virtual const MechanicLinkValue* toMechanicLinkValue() const { return this; }
 
+  void applyForce(const Vector6& force)
+  { mArticulatedForce = force; }
+  void applyForce(const Vector3& force)
+  { applyForce(Vector6(Vector3::zeros(), force)); }
+  void applyTorque(const Vector3& torque)
+  { applyForce(Vector6(torque, Vector3::zeros())); }
+
+  void addInertia(const SpatialInertia& inertia)
+  { mArticulatedInertia = inertia; }
+
 // protected:
   // FIXME:
   // Since the interact side is the provider port, an interact might provide



From frohlich at mail.berlios.de  Thu Oct 16 07:48:20 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 16 Oct 2008 07:48:20 +0200
Subject: [OpenFDM-svn] r623 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200810160548.m9G5mKOj029700@sheep.berlios.de>

Author: frohlich
Date: 2008-10-16 07:48:19 +0200 (Thu, 16 Oct 2008)
New Revision: 623

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Readd mass implementation, make use of it.

M    src/test/structure.cpp
M    src/OpenFDM/Mass.h
M    src/OpenFDM/Makefile.am
M    src/OpenFDM/Mass.cpp
M    src/OpenFDM/MechanicLinkValue.h
M    src/OpenFDM/RigidBody.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-16 05:39:29 UTC (rev 622)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-16 05:48:19 UTC (rev 623)
@@ -241,6 +241,7 @@
   SimulationTime.cpp
 
 OpenFDMMechanicSOURCES = \
+  Mass.cpp \
   MobileRootJoint.cpp
 
 
@@ -264,7 +265,6 @@
 #   Joint.cpp \
 #   Launchbar.cpp \
 #   LinearSpringDamper.cpp \
-#   Mass.cpp \
 #   MaxModel.cpp \
 #   MinModel.cpp \
 #   Output.cpp \

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-10-16 05:39:29 UTC (rev 622)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-10-16 05:48:19 UTC (rev 623)
@@ -4,19 +4,27 @@
 
 #include "Mass.h"
 
+#include "PortValueList.h"
+#include "Transform.h"
+
 namespace OpenFDM {
 
 BEGIN_OPENFDM_OBJECT_DEF(Mass, Interact)
   DEF_OPENFDM_PROPERTY(Vector3, Position, Serialized)
-  DEF_OPENFDM_PROPERTY(SpatialInertia, Inertia, Serialized)
+  DEF_OPENFDM_PROPERTY(Inertia, Inertia, Serialized)
+  DEF_OPENFDM_PROPERTY(Real, Mass, Serialized)
   END_OPENFDM_OBJECT_DEF
 
-Mass::Mass(const std::string& name, const SpatialInertia& inertia) :
-  Interact(name, 1),
+Mass::Mass(const std::string& name, const real_type& mass,
+           const InertiaMatrix& inertia, const Vector3& position) :
+  Interact(name),
+  mMechanicLink(newMechanicLink("link")),
+  mMass(mass),
   mInertia(inertia),
-  mUntransformedInertia(inertia),
-  mPosition(Vector3::zeros())
+  mPosition(position),
+  mSpatialInertia(0)
 {
+  setInertia(mMass, mInertia, mPosition);
 }
 
 Mass::~Mass(void)
@@ -24,28 +32,39 @@
 }
 
 void
-Mass::interactWith(RigidBody* rigidBody)
+Mass::articulation(const Task&, const ContinousStateValueVector&,
+                   PortValueList& portValues, MechanicContext&) const
 {
-  rigidBody->contributeLocalInertia(mInertia);
+  // Hardcoding that gravity happens in the roots??
+  // Vectro3 position = portValues[mMechanicLink].mPosition;
+  Vector3 gravity = Vector3::zeros();
+
+  portValues[mMechanicLink].addInertia(mSpatialInertia);
+  portValues[mMechanicLink].applyForce(gravity);
 }
 
-void
-Mass::setInertia(real_type mass)
+const InertiaMatrix&
+Mass::getInertia(void) const
 {
-  setInertia(SpatialInertia(mass));
+  return mInertia;
 }
 
 void
-Mass::setInertia(real_type mass, const InertiaMatrix& inertia)
+Mass::setInertia(const InertiaMatrix& inertia)
 {
-  setInertia(SpatialInertia(inertia, mass));
+  setInertia(mMass, inertia, mPosition);
 }
 
+const real_type&
+Mass::getMass() const
+{
+  return mMass;
+}
+
 void
-Mass::setInertia(const SpatialInertia& I)
+Mass::setMass(const real_type& mass)
 {
-  mUntransformedInertia = I;
-  mInertia = inertiaFrom(mPosition, mUntransformedInertia);
+  setInertia(mass, mInertia, mPosition);
 }
 
 const Vector3&
@@ -57,8 +76,17 @@
 void
 Mass::setPosition(const Vector3& position)
 {
+  setInertia(mMass, mInertia, position);
+}
+
+void
+Mass::setInertia(const real_type& mass, const InertiaMatrix& inertia,
+                 const Vector3& position)
+{
+  mMass = mass;
+  mInertia = inertia;
   mPosition = position;
-  mInertia = inertiaFrom(mPosition, mUntransformedInertia);
+  mSpatialInertia = inertiaFrom(mPosition, SpatialInertia(mInertia, mMass));
 }
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h	2008-10-16 05:39:29 UTC (rev 622)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h	2008-10-16 05:48:19 UTC (rev 623)
@@ -13,14 +13,16 @@
 class Mass : public Interact {
   OPENFDM_OBJECT(Mass, Interact);
 public:
-  Mass(const std::string& name,
-       const SpatialInertia& inertia = SpatialInertia(0));
+  Mass(const std::string& name, const real_type& mass = 0,
+       const InertiaMatrix& inertia = InertiaMatrix(0, 0, 0, 0, 0, 0),
+       const Vector3& position = Vector3::zeros());
   virtual ~Mass(void);
 
-  virtual void interactWith(RigidBody* rigidBody);
+  virtual void articulation(const Task&, const ContinousStateValueVector&,
+                            PortValueList&, MechanicContext&) const;
 
-  const SpatialInertia& getInertia(void) const
-  { return mInertia; }
+  const InertiaMatrix& getInertia(void) const;
+  void setInertia(const InertiaMatrix& inertia);
 
   /** Set the local spatial inertia.
       @param mass mass in kg.
@@ -32,27 +34,33 @@
       With such a singular matrix there is no way to simulate rotational
       motion.
    */
-  void setInertia(real_type mass);
+  const real_type& getMass() const;
+  void setMass(const real_type& mass);
 
+  /** Set a position offset for the inertia given.
+   */
+  const Vector3& getPosition(void) const;
+  void setPosition(const Vector3& position);
+
   /** Set the local spatial inertia.
       @param mass mass in kg.
       @param inertia inertia matrix in kg*m^2.
       Sets the spatial inertia of the current rigid body to a simple
       point mass of the mass and inertia given in the argument.
    */
-  void setInertia(real_type mass, const InertiaMatrix& inertia);
+  void setInertia(const real_type& mass, const InertiaMatrix& inertia,
+                  const Vector3& position);
 
-  /** Set the local spatial inertia.
-   */
-  void setInertia(const SpatialInertia& I);
+private:
+  MechanicLink mMechanicLink;
 
-  const Vector3& getPosition(void) const;
-  void setPosition(const Vector3& position);
+  /// The paremeters that can be set from outside
+  real_type mMass;
+  InertiaMatrix mInertia;
+  Vector3 mPosition;
 
-private:
-  SpatialInertia mInertia;
-  SpatialInertia mUntransformedInertia;
-  Vector3 mPosition;
+  /// The resulting local spatial inertia matrix
+  SpatialInertia mSpatialInertia;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-10-16 05:39:29 UTC (rev 622)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-10-16 05:48:19 UTC (rev 623)
@@ -29,6 +29,12 @@
   void addInertia(const SpatialInertia& inertia)
   { mArticulatedInertia = inertia; }
 
+  void applyArticulation(const MechanicLinkValue& linkValue)
+  {
+    applyForce(linkValue.mArticulatedForce);
+    addInertia(linkValue.mArticulatedInertia);
+  }
+
 // protected:
   // FIXME:
   // Since the interact side is the provider port, an interact might provide

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2008-10-16 05:39:29 UTC (rev 622)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2008-10-16 05:48:19 UTC (rev 623)
@@ -17,6 +17,7 @@
   MechanicNode(name)
 {
   mMechanicLinks.push_back(newMechanicLink("link"));
+  mMechanicLinks.push_back(newMechanicLink("link2"));
 }
 
 RigidBody::~RigidBody()
@@ -56,18 +57,11 @@
 RigidBody::articulation(const Task&, const ContinousStateValueVector&,
                         PortValueList& portValues, MechanicContext&) const
 {
-  unsigned numLinkValues = mMechanicLinks.size();
+  MechanicLinkValue& parentLink = portValues[mMechanicLinks.front()];
 
-  SpatialInertia inertia(InertiaMatrix(1, 0, 0, 1, 0, 1), 1);
-  Vector6 force = Vector6::zeros();
-
-  for (unsigned i = 1; i < numLinkValues; ++i) {
-    inertia += portValues[mMechanicLinks[i]].mArticulatedInertia;
-    force += portValues[mMechanicLinks[i]].mArticulatedForce;
-  }
-
-  portValues[mMechanicLinks.front()].mArticulatedInertia = inertia;
-  portValues[mMechanicLinks.front()].mArticulatedForce = force;
+  unsigned numLinkValues = mMechanicLinks.size();
+  for (unsigned i = 1; i < numLinkValues; ++i)
+    parentLink.applyArticulation(portValues[mMechanicLinks[i]]);
 }
 
 void

Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-16 05:39:29 UTC (rev 622)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-16 05:48:19 UTC (rev 623)
@@ -6,6 +6,7 @@
 #include <OpenFDM/Group.h>
 #include <OpenFDM/LibraryNode.h>
 #include <OpenFDM/LibraryModel.h>
+#include <OpenFDM/Mass.h>
 #include <OpenFDM/MobileRootJoint.h>
 #include <OpenFDM/RigidBody.h>
 #include <OpenFDM/System.h>
@@ -188,8 +189,10 @@
   SharedPtr<Group> group = new Group("G");
   Group::NodeId rootJoint = group->addChild(new MobileRootJoint("Root Joint"));
   Group::NodeId rigidBody = group->addChild(new RigidBody("Rigid Body"));
+  Group::NodeId mass = group->addChild(new Mass("Mass", 1, InertiaMatrix(1, 0, 0, 1, 0, 1)));
 
   group->connect(rootJoint, "link", rigidBody, "link");
+  group->connect(rigidBody, "link2", mass, "link");
 
   return group.release();
 }



From frohlich at mail.berlios.de  Thu Oct 16 08:00:46 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Thu, 16 Oct 2008 08:00:46 +0200
Subject: [OpenFDM-svn] r624 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810160600.m9G60kid013761@sheep.berlios.de>

Author: frohlich
Date: 2008-10-16 08:00:45 +0200 (Thu, 16 Oct 2008)
New Revision: 624

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
Log:
Rename addInertia to applyInertia

M    src/OpenFDM/Mass.cpp
M    src/OpenFDM/MechanicLinkValue.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-10-16 05:48:19 UTC (rev 623)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-10-16 06:00:45 UTC (rev 624)
@@ -39,7 +39,7 @@
   // Vectro3 position = portValues[mMechanicLink].mPosition;
   Vector3 gravity = Vector3::zeros();
 
-  portValues[mMechanicLink].addInertia(mSpatialInertia);
+  portValues[mMechanicLink].applyInertia(mSpatialInertia);
   portValues[mMechanicLink].applyForce(gravity);
 }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-10-16 05:48:19 UTC (rev 623)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-10-16 06:00:45 UTC (rev 624)
@@ -26,13 +26,13 @@
   void applyTorque(const Vector3& torque)
   { applyForce(Vector6(torque, Vector3::zeros())); }
 
-  void addInertia(const SpatialInertia& inertia)
+  void applyInertia(const SpatialInertia& inertia)
   { mArticulatedInertia = inertia; }
 
   void applyArticulation(const MechanicLinkValue& linkValue)
   {
     applyForce(linkValue.mArticulatedForce);
-    addInertia(linkValue.mArticulatedInertia);
+    applyInertia(linkValue.mArticulatedInertia);
   }
 
 // protected:



From frohlich at mail.berlios.de  Fri Oct 17 06:33:53 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 17 Oct 2008 06:33:53 +0200
Subject: [OpenFDM-svn] r626 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810170433.m9H4XrUJ023302@sheep.berlios.de>

Author: frohlich
Date: 2008-10-17 06:33:52 +0200 (Fri, 17 Oct 2008)
New Revision: 626

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.h
Log:
Includes are now local.

M    SystemOutput.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.h	2008-10-17 04:14:42 UTC (rev 625)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.h	2008-10-17 04:33:52 UTC (rev 626)
@@ -5,9 +5,9 @@
 #ifndef OpenFDM_SystemOutput_H
 #define OpenFDM_SystemOutput_H
 
-#include <OpenFDM/System.h>
-#include <OpenFDM/ConstNodeVisitor.h>
-#include <OpenFDM/NodeInstance.h>
+#include "System.h"
+#include "ConstNodeVisitor.h"
+#include "NodeInstance.h"
 
 namespace OpenFDM {
 



From frohlich at mail.berlios.de  Fri Oct 17 07:15:46 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 17 Oct 2008 07:15:46 +0200
Subject: [OpenFDM-svn] r627 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810170515.m9H5Fkoa000878@sheep.berlios.de>

Author: frohlich
Date: 2008-10-17 07:15:43 +0200 (Fri, 17 Oct 2008)
New Revision: 627

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.h
Log:
Include ports into the visitor system.
Make use of that in the SystemOutput class.

M    src/OpenFDM/Node.h
M    src/OpenFDM/NodeVisitor.h
M    src/OpenFDM/PortInfo.cpp
M    src/OpenFDM/ConstNodeVisitor.h
M    src/OpenFDM/PortValueList.h
M    src/OpenFDM/Node.cpp
M    src/OpenFDM/NodeVisitor.cpp
M    src/OpenFDM/ConstNodeVisitor.cpp
M    src/OpenFDM/SystemOutput.h
M    src/OpenFDM/HDF5SystemOutput.h
M    src/OpenFDM/PortInfo.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp	2008-10-17 04:33:52 UTC (rev 626)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.cpp	2008-10-17 05:15:43 UTC (rev 627)
@@ -16,6 +16,8 @@
 #include "RootJoint.h"
 #include "Interact.h"
 
+#include "PortInfo.h"
+
 namespace OpenFDM {
 
 ConstNodeVisitor::~ConstNodeVisitor()
@@ -93,4 +95,21 @@
   apply(static_cast<const Interact&>(node));
 }
 
+void
+ConstNodeVisitor::apply(const PortInfo& portInfo)
+{
+}
+
+void
+ConstNodeVisitor::apply(const NumericPortInfo& portInfo)
+{
+  apply(static_cast<const PortInfo&>(portInfo));
+}
+
+void
+ConstNodeVisitor::apply(const MechanicLinkInfo& portInfo)
+{
+  apply(static_cast<const PortInfo&>(portInfo));
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h	2008-10-17 04:33:52 UTC (rev 626)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h	2008-10-17 05:15:43 UTC (rev 627)
@@ -24,6 +24,10 @@
 class RootJoint;
 class Interact;
 
+class PortInfo;
+class NumericPortInfo;
+class MechanicLinkInfo;
+
 class ConstNodeVisitor : public Referenced {
 public:
   virtual ~ConstNodeVisitor();
@@ -47,6 +51,10 @@
   virtual void apply(const Interact&);
   virtual void apply(const RootJoint&);
 
+  virtual void apply(const PortInfo&);
+  virtual void apply(const NumericPortInfo&);
+  virtual void apply(const MechanicLinkInfo&);
+
   const NodePath& getNodePath() const { return mNodePath; }
 
   template<typename T>

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2008-10-17 04:33:52 UTC (rev 626)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2008-10-17 05:15:43 UTC (rev 627)
@@ -282,11 +282,11 @@
       (*i)->append();
   }
 
-  virtual void apply(const PortInfo* portInfo,
+  virtual void apply(const NumericPortInfo& portInfo,
                      const NumericPortValue* numericPortValue)
   {
     OpenFDMAssert(mCurrentPortValuesGroup.valid());
-    std::string name = portInfo->getName();
+    std::string name = portInfo.getName();
     name = mCurrentPortValuesUniqueStringSet.makeUnique(name);
 
     if (mPortValueMap.find(numericPortValue) == mPortValueMap.end()) {
@@ -299,11 +299,11 @@
       mCurrentPortValuesGroup.link(mPortValueMap.find(numericPortValue)->second->getObject(), name);
     }
   }
-  virtual void apply(const PortInfo* portInfo,
+  virtual void apply(const MechanicLinkInfo& portInfo,
                      const MechanicLinkValue* mechanicLinkValue)
   {
     OpenFDMAssert(mCurrentPortValuesGroup.valid());
-    std::string name = portInfo->getName();
+    std::string name = portInfo.getName();
     name = mCurrentPortValuesUniqueStringSet.makeUnique(name);
 
     if (mPortValueMap.find(mechanicLinkValue) == mPortValueMap.end()) {
@@ -319,9 +319,11 @@
 
   void appendPortValues(const Node& node)
   {
+    if (!node.getNumPorts())
+      return;
     OpenFDMAssert(mCurrentGroup.valid());
     mCurrentPortValuesGroup = HDF5Group(mCurrentGroup, "portValues");
-    SystemOutput::appendPortValues(node);
+    node.traversePorts(*this);
     mCurrentPortValuesGroup = HDF5Group();
     mCurrentPortValuesUniqueStringSet = UniqueStringSet();
   }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-10-17 04:33:52 UTC (rev 626)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.cpp	2008-10-17 05:15:43 UTC (rev 627)
@@ -58,6 +58,22 @@
   }
 }
 
+void
+Node::traversePorts(NodeVisitor& visitor) const
+{
+  PortList::const_iterator i;
+  for (i = mPortList.begin(); i != mPortList.end(); ++i)
+    (*i)->accept(visitor);
+}
+
+void
+Node::traversePorts(ConstNodeVisitor& visitor) const
+{
+  PortList::const_iterator i;
+  for (i = mPortList.begin(); i != mPortList.end(); ++i)
+    (*i)->accept(visitor);
+}
+
 WeakPtr<const Node>
 Node::getParent(unsigned i) const
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-10-17 04:33:52 UTC (rev 626)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Node.h	2008-10-17 05:15:43 UTC (rev 627)
@@ -34,6 +34,9 @@
   virtual void accept(ConstNodeVisitor& visitor) const;
   void ascend(NodeVisitor& visitor);
   void ascend(ConstNodeVisitor& visitor) const;
+  // Note the const in this method. only the nodes can change them
+  void traversePorts(NodeVisitor& visitor) const;
+  void traversePorts(ConstNodeVisitor& visitor) const;
 
   unsigned getNumParents() const
   { return mParentList.size(); }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp	2008-10-17 04:33:52 UTC (rev 626)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.cpp	2008-10-17 05:15:43 UTC (rev 627)
@@ -16,6 +16,8 @@
 #include "RootJoint.h"
 #include "Interact.h"
 
+#include "PortInfo.h"
+
 namespace OpenFDM {
 
 NodeVisitor::~NodeVisitor()
@@ -93,4 +95,21 @@
   apply(static_cast<Interact&>(node));
 }
 
+void
+NodeVisitor::apply(const PortInfo& portInfo)
+{
+}
+
+void
+NodeVisitor::apply(const NumericPortInfo& portInfo)
+{
+  apply(static_cast<const PortInfo&>(portInfo));
+}
+
+void
+NodeVisitor::apply(const MechanicLinkInfo& portInfo)
+{
+  apply(static_cast<const PortInfo&>(portInfo));
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h	2008-10-17 04:33:52 UTC (rev 626)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h	2008-10-17 05:15:43 UTC (rev 627)
@@ -24,6 +24,10 @@
 class RootJoint;
 class Interact;
 
+class PortInfo;
+class NumericPortInfo;
+class MechanicLinkInfo;
+
 class NodeVisitor : public Referenced {
 public:
   virtual ~NodeVisitor();
@@ -47,6 +51,10 @@
   virtual void apply(Interact&);
   virtual void apply(RootJoint&);
 
+  virtual void apply(const PortInfo&);
+  virtual void apply(const NumericPortInfo&);
+  virtual void apply(const MechanicLinkInfo&);
+
   const NodePath& getNodePath() const { return mNodePath; }
 
   template<typename T>

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.cpp	2008-10-17 04:33:52 UTC (rev 626)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.cpp	2008-10-17 05:15:43 UTC (rev 627)
@@ -3,7 +3,10 @@
  */
 
 #include "PortInfo.h"
+
+#include "ConstNodeVisitor.h"
 #include "Node.h"
+#include "NodeVisitor.h"
 
 namespace OpenFDM {
 
@@ -23,6 +26,18 @@
 }
 
 void
+PortInfo::accept(NodeVisitor& visitor) const
+{
+  visitor.apply(*this);
+}
+
+void
+PortInfo::accept(ConstNodeVisitor& visitor) const
+{
+  visitor.apply(*this);
+}
+
+void
 PortInfo::setName(const std::string& name)
 {
   mName = name;
@@ -37,4 +52,30 @@
   node->removePort(this);
 }
 
+
+
+void
+NumericPortInfo::accept(NodeVisitor& visitor) const
+{
+  visitor.apply(*this);
+}
+
+void
+NumericPortInfo::accept(ConstNodeVisitor& visitor) const
+{
+  visitor.apply(*this);
+}
+
+void
+MechanicLinkInfo::accept(NodeVisitor& visitor) const
+{
+  visitor.apply(*this);
+}
+
+void
+MechanicLinkInfo::accept(ConstNodeVisitor& visitor) const
+{
+  visitor.apply(*this);
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-10-17 04:33:52 UTC (rev 626)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortInfo.h	2008-10-17 05:15:43 UTC (rev 627)
@@ -23,7 +23,9 @@
 // PortHandle?? Hmmm??
 // Port : NodeId, PortId ???
 
+class ConstNodeVisitor;
 class Node;
+class NodeVisitor;
 
 class NumericPortInfo;
 class InputPortInfo;
@@ -38,6 +40,11 @@
   const std::string& getName() const { return mName; }
   void setName(const std::string& name);
 
+  // Note that both are const methods.
+  // That is only the owner nodes can modify them.
+  virtual void accept(NodeVisitor& visitor) const;
+  virtual void accept(ConstNodeVisitor& visitor) const;
+
   bool getOptional() const { return mOptional; }
   void setOptional(bool optional) { mOptional = optional; }
 
@@ -94,6 +101,9 @@
   virtual ~NumericPortInfo()
   { }
 
+  virtual void accept(NodeVisitor& visitor) const;
+  virtual void accept(ConstNodeVisitor& visitor) const;
+
   virtual const NumericPortInfo* toNumericPortInfo() const
   { return this; }
 
@@ -178,6 +188,9 @@
   virtual ~MechanicLinkInfo()
   { }
 
+  virtual void accept(NodeVisitor& visitor) const;
+  virtual void accept(ConstNodeVisitor& visitor) const;
+
   virtual const MechanicLinkInfo* toMechanicLinkInfo() const
   { return this; }
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h	2008-10-17 04:33:52 UTC (rev 626)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/PortValueList.h	2008-10-17 05:15:43 UTC (rev 627)
@@ -107,7 +107,11 @@
   {
     if (!portInfo)
       return 0;
-    const PortValue* portValue = getPortValue(portInfo->getIndex());
+    return getPortValue(*portInfo);
+  }
+  const NumericPortValue* getPortValue(const NumericPortInfo& portInfo) const
+  {
+    const PortValue* portValue = getPortValue(portInfo.getIndex());
     if (!portValue)
       return 0;
     return portValue->toNumericPortValue();
@@ -117,7 +121,11 @@
   {
     if (!portInfo)
       return 0;
-    const PortValue* portValue = getPortValue(portInfo->getIndex());
+    return getPortValue(*portInfo);
+  }
+  const MechanicLinkValue* getPortValue(const MechanicLinkInfo& portInfo) const
+  {
+    const PortValue* portValue = getPortValue(portInfo.getIndex());
     if (!portValue)
       return 0;
     return portValue->toMechanicLinkValue();

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.h	2008-10-17 04:33:52 UTC (rev 626)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.h	2008-10-17 05:15:43 UTC (rev 627)
@@ -25,14 +25,14 @@
     system->getNode()->accept(*this);
   }
 
-  virtual void apply(const PortInfo* portInfo, const PortValue* portValue)
+  virtual void apply(const PortInfo& portInfo, const PortValue* portValue)
   { }
-  virtual void apply(const PortInfo* portInfo,
+  virtual void apply(const NumericPortInfo& portInfo,
                      const NumericPortValue* numericPortValue)
-  { apply(portInfo, static_cast<const PortValue*>(numericPortValue)); }
-  virtual void apply(const PortInfo* portInfo,
+  { apply(static_cast<const PortInfo&>(portInfo), static_cast<const PortValue*>(numericPortValue)); }
+  virtual void apply(const MechanicLinkInfo& portInfo,
                      const MechanicLinkValue* mechanicPortValue)
-  { apply(portInfo, static_cast<const PortValue*>(mechanicPortValue)); }
+  { apply(static_cast<const PortInfo&>(portInfo), static_cast<const PortValue*>(mechanicPortValue)); }
 
   static SystemOutput* newDefaultSystemOutput(const std::string& filename);
 
@@ -44,34 +44,28 @@
       return 0;
     return system->getNodeInstance(nodePath);
   }
-  void appendPortValues(const Node&)
+  virtual void apply(const NumericPortInfo& portInfo)
   {
     const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
     if (!nodeInstance)
       return;
-    appendPortValues(*nodeInstance);
+    apply(portInfo, nodeInstance->getPortValueList().getPortValue(portInfo));
   }
-  void appendPortValues(const AbstractNodeInstance& nodeInstance)
+  virtual void apply(const MechanicLinkInfo& portInfo)
   {
-    unsigned numPorts = nodeInstance.getNode().getNumPorts();
-    for (unsigned i = 0; i < numPorts; ++i) {
-      const PortValue* portValue;
-      portValue = nodeInstance.getPortValueList().getPortValue(i);
-      const NumericPortValue* npv = portValue->toNumericPortValue();
-      if (npv) {
-        apply(nodeInstance.getNode().getPort(i), npv);
-        continue;
-      }
-
-      const MechanicLinkValue* mpv = portValue->toMechanicLinkValue();
-      if (mpv) {
-        apply(nodeInstance.getNode().getPort(i), mpv);
-        continue;
-      }
-
-      apply(nodeInstance.getNode().getPort(i), portValue);
-    }
+    const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
+    if (!nodeInstance)
+      return;
+    apply(portInfo, nodeInstance->getPortValueList().getPortValue(portInfo));
   }
+  virtual void apply(const PortInfo& portInfo)
+  {
+    const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
+    if (!nodeInstance)
+      return;
+    unsigned i = portInfo.getIndex();
+    apply(portInfo, nodeInstance->getPortValueList().getPortValue(i));
+  }
 
 private:
   WeakPtr<const System> mSystem;



From frohlich at mail.berlios.de  Fri Oct 17 07:38:05 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 17 Oct 2008 07:38:05 +0200
Subject: [OpenFDM-svn] r628 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810170538.m9H5c5wX016274@sheep.berlios.de>

Author: frohlich
Date: 2008-10-17 07:38:03 +0200 (Fri, 17 Oct 2008)
New Revision: 628

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.h
Log:
Make the systemoutput more abstract.

M    src/OpenFDM/SystemOutput.cpp
M    src/OpenFDM/System.cpp
M    src/OpenFDM/SystemOutput.h
M    src/OpenFDM/HDF5SystemOutput.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2008-10-17 05:15:43 UTC (rev 627)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2008-10-17 05:38:03 UTC (rev 628)
@@ -10,6 +10,8 @@
 #include <hdf5.h>
 #include "Group.h"
 #include "SystemOutput.h"
+#include "ConstNodeVisitor.h"
+#include "NodeInstance.h"
 
 namespace OpenFDM {
 
@@ -263,7 +265,7 @@
   HDF5Object _dataspace;
 };
 
-class HDF5SystemOutput : public SystemOutput {
+class HDF5SystemOutput : public SystemOutput, public ConstNodeVisitor {
 public:
   HDF5SystemOutput(const std::string& filename) :
     mHDF5File(filename),
@@ -282,6 +284,36 @@
       (*i)->append();
   }
 
+  virtual void attachTo(const System* system)
+  {
+    if (!system)
+      return;
+    system->getNode()->accept(*this);
+  }
+
+  const AbstractNodeInstance* getNodeInstance(const NodePath& nodePath) const
+  {
+    SharedPtr<const System> system = getSystem();
+    if (!system)
+      return 0;
+    return system->getNodeInstance(nodePath);
+  }
+
+  virtual void apply(const NumericPortInfo& portInfo)
+  {
+    const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
+    if (!nodeInstance)
+      return;
+    apply(portInfo, nodeInstance->getPortValueList().getPortValue(portInfo));
+  }
+  virtual void apply(const MechanicLinkInfo& portInfo)
+  {
+    const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
+    if (!nodeInstance)
+      return;
+    apply(portInfo, nodeInstance->getPortValueList().getPortValue(portInfo));
+  }
+
   virtual void apply(const NumericPortInfo& portInfo,
                      const NumericPortValue* numericPortValue)
   {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-17 05:15:43 UTC (rev 627)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-17 05:38:03 UTC (rev 628)
@@ -900,7 +900,7 @@
 
   SystemOutputList::const_iterator j;
   for (j = mSystemOutputList.begin(); j != mSystemOutputList.end(); ++j)
-    (*j)->attachTo(this);
+    (*j)->setSystem(this);
   
   // Hmm, really here???
   mAbstractSystem->init(t0);
@@ -917,7 +917,7 @@
 
   SystemOutputList::const_iterator i;
   for (i = mSystemOutputList.begin(); i != mSystemOutputList.end(); ++i)
-    (*i)->attachTo(0);
+    (*i)->setSystem(0);
 }
 
 /// Simulate the system until the time tEnd
@@ -978,7 +978,7 @@
   mSystemOutputList.push_back(systemLog);
   if (!mAbstractSystem)
     return;
-  systemLog->attachTo(this);
+  systemLog->setSystem(this);
 }
 
 void
@@ -989,7 +989,7 @@
     if (*i == systemLog) {
       i = mSystemOutputList.erase(i);
       if (mAbstractSystem)
-        systemLog->attachTo(0);
+        systemLog->setSystem(0);
     } else
       ++i;
   }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.cpp	2008-10-17 05:15:43 UTC (rev 627)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.cpp	2008-10-17 05:38:03 UTC (rev 628)
@@ -18,6 +18,12 @@
 {
 }
 
+void SystemOutput::setSystem(const System* system)
+{
+  mSystem = system;
+  attachTo(system);
+}
+
 SystemOutput*
 SystemOutput::newDefaultSystemOutput(const std::string& filename)
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.h	2008-10-17 05:15:43 UTC (rev 627)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/SystemOutput.h	2008-10-17 05:38:03 UTC (rev 628)
@@ -6,66 +6,23 @@
 #define OpenFDM_SystemOutput_H
 
 #include "System.h"
-#include "ConstNodeVisitor.h"
-#include "NodeInstance.h"
 
 namespace OpenFDM {
 
-class SystemOutput : public ConstNodeVisitor {
+class SystemOutput : public Referenced {
 public:
   virtual ~SystemOutput();
 
-  virtual void output(const real_type& t) = 0;
+  void setSystem(const System* system);
 
-  void attachTo(const System* system)
-  {
-    mSystem = system;
-    if (!system)
-      return;
-    system->getNode()->accept(*this);
-  }
-
-  virtual void apply(const PortInfo& portInfo, const PortValue* portValue)
-  { }
-  virtual void apply(const NumericPortInfo& portInfo,
-                     const NumericPortValue* numericPortValue)
-  { apply(static_cast<const PortInfo&>(portInfo), static_cast<const PortValue*>(numericPortValue)); }
-  virtual void apply(const MechanicLinkInfo& portInfo,
-                     const MechanicLinkValue* mechanicPortValue)
-  { apply(static_cast<const PortInfo&>(portInfo), static_cast<const PortValue*>(mechanicPortValue)); }
-
   static SystemOutput* newDefaultSystemOutput(const std::string& filename);
 
+  virtual void output(const real_type& t) = 0;
+  virtual void attachTo(const System* system) = 0;
+
 protected:
-  const AbstractNodeInstance* getNodeInstance(const NodePath& nodePath) const
-  {
-    SharedPtr<const System> system = mSystem.lock();
-    if (!system)
-      return 0;
-    return system->getNodeInstance(nodePath);
-  }
-  virtual void apply(const NumericPortInfo& portInfo)
-  {
-    const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
-    if (!nodeInstance)
-      return;
-    apply(portInfo, nodeInstance->getPortValueList().getPortValue(portInfo));
-  }
-  virtual void apply(const MechanicLinkInfo& portInfo)
-  {
-    const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
-    if (!nodeInstance)
-      return;
-    apply(portInfo, nodeInstance->getPortValueList().getPortValue(portInfo));
-  }
-  virtual void apply(const PortInfo& portInfo)
-  {
-    const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
-    if (!nodeInstance)
-      return;
-    unsigned i = portInfo.getIndex();
-    apply(portInfo, nodeInstance->getPortValueList().getPortValue(i));
-  }
+  SharedPtr<const System> getSystem() const
+  { return mSystem.lock(); }
 
 private:
   WeakPtr<const System> mSystem;



From frohlich at mail.berlios.de  Fri Oct 17 14:53:37 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 17 Oct 2008 14:53:37 +0200
Subject: [OpenFDM-svn] r629 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810171253.m9HCrbO2019808@sheep.berlios.de>

Author: frohlich
Date: 2008-10-17 14:53:37 +0200 (Fri, 17 Oct 2008)
New Revision: 629

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.h
Log:
Remove Referenced base from the visitors.

M    src/OpenFDM/NodeVisitor.h
M    src/OpenFDM/System.h
M    src/OpenFDM/ConstNodeVisitor.h
M    src/OpenFDM/System.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h	2008-10-17 05:38:03 UTC (rev 628)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ConstNodeVisitor.h	2008-10-17 12:53:37 UTC (rev 629)
@@ -7,7 +7,6 @@
 
 #include "Assert.h"
 #include "Node.h"
-#include "Referenced.h"
 
 namespace OpenFDM {
 
@@ -28,7 +27,7 @@
 class NumericPortInfo;
 class MechanicLinkInfo;
 
-class ConstNodeVisitor : public Referenced {
+class ConstNodeVisitor {
 public:
   virtual ~ConstNodeVisitor();
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h	2008-10-17 05:38:03 UTC (rev 628)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/NodeVisitor.h	2008-10-17 12:53:37 UTC (rev 629)
@@ -7,7 +7,6 @@
 
 #include "Assert.h"
 #include "Node.h"
-#include "Referenced.h"
 
 namespace OpenFDM {
 
@@ -28,7 +27,7 @@
 class NumericPortInfo;
 class MechanicLinkInfo;
 
-class NodeVisitor : public Referenced {
+class NodeVisitor {
 public:
   virtual ~NodeVisitor();
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-17 05:38:03 UTC (rev 628)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-17 12:53:37 UTC (rev 629)
@@ -973,23 +973,27 @@
 }
 
 void
-System::attach(SystemOutput* systemLog)
+System::attach(SystemOutput* systemOutput)
 {
-  mSystemOutputList.push_back(systemLog);
+  if (!systemOutput)
+    return;
+  mSystemOutputList.push_back(systemOutput);
   if (!mAbstractSystem)
     return;
-  systemLog->setSystem(this);
+  systemOutput->setSystem(this);
 }
 
 void
-System::detach(SystemOutput* systemLog)
+System::detach(SystemOutput* systemOutput)
 {
+  if (!systemOutput)
+    return;
   SystemOutputList::iterator i = mSystemOutputList.begin();
   while (i != mSystemOutputList.end()) {
-    if (*i == systemLog) {
+    if (*i == systemOutput) {
       i = mSystemOutputList.erase(i);
       if (mAbstractSystem)
-        systemLog->setSystem(0);
+        systemOutput->setSystem(0);
     } else
       ++i;
   }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.h	2008-10-17 05:38:03 UTC (rev 628)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.h	2008-10-17 12:53:37 UTC (rev 629)
@@ -56,8 +56,8 @@
   const AbstractNodeInstance* getNodeInstance(const NodePath& nodePath) const;
   AbstractNodeInstance* getNodeInstance(const NodePath& nodePath);
 
-  void attach(SystemOutput* systemLog);
-  void detach(SystemOutput* systemLog);
+  void attach(SystemOutput* systemOutput);
+  void detach(SystemOutput* systemOutput);
 
 private:
   class NodeInstanceCollector;



From frohlich at mail.berlios.de  Fri Oct 17 15:13:08 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 17 Oct 2008 15:13:08 +0200
Subject: [OpenFDM-svn] r630 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810171313.m9HDD8xp021484@sheep.berlios.de>

Author: frohlich
Date: 2008-10-17 15:13:07 +0200 (Fri, 17 Oct 2008)
New Revision: 630

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
Log:
Remove tempoprary multiple inheritance.

M    src/OpenFDM/HDF5SystemOutput.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2008-10-17 12:53:37 UTC (rev 629)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2008-10-17 13:13:07 UTC (rev 630)
@@ -265,17 +265,16 @@
   HDF5Object _dataspace;
 };
 
-class HDF5SystemOutput : public SystemOutput, public ConstNodeVisitor {
+class HDF5SystemOutput : public SystemOutput {
 public:
   HDF5SystemOutput(const std::string& filename) :
     mHDF5File(filename),
-    mCurrentGroup(mHDF5File, "System"),
-    mTimeStream(mCurrentGroup, "t", Size(1, 1))
+    mToplevelGroup(mHDF5File, "System"),
+    mTimeStream(mToplevelGroup, "t", Size(1, 1))
   { }
-  ~HDF5SystemOutput()
+  virtual ~HDF5SystemOutput()
   { }
 
-// private:
   void output(const real_type& t)
   {
     mTimeStream.append(t);
@@ -286,142 +285,19 @@
 
   virtual void attachTo(const System* system)
   {
+    mDumperList.clear();
     if (!system)
       return;
-    system->getNode()->accept(*this);
+    Visitor visitor(mToplevelGroup, system);
+    system->getNode()->accept(visitor);
+    mDumperList = visitor.mDumperList;
   }
 
-  const AbstractNodeInstance* getNodeInstance(const NodePath& nodePath) const
-  {
-    SharedPtr<const System> system = getSystem();
-    if (!system)
-      return 0;
-    return system->getNodeInstance(nodePath);
-  }
-
-  virtual void apply(const NumericPortInfo& portInfo)
-  {
-    const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
-    if (!nodeInstance)
-      return;
-    apply(portInfo, nodeInstance->getPortValueList().getPortValue(portInfo));
-  }
-  virtual void apply(const MechanicLinkInfo& portInfo)
-  {
-    const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
-    if (!nodeInstance)
-      return;
-    apply(portInfo, nodeInstance->getPortValueList().getPortValue(portInfo));
-  }
-
-  virtual void apply(const NumericPortInfo& portInfo,
-                     const NumericPortValue* numericPortValue)
-  {
-    OpenFDMAssert(mCurrentPortValuesGroup.valid());
-    std::string name = portInfo.getName();
-    name = mCurrentPortValuesUniqueStringSet.makeUnique(name);
-
-    if (mPortValueMap.find(numericPortValue) == mPortValueMap.end()) {
-      MatrixDumper* dumper;
-      dumper = new MatrixDumper(numericPortValue,
-                                mCurrentPortValuesGroup, name);
-      mPortValueMap[numericPortValue] = dumper;
-      mDumperList.push_back(dumper);
-    } else {
-      mCurrentPortValuesGroup.link(mPortValueMap.find(numericPortValue)->second->getObject(), name);
-    }
-  }
-  virtual void apply(const MechanicLinkInfo& portInfo,
-                     const MechanicLinkValue* mechanicLinkValue)
-  {
-    OpenFDMAssert(mCurrentPortValuesGroup.valid());
-    std::string name = portInfo.getName();
-    name = mCurrentPortValuesUniqueStringSet.makeUnique(name);
-
-    if (mPortValueMap.find(mechanicLinkValue) == mPortValueMap.end()) {
-      MechanicDumper* dumper;
-      dumper = new MechanicDumper(mechanicLinkValue,
-                                  mCurrentPortValuesGroup, name);
-      mPortValueMap[mechanicLinkValue] = dumper;
-      mDumperList.push_back(dumper);
-    } else {
-      mCurrentPortValuesGroup.link(mPortValueMap.find(mechanicLinkValue)->second->getObject(), name);
-    }
-  }
-
-  void appendPortValues(const Node& node)
-  {
-    if (!node.getNumPorts())
-      return;
-    OpenFDMAssert(mCurrentGroup.valid());
-    mCurrentPortValuesGroup = HDF5Group(mCurrentGroup, "portValues");
-    node.traversePorts(*this);
-    mCurrentPortValuesGroup = HDF5Group();
-    mCurrentPortValuesUniqueStringSet = UniqueStringSet();
-  }
-
-  virtual void apply(const Node& node)
-  {
-    HDF5Group parentGroup = mCurrentGroup;
-    OpenFDMAssert(mCurrentGroup.valid());
-    std::string name = node.getName();
-    name = mCurrentGroupUniqueStringSet.makeUnique(name);
-    mCurrentGroup = HDF5Group(parentGroup, name);
-    appendPortValues(node);
-    mCurrentGroup = parentGroup;
-  }
-  virtual void apply(const Group& group)
-  {
-    HDF5Group parentGroup = mCurrentGroup;
-    OpenFDMAssert(mCurrentGroup.valid());
-    std::string name = group.getName();
-    name = mCurrentGroupUniqueStringSet.makeUnique(name);
-    mCurrentGroup = HDF5Group(parentGroup, name);
-
-    appendPortValues(group);
-
-    UniqueStringSet parentUniqueStringSet;
-    parentUniqueStringSet.swap(mCurrentGroupUniqueStringSet);
-    group.traverse(*this);
-    parentUniqueStringSet.swap(mCurrentGroupUniqueStringSet);
-
-    mCurrentGroup = parentGroup;
-  }
-
-  // Helper class that makes names unique ...
-  struct UniqueStringSet {
-    UniqueStringSet()
-    { _strings.insert(""); }
-    std::string makeUnique(const std::string& s)
-    {
-      if (_strings.find(s) == _strings.end()) {
-        _strings.insert(s);
-        return s;
-      }
-      std::string unique;
-      unsigned id = 0;
-      do {
-        std::stringstream ss;
-        ss << s << ++id;
-        unique = ss.str();
-      } while (_strings.find(unique) != _strings.end());
-      return unique;
-    }
-    void swap(UniqueStringSet& other)
-    { _strings.swap(other._strings); }
-  private:
-    std::set<std::string> _strings;
-  };
-
+private:
   HDF5File mHDF5File;
-  HDF5Group mCurrentGroup;
+  HDF5Group mToplevelGroup;
   HDFMatrixStream mTimeStream;
 
-  UniqueStringSet mCurrentPortValuesUniqueStringSet;
-  UniqueStringSet mCurrentGroupUniqueStringSet;
-
-  HDF5Group mCurrentPortValuesGroup;
-
   struct Dumper : public Referenced {
     virtual ~Dumper() {}
     virtual void append() = 0;
@@ -480,11 +356,152 @@
     HDFMatrixStream _inertia;
   };
 
-  typedef std::map<const PortValue*,SharedPtr<Dumper> > PortValueMap;
-  PortValueMap mPortValueMap;
-
   typedef std::list<SharedPtr<Dumper> > DumperList;
   DumperList mDumperList;
+
+  class Visitor : public ConstNodeVisitor {
+  public:
+    Visitor(const HDF5Group& group, const System* system) :
+      mSystem(system),
+      mCurrentGroup(group)
+    { }
+    
+    SharedPtr<const System> mSystem;
+    
+    const AbstractNodeInstance* getNodeInstance(const NodePath& nodePath) const
+    {
+      if (!mSystem)
+        return 0;
+      return mSystem->getNodeInstance(nodePath);
+    }
+    
+    virtual void apply(const NumericPortInfo& portInfo)
+    {
+      const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
+      if (!nodeInstance)
+        return;
+      apply(portInfo, nodeInstance->getPortValueList().getPortValue(portInfo));
+    }
+    virtual void apply(const MechanicLinkInfo& portInfo)
+    {
+      const AbstractNodeInstance* nodeInstance = getNodeInstance(getNodePath());
+      if (!nodeInstance)
+        return;
+      apply(portInfo, nodeInstance->getPortValueList().getPortValue(portInfo));
+    }
+    
+    virtual void apply(const NumericPortInfo& portInfo,
+                       const NumericPortValue* numericPortValue)
+    {
+      OpenFDMAssert(mCurrentPortValuesGroup.valid());
+      std::string name = portInfo.getName();
+      name = mCurrentPortValuesUniqueStringSet.makeUnique(name);
+      
+      if (mPortValueMap.find(numericPortValue) == mPortValueMap.end()) {
+        MatrixDumper* dumper;
+        dumper = new MatrixDumper(numericPortValue,
+                                  mCurrentPortValuesGroup, name);
+        mPortValueMap[numericPortValue] = dumper;
+        mDumperList.push_back(dumper);
+      } else {
+        mCurrentPortValuesGroup.link(mPortValueMap.find(numericPortValue)->second->getObject(), name);
+      }
+    }
+    virtual void apply(const MechanicLinkInfo& portInfo,
+                       const MechanicLinkValue* mechanicLinkValue)
+    {
+      OpenFDMAssert(mCurrentPortValuesGroup.valid());
+      std::string name = portInfo.getName();
+      name = mCurrentPortValuesUniqueStringSet.makeUnique(name);
+      
+      if (mPortValueMap.find(mechanicLinkValue) == mPortValueMap.end()) {
+        MechanicDumper* dumper;
+        dumper = new MechanicDumper(mechanicLinkValue,
+                                    mCurrentPortValuesGroup, name);
+        mPortValueMap[mechanicLinkValue] = dumper;
+        mDumperList.push_back(dumper);
+      } else {
+        mCurrentPortValuesGroup.link(mPortValueMap.find(mechanicLinkValue)->second->getObject(), name);
+      }
+    }
+    
+    void appendPortValues(const Node& node)
+    {
+      if (!node.getNumPorts())
+        return;
+      OpenFDMAssert(mCurrentGroup.valid());
+      mCurrentPortValuesGroup = HDF5Group(mCurrentGroup, "portValues");
+      node.traversePorts(*this);
+      mCurrentPortValuesGroup = HDF5Group();
+      mCurrentPortValuesUniqueStringSet = UniqueStringSet();
+    }
+    
+    virtual void apply(const Node& node)
+    {
+      HDF5Group parentGroup = mCurrentGroup;
+      OpenFDMAssert(mCurrentGroup.valid());
+      std::string name = node.getName();
+      name = mCurrentGroupUniqueStringSet.makeUnique(name);
+      mCurrentGroup = HDF5Group(parentGroup, name);
+      appendPortValues(node);
+      mCurrentGroup = parentGroup;
+    }
+    virtual void apply(const Group& group)
+    {
+      HDF5Group parentGroup = mCurrentGroup;
+      OpenFDMAssert(mCurrentGroup.valid());
+      std::string name = group.getName();
+      name = mCurrentGroupUniqueStringSet.makeUnique(name);
+      mCurrentGroup = HDF5Group(parentGroup, name);
+      
+      appendPortValues(group);
+      
+      UniqueStringSet parentUniqueStringSet;
+      parentUniqueStringSet.swap(mCurrentGroupUniqueStringSet);
+      group.traverse(*this);
+      parentUniqueStringSet.swap(mCurrentGroupUniqueStringSet);
+      
+      mCurrentGroup = parentGroup;
+    }
+    
+    // Helper class that makes names unique ...
+    struct UniqueStringSet {
+      UniqueStringSet()
+      { _strings.insert(""); }
+      std::string makeUnique(const std::string& s)
+      {
+        if (_strings.find(s) == _strings.end()) {
+          _strings.insert(s);
+          return s;
+        }
+        std::string unique;
+        unsigned id = 0;
+        do {
+          std::stringstream ss;
+          ss << s << ++id;
+          unique = ss.str();
+        } while (_strings.find(unique) != _strings.end());
+        return unique;
+      }
+      void swap(UniqueStringSet& other)
+      { _strings.swap(other._strings); }
+    private:
+      std::set<std::string> _strings;
+    };
+    
+    HDF5Group mCurrentGroup;
+    
+    UniqueStringSet mCurrentPortValuesUniqueStringSet;
+    UniqueStringSet mCurrentGroupUniqueStringSet;
+    
+    HDF5Group mCurrentPortValuesGroup;
+    
+    typedef std::map<const PortValue*,SharedPtr<Dumper> > PortValueMap;
+    PortValueMap mPortValueMap;
+    
+    typedef std::list<SharedPtr<Dumper> > DumperList;
+    DumperList mDumperList;
+  };
 };
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Fri Oct 17 15:41:57 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 17 Oct 2008 15:41:57 +0200
Subject: [OpenFDM-svn] r631 - trunk/OpenFDM/src/OpenFDM
Message-ID: <200810171341.m9HDfv4L024143@sheep.berlios.de>

Author: frohlich
Date: 2008-10-17 15:41:57 +0200 (Fri, 17 Oct 2008)
New Revision: 631

Modified:
   trunk/OpenFDM/src/OpenFDM/CartesianJointFrame.h
Log:
Remove unused member of the joints.

M    src/OpenFDM/CartesianJointFrame.h


Modified: trunk/OpenFDM/src/OpenFDM/CartesianJointFrame.h
===================================================================
--- trunk/OpenFDM/src/OpenFDM/CartesianJointFrame.h	2008-10-17 13:13:07 UTC (rev 630)
+++ trunk/OpenFDM/src/OpenFDM/CartesianJointFrame.h	2008-10-17 13:41:57 UTC (rev 631)
@@ -26,7 +26,6 @@
     Frame(name),
 //     mJointMatrix(Matrix6N::zeros()), /// ??? ... see LinAlg checkout ...
     mOutboardInertia(SpatialInertia::zeros()),
-    mOutboardForce(Vector6::zeros()),
     mPAlpha(Vector6::zeros()),
     mJointForce(VectorN::zeros()),
     mArticulationDirty(true),
@@ -82,7 +81,6 @@
     // Store the outboard values since we will need them later in velocity
     // derivative computations
     mOutboardInertia = outI;
-    mOutboardForce = outF;
     mJointForce = jointForce;
     // Make sure we have the correct internal state
     mJointVelDotDirty = true;
@@ -92,7 +90,7 @@
     Matrix6N Ih = outI*mJointMatrix;
     hIh = trans(mJointMatrix)*Ih;
 
-    mPAlpha = mOutboardForce + mOutboardInertia*getHdot();
+    mPAlpha = outF + mOutboardInertia*getHdot();
     artF = mPAlpha;
     artI = outI;
 
@@ -110,14 +108,6 @@
     return true;
   }
 
-  VectorN forceForAccel(const Vector6& outF, const SpatialInertia& outI,
-                        const VectorN& jointAccel)
-  {
-    Vector6 pAlpha = outF + outI*getHdot();
-    Vector6 Ih = outI*mJointMatrix;
-    return trans(mJointMatrix)*(Ih*jointAccel + pAlpha);
-  }
-
 protected:
   const Matrix6N& getJointMatrix(void) const
   { return mJointMatrix; }
@@ -150,8 +140,6 @@
 
   /// The articulated intertia of the outboard frame, 
   SpatialInertia mOutboardInertia;
-  /// The articulated force of the outboard frame, 
-  Vector6 mOutboardForce;
   /// The joint internal force in joint generalized coordinates
   VectorN mJointForce;
   /// Some intermediate value we will need later



From frohlich at mail.berlios.de  Fri Oct 17 15:45:05 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Fri, 17 Oct 2008 15:45:05 +0200
Subject: [OpenFDM-svn] r632 - in branches/OpenFDM-StateSeparation: .
	src/OpenFDM
Message-ID: <200810171345.m9HDj5UE024859@sheep.berlios.de>

Author: frohlich
Date: 2008-10-17 15:45:05 +0200 (Fri, 17 Oct 2008)
New Revision: 632

Modified:
   branches/OpenFDM-StateSeparation/MERGE-REVISION
   branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJointFrame.h
Log:
Merge trunk 459:631

M    src/OpenFDM/CartesianJointFrame.h
M    MERGE-REVISION


Modified: branches/OpenFDM-StateSeparation/MERGE-REVISION
===================================================================
--- branches/OpenFDM-StateSeparation/MERGE-REVISION	2008-10-17 13:41:57 UTC (rev 631)
+++ branches/OpenFDM-StateSeparation/MERGE-REVISION	2008-10-17 13:45:05 UTC (rev 632)
@@ -1 +1 @@
-459
+631

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJointFrame.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJointFrame.h	2008-10-17 13:41:57 UTC (rev 631)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/CartesianJointFrame.h	2008-10-17 13:45:05 UTC (rev 632)
@@ -26,7 +26,6 @@
     Frame(name),
 //     mJointMatrix(Matrix6N::zeros()), /// ??? ... see LinAlg checkout ...
     mOutboardInertia(SpatialInertia::zeros()),
-    mOutboardForce(Vector6::zeros()),
     mPAlpha(Vector6::zeros()),
     mJointForce(VectorN::zeros()),
     mArticulationDirty(true),
@@ -82,7 +81,6 @@
     // Store the outboard values since we will need them later in velocity
     // derivative computations
     mOutboardInertia = outI;
-    mOutboardForce = outF;
     mJointForce = jointForce;
     // Make sure we have the correct internal state
     mJointVelDotDirty = true;
@@ -92,7 +90,7 @@
     Matrix6N Ih = outI*mJointMatrix;
     hIh = trans(mJointMatrix)*Ih;
 
-    mPAlpha = mOutboardForce + mOutboardInertia*getHdot();
+    mPAlpha = outF + mOutboardInertia*getHdot();
     artF = mPAlpha;
     artI = outI;
 
@@ -110,14 +108,6 @@
     return true;
   }
 
-  VectorN forceForAccel(const Vector6& outF, const SpatialInertia& outI,
-                        const VectorN& jointAccel)
-  {
-    Vector6 pAlpha = outF + outI*getHdot();
-    Vector6 Ih = outI*mJointMatrix;
-    return trans(mJointMatrix)*(Ih*jointAccel + pAlpha);
-  }
-
 protected:
   const Matrix6N& getJointMatrix(void) const
   { return mJointMatrix; }
@@ -150,8 +140,6 @@
 
   /// The articulated intertia of the outboard frame, 
   SpatialInertia mOutboardInertia;
-  /// The articulated force of the outboard frame, 
-  Vector6 mOutboardForce;
   /// The joint internal force in joint generalized coordinates
   VectorN mJointForce;
   /// Some intermediate value we will need later



From frohlich at mail.berlios.de  Sun Oct 19 13:28:39 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 19 Oct 2008 13:28:39 +0200
Subject: [OpenFDM-svn] r633 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810191128.m9JBSdVI008373@sheep.berlios.de>

Author: frohlich
Date: 2008-10-19 13:28:38 +0200 (Sun, 19 Oct 2008)
New Revision: 633

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
Log:
Do not store the parents spatial acceleration in the context.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-17 13:45:05 UTC (rev 632)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-19 11:28:38 UTC (rev 633)
@@ -50,9 +50,7 @@
   bool isConnectedTo(const MechanicContext& mechanicContext) const;
 
   // Stores some values persistent accross velocity/articulation/acceleration
-  unsigned mParentLinkIndex;
   Vector6 mParentSpVel;
-  Vector6 mParentSpAccel;
   Vector6 mHDot;
   Vector6 mRelVelDot;
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-17 13:45:05 UTC (rev 632)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-19 11:28:38 UTC (rev 633)
@@ -59,7 +59,6 @@
                                                   getAngularBaseVelocity());
 
   context.mParentSpVel = parentSpatialVelocity;
-  context.mParentSpAccel = Vector6::zeros();
   Vector6 pivel = parentSpatialVelocity;
   context.mHDot = Vector6(cross(pivel.getAngular(), velocity.getAngular()),
                           cross(pivel.getAngular(), velocity.getLinear()) + 
@@ -94,9 +93,11 @@
   SpatialInertia inertia = portValues[mMechanicLink].mArticulatedInertia;
   Vector6 force = portValues[mMechanicLink].mArticulatedForce;
 
+  Vector6 parentSpAccel = Vector6::zeros();
+
   // FIXME
 //   mRelVelDot = grav - solve(inertia, force) - getParentSpAccel() - getHdot();
-  Vector6 acceleration = grav - solve(inertia, force) - context.mParentSpAccel - context.mHDot;
+  Vector6 acceleration = grav - solve(inertia, force) - parentSpAccel - context.mHDot;
   context.mRelVelDot = acceleration;
 
   portValues[mMechanicLink].mSpatialAcceleration = acceleration;



From frohlich at mail.berlios.de  Sun Oct 19 14:03:03 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 19 Oct 2008 14:03:03 +0200
Subject: [OpenFDM-svn] r634 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810191203.m9JC33EA031410@sheep.berlios.de>

Author: frohlich
Date: 2008-10-19 14:03:02 +0200 (Sun, 19 Oct 2008)
New Revision: 634

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h
Log:
Do not require to have a full context available in the mechanic system.

M    src/OpenFDM/MobileRootJoint.cpp
M    src/OpenFDM/MechanicContext.h
M    src/OpenFDM/MobileRootJoint.h
M    src/OpenFDM/MechanicNode.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-19 11:28:38 UTC (rev 633)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-19 12:03:02 UTC (rev 634)
@@ -18,6 +18,13 @@
 class DiscreteTask;
 class InitTask;
 
+struct FrameData {
+  // Stores some values persistent accross velocity/articulation/acceleration
+  Vector6 mParentSpVel;
+  Vector6 mHDot;
+  Vector6 mRelVelDot;
+};
+
 class MechanicContext : public LeafContext {
 public:
   MechanicContext(const MechanicNode* mechanicNode);
@@ -31,15 +38,15 @@
   { mMechanicNode->init(task, mDiscreteState, mContinousState, mPortValueList); }
 
   void velocities(const Task& task)
-  { mMechanicNode->velocity(task, mContinousState, mPortValueList, *this); }
+  { mMechanicNode->velocity(task, mContinousState, mPortValueList, mFrameData); }
   void articulation(const Task& task)
-  { mMechanicNode->articulation(task, mContinousState, mPortValueList, *this); }
+  { mMechanicNode->articulation(task, mContinousState, mPortValueList, mFrameData); }
   void accelerations(const Task& task)
-  { mMechanicNode->acceleration(task, mContinousState, mPortValueList, *this); }
+  { mMechanicNode->acceleration(task, mContinousState, mPortValueList, mFrameData); }
 
   void derivative(const Task&)
   { mMechanicNode->derivative(mDiscreteState, mContinousState, mPortValueList,
-                              *this, mContinousStateDerivative); }
+                              mFrameData, mContinousStateDerivative); }
  
   void update(const DiscreteTask& discreteTask)
   {
@@ -50,9 +57,7 @@
   bool isConnectedTo(const MechanicContext& mechanicContext) const;
 
   // Stores some values persistent accross velocity/articulation/acceleration
-  Vector6 mParentSpVel;
-  Vector6 mHDot;
-  Vector6 mRelVelDot;
+  FrameData mFrameData;
 
 private:
   SharedPtr<const MechanicNode> mMechanicNode;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h	2008-10-19 11:28:38 UTC (rev 633)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicNode.h	2008-10-19 12:03:02 UTC (rev 634)
@@ -15,6 +15,7 @@
 class PortValueList;
 class Task;
 class MechanicContext;
+class FrameData;
 
 class MechanicNode : public LeafNode {
   OPENFDM_OBJECT(MechanicNode, LeafNode);
@@ -29,18 +30,18 @@
   virtual MechanicContext* newMechanicContext() const;
 
   virtual void velocity(const Task&, const ContinousStateValueVector&,
-                        PortValueList&, MechanicContext&) const
+                        PortValueList&, FrameData&) const
   { }
   virtual void articulation(const Task&, const ContinousStateValueVector&,
-                            PortValueList&, MechanicContext&) const
+                            PortValueList&, FrameData&) const
   { }
   // hmm, may be this should be output???
   virtual void acceleration(const Task&, const ContinousStateValueVector&,
-                            PortValueList&, MechanicContext&) const
+                            PortValueList&, FrameData&) const
   { }
   virtual void derivative(const DiscreteStateValueVector&,
                           const ContinousStateValueVector&,
-                          const PortValueList&, MechanicContext&,
+                          const PortValueList&, FrameData&,
                           ContinousStateValueVector&) const
   { }
   virtual void update(const DiscreteTask&, DiscreteStateValueVector&,

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-19 11:28:38 UTC (rev 633)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-19 12:03:02 UTC (rev 634)
@@ -49,7 +49,7 @@
 void
 MobileRootJoint::velocity(const Task&,
                           const ContinousStateValueVector& continousState,
-                          PortValueList& portValues, MechanicContext& context) const
+                          PortValueList& portValues, FrameData& context) const
 {
   Vector3 position = continousState[*mPositionStateInfo];
   Quaternion orientation = continousState[*mOrientationStateInfo];
@@ -71,14 +71,14 @@
 
 void
 MobileRootJoint::articulation(const Task&, const ContinousStateValueVector&,
-                              PortValueList&, MechanicContext&) const
+                              PortValueList&, FrameData&) const
 {
   /// In this case a noop.
 }
 
 void
 MobileRootJoint::acceleration(const Task&, const ContinousStateValueVector&,
-                              PortValueList& portValues, MechanicContext& context) const
+                              PortValueList& portValues, FrameData& context) const
 {
   // Assumption: body is small compared to the distance to the planets
   // center of mass. That means gravity could be considered equal for the
@@ -107,7 +107,7 @@
 MobileRootJoint::derivative(const DiscreteStateValueVector&,
                             const ContinousStateValueVector& continousState,
                             const PortValueList& portValues,
-                            MechanicContext& context,
+                            FrameData& context,
                             ContinousStateValueVector& derivatives) const
 {
   Quaternion orientation = continousState[*mOrientationStateInfo];

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h	2008-10-19 11:28:38 UTC (rev 633)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.h	2008-10-19 12:03:02 UTC (rev 634)
@@ -26,14 +26,14 @@
                     ContinousStateValueVector&,
                     const PortValueList&) const;
   virtual void velocity(const Task&, const ContinousStateValueVector& states,
-                        PortValueList& portValues, MechanicContext&) const;
+                        PortValueList& portValues, FrameData&) const;
   virtual void articulation(const Task&, const ContinousStateValueVector&,
-                            PortValueList& portValues, MechanicContext&) const;
+                            PortValueList& portValues, FrameData&) const;
   virtual void acceleration(const Task&, const ContinousStateValueVector&,
-                            PortValueList& portValues, MechanicContext&) const;
+                            PortValueList& portValues, FrameData&) const;
   virtual void derivative(const DiscreteStateValueVector&,
                           const ContinousStateValueVector&,
-                          const PortValueList& portValues, MechanicContext&,
+                          const PortValueList& portValues, FrameData&,
                           ContinousStateValueVector&) const;
 private:
   MechanicLink mMechanicLink;



From frohlich at mail.berlios.de  Sun Oct 19 20:02:55 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Sun, 19 Oct 2008 20:02:55 +0200
Subject: [OpenFDM-svn] r635 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810191802.m9JI2tkv028753@sheep.berlios.de>

Author: frohlich
Date: 2008-10-19 20:02:55 +0200 (Sun, 19 Oct 2008)
New Revision: 635

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
Log:
Factor out some common code.

M    src/OpenFDM/MobileRootJoint.cpp
M    src/OpenFDM/MechanicContext.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-19 12:03:02 UTC (rev 634)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-19 18:02:55 UTC (rev 635)
@@ -20,9 +20,46 @@
 
 struct FrameData {
   // Stores some values persistent accross velocity/articulation/acceleration
+  // The relative position of the joint wrt the parent frame.
+  Vector3 mRelPosition;
+  // The relative orientation of the joint wrt the parent frame.
+  Rotation mRelOrientation;
+  // The relative velocity of the joint wrt the parent frame.
+  Vector6 mRelVelocity;
+  // The derivative of the relative velosity in the current frame
+  Vector6 mRelVelocityDot;
+
+  // The parents spatial velocity in this frames coordinates
   Vector6 mParentSpVel;
+  // The derivative of the joint axis function?? See Featherstone ...
   Vector6 mHDot;
-  Vector6 mRelVelDot;
+
+
+  void setVelocity(const MechanicLinkValue& parentLink,
+                   const Vector3& relPos, const Quaternion& relOr,
+                   const Vector6& relVel)
+  {
+    mRelPosition = relPos;
+    mRelOrientation = relOr;
+    mRelVelocity = relVel;
+    mParentSpVel = motionTo(mRelPosition, mRelOrientation,
+                            parentLink.mSpatialVelocity);
+    mHDot = Vector6(cross(mParentSpVel.getAngular(), relVel.getAngular()),
+                    cross(mParentSpVel.getAngular(), relVel.getLinear()) +
+                    cross(mParentSpVel.getLinear(), relVel.getAngular()));
+  }
+  void setVelocity(const Vector3& parentAngularVel,
+                   const Vector3& relPos, const Quaternion& relOr,
+                   const Vector6& relVel)
+  {
+    mRelPosition = relPos;
+    mRelOrientation = relOr;
+    mRelVelocity = relVel;
+    mParentSpVel = angularMotionTo(relPos, mRelOrientation, parentAngularVel);
+    mHDot = Vector6(cross(mParentSpVel.getAngular(), relVel.getAngular()),
+                    cross(mParentSpVel.getAngular(), relVel.getLinear()) +
+                    cross(mParentSpVel.getLinear(), relVel.getAngular()));
+  }
 };
 
 class MechanicContext : public LeafContext {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-19 12:03:02 UTC (rev 634)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-19 18:02:55 UTC (rev 635)
@@ -49,24 +49,18 @@
 void
 MobileRootJoint::velocity(const Task&,
                           const ContinousStateValueVector& continousState,
-                          PortValueList& portValues, FrameData& context) const
+                          PortValueList& portValues, FrameData& frameData) const
 {
   Vector3 position = continousState[*mPositionStateInfo];
   Quaternion orientation = continousState[*mOrientationStateInfo];
   Vector6 velocity = continousState[*mVelocityStateInfo];
 
-  Vector6 parentSpatialVelocity = angularMotionTo(position, orientation,
-                                                  getAngularBaseVelocity());
+  frameData.setVelocity(getAngularBaseVelocity(),
+                        position, orientation, velocity);
 
-  context.mParentSpVel = parentSpatialVelocity;
-  Vector6 pivel = parentSpatialVelocity;
-  context.mHDot = Vector6(cross(pivel.getAngular(), velocity.getAngular()),
-                          cross(pivel.getAngular(), velocity.getLinear()) + 
-                          cross(pivel.getLinear(), velocity.getAngular()));
-
   portValues[mMechanicLink].mPosition = position;
   portValues[mMechanicLink].mOrientation = orientation;
-  portValues[mMechanicLink].mSpatialVelocity = velocity + parentSpatialVelocity;
+  portValues[mMechanicLink].mSpatialVelocity = velocity + frameData.mParentSpVel;
 }
 
 void
@@ -78,7 +72,8 @@
 
 void
 MobileRootJoint::acceleration(const Task&, const ContinousStateValueVector&,
-                              PortValueList& portValues, FrameData& context) const
+                              PortValueList& portValues,
+                              FrameData& frameData) const
 {
   // Assumption: body is small compared to the distance to the planets
   // center of mass. That means gravity could be considered equal for the
@@ -97,8 +92,8 @@
 
   // FIXME
 //   mRelVelDot = grav - solve(inertia, force) - getParentSpAccel() - getHdot();
-  Vector6 acceleration = grav - solve(inertia, force) - parentSpAccel - context.mHDot;
-  context.mRelVelDot = acceleration;
+  Vector6 acceleration = grav - solve(inertia, force) - parentSpAccel - frameData.mHDot;
+  frameData.mRelVelocityDot = acceleration;
 
   portValues[mMechanicLink].mSpatialAcceleration = acceleration;
 }
@@ -123,9 +118,9 @@
   Vector3 angVel = velocity.getAngular();
   Vector4 qderiv = LinAlg::derivative(q, angVel) + 1e1*(normalize(q) - q);
 
-  derivatives[*mPositionStateInfo] = pDot; 
+  derivatives[*mPositionStateInfo] = pDot;
   derivatives[*mOrientationStateInfo] = qderiv;
-  derivatives[*mVelocityStateInfo] = context.mRelVelDot;
+  derivatives[*mVelocityStateInfo] = context.mRelVelocityDot;
 }
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Mon Oct 20 06:30:10 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 20 Oct 2008 06:30:10 +0200
Subject: [OpenFDM-svn] r636 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810200430.m9K4UALF007089@sheep.berlios.de>

Author: frohlich
Date: 2008-10-20 06:30:08 +0200 (Mon, 20 Oct 2008)
New Revision: 636

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixOutputPort.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RealOutputPort.h
Log:
Output ports might be unconnected.

M    MatrixOutputPort.h
M    RealOutputPort.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixOutputPort.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixOutputPort.h	2008-10-19 18:02:55 UTC (rev 635)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixOutputPort.h	2008-10-20 04:30:08 UTC (rev 636)
@@ -22,6 +22,10 @@
     OpenFDMAssert(portValue->toNumericPortValue());
     return static_cast<NumericPortValue*>(portValue);
   }
+  bool empty() const
+  { return mPort; }
+  void clear()
+  { if (!mPort) return; mPort->clear(); mPort = 0; }
   unsigned getPortIndex() const
   { return mPort->getIndex(); }
 private:

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RealOutputPort.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RealOutputPort.h	2008-10-19 18:02:55 UTC (rev 635)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RealOutputPort.h	2008-10-20 04:30:08 UTC (rev 636)
@@ -23,6 +23,10 @@
     OpenFDMAssert(portValue->toNumericPortValue());
     return static_cast<NumericPortValue*>(portValue);
   }
+  bool empty() const
+  { return mPort; }
+  void clear()
+  { if (!mPort) return; mPort->clear(); mPort = 0; }
   unsigned getPortIndex() const
   { return mPort->getIndex(); }
 private:



From frohlich at mail.berlios.de  Mon Oct 20 07:57:36 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 20 Oct 2008 07:57:36 +0200
Subject: [OpenFDM-svn] r637 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810200557.m9K5vaik015149@sheep.berlios.de>

Author: frohlich
Date: 2008-10-20 07:57:35 +0200 (Mon, 20 Oct 2008)
New Revision: 637

Removed:
   branches/OpenFDM-StateSeparation/src/OpenFDM/ConstFrameVisitor.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/FrameVisitor.h
Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
Log:
The frame is now more a swiss army knife than a tree structure.
Preparation for more explicit usage.

D    src/OpenFDM/ConstFrameVisitor.h
M    src/OpenFDM/Makefile.am
M    src/OpenFDM/Frame.cpp
M    src/OpenFDM/Frame.h
D    src/OpenFDM/FrameVisitor.h


Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/ConstFrameVisitor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ConstFrameVisitor.h	2008-10-20 04:30:08 UTC (rev 636)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ConstFrameVisitor.h	2008-10-20 05:57:35 UTC (rev 637)
@@ -1,24 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#ifndef OpenFDM_ConstFrameVisitor_H
-#define OpenFDM_ConstFrameVisitor_H
-
-#include "Frame.h"
-
-namespace OpenFDM {
-
-class ConstFrameVisitor {
-public:
-  virtual ~ConstFrameVisitor(void)
-  {}
-  virtual void apply(const Frame& frame)
-  { traverse(frame); }
-  inline void traverse(const Frame& frame)
-  { frame.traverse(*this); }
-};
-
-} // namespace OpenFDM
-
-#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.cpp	2008-10-20 04:30:08 UTC (rev 636)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.cpp	2008-10-20 05:57:35 UTC (rev 637)
@@ -11,272 +11,26 @@
 #include "Matrix.h"
 #include "Quaternion.h"
 #include "Inertia.h"
-#include "FrameVisitor.h"
-#include "ConstFrameVisitor.h"
 
 namespace OpenFDM {
 
-BEGIN_OPENFDM_OBJECT_DEF(Frame, Object)
-  DEF_OPENFDM_ROPROP(Vector3, Position)
-  DEF_OPENFDM_ROPROP(Vector3, RefPosition)
-  DEF_OPENFDM_ROPROP(Quaternion, Orientation)
-  DEF_OPENFDM_ROPROP(Quaternion, RefOrientation)
-  DEF_OPENFDM_ROPROP(Vector6, RelVel)
-  DEF_OPENFDM_ROPROP(Vector6, SpVel)
-  DEF_OPENFDM_ROPROP(Vector6, RefVel)
-  DEF_OPENFDM_ROPROP(Vector6, RelVelDot)
-  DEF_OPENFDM_ROPROP(Vector6, SpAccel)
-  END_OPENFDM_OBJECT_DEF
-
-/// FIXME
-BEGIN_OPENFDM_OBJECT_DEF(FreeFrame, Frame)
-  END_OPENFDM_OBJECT_DEF
-
-Frame::Frame(const std::string& name) :
-  Object(name),
-  mDirtyPos(true),
-  mDirtySpVel(true),
-  mDirtySpAccel(true),
-  mReferenceFrameId(0)
+Frame::Frame() :
+  mPosition(Vector3::zeros()),
+  mOrientation(Quaternion::unit()),
+  mRelVel(Vector6::zeros()),
+  mRelVelDot(Vector6::zeros()),
+  mParentSpVel(Vector6::zeros()),
+  mParentSpAccel(Vector6::zeros()),
+  mRefOrient(Quaternion::unit()),
+  mRefPos(Vector3::zeros()),
+  mRefVel(Vector6::zeros())
 {
-  setPosition(Vector3::zeros());
-  setOrientation(Quaternion::unit());
-  setRelVel(Vector6::zeros());
 }
 
 Frame::~Frame(void)
 {
 }
 
-void
-Frame::accept(FrameVisitor& visitor)
-{
-  visitor.apply(*this);
-}
-
-void
-Frame::traverse(FrameVisitor& visitor)
-{
-  ChildFrameList::iterator it = mChildFrames.begin();
-  ChildFrameList::iterator iEnd = mChildFrames.end();
-  while (it != iEnd) {
-    (*it)->accept(visitor);
-    ++it;
-  }
-}
-
-void
-Frame::accept(ConstFrameVisitor& visitor) const
-{
-  visitor.apply(*this);
-}
-
-void
-Frame::traverse(ConstFrameVisitor& visitor) const
-{
-  ChildFrameList::const_iterator it = mChildFrames.begin();
-  ChildFrameList::const_iterator iEnd = mChildFrames.end();
-  while (it != iEnd) {
-    (*it)->accept(visitor);
-    ++it;
-  }
-}
-
-bool
-Frame::isParentFrameOf(const Frame* const frame) const
-{
-  return isDirectParentFrameOf(frame) ||
-    (frame && isParentFrameOf(frame->mParentFrame.lock()));
-}
-
-bool
-Frame::isChildFrameOf(const Frame* const frame) const
-{
-  SharedPtr<Frame> parent = mParentFrame.lock();
-  return isDirectChildFrameOf(frame) ||
-    (parent && parent->isChildFrameOf(frame));
-}
-
-bool
-Frame::addChildFrame(Frame* child)
-{
-  if (!child) {
-    Log(Frame,Warning) << "Trying to attach zero pointer child Frame to "
-                       << "Frame \"" << getName() << "\"!" << endl;
-    return false;
-  }
-  if (child->getParentFrame()) {
-    Log(Frame,Error) << "Can not attach Frame \"" << child->getName()
-                     << "\" to Frame \"" << getName() << "\": "
-                     << " is already child of \""
-                     << child->getParentFrame()->getName() << endl;
-    return false;
-  }
-  
-  child->setParentFrame(this);
-  mChildFrames.push_back(child);
-  return true;
-}
-
-bool
-Frame::removeChildFrame(Frame* child)
-{
-  ChildFrameList::iterator it = mChildFrames.begin();
-  while (it != mChildFrames.end()) {
-    if ((*it) == child) {
-      it = mChildFrames.erase(it);
-      return true;
-    }
-    ++it;
-  }
-
-  return false;
-}
-
-Frame*
-Frame::getChildFrame(unsigned i)
-{
-  if (mChildFrames.size() <= i)
-    return 0;
-  return mChildFrames[i];
-}
-
-const Frame*
-Frame::getChildFrame(unsigned i) const
-{
-  if (mChildFrames.size() <= i)
-    return 0;
-  return mChildFrames[i];
-}
-
-unsigned
-Frame::getChildFrameIndex(const Frame* child) const
-{
-  if (!child)
-    return mChildFrames.size();
-
-  unsigned i = 0;
-  for (; i < mChildFrames.size(); ++i) {
-    if (mChildFrames[i] == child)
-      return i;
-  }
-  return i;
-}
-
-void
-Frame::reparentChildren(Frame* frame)
-{
-  if (!frame)
-    return;
-
-  ChildFrameList::iterator it = frame->mChildFrames.begin();
-  while (it != frame->mChildFrames.end()) {
-    Log(Model,Error) << "Moving Frame " << (*it)->getName() << " from "
-                     << frame->getName() << " to " << getName() << endl;
-    (*it)->setParentFrame(this);
-    mChildFrames.push_back(*it);
-    it = frame->mChildFrames.erase(it);
-  }
-}
-
-void
-Frame::computePositionDep(void) const
-{
-  if (hasParent()) {
-    mRefOrient = getParentFrame()->getRefOrientation()*getOrientation();
-    mRefPos = getParentFrame()->posToRef(getPosition());
-    mReferenceFrameId = getParentFrame()->getRefFrameId();
-  } else {
-    mRefOrient = getOrientation();
-    mRefPos = getPosition();
-    mReferenceFrameId = getFrameId();
-  }
-  mDirtyPos = false;
-}
-
-void
-Frame::computeVelocityDep(void) const
-{
-  if (hasParent()) {
-    mParentSpVel = motionFromParent(getParentFrame()->getSpVel());
-    mRefVel = getRelVel() + motionFromParent(getParentFrame()->getRefVel());
-    mReferenceFrameId = getParentFrame()->getRefFrameId();
-  } else {
-    mParentSpVel = Vector6::zeros();
-    mRefVel = Vector6::zeros();
-    mReferenceFrameId = getFrameId();
-  }
-  mDirtySpVel = false;
-}
-
-void
-Frame::computeAccelerationDep(void) const
-{
-  if (hasParent()) {
-    mParentSpAccel = motionFromParent(getParentFrame()->getSpAccel());
-    mReferenceFrameId = getParentFrame()->getRefFrameId();
-  } else {
-    mParentSpAccel = Vector6::zeros();
-    mReferenceFrameId = getFrameId();
-  }
-  mDirtySpAccel = false;
-}
-
-void
-Frame::setPosDirtyUnconditional(void)
-{
-  // Mark ourself dirty.
-  mDirtyPos = true;
-  mDirtySpVel = true;
-  mDirtySpAccel = true;
-  
-  // Mark all child dirty.
-  ChildFrameList::iterator it = mChildFrames.begin();
-  ChildFrameList::iterator iEnd = mChildFrames.end();
-  while (it != iEnd) {
-    (*it)->setPosDirty();
-    ++it;
-  }
-}
-
-void
-Frame::setVelDirtyUnconditional(void)
-{
-  // Mark ourself dirty.
-  mDirtySpVel = true;
-  mDirtySpAccel = true;
-  
-  // Mark all child dirty.
-  ChildFrameList::iterator it = mChildFrames.begin();
-  ChildFrameList::iterator iEnd = mChildFrames.end();
-  while (it != iEnd) {
-    (*it)->setVelDirty();
-    ++it;
-  }
-}
-
-void
-Frame::setAccelDirtyUnconditional(void) const
-{
-  // Mark ourself dirty.
-  mDirtySpAccel = true;
-  
-  // Mark all child dirty.
-  ChildFrameList::const_iterator it = mChildFrames.begin();
-  ChildFrameList::const_iterator iEnd = mChildFrames.end();
-  while (it != iEnd) {
-    (*it)->setAccelDirty();
-    ++it;
-  }
-}
-
-void
-Frame::setParentFrame(Frame* parent)
-{
-  mParentFrame = parent;
-  setPosDirty();
-}
-
 SpatialInertia
 Frame::inertiaToParent(const SpatialInertia& I) const
 {
@@ -295,6 +49,4 @@
   }
 }
 
-const Vector6 Frame::mZeroVector = Vector6::zeros();
-
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h	2008-10-20 04:30:08 UTC (rev 636)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h	2008-10-20 05:57:35 UTC (rev 637)
@@ -5,13 +5,7 @@
 #ifndef OpenFDM_Frame_H
 #define OpenFDM_Frame_H
 
-#include <list>
-#include <vector>
-#include <string>
-
 #include "Assert.h"
-#include "Object.h"
-#include "WeakPtr.h"
 #include "Vector.h"
 #include "Plane.h"
 #include "Transform.h"
@@ -22,114 +16,73 @@
 
 namespace OpenFDM {
 
-class RigidBody;
-class Joint;
-class Interact;
-
-class FrameVisitor;
-class ConstFrameVisitor;
-
 /** 
 The \ref Frame class is the basic tool to model a tree of moving and
 accelerating coordinate frames.
-
-Each frame can have one parent frame and several child frames. Each
-frame can have a position and orientation offset with respect to its
-parent frame. So, if a parent frame is relocated with respect to a
-global coordinate system, all the child frames will be relocated with
-respect to that global coordinate system too.
-
-Each frame can have a linear and angular velocity with respect to its
-parent frame.
 */
 
-class Frame : public Object {
-  OPENFDM_OBJECT(Frame, Object);
+class Frame {
 public:
-  /// FIXME: store a 'path' to the current frame, check that by comparing the
-  /// first path element
-  typedef const void* frameid_type;
+  Frame();
+  ~Frame(void);
 
-  /// Container for the child frames.
-  typedef std::vector<SharedPtr<Frame> > ChildFrameList;
+  void setPosAndVel(const Frame& parent, const Vector3& position,
+                    const Quaternion& orientation, const Vector6& velocity)
+  {
+    mPosition = position;
+    mOrientation = orientation;
+    mRelVel = velocity;
 
-  Frame(const std::string& name);
-  virtual ~Frame(void);
+    mRefOrient = parent.getRefOrientation()*getOrientation();
+    mRefPos = parent.posToRef(getPosition());
 
-  /// Double dispatch helper for the multibody system visitor
-  virtual void accept(FrameVisitor& visitor);
-  /// Double dispatch helper for the multibody system visitor
-  virtual void traverse(FrameVisitor& visitor);
-  /// Double dispatch helper for the multibody system visitor
-  virtual void accept(ConstFrameVisitor& visitor) const;
-  /// Double dispatch helper for the multibody system visitor
-  virtual void traverse(ConstFrameVisitor& visitor) const;
+    mParentSpVel = motionFromParent(parent.getSpVel());
+    mRefVel = velocity + motionFromParent(parent.getRefVel());
+  }
 
-  /// Return the parent frame.
-  Frame* getParentFrame(void)
-  { return mParentFrame.lock(); }
-  /// Return the parent frame.
-  const Frame* getParentFrame(void) const
-  { return mParentFrame.lock(); }
-  /// True if the current frame has a parent frame.
-  bool hasParent(void) const
-  { return getParentFrame(); }
+  void setAccel(const Frame& parent, const Vector6& acceleration)
+  {
+    mRelVelDot = acceleration;
 
-  /// Return true if this Frame is the direct parent Frame of the Frame given
-  /// in the argument frame.
-  /// That means it reads:
-  ///  this->isDirectParentFrameOf(frame)
-  bool isDirectParentFrameOf(const Frame* const frame) const
-  { return frame && this == frame->mParentFrame.lock(); }
-  /// Return true if this Frame is a parent Frame of the Frame given
-  /// in the argument frame. It does not need to be the direct parent.
-  /// That means it reads:
-  ///  this->isParentFrameOf(frame)
-  bool isParentFrameOf(const Frame* const frame) const;
+    mParentSpAccel = motionFromParent(parent.getSpAccel());
+  }
 
-  /// Return true if this Frame is a direct child Frame of the Frame given
-  /// in the argument frame.
-  /// That means it reads:
-  ///  this->isDirectChildFrameOf(frame)
-  bool isDirectChildFrameOf(const Frame* const frame) const
-  { return frame && frame == mParentFrame.lock(); }
-  /// Return true if this Frame is a child Frame of the Frame given
-  /// in the argument frame. It does not need to be a direct child.
-  /// That means it reads:
-  ///  this->isChildFrameOf(frame)
-  bool isChildFrameOf(const Frame* const frame) const;
+  void setPosAndVel(const Vector3& parentAngularVel, const Vector3& position,
+                    const Quaternion& orientation, const Vector6& velocity)
+  {
+    mPosition = position;
+    mOrientation = orientation;
+    mRelVel = velocity;
 
-  /// Adds the given frame to the list of child frames.
-  /// returns true if that completed sucessfully.
-  bool addChildFrame(Frame* child);
-  /// Removes the given frame to the list of child frames.
-  /// returns true if that completed sucessfully.
-  bool removeChildFrame(Frame* child);
-  /// Get the i-th child frame. Returns a 0 pointer if i is out of range.
-  Frame* getChildFrame(unsigned i);
-  /// Get the i-th child frame. Returns a 0 pointer if i is out of range.
-  const Frame* getChildFrame(unsigned i) const;
-  /// Returns the child frame index of the given frame
-  unsigned getChildFrameIndex(const Frame* child) const;
-  /// Returns the number of child frames
-  unsigned getNumChildFrames(void) const
-  { return mChildFrames.size(); }
+    mRefOrient = orientation;
+    mRefPos = position;
 
-  /// Take over all children from the given frame to this frame
-  void reparentChildren(Frame* frame);
+    mParentSpVel = angularMotionTo(mPosition, mOrientation, parentAngularVel);
+    mRefVel = velocity + mParentSpVel;
+  }
 
-  // Return the current frames frame id.
-  frameid_type getFrameId(void) const
-  { return this; }
-  // Return the reference frames frame id.
-  frameid_type getRefFrameId(void) const
+  void setAccel(const Vector6& acceleration)
   {
-    if (mDirtyPos)
-      computePositionDep();
-    return mReferenceFrameId;
+    mRelVelDot = acceleration;
+
+    mParentSpAccel = Vector6::zeros();
   }
 
+  // FIXME: they do not yet update the dependent values inside ...
+//   void setRefOrientation(const Frame& parent, const Quaternion& o)
+//   { setOrientation(inverse(parent.getRefOrientation())*o); }
+//   void setRefPosition(const Frame& parent, const Vector3& p)
+//   { setPosition(parent.posFromRef(p)); }
+//   void setRefVel(const Frame& parent, const Vector6& vel)
+//   { setRelVel(vel - motionFromParent(parent.getRefVel())); }
 
+//   void setPosition(const Vector3& p)
+//   { mPosition = p; }
+//   void setOrientation(const Quaternion& o)
+//   { mOrientation = o; }
+//   void setRelVel(const Vector6& vel)
+//   { mRelVel = vel; }
+
   /** Position of the current frame.
       @return The position vector of the current frame with repsect to the
       parent frame. It is the only vector which is in the parent frames
@@ -177,8 +130,8 @@
               to the parent frame. The velocity is in the current frames
               coordinates.
    */
-  virtual const Vector6& getRelVelDot(void) const 
-  { return mZeroVector; }
+  const Vector6& getRelVelDot(void) const 
+  { return mRelVelDot; }
 
 
   /** Linear velocity with respect to parent.
@@ -201,11 +154,7 @@
       does not have a parent it is assumed to be an inertial frame.
    */
   const Vector6& getParentSpVel(void) const
-  {
-    if (mDirtySpVel)
-      computeVelocityDep();
-    return mParentSpVel;
-  }
+  { return mParentSpVel; }
 
   /** Spatial velocity of the current frame.
       @return The spatial velocity of the current frame with respect to an
@@ -216,11 +165,7 @@
   { return getRelVel() + getParentSpVel(); }
 
   const Vector6& getRefVel(void) const
-  {
-    if (mDirtySpVel)
-      computeVelocityDep();
-    return mRefVel;
-  }
+  { return mRefVel; }
 
   /** Linear acceleration with respect to parent.
       @return The linear acceleration of this frame with respect to the parent
@@ -244,11 +189,7 @@
       of the moving and accelerating body (@see getClassicAccel).
    */
   const Vector6& getParentSpAccel(void) const
-  {
-    if (mDirtySpAccel)
-      computeAccelerationDep();
-    return mParentSpAccel;
-  }
+  { return mParentSpAccel; }
 
   /** Spatial acceleration of the current frame.
       @return The spatial acceleration of the current frame with respect to an
@@ -427,11 +368,7 @@
    * It is measured in the topmost frames coordinates.
    */
   const Rotation& getRefOrientation(void) const
-  {
-    if (mDirtyPos)
-      computePositionDep();
-    return mRefOrient;
-  }
+  { return mRefOrient; }
 
   /** Reference position.
    * Returns the reference position of this frame wrt the topmost frame 
@@ -439,110 +376,16 @@
    * It is measured in the topmost frames coordinates.
    */
   const Vector3& getRefPosition(void) const
-  {
-    if (mDirtyPos)
-      computePositionDep();
-    return mRefPos;
-  }
+  { return mRefPos; }
 
-protected:
-  void setRefOrientation(const Quaternion& o)
-  {
-    if (hasParent())
-      setOrientation(inverse(getParentFrame()->getRefOrientation())*o);
-    else
-      setOrientation(o);
-  }
+  Quaternion getRelOrientation(const Frame& frame) const
+  { return inverse(getRefOrientation())*frame.getRefOrientation(); }
+  Vector3 getRelPosition(const Frame& frame) const
+  { return posFromRef(frame.getRefPosition()); }
+  Vector6 getRelVel(const Frame& frame) const
+  { return motionFromRef(frame.motionToRef(frame.getRefVel())) - getRefVel(); }
 
-  void setRefPosition(const Vector3& p)
-  {
-    if (hasParent())
-      setPosition(getParentFrame()->posFromRef(p));
-    else
-      setPosition(p);
-  }
-  void setRefVel(const Vector6& vel)
-  {
-    if (hasParent()) {
-      setRelVel(vel - motionFromParent(getParentFrame()->getRefVel()));
-    } else {
-      setRelVel(vel);
-    }
-  }
-
-public:
-  Quaternion getRelOrientation(const Frame* frame) const
-  {
-    OpenFDMAssert(frame->getRefFrameId() == getRefFrameId());
-    return inverse(getRefOrientation())*frame->getRefOrientation();
-  }
-  Vector3 getRelPosition(const Frame* frame) const
-  {
-    OpenFDMAssert(frame->getRefFrameId() == getRefFrameId());
-    return posFromRef(frame->getRefPosition());
-  }
-  Vector6 getRelVel(const Frame* frame) const
-  {
-    OpenFDMAssert(frame->getRefFrameId() == getRefFrameId());
-    return motionFromRef(frame->motionToRef(frame->getRefVel())) - getRefVel();
-  }
-
-protected:
-  void setPosition(const Vector3& p)
-  { setPosDirty(); mPosition = p; }
-  void setOrientation(const Quaternion& o)
-  { setPosDirty(); mOrientation = o; }
-  void setRelVel(const Vector6& vel)
-  { setVelDirty(); mRelVel = vel; }
-  void setLinearRelVel(const Vector3& v)
-  { setVelDirty(); mRelVel.setLinear(v); }
-  void setAngularRelVel(const Vector3& rotVel)
-  { setVelDirty(); mRelVel.setAngular(rotVel); }
-
-  void computePositionDep(void) const;
-  void computeVelocityDep(void) const;
-  void computeAccelerationDep(void) const;
-
-protected:
-  void setPosDirty(void)
-  {
-    // Don't bother iterating over all children if we are already dirty.
-    if (mDirtyPos == true && mDirtySpVel == true && mDirtySpAccel == true)
-      return;
-    // Really set ourself and all children dirty.
-    // Is done in this way to help the compiler inline the fast path and
-    // only really call a function if real work needs to be done.
-    setPosDirtyUnconditional();
-  }
-  void setVelDirty(void)
-  {
-    // Don't bother iterating over all children if we are already dirty.
-    if (mDirtySpVel == true && mDirtySpAccel == true)
-      return;
-    // Really set ourself and all children dirty.
-    // Is done in this way to help the compiler inline the fast path and
-    // only really call a function if real work needs to be done.
-    setVelDirtyUnconditional();
-  }
-  void setAccelDirty(void) const
-  {
-    // Don't bother iterating over all children if we are already dirty.
-    if (mDirtySpAccel == true)
-      return;
-    // Really set ourself and all children dirty.
-    // Is done in this way to help the compiler inline the fast path and
-    // only really call a function if real work needs to be done.
-    setAccelDirtyUnconditional();
-  }
 private:
-  void setPosDirtyUnconditional(void);
-  void setVelDirtyUnconditional(void);
-  void setAccelDirtyUnconditional(void) const;
-
-private:
-  /// Set the parent frame to the given one.
-  void setParentFrame(Frame* parent);
-
   // The offset of this frames origin wrt the parent frame measured in
   // the parent frames coordinates.
   Vector3 mPosition;
@@ -554,80 +397,16 @@
   // True? more the relative velocity ...
   Vector6 mRelVel;
 
-  mutable Vector6 mParentSpVel;
-  mutable Vector6 mParentSpAccel;
+  Vector6 mRelVelDot;
 
-  mutable Rotation mRefOrient;
-  mutable Vector3 mRefPos;
-  mutable Vector6 mRefVel;
+  Vector6 mParentSpVel;
+  Vector6 mParentSpAccel;
 
-  // Here the topmost frame's id is stored.
-  // Is used to check for compatibility of reference values when frame relative
-  // values are computed.
-  mutable frameid_type mReferenceFrameId;
-
-  // Flag which tells the frame if dependent values must
-  // be recomputed or not.
-  mutable bool mDirtyPos:1;
-  mutable bool mDirtySpVel:1;
-  mutable bool mDirtySpAccel:1;
-
-  // The parent frame.
-  // FIXME: May be we should store a list of all parents ???
-  WeakPtr<Frame> mParentFrame;
-  // The list of child frames.
-  ChildFrameList mChildFrames;
-
-  /// Used to return a zero acceleration, might move to the LinAlg namespace
-  static const Vector6 mZeroVector;
+  Rotation mRefOrient;
+  Vector3 mRefPos;
+  Vector6 mRefVel;
 };
 
-class FreeFrame : public Frame {
-  OPENFDM_OBJECT(FreeFrame, Frame);
-public:
-  FreeFrame(const std::string& name = std::string())
-    : Frame(name)
-  {
-    setRelVelDot(Vector6::zeros());
-  }
-  virtual ~FreeFrame(void)
-  {}
-
-//   using Frame::setPosition;
-  void setPosition(const Vector3& p)
-  { Frame::setPosition(p); }
-  void setOrientation(const Quaternion& o)
-  { Frame::setOrientation(o); }
-  void setRelVel(const Vector6& vel)
-  { Frame::setRelVel(vel); }
-  void setLinearRelVel(const Vector3& vel)
-  { Frame::setLinearRelVel(vel); }
-  void setAngularRelVel(const Vector3& vel)
-  { Frame::setAngularRelVel(vel); }
-
-  virtual const Vector6& getRelVelDot(void) const 
-  { return mRelVelDot; }
-  void setRelVelDot(const Vector6& accel)
-  { setAccelDirty(); mRelVelDot = accel; }
-//   void setLinearRelVelDot(const Vector3& accel)
-//   { setAccelDirty(); mRelVelDot.setLinear(accel); }
-//   void setAngularRelVelDot(const Vector3& accel)
-//   { setAccelDirty(); mRelVelDot.setAngular(accel); }
-
-  void setRefPosition(const Vector3& p)
-  { Frame::setRefPosition(p); }
-  void setRefOrientation(const Quaternion& o)
-  { Frame::setRefOrientation(o); }
-
-  void setRefVel(const Vector6& vel)
-  { Frame::setRefVel(vel); }
-
-private:
-  // The spatial acceleration of this frame wrt the parent frame.
-  // True? more the relative acceleration ...
-  Vector6 mRelVelDot;
-};
-
 } // namespace OpenFDM
 
 #endif

Deleted: branches/OpenFDM-StateSeparation/src/OpenFDM/FrameVisitor.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/FrameVisitor.h	2008-10-20 04:30:08 UTC (rev 636)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/FrameVisitor.h	2008-10-20 05:57:35 UTC (rev 637)
@@ -1,24 +0,0 @@
-/* -*-c++-*- OpenFDM - Copyright (C) 2004-2008 Mathias Froehlich 
- *
- */
-
-#ifndef OpenFDM_FrameVisitor_H
-#define OpenFDM_FrameVisitor_H
-
-#include "Frame.h"
-
-namespace OpenFDM {
-
-class FrameVisitor {
-public:
-  virtual ~FrameVisitor(void)
-  {}
-  virtual void apply(Frame& frame)
-  { traverse(frame); }
-  inline void traverse(Frame& frame)
-  { frame.traverse(*this); }
-};
-
-} // namespace OpenFDM
-
-#endif

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-20 04:30:08 UTC (rev 636)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-20 05:57:35 UTC (rev 637)
@@ -18,7 +18,6 @@
   Assert.h \
   Atomic.h \
   BoolStateInfo.h \
-  ConstFrameVisitor.h \
   ConstNodeVisitor.h \
   ContinousStateInfo.h \
   ContinousStateInfoVector.h \
@@ -33,7 +32,6 @@
   ExplicitEuler.h \
   Fraction.h \
   Frame.h \
-  FrameVisitor.h \
   Function.h \
   Group.h \
   HDF5SystemOutput.h \



From frohlich at mail.berlios.de  Mon Oct 20 19:18:08 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 20 Oct 2008 19:18:08 +0200
Subject: [OpenFDM-svn] r638 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810201718.m9KHI8KD019542@sheep.berlios.de>

Author: frohlich
Date: 2008-10-20 19:17:59 +0200 (Mon, 20 Oct 2008)
New Revision: 638

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
Log:
Make use of Frame in MechanicLinkValue.

M    src/OpenFDM/MobileRootJoint.cpp
M    src/OpenFDM/Frame.h
M    src/OpenFDM/MechanicContext.h
M    src/OpenFDM/MechanicLinkValue.h
M    src/OpenFDM/RigidBody.cpp
M    src/OpenFDM/HDF5SystemOutput.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h	2008-10-20 05:57:35 UTC (rev 637)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h	2008-10-20 17:17:59 UTC (rev 638)
@@ -26,6 +26,25 @@
   Frame();
   ~Frame(void);
 
+  void setPosAndVel(const Frame& parent)
+  {
+    mPosition = Vector3::zeros();
+    mOrientation = Quaternion::unit();
+    mRelVel = Vector6::zeros();
+
+    mRefOrient = parent.getRefOrientation();
+    mRefPos = parent.getRefPosition();
+
+    mParentSpVel = parent.getSpVel();
+    mRefVel = parent.getRefVel();
+  }
+
+  void setAccel(const Frame& parent)
+  {
+    mRelVelDot = Vector6::zeros();
+    mParentSpAccel = parent.getSpAccel();
+  }
+
   void setPosAndVel(const Frame& parent, const Vector3& position,
                     const Quaternion& orientation, const Vector6& velocity)
   {
@@ -367,7 +386,7 @@
    * this frame is attached to.
    * It is measured in the topmost frames coordinates.
    */
-  const Rotation& getRefOrientation(void) const
+  const Quaternion& getRefOrientation(void) const
   { return mRefOrient; }
 
   /** Reference position.
@@ -402,7 +421,7 @@
   Vector6 mParentSpVel;
   Vector6 mParentSpAccel;
 
-  Rotation mRefOrient;
+  Quaternion mRefOrient;
   Vector3 mRefPos;
   Vector6 mRefVel;
 };

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2008-10-20 05:57:35 UTC (rev 637)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2008-10-20 17:17:59 UTC (rev 638)
@@ -334,13 +334,13 @@
     { }
     virtual void append()
     {
-      _position.append(mMechanicLinkValue->mPosition);
-      _orientation.append(mMechanicLinkValue->mOrientation);
-      _eulerAngle.append(mMechanicLinkValue->mOrientation.getEuler());
-      _velocity.append(mMechanicLinkValue->mSpatialVelocity);
-      _acceleration.append(mMechanicLinkValue->mSpatialAcceleration);
-      _force.append(mMechanicLinkValue->mArticulatedForce);
-      _inertia.append(mMechanicLinkValue->mArticulatedInertia);
+      _position.append(mMechanicLinkValue->getFrame().getPosition());
+      _orientation.append(mMechanicLinkValue->getFrame().getOrientation());
+      _eulerAngle.append(mMechanicLinkValue->getFrame().getOrientation().getEuler());
+      _velocity.append(mMechanicLinkValue->getFrame().getSpVel());
+      _acceleration.append(mMechanicLinkValue->getFrame().getSpAccel());
+      _force.append(mMechanicLinkValue->getForce());
+      _inertia.append(mMechanicLinkValue->getInertia());
     }
     virtual HDF5Object getObject()
     { return _group; }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-20 05:57:35 UTC (rev 637)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-20 17:17:59 UTC (rev 638)
@@ -43,7 +43,7 @@
     mRelOrientation = relOr;
     mRelVelocity = relVel;
     mParentSpVel = motionTo(mRelPosition, mRelOrientation,
-                            parentLink.mSpatialVelocity);
+                            parentLink.getFrame().getSpVel());
     mHDot = Vector6(cross(mParentSpVel.getAngular(), relVel.getAngular()),
                     cross(mParentSpVel.getAngular(), relVel.getLinear()) +
                     cross(mParentSpVel.getLinear(), relVel.getAngular()));

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-10-20 05:57:35 UTC (rev 637)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-10-20 17:17:59 UTC (rev 638)
@@ -7,8 +7,7 @@
 
 #include "Inertia.h"
 #include "PortValue.h"
-#include "Rotation.h"
-#include "Vector.h"
+#include "Frame.h"
 
 namespace OpenFDM {
 
@@ -19,6 +18,21 @@
   virtual MechanicLinkValue* toMechanicLinkValue() { return this; }
   virtual const MechanicLinkValue* toMechanicLinkValue() const { return this; }
 
+  const Frame& getFrame() const
+  { return mFrame; }
+  Frame& getFrame()
+  { return mFrame; }
+
+  const SpatialInertia& getInertia() const
+  { return mArticulatedInertia; }
+  void setInertia(const SpatialInertia& inertia)
+  { mArticulatedInertia = inertia; }
+
+  const Vector6& getForce() const
+  { return mArticulatedForce; }
+  void setForce(const Vector6& force)
+  { mArticulatedForce = force; }
+
   void applyForce(const Vector6& force)
   { mArticulatedForce = force; }
   void applyForce(const Vector3& force)
@@ -29,24 +43,28 @@
   void applyInertia(const SpatialInertia& inertia)
   { mArticulatedInertia = inertia; }
 
+
+  void setPosAndVel(const MechanicLinkValue& linkValue)
+  {
+    mFrame.setPosAndVel(linkValue.getFrame());
+  }
+  void setPosAndVel(const MechanicLinkValue& linkValue, const Vector3& position,
+                    const Quaternion& orientation, const Vector6& velocity)
+  {
+    mFrame.setPosAndVel(linkValue.getFrame(), position, orientation, velocity);
+  }
+
   void applyArticulation(const MechanicLinkValue& linkValue)
   {
     applyForce(linkValue.mArticulatedForce);
     applyInertia(linkValue.mArticulatedInertia);
   }
 
-// protected:
-  // FIXME:
-  // Since the interact side is the provider port, an interact might provide
-  // different typed ports, the Rigid body can test for at init time and
-  // avoid inertia computations for ports not contributing that ...
+protected:
   // May be build a class hierarchy that accounts for different inputs
   // and outputs a rigid body can have.
   // Example: force port, force and inertia, frame port, velocity port
-  Vector3 mPosition;
-  Quaternion mOrientation;
-  Vector6 mSpatialVelocity;
-  Vector6 mSpatialAcceleration;
+  Frame mFrame;
   Vector6 mArticulatedForce;
   SpatialInertia mArticulatedInertia;
 };

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-20 05:57:35 UTC (rev 637)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-20 17:17:59 UTC (rev 638)
@@ -58,9 +58,9 @@
   frameData.setVelocity(getAngularBaseVelocity(),
                         position, orientation, velocity);
 
-  portValues[mMechanicLink].mPosition = position;
-  portValues[mMechanicLink].mOrientation = orientation;
-  portValues[mMechanicLink].mSpatialVelocity = velocity + frameData.mParentSpVel;
+  portValues[mMechanicLink].getFrame().setPosAndVel(getAngularBaseVelocity(),
+                                                    position, orientation,
+                                                    velocity);
 }
 
 void
@@ -85,8 +85,8 @@
   // FIXME
   Vector6 grav = Vector6(Vector3::zeros(), Vector3(0, 0, 9.81));
 
-  SpatialInertia inertia = portValues[mMechanicLink].mArticulatedInertia;
-  Vector6 force = portValues[mMechanicLink].mArticulatedForce;
+  SpatialInertia inertia = portValues[mMechanicLink].getInertia();
+  Vector6 force = portValues[mMechanicLink].getForce();
 
   Vector6 parentSpAccel = Vector6::zeros();
 
@@ -95,7 +95,7 @@
   Vector6 acceleration = grav - solve(inertia, force) - parentSpAccel - frameData.mHDot;
   frameData.mRelVelocityDot = acceleration;
 
-  portValues[mMechanicLink].mSpatialAcceleration = acceleration;
+  portValues[mMechanicLink].getFrame().setAccel(acceleration);
 }
 
 void

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2008-10-20 05:57:35 UTC (rev 637)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2008-10-20 17:17:59 UTC (rev 638)
@@ -42,15 +42,9 @@
 {
   unsigned numLinkValues = mMechanicLinks.size();
 
-  Vector3 position = portValues[mMechanicLinks.front()].mPosition;
-  Quaternion orientation = portValues[mMechanicLinks.front()].mOrientation;
-  Vector6 velocity = portValues[mMechanicLinks.front()].mSpatialVelocity;
-
-  for (unsigned i = 1; i < numLinkValues; ++i) {
-    portValues[mMechanicLinks[i]].mPosition = position;
-    portValues[mMechanicLinks[i]].mOrientation = orientation;
-    portValues[mMechanicLinks[i]].mSpatialVelocity = velocity;
-  }
+  const Frame& frame = portValues[mMechanicLinks.front()].getFrame();
+  for (unsigned i = 1; i < numLinkValues; ++i)
+    portValues[mMechanicLinks[i]].getFrame().setPosAndVel(frame);
 }
 
 void
@@ -69,9 +63,9 @@
                         PortValueList& portValues, MechanicContext&) const
 {
   unsigned numLinkValues = mMechanicLinks.size();
-  Vector6 accel = portValues[mMechanicLinks.front()].mSpatialAcceleration;
+  const Frame& frame = portValues[mMechanicLinks.front()].getFrame();
   for (unsigned i = 1; i < numLinkValues; ++i)
-    portValues[mMechanicLinks[i]].mSpatialAcceleration = accel;
+    portValues[mMechanicLinks[i]].getFrame().setAccel(frame);
 }
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Mon Oct 20 19:45:43 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 20 Oct 2008 19:45:43 +0200
Subject: [OpenFDM-svn] r639 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810201745.m9KHjh67029141@sheep.berlios.de>

Author: frohlich
Date: 2008-10-20 19:45:43 +0200 (Mon, 20 Oct 2008)
New Revision: 639

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
Log:
Make more use of the Frame included in the mechanic link.

M    src/OpenFDM/MobileRootJoint.cpp
M    src/OpenFDM/Frame.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h	2008-10-20 17:17:59 UTC (rev 638)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h	2008-10-20 17:45:43 UTC (rev 639)
@@ -87,6 +87,18 @@
     mParentSpAccel = Vector6::zeros();
   }
 
+  void setSpAccel(const Vector6& spatialAcceleration)
+  {
+    mParentSpAccel = Vector6::zeros();
+    mRelVelDot = spatialAcceleration - mParentSpAccel - getHdot();
+  }
+  void setSpAccel(const Frame& parent, const Vector6& spatialAcceleration)
+  {
+    mParentSpAccel = parent.getSpAccel();
+    mRelVelDot = spatialAcceleration - mParentSpAccel - getHdot();
+  }
+
+
   // FIXME: they do not yet update the dependent values inside ...
 //   void setRefOrientation(const Frame& parent, const Quaternion& o)
 //   { setOrientation(inverse(parent.getRefOrientation())*o); }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-20 17:17:59 UTC (rev 638)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-20 17:45:43 UTC (rev 639)
@@ -49,15 +49,12 @@
 void
 MobileRootJoint::velocity(const Task&,
                           const ContinousStateValueVector& continousState,
-                          PortValueList& portValues, FrameData& frameData) const
+                          PortValueList& portValues, FrameData&) const
 {
   Vector3 position = continousState[*mPositionStateInfo];
   Quaternion orientation = continousState[*mOrientationStateInfo];
   Vector6 velocity = continousState[*mVelocityStateInfo];
 
-  frameData.setVelocity(getAngularBaseVelocity(),
-                        position, orientation, velocity);
-
   portValues[mMechanicLink].getFrame().setPosAndVel(getAngularBaseVelocity(),
                                                     position, orientation,
                                                     velocity);
@@ -73,7 +70,7 @@
 void
 MobileRootJoint::acceleration(const Task&, const ContinousStateValueVector&,
                               PortValueList& portValues,
-                              FrameData& frameData) const
+                              FrameData&) const
 {
   // Assumption: body is small compared to the distance to the planets
   // center of mass. That means gravity could be considered equal for the
@@ -88,14 +85,8 @@
   SpatialInertia inertia = portValues[mMechanicLink].getInertia();
   Vector6 force = portValues[mMechanicLink].getForce();
 
-  Vector6 parentSpAccel = Vector6::zeros();
-
-  // FIXME
-//   mRelVelDot = grav - solve(inertia, force) - getParentSpAccel() - getHdot();
-  Vector6 acceleration = grav - solve(inertia, force) - parentSpAccel - frameData.mHDot;
-  frameData.mRelVelocityDot = acceleration;
-
-  portValues[mMechanicLink].getFrame().setAccel(acceleration);
+  Vector6 spatialAcceleration = grav - solve(inertia, force);
+  portValues[mMechanicLink].getFrame().setSpAccel(spatialAcceleration);
 }
 
 void
@@ -118,9 +109,11 @@
   Vector3 angVel = velocity.getAngular();
   Vector4 qderiv = LinAlg::derivative(q, angVel) + 1e1*(normalize(q) - q);
 
+  Vector6 velDeriv = portValues[mMechanicLink].getFrame().getRelVelDot();
+
   derivatives[*mPositionStateInfo] = pDot;
   derivatives[*mOrientationStateInfo] = qderiv;
-  derivatives[*mVelocityStateInfo] = context.mRelVelocityDot;
+  derivatives[*mVelocityStateInfo] = velDeriv;
 }
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Mon Oct 20 20:37:20 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 20 Oct 2008 20:37:20 +0200
Subject: [OpenFDM-svn] r640 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810201837.m9KIbKkv001986@sheep.berlios.de>

Author: frohlich
Date: 2008-10-20 20:37:14 +0200 (Mon, 20 Oct 2008)
New Revision: 640

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
Log:
Zap the hdot term from the frame data.

M    src/OpenFDM/MechanicContext.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-20 17:45:43 UTC (rev 639)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-20 18:37:14 UTC (rev 640)
@@ -31,8 +31,6 @@
 
   // The parents spatial velocity in this frames coordinates
   Vector6 mParentSpVel;
-  // The derivative of the joint axis function?? See Featherstone ...
-  Vector6 mHDot;
 
 
   void setVelocity(const MechanicLinkValue& parentLink,
@@ -44,9 +42,6 @@
     mRelVelocity = relVel;
     mParentSpVel = motionTo(mRelPosition, mRelOrientation,
                             parentLink.getFrame().getSpVel());
-    mHDot = Vector6(cross(mParentSpVel.getAngular(), relVel.getAngular()),
-                    cross(mParentSpVel.getAngular(), relVel.getLinear()) +
-                    cross(mParentSpVel.getLinear(), relVel.getAngular()));
   }
   void setVelocity(const Vector3& parentAngularVel,
                    const Vector3& relPos, const Quaternion& relOr,
@@ -56,9 +51,6 @@
     mRelOrientation = relOr;
     mRelVelocity = relVel;
     mParentSpVel = angularMotionTo(relPos, mRelOrientation, parentAngularVel);
-    mHDot = Vector6(cross(mParentSpVel.getAngular(), relVel.getAngular()),
-                    cross(mParentSpVel.getAngular(), relVel.getLinear()) +
-                    cross(mParentSpVel.getLinear(), relVel.getAngular()));
   }
 };
 
@@ -93,10 +85,10 @@
 
   bool isConnectedTo(const MechanicContext& mechanicContext) const;
 
+private:
   // Stores some values persistent accross velocity/articulation/acceleration
   FrameData mFrameData;
 
-private:
   SharedPtr<const MechanicNode> mMechanicNode;
 
 private:



From frohlich at mail.berlios.de  Mon Oct 20 21:52:57 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Mon, 20 Oct 2008 21:52:57 +0200
Subject: [OpenFDM-svn] r641 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810201952.m9KJqv8X010380@sheep.berlios.de>

Author: frohlich
Date: 2008-10-20 21:52:56 +0200 (Mon, 20 Oct 2008)
New Revision: 641

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
Log:
Remove unused stuff ...


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-20 18:37:14 UTC (rev 640)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-20 19:52:56 UTC (rev 641)
@@ -19,39 +19,8 @@
 class InitTask;
 
 struct FrameData {
-  // Stores some values persistent accross velocity/articulation/acceleration
-  // The relative position of the joint wrt the parent frame.
-  Vector3 mRelPosition;
-  // The relative orientation of the joint wrt the parent frame.
-  Rotation mRelOrientation;
-  // The relative velocity of the joint wrt the parent frame.
-  Vector6 mRelVelocity;
   // The derivative of the relative velosity in the current frame
   Vector6 mRelVelocityDot;
-
-  // The parents spatial velocity in this frames coordinates
-  Vector6 mParentSpVel;
-
-
-  void setVelocity(const MechanicLinkValue& parentLink,
-                   const Vector3& relPos, const Quaternion& relOr,
-                   const Vector6& relVel)
-  {
-    mRelPosition = relPos;
-    mRelOrientation = relOr;
-    mRelVelocity = relVel;
-    mParentSpVel = motionTo(mRelPosition, mRelOrientation,
-                            parentLink.getFrame().getSpVel());
-  }
-  void setVelocity(const Vector3& parentAngularVel,
-                   const Vector3& relPos, const Quaternion& relOr,
-                   const Vector6& relVel)
-  {
-    mRelPosition = relPos;
-    mRelOrientation = relOr;
-    mRelVelocity = relVel;
-    mParentSpVel = angularMotionTo(relPos, mRelOrientation, parentAngularVel);
-  }
 };
 
 class MechanicContext : public LeafContext {



From frohlich at mail.berlios.de  Tue Oct 21 07:21:37 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 21 Oct 2008 07:21:37 +0200
Subject: [OpenFDM-svn] r642 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200810210521.m9L5Lbn5005446@sheep.berlios.de>

Author: frohlich
Date: 2008-10-21 07:21:33 +0200 (Tue, 21 Oct 2008)
New Revision: 642

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Add api to add links to a RigidBody.

M    src/test/structure.cpp
M    src/OpenFDM/RigidBody.h
M    src/OpenFDM/MechanicLink.h
M    src/OpenFDM/RigidBody.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h	2008-10-20 19:52:56 UTC (rev 641)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h	2008-10-21 05:21:33 UTC (rev 642)
@@ -23,8 +23,12 @@
     OpenFDMAssert(portValue->toMechanicLinkValue());
     return static_cast<MechanicLinkValue*>(portValue);
   }
+  bool empty() const
+  { return mPort; }
+  void clear()
+  { if (!mPort) return; mPort->clear(); mPort = 0; }
   unsigned getPortIndex() const
-  { return mPort->getIndex(); }
+  { OpenFDMAssert(mPort); return mPort->getIndex(); }
 private:
   SharedPtr<MechanicLinkInfo> mPort;
 };

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2008-10-20 19:52:56 UTC (rev 641)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2008-10-21 05:21:33 UTC (rev 642)
@@ -16,8 +16,8 @@
 RigidBody::RigidBody(const std::string& name) :
   MechanicNode(name)
 {
-  mMechanicLinks.push_back(newMechanicLink("link"));
-  mMechanicLinks.push_back(newMechanicLink("link2"));
+  addLink("link0");
+  addLink("link1");
 }
 
 RigidBody::~RigidBody()
@@ -36,7 +36,28 @@
   visitor.handleNodePathAndApply(this);
 }
 
+PortId
+RigidBody::addLink(const std::string& name)
+{
+  MechanicLink mechanicLink = newMechanicLink(name);
+  mMechanicLinks.push_back(mechanicLink);
+  return getPortId(mechanicLink.getPortIndex());
+}
+
 void
+RigidBody::removeLink(const PortId& portId)
+{
+  MechanicLinkVector::iterator i = mMechanicLinks.begin();
+  while (i != mMechanicLinks.end()) {
+    if (getPortIndex(portId) == i->getPortIndex()) {
+      i->clear();
+      i = mMechanicLinks.erase(i);
+    } else
+      ++i;
+  }
+}
+
+void
 RigidBody::velocity(const Task&, const ContinousStateValueVector&,
                     PortValueList& portValues, MechanicContext&) const
 {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h	2008-10-20 19:52:56 UTC (rev 641)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h	2008-10-21 05:21:33 UTC (rev 642)
@@ -19,6 +19,9 @@
   virtual void accept(NodeVisitor& visitor);
   virtual void accept(ConstNodeVisitor& visitor) const;
 
+  PortId addLink(const std::string& name);
+  void removeLink(const PortId& portId);
+
   /// Simple node distributing the positions, velocities and accelerations
   /// from the parent link to the child links. Forces and inertias are summed
   /// over the children and written into the parent link.
@@ -33,9 +36,9 @@
                             PortValueList& portValues, MechanicContext&) const;
   virtual void acceleration(const Task&, const ContinousStateValueVector&,
                             PortValueList& portValues, MechanicContext&) const;
-
 private:
-  std::vector<MechanicLink> mMechanicLinks;
+  typedef std::vector<MechanicLink> MechanicLinkVector;
+  MechanicLinkVector mMechanicLinks;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-20 19:52:56 UTC (rev 641)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-21 05:21:33 UTC (rev 642)
@@ -198,8 +198,8 @@
   Group::NodeId rigidBody = group->addChild(new RigidBody("Rigid Body"));
   Group::NodeId mass = group->addChild(new Mass("Mass", 1, InertiaMatrix(1, 0, 0, 1, 0, 1)));
 
-  group->connect(rootJoint, "link", rigidBody, "link");
-  group->connect(rigidBody, "link2", mass, "link");
+  group->connect(rootJoint, "link", rigidBody, "link0");
+  group->connect(rigidBody, "link1", mass, "link");
 
   return group.release();
 }



From frohlich at mail.berlios.de  Tue Oct 21 07:25:04 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 21 Oct 2008 07:25:04 +0200
Subject: [OpenFDM-svn] r643 - branches/OpenFDM-StateSeparation/src/test
Message-ID: <200810210525.m9L5P4RC020044@sheep.berlios.de>

Author: frohlich
Date: 2008-10-21 07:25:03 +0200 (Tue, 21 Oct 2008)
New Revision: 643

Added:
   branches/OpenFDM-StateSeparation/src/test/mechanic.cpp
Modified:
   branches/OpenFDM-StateSeparation/src/test/Makefile.am
   branches/OpenFDM-StateSeparation/src/test/structure.cpp
Log:
Move mechanic playground into mechanic.cpp

M    src/test/structure.cpp
A    src/test/mechanic.cpp
M    src/test/Makefile.am


Modified: branches/OpenFDM-StateSeparation/src/test/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/Makefile.am	2008-10-21 05:21:33 UTC (rev 642)
+++ branches/OpenFDM-StateSeparation/src/test/Makefile.am	2008-10-21 05:25:03 UTC (rev 643)
@@ -2,7 +2,7 @@
 
 # define some util programs
 # bin_PROGRAMS = tiretestrig
-bin_PROGRAMS = structure
+bin_PROGRAMS = structure mechanic
 
 # define some unit tests
 #check_PROGRAMS = quattest unitstest structure simulationtime constintegral harmonic limit
@@ -18,6 +18,9 @@
 quattest_SOURCES = quattest.cpp
 quattest_LDADD = ../OpenFDM/libOpenFDM.la
 
+mechanic_SOURCES = mechanic.cpp
+mechanic_LDADD = ../OpenFDM/libOpenFDM.la
+
 structure_SOURCES = structure.cpp
 structure_LDADD = ../OpenFDM/libOpenFDM.la
 

Added: branches/OpenFDM-StateSeparation/src/test/mechanic.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/mechanic.cpp	2008-10-21 05:21:33 UTC (rev 642)
+++ branches/OpenFDM-StateSeparation/src/test/mechanic.cpp	2008-10-21 05:25:03 UTC (rev 643)
@@ -0,0 +1,47 @@
+#include <OpenFDM/Group.h>
+#include <OpenFDM/Mass.h>
+#include <OpenFDM/MobileRootJoint.h>
+#include <OpenFDM/RigidBody.h>
+#include <OpenFDM/System.h>
+#include <OpenFDM/SystemOutput.h>
+
+using namespace OpenFDM;
+
+Node* buildSimpleMechanicExample()
+{
+  /// sensible test cases:
+  /// drop: gravity
+  /// throw: just this test with a different start condition
+  /// harmonic oszilator: compare with 2nd order linear system
+  /// arrow: see if the tip stays in front
+  /// satellit: coriolis
+  /// paris pendulum: coriolis
+
+  SharedPtr<Group> group = new Group("G");
+  Group::NodeId rootJoint = group->addChild(new MobileRootJoint("Root Joint"));
+  Group::NodeId rigidBody = group->addChild(new RigidBody("Rigid Body"));
+  Group::NodeId mass = group->addChild(new Mass("Mass", 1, InertiaMatrix(1, 0, 0, 1, 0, 1)));
+
+  group->connect(rootJoint, "link", rigidBody, "link0");
+  group->connect(rigidBody, "link1", mass, "link");
+
+  return group.release();
+}
+
+int main()
+{
+  SharedPtr<System> system = new System("System", buildSimpleMechanicExample());
+
+  system->attach(SystemOutput::newDefaultSystemOutput("system.h5"));
+
+  if (!system->init())
+    return 1;
+
+  system->simulate(10);
+
+  return 0;
+}
+
+// Kabelbaum <-> PortBundle ??? Original Kabelbaum == Cabel Bundle
+// Oder Cable Set <-> Port Set???
+

Modified: branches/OpenFDM-StateSeparation/src/test/structure.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-21 05:21:33 UTC (rev 642)
+++ branches/OpenFDM-StateSeparation/src/test/structure.cpp	2008-10-21 05:25:03 UTC (rev 643)
@@ -6,9 +6,6 @@
 #include <OpenFDM/Group.h>
 #include <OpenFDM/LibraryNode.h>
 #include <OpenFDM/LibraryModel.h>
-#include <OpenFDM/Mass.h>
-#include <OpenFDM/MobileRootJoint.h>
-#include <OpenFDM/RigidBody.h>
 #include <OpenFDM/System.h>
 #include <OpenFDM/SystemOutput.h>
 
@@ -183,27 +180,6 @@
   return group.release();
 }
 
-Node* buildSimpleMechanicExample()
-{
-  /// sensible test cases:
-  /// drop: gravity
-  /// throw: just this test with a different start condition
-  /// harmonic oszilator: compare with 2nd order linear system
-  /// arrow: see if the tip stays in front
-  /// satellit: coriolis
-  /// paris pendulum: coriolis
-
-  SharedPtr<Group> group = new Group("G");
-  Group::NodeId rootJoint = group->addChild(new MobileRootJoint("Root Joint"));
-  Group::NodeId rigidBody = group->addChild(new RigidBody("Rigid Body"));
-  Group::NodeId mass = group->addChild(new Mass("Mass", 1, InertiaMatrix(1, 0, 0, 1, 0, 1)));
-
-  group->connect(rootJoint, "link", rigidBody, "link0");
-  group->connect(rigidBody, "link1", mass, "link");
-
-  return group.release();
-}
-
 int main()
 {
   // Check a self referencing gain model, to see if cyclic loops
@@ -223,10 +199,9 @@
     return EXIT_FAILURE;
 
 
-//   SharedPtr<System> system = new System("System", buildContinousExample());
+  SharedPtr<System> system = new System("System", buildContinousExample());
 //   SharedPtr<System> system = new System("System", buildDiscreteExample());
 //   SharedPtr<System> system = new System("System", buildLibraryNodeExample());
-  SharedPtr<System> system = new System("System", buildSimpleMechanicExample());
 
   system->attach(SystemOutput::newDefaultSystemOutput("system.h5"));
 



From frohlich at mail.berlios.de  Tue Oct 21 08:14:04 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 21 Oct 2008 08:14:04 +0200
Subject: [OpenFDM-svn] r644 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810210614.m9L6E4Ww030420@sheep.berlios.de>

Author: frohlich
Date: 2008-10-21 08:14:03 +0200 (Tue, 21 Oct 2008)
New Revision: 644

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Print schedule list for mechanics.
Fix virtuals inRigidBody and Mass.

M    System.cpp
M    Mass.cpp
M    Mass.h
M    RigidBody.h
M    RigidBody.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-10-21 05:25:03 UTC (rev 643)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-10-21 06:14:03 UTC (rev 644)
@@ -33,7 +33,7 @@
 
 void
 Mass::articulation(const Task&, const ContinousStateValueVector&,
-                   PortValueList& portValues, MechanicContext&) const
+                   PortValueList& portValues, FrameData&) const
 {
   // Hardcoding that gravity happens in the roots??
   // Vectro3 position = portValues[mMechanicLink].mPosition;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h	2008-10-21 05:25:03 UTC (rev 643)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.h	2008-10-21 06:14:03 UTC (rev 644)
@@ -19,7 +19,7 @@
   virtual ~Mass(void);
 
   virtual void articulation(const Task&, const ContinousStateValueVector&,
-                            PortValueList&, MechanicContext&) const;
+                            PortValueList&, FrameData&) const;
 
   const InertiaMatrix& getInertia(void) const;
   void setInertia(const InertiaMatrix& inertia);

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2008-10-21 05:25:03 UTC (rev 643)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2008-10-21 06:14:03 UTC (rev 644)
@@ -59,7 +59,7 @@
 
 void
 RigidBody::velocity(const Task&, const ContinousStateValueVector&,
-                    PortValueList& portValues, MechanicContext&) const
+                    PortValueList& portValues, FrameData&) const
 {
   unsigned numLinkValues = mMechanicLinks.size();
 
@@ -70,7 +70,7 @@
 
 void
 RigidBody::articulation(const Task&, const ContinousStateValueVector&,
-                        PortValueList& portValues, MechanicContext&) const
+                        PortValueList& portValues, FrameData&) const
 {
   MechanicLinkValue& parentLink = portValues[mMechanicLinks.front()];
 
@@ -81,7 +81,7 @@
 
 void
 RigidBody::acceleration(const Task&, const ContinousStateValueVector&,
-                        PortValueList& portValues, MechanicContext&) const
+                        PortValueList& portValues, FrameData&) const
 {
   unsigned numLinkValues = mMechanicLinks.size();
   const Frame& frame = portValues[mMechanicLinks.front()].getFrame();

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h	2008-10-21 05:25:03 UTC (rev 643)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.h	2008-10-21 06:14:03 UTC (rev 644)
@@ -31,11 +31,11 @@
   /// parent link???
 
   virtual void velocity(const Task&, const ContinousStateValueVector& states,
-                        PortValueList& portValues, MechanicContext&) const;
+                        PortValueList& portValues, FrameData&) const;
   virtual void articulation(const Task&, const ContinousStateValueVector&,
-                            PortValueList& portValues, MechanicContext&) const;
+                            PortValueList& portValues, FrameData&) const;
   virtual void acceleration(const Task&, const ContinousStateValueVector&,
-                            PortValueList& portValues, MechanicContext&) const;
+                            PortValueList& portValues, FrameData&) const;
 private:
   typedef std::vector<MechanicLink> MechanicLinkVector;
   MechanicLinkVector mMechanicLinks;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-21 05:25:03 UTC (rev 643)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-21 06:14:03 UTC (rev 644)
@@ -711,6 +711,14 @@
     }
     
     _mechanicInstanceList.swap(sortedMechanicInstanceList);
+
+    Log(Schedule,Info) << "MechanicNode Schedule" << std::endl;
+    MechanicInstanceList::iterator i = _mechanicInstanceList.begin();
+    for (; i != _mechanicInstanceList.end(); ++i) {
+      Log(Schedule,Info)
+        << "  MechanicNode \"" << (*i)->getNodeNamePath() << "\"" << std::endl;
+    }
+
     return true;
   }
 



From frohlich at mail.berlios.de  Tue Oct 21 19:17:33 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 21 Oct 2008 19:17:33 +0200
Subject: [OpenFDM-svn] r645 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810211717.m9LHHXjE012753@sheep.berlios.de>

Author: frohlich
Date: 2008-10-21 19:17:32 +0200 (Tue, 21 Oct 2008)
New Revision: 645

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixInputPort.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixOutputPort.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RealInputPort.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RealOutputPort.h
Log:
Fix Port*::empty logic ...

M    RealOutputPort.h
M    MatrixOutputPort.h
M    MatrixInputPort.h
M    RealInputPort.h
M    MechanicLink.h
M    Integrator.cpp
M    DiscreteIntegrator.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.cpp	2008-10-21 06:14:03 UTC (rev 644)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/DiscreteIntegrator.cpp	2008-10-21 17:17:32 UTC (rev 645)
@@ -119,7 +119,7 @@
 bool
 DiscreteIntegrator::getEnableInitialValuePort() const
 {
-  return mInitialValuePort.empty();
+  return !mInitialValuePort.empty();
 }
 
 void

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.cpp	2008-10-21 06:14:03 UTC (rev 644)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Integrator.cpp	2008-10-21 17:17:32 UTC (rev 645)
@@ -115,7 +115,7 @@
 bool
 Integrator::getEnableInitialValuePort() const
 {
-  return mInitialValuePort.empty();
+  return !mInitialValuePort.empty();
 }
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixInputPort.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixInputPort.h	2008-10-21 06:14:03 UTC (rev 644)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixInputPort.h	2008-10-21 17:17:32 UTC (rev 645)
@@ -27,7 +27,7 @@
     return static_cast<NumericPortValue*>(portValue);
   }
   bool empty() const
-  { return mPort; }
+  { return !mPort; }
   void clear()
   { if (!mPort) return; mPort->clear(); mPort = 0; }
   unsigned getPortIndex() const

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixOutputPort.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixOutputPort.h	2008-10-21 06:14:03 UTC (rev 644)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MatrixOutputPort.h	2008-10-21 17:17:32 UTC (rev 645)
@@ -23,7 +23,7 @@
     return static_cast<NumericPortValue*>(portValue);
   }
   bool empty() const
-  { return mPort; }
+  { return !mPort; }
   void clear()
   { if (!mPort) return; mPort->clear(); mPort = 0; }
   unsigned getPortIndex() const

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h	2008-10-21 06:14:03 UTC (rev 644)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLink.h	2008-10-21 17:17:32 UTC (rev 645)
@@ -24,7 +24,7 @@
     return static_cast<MechanicLinkValue*>(portValue);
   }
   bool empty() const
-  { return mPort; }
+  { return !mPort; }
   void clear()
   { if (!mPort) return; mPort->clear(); mPort = 0; }
   unsigned getPortIndex() const

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RealInputPort.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RealInputPort.h	2008-10-21 06:14:03 UTC (rev 644)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RealInputPort.h	2008-10-21 17:17:32 UTC (rev 645)
@@ -27,7 +27,7 @@
     return static_cast<NumericPortValue*>(portValue);
   }
   bool empty() const
-  { return mPort; }
+  { return !mPort; }
   void clear()
   { if (!mPort) return; mPort->clear(); mPort = 0; }
   unsigned getPortIndex() const

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RealOutputPort.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RealOutputPort.h	2008-10-21 06:14:03 UTC (rev 644)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RealOutputPort.h	2008-10-21 17:17:32 UTC (rev 645)
@@ -24,7 +24,7 @@
     return static_cast<NumericPortValue*>(portValue);
   }
   bool empty() const
-  { return mPort; }
+  { return !mPort; }
   void clear()
   { if (!mPort) return; mPort->clear(); mPort = 0; }
   unsigned getPortIndex() const



From frohlich at mail.berlios.de  Tue Oct 21 19:37:31 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 21 Oct 2008 19:37:31 +0200
Subject: [OpenFDM-svn] r646 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810211737.m9LHbVVl019279@sheep.berlios.de>

Author: frohlich
Date: 2008-10-21 19:37:31 +0200 (Tue, 21 Oct 2008)
New Revision: 646

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
Log:
Fix force and inertia propagation.

M    RigidBody.cpp
M    MechanicLinkValue.h
M    MobileRootJoint.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-10-21 17:17:32 UTC (rev 645)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-10-21 17:37:31 UTC (rev 646)
@@ -34,25 +34,40 @@
   { mArticulatedForce = force; }
 
   void applyForce(const Vector6& force)
-  { mArticulatedForce = force; }
+  { mArticulatedForce += force; }
   void applyForce(const Vector3& force)
   { applyForce(Vector6(Vector3::zeros(), force)); }
   void applyTorque(const Vector3& torque)
   { applyForce(Vector6(torque, Vector3::zeros())); }
 
   void applyInertia(const SpatialInertia& inertia)
-  { mArticulatedInertia = inertia; }
+  { mArticulatedInertia += inertia; }
 
 
   void setPosAndVel(const MechanicLinkValue& linkValue)
   {
+    mArticulatedInertia = SpatialInertia::zeros();
+    mArticulatedForce = Vector6::zeros();
     mFrame.setPosAndVel(linkValue.getFrame());
   }
+  void setAccel(const MechanicLinkValue& linkValue)
+  { mFrame.setAccel(linkValue.getFrame()); }
   void setPosAndVel(const MechanicLinkValue& linkValue, const Vector3& position,
                     const Quaternion& orientation, const Vector6& velocity)
   {
+    mArticulatedInertia = SpatialInertia::zeros();
+    mArticulatedForce = Vector6::zeros();
     mFrame.setPosAndVel(linkValue.getFrame(), position, orientation, velocity);
   }
+  void setAccel(const MechanicLinkValue& linkValue, const Vector6& accel)
+  { mFrame.setAccel(linkValue.getFrame(), accel); }
+  void setPosAndVel(const Vector3& parentAngularVel, const Vector3& position,
+                    const Quaternion& orientation, const Vector6& velocity)
+  {
+    mArticulatedInertia = SpatialInertia::zeros();
+    mArticulatedForce = Vector6::zeros();
+    mFrame.setPosAndVel(parentAngularVel, position, orientation, velocity);
+  }
 
   void applyArticulation(const MechanicLinkValue& linkValue)
   {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-21 17:17:32 UTC (rev 645)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-21 17:37:31 UTC (rev 646)
@@ -55,9 +55,8 @@
   Quaternion orientation = continousState[*mOrientationStateInfo];
   Vector6 velocity = continousState[*mVelocityStateInfo];
 
-  portValues[mMechanicLink].getFrame().setPosAndVel(getAngularBaseVelocity(),
-                                                    position, orientation,
-                                                    velocity);
+  portValues[mMechanicLink].setPosAndVel(getAngularBaseVelocity(),
+                                         position, orientation, velocity);
 }
 
 void

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2008-10-21 17:17:32 UTC (rev 645)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RigidBody.cpp	2008-10-21 17:37:31 UTC (rev 646)
@@ -62,19 +62,17 @@
                     PortValueList& portValues, FrameData&) const
 {
   unsigned numLinkValues = mMechanicLinks.size();
-
-  const Frame& frame = portValues[mMechanicLinks.front()].getFrame();
+  const MechanicLinkValue& parentLink = portValues[mMechanicLinks.front()];
   for (unsigned i = 1; i < numLinkValues; ++i)
-    portValues[mMechanicLinks[i]].getFrame().setPosAndVel(frame);
+    portValues[mMechanicLinks[i]].setPosAndVel(parentLink);
 }
 
 void
 RigidBody::articulation(const Task&, const ContinousStateValueVector&,
                         PortValueList& portValues, FrameData&) const
 {
-  MechanicLinkValue& parentLink = portValues[mMechanicLinks.front()];
-
   unsigned numLinkValues = mMechanicLinks.size();
+  MechanicLinkValue& parentLink = portValues[mMechanicLinks.front()];
   for (unsigned i = 1; i < numLinkValues; ++i)
     parentLink.applyArticulation(portValues[mMechanicLinks[i]]);
 }
@@ -84,9 +82,9 @@
                         PortValueList& portValues, FrameData&) const
 {
   unsigned numLinkValues = mMechanicLinks.size();
-  const Frame& frame = portValues[mMechanicLinks.front()].getFrame();
+  const MechanicLinkValue& parentLink = portValues[mMechanicLinks.front()];
   for (unsigned i = 1; i < numLinkValues; ++i)
-    portValues[mMechanicLinks[i]].getFrame().setAccel(frame);
+    portValues[mMechanicLinks[i]].setAccel(parentLink);
 }
 
 } // namespace OpenFDM



From frohlich at mail.berlios.de  Tue Oct 21 23:02:43 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 21 Oct 2008 23:02:43 +0200
Subject: [OpenFDM-svn] r647 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810212102.m9LL2hiS014960@sheep.berlios.de>

Author: frohlich
Date: 2008-10-21 23:02:42 +0200 (Tue, 21 Oct 2008)
New Revision: 647

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
Log:
Initialize root rotational velocity.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp	2008-10-21 17:37:31 UTC (rev 646)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RootJoint.cpp	2008-10-21 21:02:42 UTC (rev 647)
@@ -14,7 +14,8 @@
   END_OPENFDM_OBJECT_DEF
 
 RootJoint::RootJoint(const std::string& name) :
-  Interact(name)
+  Interact(name),
+  mAngularBaseVelocity(Vector3::zeros())
 {
 }
 



From frohlich at mail.berlios.de  Tue Oct 21 23:03:24 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 21 Oct 2008 23:03:24 +0200
Subject: [OpenFDM-svn] r648 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810212103.m9LL3OkV015134@sheep.berlios.de>

Author: frohlich
Date: 2008-10-21 23:03:24 +0200 (Tue, 21 Oct 2008)
New Revision: 648

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
Log:
Move constructor into implementation.

M    MechanicLinkValue.cpp
M    MechanicLinkValue.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.cpp	2008-10-21 21:02:42 UTC (rev 647)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.cpp	2008-10-21 21:03:24 UTC (rev 648)
@@ -6,6 +6,12 @@
 
 namespace OpenFDM {
 
+MechanicLinkValue::MechanicLinkValue() :
+  mArticulatedForce(Vector6::zeros()),
+  mArticulatedInertia(SpatialInertia::zeros())
+{
+}
+
 MechanicLinkValue::~MechanicLinkValue()
 {
 }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-10-21 21:02:42 UTC (rev 647)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicLinkValue.h	2008-10-21 21:03:24 UTC (rev 648)
@@ -13,6 +13,7 @@
 
 class MechanicLinkValue : public PortValue {
 public:
+  MechanicLinkValue();
   virtual ~MechanicLinkValue();
 
   virtual MechanicLinkValue* toMechanicLinkValue() { return this; }



From frohlich at mail.berlios.de  Tue Oct 21 23:05:49 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 21 Oct 2008 23:05:49 +0200
Subject: [OpenFDM-svn] r649 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810212105.m9LL5nEH015637@sheep.berlios.de>

Author: frohlich
Date: 2008-10-21 23:05:48 +0200 (Tue, 21 Oct 2008)
New Revision: 649

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h
Log:
Cleanup.

M    Frame.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h	2008-10-21 21:03:24 UTC (rev 648)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Frame.h	2008-10-21 21:05:48 UTC (rev 649)
@@ -34,9 +34,9 @@
 
     mRefOrient = parent.getRefOrientation();
     mRefPos = parent.getRefPosition();
+    mRefVel = parent.getRefVel();
 
     mParentSpVel = parent.getSpVel();
-    mRefVel = parent.getRefVel();
   }
 
   void setAccel(const Frame& parent)
@@ -54,15 +54,14 @@
 
     mRefOrient = parent.getRefOrientation()*getOrientation();
     mRefPos = parent.posToRef(getPosition());
+    mRefVel = velocity + motionFromParent(parent.getRefVel());
 
     mParentSpVel = motionFromParent(parent.getSpVel());
-    mRefVel = velocity + motionFromParent(parent.getRefVel());
   }
 
   void setAccel(const Frame& parent, const Vector6& acceleration)
   {
     mRelVelDot = acceleration;
-
     mParentSpAccel = motionFromParent(parent.getSpAccel());
   }
 
@@ -83,7 +82,6 @@
   void setAccel(const Vector6& acceleration)
   {
     mRelVelDot = acceleration;
-
     mParentSpAccel = Vector6::zeros();
   }
 
@@ -94,7 +92,7 @@
   }
   void setSpAccel(const Frame& parent, const Vector6& spatialAcceleration)
   {
-    mParentSpAccel = parent.getSpAccel();
+    mParentSpAccel = motionFromParent(parent.getSpAccel());
     mRelVelDot = spatialAcceleration - mParentSpAccel - getHdot();
   }
 



From frohlich at mail.berlios.de  Tue Oct 21 23:13:28 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 21 Oct 2008 23:13:28 +0200
Subject: [OpenFDM-svn] r650 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810212113.m9LLDSj5016428@sheep.berlios.de>

Author: frohlich
Date: 2008-10-21 23:13:28 +0200 (Tue, 21 Oct 2008)
New Revision: 650

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
Log:
Dump more from the mechanic stuff.

M    HDF5SystemOutput.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2008-10-21 21:05:48 UTC (rev 649)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/HDF5SystemOutput.h	2008-10-21 21:13:28 UTC (rev 650)
@@ -325,9 +325,13 @@
       mMechanicLinkValue(mechanicLinkValue),
       _group(parent, name),
       _position(_group, "position", Size(3, 1)),
+      _refPosition(_group, "refPosition", Size(3, 1)),
       _orientation(_group, "orientation", Size(4, 1)),
       _eulerAngle(_group, "eulerAngles", Size(3, 1)),
+      _refOrientation(_group, "refOrientation", Size(4, 1)),
+      _refEulerAngle(_group, "refEulerAngles", Size(3, 1)),
       _velocity(_group, "velocity", Size(6, 1)),
+      _refVelocity(_group, "refVelocity", Size(6, 1)),
       _acceleration(_group, "acceleration", Size(6, 1)),
       _force(_group, "force", Size(6, 1)),
       _inertia(_group, "inertia", Size(6, 6))
@@ -335,9 +339,13 @@
     virtual void append()
     {
       _position.append(mMechanicLinkValue->getFrame().getPosition());
+      _refPosition.append(mMechanicLinkValue->getFrame().getRefPosition());
       _orientation.append(mMechanicLinkValue->getFrame().getOrientation());
       _eulerAngle.append(mMechanicLinkValue->getFrame().getOrientation().getEuler());
+      _refOrientation.append(mMechanicLinkValue->getFrame().getRefOrientation());
+      _refEulerAngle.append(mMechanicLinkValue->getFrame().getRefOrientation().getEuler());
       _velocity.append(mMechanicLinkValue->getFrame().getSpVel());
+      _refVelocity.append(mMechanicLinkValue->getFrame().getRefVel());
       _acceleration.append(mMechanicLinkValue->getFrame().getSpAccel());
       _force.append(mMechanicLinkValue->getForce());
       _inertia.append(mMechanicLinkValue->getInertia());
@@ -348,9 +356,13 @@
     SharedPtr<const MechanicLinkValue> mMechanicLinkValue;
     HDF5Group _group;
     HDFMatrixStream _position;
+    HDFMatrixStream _refPosition;
     HDFMatrixStream _orientation;
     HDFMatrixStream _eulerAngle;
+    HDFMatrixStream _refOrientation;
+    HDFMatrixStream _refEulerAngle;
     HDFMatrixStream _velocity;
+    HDFMatrixStream _refVelocity;
     HDFMatrixStream _acceleration;
     HDFMatrixStream _force;
     HDFMatrixStream _inertia;



From frohlich at mail.berlios.de  Tue Oct 21 23:17:42 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 21 Oct 2008 23:17:42 +0200
Subject: [OpenFDM-svn] r651 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810212117.m9LLHgFN016979@sheep.berlios.de>

Author: frohlich
Date: 2008-10-21 23:17:41 +0200 (Tue, 21 Oct 2008)
New Revision: 651

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
Log:
Gravity is in the parent frames coordinates.

M    MobileRootJoint.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-21 21:13:28 UTC (rev 650)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MobileRootJoint.cpp	2008-10-21 21:17:41 UTC (rev 651)
@@ -79,7 +79,7 @@
 //     Vector6 grav = Vector6(Vector3::zeros(), rotFromRef(ga));
 
   // FIXME
-  Vector6 grav = Vector6(Vector3::zeros(), Vector3(0, 0, 9.81));
+  Vector6 grav = Vector6(Vector3::zeros(), portValues[mMechanicLink].getFrame().rotFromRef(Vector3(0, 0, 9.81)));
 
   SpatialInertia inertia = portValues[mMechanicLink].getInertia();
   Vector6 force = portValues[mMechanicLink].getForce();



From frohlich at mail.berlios.de  Wed Oct 22 07:46:24 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 22 Oct 2008 07:46:24 +0200
Subject: [OpenFDM-svn] r652 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810220546.m9M5kO6q021931@sheep.berlios.de>

Author: frohlich
Date: 2008-10-22 07:46:22 +0200 (Wed, 22 Oct 2008)
New Revision: 652

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
Log:
Update the mass model to the semantics of the old mass.
Fixes a major bug in the new implementation.

M    Mass.cpp


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-10-21 21:17:41 UTC (rev 651)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Mass.cpp	2008-10-22 05:46:22 UTC (rev 652)
@@ -35,12 +35,22 @@
 Mass::articulation(const Task&, const ContinousStateValueVector&,
                    PortValueList& portValues, FrameData&) const
 {
-  // Hardcoding that gravity happens in the roots??
+  // FIXME: Hardcoding that gravity happens in the roots??
   // Vectro3 position = portValues[mMechanicLink].mPosition;
   Vector3 gravity = Vector3::zeros();
+  Vector6 force = Vector6(Vector3::zeros(), gravity);
 
+  // FIXME: do we really need that in the mass
+  // I did search for a while until I found that missing term here ...
+  Vector6 iv = portValues[mMechanicLink].getFrame().getSpVel();
+  Vector6 Jiv = mSpatialInertia*iv;
+  force += Vector6(cross(iv.getAngular(), Jiv.getAngular()) +
+                   cross(iv.getLinear(), Jiv.getLinear()),
+                   cross(iv.getAngular(), Jiv.getLinear()));
+
+
   portValues[mMechanicLink].applyInertia(mSpatialInertia);
-  portValues[mMechanicLink].applyForce(gravity);
+  portValues[mMechanicLink].applyForce(force);
 }
 
 const InertiaMatrix&



From frohlich at mail.berlios.de  Wed Oct 22 20:03:05 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 22 Oct 2008 20:03:05 +0200
Subject: [OpenFDM-svn] r653 - in branches/OpenFDM-StateSeparation/src:
	OpenFDM test
Message-ID: <200810221803.m9MI35sQ007888@sheep.berlios.de>

Author: frohlich
Date: 2008-10-22 20:03:04 +0200 (Wed, 22 Oct 2008)
New Revision: 653

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h
   branches/OpenFDM-StateSeparation/src/test/mechanic.cpp
Log:
First attempt to reimplement joints.

M    src/test/mechanic.cpp
M    src/OpenFDM/Joint.cpp
M    src/OpenFDM/Makefile.am
M    src/OpenFDM/Task.h
M    src/OpenFDM/MechanicContext.h
M    src/OpenFDM/RevoluteJoint.cpp
M    src/OpenFDM/RevoluteJoint.h
M    src/OpenFDM/Joint.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.cpp	2008-10-22 05:46:22 UTC (rev 652)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.cpp	2008-10-22 18:03:04 UTC (rev 653)
@@ -6,23 +6,24 @@
 
 #include "Assert.h"
 #include "Object.h"
-#include "Frame.h"
 #include "Vector.h"
 #include "Matrix.h"
 #include "Quaternion.h"
 #include "Inertia.h"
 #include "Interact.h"
-#include "Frame.h"
 #include "LogStream.h"
-#include "ModelVisitor.h"
+#include "PortValueList.h"
+#include "MechanicContext.h"
 
 namespace OpenFDM {
 
 BEGIN_OPENFDM_OBJECT_DEF(Joint, Interact)
   END_OPENFDM_OBJECT_DEF
 
-Joint::Joint(const std::string& name)
-  : Interact(name, 2)
+Joint::Joint(const std::string& name) :
+  Interact(name),
+  mParentLink(newMechanicLink("link0")),
+  mChildLink(newMechanicLink("link1"))
 {
 }
 
@@ -31,72 +32,30 @@
 }
 
 void
-Joint::accept(ModelVisitor& visitor)
+Joint::velocity(const Task&,
+                const ContinousStateValueVector& continousState,
+                PortValueList& portValues, FrameData& frameData) const
 {
-  visitor.handleNodePathAndApply(*this);
+  velocity(portValues[mParentLink], portValues[mChildLink],
+           continousState, portValues, frameData);
 }
 
 void
-Joint::output(const TaskInfo& taskInfo)
+Joint::articulation(const Task&,
+                    const ContinousStateValueVector& continousState,
+                    PortValueList& portValues, FrameData& frameData) const
 {
-  RigidBody* outboardBody = getOutboardBody();
-  if (!outboardBody)
-    return;
-  
-  Log(ArtBody, Debug) << "Preparing Body \""
-                      << outboardBody->getName() << "\" through joint \""
-                      << getName() << "\"" << endl;
-
-  // We need the articulated inertia and force from the outboard body.
-  // Apply the joint degrees of freedom to that.
-  // If there was an error, (something was singular ???)
-  // just ignore that part. FIXME, ist this ok????
-  jointArticulation(mInboardInertia, mInboardForce,
-                    outboardBody->getArtInertia(),
-                    outboardBody->getArtForce());
-
-  Log(ArtBody, Debug3) << "Outboard Articulated values past joint "
-                       << "projection: Force:\n" << trans(mInboardForce)
-                       << "\nInertia\n" << mInboardInertia << endl;
+  articulation(portValues[mParentLink], portValues[mChildLink],
+               continousState, portValues, frameData);
 }
 
-bool
-Joint::dependsDirectOn(Model* model)
-{
-  if (Interact::dependsDirectOn(model))
-    return true;
-  
-  RigidBody* outboardBody = getOutboardBody();
-  if (!outboardBody)
-    return false;
-  
-  if (model == outboardBody)
-    return true;
-  
-  Interact* interact = model->toInteract();
-  if (!interact)
-    return false;
-
-  return interact != this && interact->isChildOf(outboardBody);
-}
-
 void
-Joint::interactWith(RigidBody* rigidBody)
+Joint::acceleration(const Task&,
+                    const ContinousStateValueVector& continousState,
+                    PortValueList& portValues, FrameData& frameData) const
 {
-  // HMmMm
-  if (!rigidBody)
-    return;
-  if (rigidBody != getInboardBody())
-    return;
-  
-  RigidBody* outboardBody = getOutboardBody();
-  if (!outboardBody)
-    return;
-  
-  // Contribute the transformed values to the parent.
-  Frame* frame = outboardBody->getFrame();
-  rigidBody->contributeInertia(frame->inertiaToParent(mInboardInertia));
-  rigidBody->contributeForce(frame->forceToParent(mInboardForce));
+  acceleration(portValues[mParentLink], portValues[mChildLink],
+               continousState, portValues, frameData);
 }
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.h	2008-10-22 05:46:22 UTC (rev 652)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Joint.h	2008-10-22 18:03:04 UTC (rev 653)
@@ -21,37 +21,40 @@
 /// FIXME: joint's should be lockable, which means trylock == true and
 /// velocity small enough - keep position ...
 
-class ModelVisitor;
-
 class Joint : public Interact {
   OPENFDM_OBJECT(Joint, Interact);
 public:
   Joint(const std::string& name);
   virtual ~Joint(void);
 
-  /// Double dispatch helper for the multibody system visitor
-  virtual void accept(ModelVisitor& visitor);
-  /// Double dispatch helper for the multibody system visitor
-//   virtual void accept(ConstModelVisitor& visitor) const;
+  // Joints cannot do something different than apply forces and inertia to
+  // its parent.
+  virtual void velocity(const MechanicLinkValue& parentLink,
+                        MechanicLinkValue& childLink,
+                        const ContinousStateValueVector& states,
+                        PortValueList& portValues,
+                        FrameData& frameData) const = 0;
+  virtual void articulation(MechanicLinkValue& parentLink,
+                            const MechanicLinkValue& childLink,
+                            const ContinousStateValueVector& states,
+                            PortValueList& portValues,
+                            FrameData& frameData) const = 0;
+  virtual void acceleration(const MechanicLinkValue& parentLink,
+                            MechanicLinkValue& childLink,
+                            const ContinousStateValueVector& states,
+                            PortValueList& portValues,
+                            FrameData& frameData) const = 0;
 
-  virtual void output(const TaskInfo& taskInfo);
-
-  virtual bool dependsDirectOn(Model* model);
-
-  RigidBody* getOutboardBody(void)
-  { return getParentRigidBody(0); }
-  RigidBody* getInboardBody(void)
-  { return getParentRigidBody(1); }
-
-  virtual void interactWith(RigidBody* rigidBody);
-
-  // Joint slot ...
-  virtual void jointArticulation(SpatialInertia& artI, Vector6& artF,
-                                 const SpatialInertia& outI,
-                                 const Vector6& outF) = 0;
+  /// They implement the mechanic stuff
+  virtual void velocity(const Task&, const ContinousStateValueVector&,
+                        PortValueList&, FrameData&) const;
+  virtual void articulation(const Task&, const ContinousStateValueVector&,
+                            PortValueList&, FrameData&) const;
+  virtual void acceleration(const Task&, const ContinousStateValueVector&,
+                            PortValueList&, FrameData&) const;
 private:
-  SpatialInertia mInboardInertia;
-  Vector6 mInboardForce;
+  MechanicLink mParentLink;
+  MechanicLink mChildLink;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-22 05:46:22 UTC (rev 652)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Makefile.am	2008-10-22 18:03:04 UTC (rev 653)
@@ -245,8 +245,10 @@
   SimulationTime.cpp
 
 OpenFDMMechanicSOURCES = \
+  Joint.cpp \
   Mass.cpp \
-  MobileRootJoint.cpp
+  MobileRootJoint.cpp \
+  RevoluteJoint.cpp
 
 
 #   AeroForce.cpp \
@@ -266,7 +268,6 @@
 #   Force.cpp \
 #   Gravity.cpp \
 #   Ground.cpp \
-#   Joint.cpp \
 #   Launchbar.cpp \
 #   LinearSpringDamper.cpp \
 #   MaxModel.cpp \
@@ -275,7 +276,6 @@
 #   Product.cpp \
 #   PrismaticJoint.cpp \
 #   RevoluteActuator.cpp \
-#   RevoluteJoint.cpp \
 #   RigidBody.cpp \
 #   RootFrame.cpp \
 #   Saturation.cpp \

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-22 05:46:22 UTC (rev 652)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-22 18:03:04 UTC (rev 653)
@@ -20,7 +20,10 @@
 
 struct FrameData {
   // The derivative of the relative velosity in the current frame
-  Vector6 mRelVelocityDot;
+  Matrix Ih;
+  Matrix hIh;
+  Vector6 pAlpha;
+  Vector velDot;
 };
 
 class MechanicContext : public LeafContext {
@@ -79,8 +82,10 @@
   }
   void init(const /*Init*/Task& task) const
   {
-    for (list_type::const_iterator i = begin(); i != end(); ++i)
+    for (list_type::const_iterator i = begin(); i != end(); ++i) {
       (*i)->init(task);
+      (*i)->velocities(task);
+    }
   }
   void velocities(const Task& task) const
   {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.cpp	2008-10-22 05:46:22 UTC (rev 652)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.cpp	2008-10-22 18:03:04 UTC (rev 653)
@@ -11,153 +11,166 @@
 #include "Matrix.h"
 #include "Quaternion.h"
 #include "Inertia.h"
-#include "Frame.h"
-#include "RigidBody.h"
-#include "RevoluteJointFrame.h"
+#include "PortValueList.h"
+#include "ContinousStateValueVector.h"
+#include "MechanicContext.h"
 
 namespace OpenFDM {
 
 BEGIN_OPENFDM_OBJECT_DEF(RevoluteJoint, Joint)
+  DEF_OPENFDM_PROPERTY(Vector3, Axis, Serialized)
   END_OPENFDM_OBJECT_DEF
 
-BEGIN_OPENFDM_OBJECT_DEF(RevoluteJointFrame, Frame)
-  END_OPENFDM_OBJECT_DEF
-
 RevoluteJoint::RevoluteJoint(const std::string& name) :
-  Joint(name)
+  Joint(name),
+  mForcePort(this, "force", Size(1, 1), true),
+  mPositionPort(this, "position", Size(1, 1)),
+  mVelocityPort(this, "velocity", Size(1, 1)),
+  mPositionStateInfo(new Vector1StateInfo),
+  mVelocityStateInfo(new Vector1StateInfo),
+  mAxis(Vector3(1, 0, 0))
 {
-  setNumContinousStates(2);
+  addContinousStateInfo(mPositionStateInfo);
+  addContinousStateInfo(mVelocityStateInfo);
 
-  mRevoluteJointFrame = new RevoluteJointFrame(name);
-
-  setNumInputPorts(1);
-  setInputPortName(0, "jointForce");
-
-  setNumOutputPorts(2);
-  setOutputPort(0, "jointPos", this, &RevoluteJoint::getJointPos);
-  setOutputPort(1, "jointVel", this, &RevoluteJoint::getJointVel);
+  // FIXME
+  setAxis(mAxis);
 }
 
 RevoluteJoint::~RevoluteJoint(void)
 {
 }
 
-bool
-RevoluteJoint::init(void)
+const Vector3&
+RevoluteJoint::getAxis() const
 {
-  /// Check if we have an input port connected to the joint force ...
-  if (getInputPort(0))
-    mJointForcePort = getInputPort(0)->toRealPortHandle();
-  else
-    mJointForcePort = 0;
-
-  recheckTopology();
-  return Joint::init();
+  return mAxis;
 }
 
 void
-RevoluteJoint::recheckTopology(void)
+RevoluteJoint::setAxis(const Vector3& axis)
 {
-  if (!getOutboardBody() || !getInboardBody())
-    return;
-  
-  // check for the inboard frame
-  Frame* inFrame = getInboardBody()->getFrame();
-  if (!inFrame)
-    return;
-  
-  Frame* outFrame = getOutboardBody()->getFrame();
-  if (!outFrame) {
-    getOutboardBody()->setFrame(mRevoluteJointFrame);
-  }
-  outFrame = getOutboardBody()->getFrame();
-  if (!outFrame->isDirectChildFrameOf(inFrame)) {
-    inFrame->addChildFrame(mRevoluteJointFrame);
-  }
-}
-
-void
-RevoluteJoint::setJointAxis(const Vector3& axis)
-{
   real_type nrm = norm(axis);
   if (nrm <= Limits<real_type>::min()) {
     Log(Initialization, Error) << "JointAxis is zero ..." << endl;
     return;
   }
-  mRevoluteJointFrame->setJointAxis((1/nrm)*axis);
+  mAxis = (1/nrm)*axis;
+  mJointMatrix = Vector6(mAxis, Vector3::zeros());
 }
 
-const real_type&
-RevoluteJoint::getJointPos(void) const
+void
+RevoluteJoint::init(const Task&, DiscreteStateValueVector&,
+                    ContinousStateValueVector& continousState,
+                    const PortValueList&) const
 {
-  return mRevoluteJointFrame->getJointPos();
+  continousState[*mPositionStateInfo] = 0;
+  continousState[*mVelocityStateInfo] = 0;
 }
 
 void
-RevoluteJoint::setJointPos(real_type pos)
+RevoluteJoint::velocity(const MechanicLinkValue& parentLink,
+                        MechanicLinkValue& childLink,
+                        const ContinousStateValueVector& states,
+                        PortValueList& portValues,
+                        FrameData& frameData) const
 {
-  mRevoluteJointFrame->setJointPos(pos);
-}
+  VectorN jointPos = states[*mPositionStateInfo];
+  if (!mPositionPort.empty())
+    portValues[mPositionPort] = jointPos;
 
-const real_type&
-RevoluteJoint::getJointVel(void) const
-{
-  return mRevoluteJointFrame->getJointVel();
-}
+  VectorN jointVel = states[*mVelocityStateInfo];
+  if (!mVelocityPort.empty())
+    portValues[mVelocityPort] = jointVel;
 
-void
-RevoluteJoint::setJointVel(real_type vel)
-{
-  mRevoluteJointFrame->setJointVel(vel);
-}
+  Vector3 position(0, 0, 0);
+  Quaternion orientation(Quaternion::fromAngleAxis(jointPos(0), mAxis));
+  Vector6 velocity(mAxis*jointVel, Vector3::zeros());
 
-void
-RevoluteJoint::setPosition(const Vector3& position)
-{
-  mRevoluteJointFrame->setPosition(position);
+  childLink.setPosAndVel(parentLink, position, orientation, velocity);
 }
 
 void
-RevoluteJoint::setOrientation(const Quaternion& orientation)
+RevoluteJoint::articulation(MechanicLinkValue& parentLink,
+                            const MechanicLinkValue& childLink,
+                            const ContinousStateValueVector& states,
+                            PortValueList& portValues,
+                            FrameData& frameData) const
 {
-  mRevoluteJointFrame->setZeroOrientation(orientation);
-}
+  VectorN jointForce;
+  if (mForcePort.empty())
+    jointForce.clear();
+  else
+    jointForce = portValues[mForcePort];
 
-void
-RevoluteJoint::jointArticulation(SpatialInertia& artI, Vector6& artF,
-                                 const SpatialInertia& outI,
-                                 const Vector6& outF)
-{
-  CartesianJointFrame<1>::VectorN tau;
-  if (mJointForcePort.isConnected()) {
-    tau(0) = mJointForcePort.getRealValue();
-  } else
-    tau.clear();
-  mRevoluteJointFrame->jointArticulation(artI, artF, outF, outI, tau);
+  // The formulas conform to Roy Featherstones book eqn (6.37), (6.38)
+
+  // Store the outboard values since we will need them later in velocity
+  // derivative computations
+  SpatialInertia I = childLink.getInertia();
+
+  // Compute the projection to the joint coordinate space
+  Matrix6N Ih = I*mJointMatrix;
+  frameData.Ih = Ih;
+  frameData.hIh = trans(mJointMatrix)*Ih;
+  MatrixFactorsNN hIh = MatrixNN(frameData.hIh);
+
+  // Note that the momentum of the local mass is already included in the
+  // child links force due the the mass model ...
+  Vector6 mPAlpha = childLink.getForce() + I*childLink.getFrame().getHdot();
+  frameData.pAlpha = mPAlpha;
+  Vector6 force = mPAlpha;
+
+  if (hIh.singular()) {
+    Log(ArtBody,Error) << "Detected singular mass matrix for "
+                       << "CartesianJointFrame \"" << getName()
+                       << "\": Fix your model!" << endl;
+    return;
+  }
+  
+  // Project away the directions handled with this current joint
+  /// FIXME: here in the mPAlpha term we shall not have that locla momentum ...
+  force -= Ih*hIh.solve(trans(mJointMatrix)*mPAlpha - jointForce);
+  I -= SpatialInertia(Ih*hIh.solve(trans(Ih)));
+
+//   frameData.pAlpha = force;
+
+  // Transform to parent link's coordinates and apply to the parent link
+  parentLink.applyForce(childLink.getFrame().forceToParent(force));
+  parentLink.applyInertia(childLink.getFrame().inertiaToParent(I));
 }
 
 void
-RevoluteJoint::setState(const StateStream& state)
+RevoluteJoint::acceleration(const MechanicLinkValue& parentLink,
+                            MechanicLinkValue& childLink,
+                            const ContinousStateValueVector& states,
+                            PortValueList& portValues,
+                            FrameData& frameData) const
 {
-  CartesianJointFrame<1>::VectorN v;
-  state.readSubState(v);
-  mRevoluteJointFrame->setJointPos(v(0));
-  state.readSubState(v);
-  mRevoluteJointFrame->setJointVel(v(0));
-}
+  Vector6 parentSpAccel
+    = childLink.getFrame().motionFromParent(parentLink.getFrame().getSpAccel());
 
-void
-RevoluteJoint::getState(StateStream& state) const
-{
-  state.writeSubState(mRevoluteJointFrame->getJointPos());
-  state.writeSubState(mRevoluteJointFrame->getJointVel());
+  Vector6 f = childLink.getForce();
+  f += childLink.getInertia()*(parentSpAccel + childLink.getFrame().getHdot());
+  MatrixFactorsNN hIh = MatrixNN(frameData.hIh);
+  VectorN jointForce;
+  if (mForcePort.empty())
+    jointForce.clear();
+  else
+    jointForce = portValues[mForcePort];
+  VectorN velDot = hIh.solve(jointForce - trans(mJointMatrix)*f);
+  frameData.velDot = velDot;
+  childLink.setAccel(parentLink, mJointMatrix*velDot);
 }
 
 void
-RevoluteJoint::getStateDeriv(StateStream& stateDeriv)
+RevoluteJoint::derivative(const DiscreteStateValueVector&,
+                          const ContinousStateValueVector& states,
+                          const PortValueList&, FrameData& frameData,
+                          ContinousStateValueVector& derivative) const
 {
-  stateDeriv.writeSubState(mRevoluteJointFrame->getJointVel());
-  stateDeriv.writeSubState(mRevoluteJointFrame->getJointVelDot());
+  derivative[*mPositionStateInfo] = states[*mVelocityStateInfo];
+  derivative[*mVelocityStateInfo] = frameData.velDot;
 }
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.h	2008-10-22 05:46:22 UTC (rev 652)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.h	2008-10-22 18:03:04 UTC (rev 653)
@@ -9,73 +9,78 @@
 #include "Object.h"
 #include "Vector.h"
 #include "Matrix.h"
+#include "MatrixStateInfo.h"
 #include "Quaternion.h"
 #include "Inertia.h"
-#include "Frame.h"
-#include "RigidBody.h"
 #include "Joint.h"
+#include "MatrixInputPort.h"
+#include "MatrixOutputPort.h"
 
 namespace OpenFDM {
 
-class RevoluteJointFrame;
-
 class RevoluteJoint : public Joint {
   OPENFDM_OBJECT(RevoluteJoint, Joint);
 public:
   RevoluteJoint(const std::string& name);
   virtual ~RevoluteJoint(void);
 
-  virtual bool init(void);
-
-  virtual void recheckTopology(void);
-
   /** Sets the joint axis where this joint is allowed to rotate around.
    */
-  void setJointAxis(const Vector3& axis);
+  const Vector3& getAxis() const;
+  void setAxis(const Vector3& axis);
 
-  /** Returns the joint position.
+  /** Set the position of the joint.
    */
-  const real_type& getJointPos(void) const;
+//   void setPosition(const Vector3& position);
 
-  /** Sets the joint position.
+  /** Sets the zero orientation of the joint.
    */
-  void setJointPos(real_type pos);
+//   void setOrientation(const Quaternion& orientation);
 
-  /** Returns the joint velocity.
-   */
-  const real_type& getJointVel(void) const;
+protected:
 
-  /** Sets the joint velocity.
-   */
-  void setJointVel(real_type vel);
+  enum { n = 1 };
+  typedef LinAlg::Vector<real_type,n> VectorN;
+  typedef LinAlg::Matrix<real_type,6,n> Matrix6N;
+  typedef LinAlg::Matrix<real_type,n,n> MatrixNN;
+  typedef LinAlg::MatrixFactors<real_type,n,n,LinAlg::LUTag> MatrixFactorsNN;
 
-  /** Set the position of the joint.
-   */
-  void setPosition(const Vector3& position);
+  virtual void init(const Task&, DiscreteStateValueVector&,
+                    ContinousStateValueVector& continousState,
+                    const PortValueList&) const;
 
-  /** Sets the zero orientation of the joint.
-   */
-  void setOrientation(const Quaternion& orientation);
+  virtual void velocity(const MechanicLinkValue& parentLink,
+                        MechanicLinkValue& childLink,
+                        const ContinousStateValueVector& states,
+                        PortValueList& portValues,
+                        FrameData& frameData) const;
+  virtual void articulation(MechanicLinkValue& parentLink,
+                            const MechanicLinkValue& childLink,
+                            const ContinousStateValueVector& states,
+                            PortValueList& portValues,
+                            FrameData& frameData) const;
+  virtual void acceleration(const MechanicLinkValue& parentLink,
+                            MechanicLinkValue& childLink,
+                            const ContinousStateValueVector& states,
+                            PortValueList& portValues,
+                            FrameData& frameData) const;
 
+  virtual void derivative(const DiscreteStateValueVector&,
+                          const ContinousStateValueVector&,
+                          const PortValueList& portValues, FrameData&,
+                          ContinousStateValueVector&) const;
+
 private:
-  /** Computes the inboard articulated inertia and force for
-      this articulated body. It is part of the articulated body algorithm.
-   */
-  virtual void jointArticulation(SpatialInertia& artI, Vector6& artF,
-                                 const SpatialInertia& outI,
-                                 const Vector6& outF);
+  MatrixInputPort mForcePort;
+  MatrixOutputPort mPositionPort;
+  MatrixOutputPort mVelocityPort;
 
-  /** Methods for the OpenFDM::Part.
-   */
-  virtual void setState(const StateStream& state);
-  virtual void getState(StateStream& state) const;
-  virtual void getStateDeriv(StateStream& stateDeriv);
+  SharedPtr<Vector1StateInfo> mPositionStateInfo;
+  SharedPtr<Vector1StateInfo> mVelocityStateInfo;
 
-  /// The intput port which might provide some joint internal force
-  RealPortHandle mJointForcePort;
+  Vector3 mAxis;
 
-  /// The frame of the mobile root
-  SharedPtr<RevoluteJointFrame> mRevoluteJointFrame;
+  Matrix6N mJointMatrix;
 };
 
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h	2008-10-22 05:46:22 UTC (rev 652)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h	2008-10-22 18:03:04 UTC (rev 653)
@@ -38,7 +38,6 @@
     mModelContextList[0].init(*this);
     // Now the mechanical state propagation
     mMechanicContextList.init(*this);
-    mMechanicContextList.velocities(*this);
     // The model outputs before mechanical force propagation
     mModelContextList[1].init(*this);
     // Now the mechanical force propagation

Modified: branches/OpenFDM-StateSeparation/src/test/mechanic.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/test/mechanic.cpp	2008-10-22 05:46:22 UTC (rev 652)
+++ branches/OpenFDM-StateSeparation/src/test/mechanic.cpp	2008-10-22 18:03:04 UTC (rev 653)
@@ -1,6 +1,8 @@
+#include <OpenFDM/ConstModel.h>
 #include <OpenFDM/Group.h>
 #include <OpenFDM/Mass.h>
 #include <OpenFDM/MobileRootJoint.h>
+#include <OpenFDM/RevoluteJoint.h>
 #include <OpenFDM/RigidBody.h>
 #include <OpenFDM/System.h>
 #include <OpenFDM/SystemOutput.h>
@@ -28,9 +30,35 @@
   return group.release();
 }
 
+Node* buildSimpleMechanicExample2()
+{
+  SharedPtr<Group> group = new Group("G");
+  Group::NodeId rootJoint = group->addChild(new MobileRootJoint("Root Joint"));
+  RigidBody *body = new RigidBody("Rigid Body");
+  body->addLink("link2");
+  Group::NodeId rigidBody = group->addChild(body);
+  Group::NodeId mass = group->addChild(new Mass("Mass", 1, InertiaMatrix(1, 0, 0, 1, 0, 1)));
+  Group::NodeId revolute = group->addChild(new RevoluteJoint("Revolute Joint"));
+  Group::NodeId rigidBody2 = group->addChild(new RigidBody("Rigid Body 2"));
+  Group::NodeId mass2 = group->addChild(new Mass("Mass 2", 1, InertiaMatrix(1, 0, 0, 1, 0, 1)));
+
+  group->connect(rootJoint, "link", rigidBody, "link0");
+  group->connect(rigidBody, "link1", mass, "link");
+  group->connect(rigidBody, "link2", revolute, "link0");
+  group->connect(revolute, "link1", rigidBody2, "link0");
+  group->connect(rigidBody2, "link1", mass2, "link");
+
+  Group::NodeId jointForce = group->addChild(new ConstModel("Joint Force", 1));
+//   Group::NodeId jointForce = group->addChild(new ConstModel("Joint Force", 0));
+  group->connect(jointForce, "output", revolute, "force");
+
+  return group.release();
+}
+
 int main()
 {
-  SharedPtr<System> system = new System("System", buildSimpleMechanicExample());
+//   SharedPtr<System> system = new System("System", buildSimpleMechanicExample());
+  SharedPtr<System> system = new System("System", buildSimpleMechanicExample2());
 
   system->attach(SystemOutput::newDefaultSystemOutput("system.h5"));
 



From frohlich at mail.berlios.de  Wed Oct 22 20:17:11 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Wed, 22 Oct 2008 20:17:11 +0200
Subject: [OpenFDM-svn] r654 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810221817.m9MIHBQd009350@sheep.berlios.de>

Author: frohlich
Date: 2008-10-22 20:17:10 +0200 (Wed, 22 Oct 2008)
New Revision: 654

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.cpp
Log:
Remove unused variables.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-22 18:03:04 UTC (rev 653)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-22 18:17:10 UTC (rev 654)
@@ -19,10 +19,7 @@
 class InitTask;
 
 struct FrameData {
-  // The derivative of the relative velosity in the current frame
-  Matrix Ih;
   Matrix hIh;
-  Vector6 pAlpha;
   Vector velDot;
 };
 

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.cpp	2008-10-22 18:03:04 UTC (rev 653)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/RevoluteJoint.cpp	2008-10-22 18:17:10 UTC (rev 654)
@@ -111,14 +111,12 @@
 
   // Compute the projection to the joint coordinate space
   Matrix6N Ih = I*mJointMatrix;
-  frameData.Ih = Ih;
   frameData.hIh = trans(mJointMatrix)*Ih;
   MatrixFactorsNN hIh = MatrixNN(frameData.hIh);
 
   // Note that the momentum of the local mass is already included in the
   // child links force due the the mass model ...
   Vector6 mPAlpha = childLink.getForce() + I*childLink.getFrame().getHdot();
-  frameData.pAlpha = mPAlpha;
   Vector6 force = mPAlpha;
 
   if (hIh.singular()) {
@@ -129,12 +127,9 @@
   }
   
   // Project away the directions handled with this current joint
-  /// FIXME: here in the mPAlpha term we shall not have that locla momentum ...
   force -= Ih*hIh.solve(trans(mJointMatrix)*mPAlpha - jointForce);
   I -= SpatialInertia(Ih*hIh.solve(trans(Ih)));
 
-//   frameData.pAlpha = force;
-
   // Transform to parent link's coordinates and apply to the parent link
   parentLink.applyForce(childLink.getFrame().forceToParent(force));
   parentLink.applyInertia(childLink.getFrame().inertiaToParent(I));



From frohlich at mail.berlios.de  Tue Oct 28 12:29:49 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 28 Oct 2008 12:29:49 +0100
Subject: [OpenFDM-svn] r655 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810281129.m9SBTnfB017669@sheep.berlios.de>

Author: frohlich
Date: 2008-10-28 12:29:48 +0100 (Tue, 28 Oct 2008)
New Revision: 655

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h
Log:
Move init and output into a common initOutput method.
	modified:   src/OpenFDM/ModelContext.h
	modified:   src/OpenFDM/Task.h


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h	2008-10-22 18:17:10 UTC (rev 654)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/ModelContext.h	2008-10-28 11:29:48 UTC (rev 655)
@@ -27,8 +27,11 @@
 
   bool alloc()
   { if (!allocStates()) return false; return mModel->alloc(*this); }
-  void init(const /*Init*/Task& task)
-  { mModel->init(task, mDiscreteState, mContinousState, mPortValueList); }
+  void initOutput(const /*Init*/Task& task)
+  {
+    mModel->init(task, mDiscreteState, mContinousState, mPortValueList);
+    mModel->output(task, mDiscreteState, mContinousState, mPortValueList);
+  }
   void output(const Task& task)
   { mModel->output(task, mDiscreteState, mContinousState, mPortValueList); }
   void update(const DiscreteTask& discreteTask)
@@ -60,12 +63,10 @@
         return false;
     return true;
   }
-  void init(const /*Init*/Task& task) const
+  void initOutput(const /*Init*/Task& task) const
   {
-    for (list_type::const_iterator i = begin(); i != end(); ++i) {
-      (*i)->init(task);
-      (*i)->output(task);
-    }
+    for (list_type::const_iterator i = begin(); i != end(); ++i)
+      (*i)->initOutput(task);
   }
   void output(const Task& task) const
   {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h	2008-10-22 18:17:10 UTC (rev 654)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h	2008-10-28 11:29:48 UTC (rev 655)
@@ -35,19 +35,19 @@
   {
     setTime(t);
     // The model outputs before mechanical state propagation
-    mModelContextList[0].init(*this);
+    mModelContextList[0].initOutput(*this);
     // Now the mechanical state propagation
     mMechanicContextList.init(*this);
     // The model outputs before mechanical force propagation
-    mModelContextList[1].init(*this);
+    mModelContextList[1].initOutput(*this);
     // Now the mechanical force propagation
     mMechanicContextList.articulation(*this);
     // The model outputs before mechanical acceleration propagation
-    mModelContextList[2].init(*this);
+    mModelContextList[2].initOutput(*this);
     // Now the mechanical acceleration propagation
     mMechanicContextList.accelerations(*this);
     // The model outputs past mechanical acceleration propagation
-    mModelContextList[3].init(*this);
+    mModelContextList[3].initOutput(*this);
   }
 
   ModelContextList mModelContextList[4];



From frohlich at mail.berlios.de  Tue Oct 28 12:39:10 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 28 Oct 2008 12:39:10 +0100
Subject: [OpenFDM-svn] r656 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810281139.m9SBdANl029861@sheep.berlios.de>

Author: frohlich
Date: 2008-10-28 12:39:09 +0100 (Tue, 28 Oct 2008)
New Revision: 656

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h
Log:
Also rearrange mechanic context initialization.

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-28 11:29:48 UTC (rev 655)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/MechanicContext.h	2008-10-28 11:39:09 UTC (rev 656)
@@ -32,19 +32,30 @@
 
   bool alloc()
   { if (!allocStates()) return false; return mMechanicNode->alloc(*this); }
-  void init(const /*Init*/Task& task)
-  { mMechanicNode->init(task, mDiscreteState, mContinousState, mPortValueList); }
+  void initVelocities(const /*Init*/Task& task)
+  {
+    mMechanicNode->init(task, mDiscreteState, mContinousState, mPortValueList);
+    mMechanicNode->velocity(task, mContinousState, mPortValueList, mFrameData);
+  }
 
   void velocities(const Task& task)
-  { mMechanicNode->velocity(task, mContinousState, mPortValueList, mFrameData); }
+  {
+    mMechanicNode->velocity(task, mContinousState, mPortValueList, mFrameData);
+  }
   void articulation(const Task& task)
-  { mMechanicNode->articulation(task, mContinousState, mPortValueList, mFrameData); }
+  {
+    mMechanicNode->articulation(task, mContinousState, mPortValueList, mFrameData);
+  }
   void accelerations(const Task& task)
-  { mMechanicNode->acceleration(task, mContinousState, mPortValueList, mFrameData); }
+  {
+    mMechanicNode->acceleration(task, mContinousState, mPortValueList, mFrameData);
+  }
 
   void derivative(const Task&)
-  { mMechanicNode->derivative(mDiscreteState, mContinousState, mPortValueList,
-                              mFrameData, mContinousStateDerivative); }
+  {
+    mMechanicNode->derivative(mDiscreteState, mContinousState, mPortValueList,
+                              mFrameData, mContinousStateDerivative);
+  }
  
   void update(const DiscreteTask& discreteTask)
   {
@@ -77,12 +88,10 @@
         return false;
     return true;
   }
-  void init(const /*Init*/Task& task) const
+  void initVelocities(const /*Init*/Task& task) const
   {
-    for (list_type::const_iterator i = begin(); i != end(); ++i) {
-      (*i)->init(task);
-      (*i)->velocities(task);
-    }
+    for (list_type::const_iterator i = begin(); i != end(); ++i)
+      (*i)->initVelocities(task);
   }
   void velocities(const Task& task) const
   {

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h	2008-10-28 11:29:48 UTC (rev 655)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/Task.h	2008-10-28 11:39:09 UTC (rev 656)
@@ -37,7 +37,7 @@
     // The model outputs before mechanical state propagation
     mModelContextList[0].initOutput(*this);
     // Now the mechanical state propagation
-    mMechanicContextList.init(*this);
+    mMechanicContextList.initVelocities(*this);
     // The model outputs before mechanical force propagation
     mModelContextList[1].initOutput(*this);
     // Now the mechanical force propagation



From frohlich at mail.berlios.de  Tue Oct 28 12:58:34 2008
From: frohlich at mail.berlios.de (frohlich at BerliOS)
Date: Tue, 28 Oct 2008 12:58:34 +0100
Subject: [OpenFDM-svn] r657 - branches/OpenFDM-StateSeparation/src/OpenFDM
Message-ID: <200810281158.m9SBwYKt021106@sheep.berlios.de>

Author: frohlich
Date: 2008-10-28 12:58:32 +0100 (Tue, 28 Oct 2008)
New Revision: 657

Modified:
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.cpp
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h
   branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
Log:
Hide port value setting behind an interface.


Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.cpp	2008-10-28 11:39:09 UTC (rev 656)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.cpp	2008-10-28 11:58:32 UTC (rev 657)
@@ -20,4 +20,10 @@
   return mPortValueList.getPortValue(portInfo.getIndex());
 }
 
+void
+AbstractNodeContext::setPortValue(const PortInfo& portInfo, PortValue* portValue)
+{
+  mPortValueList.setPortValue(portInfo.getIndex(), portValue);
+}
+
 } // namespace OpenFDM

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.h	2008-10-28 11:39:09 UTC (rev 656)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeContext.h	2008-10-28 11:58:32 UTC (rev 657)
@@ -21,6 +21,9 @@
   /// Port value accessors for System external usage.
   virtual const PortValue* getPortValue(const PortInfo& portInfo) const;
 
+  /// Set port value for the given port.
+  virtual void setPortValue(const PortInfo& portInfo, PortValue* portValue);
+
   /// might vanish???
   PortValueList& getPortValueList()
   { return mPortValueList; }

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h	2008-10-28 11:39:09 UTC (rev 656)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/AbstractNodeInstance.h	2008-10-28 11:58:32 UTC (rev 657)
@@ -39,11 +39,13 @@
   const SampleTime& getSampleTime() const
   { return mSampleTime; }
 
-  PortValueList& getPortValueList()
-  { return getNodeContext().getPortValueList(); }
   const PortValueList& getPortValueList() const
   { return getNodeContext().getPortValueList(); }
 
+  /// Set port value for the given port.
+  void setPortValue(const PortInfo& portInfo, PortValue* portValue)
+  { getNodeContext().setPortValue(portInfo, portValue); }
+
 protected:
   /// The node context that belongs to this instance.
   virtual AbstractNodeContext& getNodeContext() = 0;

Modified: branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp
===================================================================
--- branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-28 11:39:09 UTC (rev 656)
+++ branches/OpenFDM-StateSeparation/src/OpenFDM/System.cpp	2008-10-28 11:58:32 UTC (rev 657)
@@ -277,8 +277,7 @@
       // FIXME: move the set port value and accept port value into one call
       if (!getPortInfo()->acceptPortValue(portValue))
         return false;
-      unsigned index = getPortInfo()->getIndex();
-      mNodeInstance->getPortValueList().setPortValue(index, portValue);
+      mNodeInstance->setPortValue(*getPortInfo(), portValue);
       return true;
     }
 



